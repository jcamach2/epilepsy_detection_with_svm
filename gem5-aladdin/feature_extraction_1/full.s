	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "feature_extraction.c"
	.file	2 "kiss_fft.c"
	.file	3 "./_kiss_fft_guts.h"
	.file	4 "./kiss_fft.h"
	.file	5 "eispack.c"
	.text
	.globl	test_stores
	.align	16, 0x90
	.type	test_stores,@function
test_stores:                            # @test_stores
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 15 0                  # feature_extraction.c:15:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$1944, %rsp             # imm = 0x798
.Ltmp13:
	.cfi_def_cfa_offset 2000
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str6, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$2, %r11
	leaq	.L.str12, %rbx
	movabsq	$3, %r14
	leaq	.L.str11, %r15
	movabsq	$16, %r12
	leaq	.L.str4, %r13
	leaq	.L.str5, %rbp
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movl	%ecx, 1932(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 1928(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str49, %rax
	.loc	1 15 0 prologue_end     # feature_extraction.c:15:0
.Ltmp20:
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1832(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1820(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	1936(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1816(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1808(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1800(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 1792(%rsp)        # 8-byte Spill
	movq	%r13, 1784(%rsp)        # 8-byte Spill
	movq	%rbp, 1776(%rsp)        # 8-byte Spill
	movq	%r15, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%rbx, 1752(%rsp)        # 8-byte Spill
	movq	%r10, 1744(%rsp)        # 8-byte Spill
	movq	%r11, 1736(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: test_stores:time_data <- [RSP+1832]
	#DEBUG_VALUE: test_stores:freq_data <- [RSP+1824]
	#DEBUG_VALUE: test_stores:n_samples <- [RSP+1820]
	#DEBUG_VALUE: test_stores:n_channels <- [RSP+1932]
.Ltmp21:
	#DEBUG_VALUE: j <- 0
	.loc	1 16 0                  # feature_extraction.c:16:0
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1928(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1735(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1928(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1735(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1735(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_1
	jmp	.LBB0_6
.Ltmp22:
.LBB0_1:                                # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdx
	movabsq	$16, %rdi
	leaq	.L.str4, %rsi
	leaq	.L.str11, %r9
	leaq	.L.str15, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str13, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$18, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 18 0                  # feature_extraction.c:18:0
.Ltmp23:
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1688(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1680(%rsp)        # 8-byte Spill
	movq	%rdx, 1672(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1696(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1656(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1648(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1640(%rsp)        # 8-byte Spill
	movl	%ebp, 1636(%rsp)        # 4-byte Spill
	movq	%r15, 1624(%rsp)        # 8-byte Spill
	movq	%r13, 1616(%rsp)        # 8-byte Spill
	movq	%r12, 1608(%rsp)        # 8-byte Spill
	movl	%ebx, 1604(%rsp)        # 4-byte Spill
	movq	%r10, 1592(%rsp)        # 8-byte Spill
	movq	%r11, 1584(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1584(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp24:
	.loc	1 16 0                  # feature_extraction.c:16:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1583(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1680(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1604(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1720(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
.LBB0_2:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
	movq	1568(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str13, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str19, %r9
	movabsq	$3, %r10
	leaq	.L.str23, %r11
	movabsq	$18, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str16, %r15
	leaq	.L.str22, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str11, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 20 0                  # feature_extraction.c:20:0
.Ltmp25:
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1448(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1440(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1432(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1416(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1408(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1400(%rsp)        # 8-byte Spill
	movq	%r14, 1392(%rsp)        # 8-byte Spill
	movq	%r12, 1384(%rsp)        # 8-byte Spill
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	movl	%r13d, 1376(%rsp)       # 4-byte Spill
	movq	%rbx, 1368(%rsp)        # 8-byte Spill
	movq	%r10, 1360(%rsp)        # 8-byte Spill
	movq	%r11, 1352(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1392(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp26:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1392(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	1583(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1424(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1583(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	jne	.LBB0_3
	jmp	.LBB0_5
.LBB0_3:                                # %.lr.ph
                                        #   in Loop: Header=BB0_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str28, %r8
	leaq	.L.str8, %rdx
	movabsq	$18, %rsi
	leaq	.L.str4, %rdi
	leaq	.L.str23, %r9
	leaq	.L.str27, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str26, %r12
	movabsq	$32, %r13
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 20 0                  # feature_extraction.c:20:0
.Ltmp27:
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1248(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1208(%rsp)        # 8-byte Spill
	movl	%ebp, 1204(%rsp)        # 4-byte Spill
	movq	%r15, 1192(%rsp)        # 8-byte Spill
	movq	%r12, 1184(%rsp)        # 8-byte Spill
	movq	%r13, 1176(%rsp)        # 8-byte Spill
	movl	%ebx, 1172(%rsp)        # 4-byte Spill
	movq	%r10, 1160(%rsp)        # 8-byte Spill
	movq	%r11, 1152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 1148(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1148(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1148(%rsp), %ebx        # 4-byte Reload
	movl	1820(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp28:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 1144(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1144(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1144(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movq	%rcx, 1120(%rsp)        # 8-byte Spill
.LBB0_4:                                #   Parent Loop BB0_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movabsq	$2, %rdx
	movabsq	$64, %rsi
	leaq	.L.str, %rdi
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str31, %rbx
	movabsq	$5, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$20, %r13
	leaq	.L.str4, %rbp
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1088(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1084(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rax
	.loc	1 20 0                  # feature_extraction.c:20:0
.Ltmp29:
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 908(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	1104(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	928(%rsp), %rax         # 8-byte Reload
	movq	%r8, 880(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1084(%rsp), %eax        # 4-byte Reload
	movq	%r9, 872(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 864(%rsp)         # 8-byte Spill
	movq	%r12, 856(%rsp)         # 8-byte Spill
	movq	%r13, 848(%rsp)         # 8-byte Spill
	movq	%rbp, 840(%rsp)         # 8-byte Spill
	movq	%r14, 832(%rsp)         # 8-byte Spill
	movq	%rbx, 824(%rsp)         # 8-byte Spill
	movq	%r10, 816(%rsp)         # 8-byte Spill
	movq	%r11, 808(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	800(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	1824(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 792(%rsp)         # 8-byte Spill
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 784(%rsp)        # 8-byte Spill
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	800(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 780(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movl	780(%rsp), %edx         # 4-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	callq	fprintf
	movabsq	$1, %rcx
	leaq	.L.str41, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str28, %r10
	movabsq	$3, %r11
	leaq	.L.str19, %rbx
	movabsq	$18, %r14
	leaq	.L.str4, %r15
	leaq	.L.str42, %r12
	movl	$0, %edx
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	movabsq	$20, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	leaq	.L.str38, %rcx
.Ltmp30:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	632(%rsp), %rax         # 8-byte Reload
	movl	%edx, 620(%rsp)         # 4-byte Spill
	movq	%rax, %rdx
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%r8, 600(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%r9, 592(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 584(%rsp)         # 8-byte Spill
	movq	%r12, 576(%rsp)         # 8-byte Spill
	movl	%ebp, 572(%rsp)         # 4-byte Spill
	movq	%r15, 560(%rsp)         # 8-byte Spill
	movq	%r14, 552(%rsp)         # 8-byte Spill
	movq	%r10, 544(%rsp)         # 8-byte Spill
	movq	%r11, 536(%rsp)         # 8-byte Spill
	movq	%rbx, 528(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	.loc	1 20 0                  # feature_extraction.c:20:0
.Ltmp31:
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 520(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp32:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 512(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	508(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	508(%rsp), %ebp         # 4-byte Reload
	movl	1820(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 507(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	536(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	507(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	507(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%rsi, 1336(%rsp)        # 8-byte Spill
	jne	.LBB0_5
	jmp	.LBB0_4
.Ltmp33:
.LBB0_5:                                # %._crit_edge
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	1336(%rsp), %rax        # 8-byte Reload
	movabsq	$2, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$1, %r10
	leaq	.L.str43, %r11
	movabsq	$3, %rbx
	leaq	fprintf, %r14
	leaq	.L.str39, %r15
	movabsq	$22, %r12
	leaq	.L.str4, %r13
	leaq	.L.str19, %rbp
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 22 0                  # feature_extraction.c:22:0
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 400(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 396(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 384(%rsp)         # 8-byte Spill
	movq	%rbp, %rdx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%r8, 368(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 360(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r12, 344(%rsp)         # 8-byte Spill
	movq	%r13, 336(%rsp)         # 8-byte Spill
	movq	%rbp, 328(%rsp)         # 8-byte Spill
	movq	%r14, 320(%rsp)         # 8-byte Spill
	movq	%rbx, 312(%rsp)         # 8-byte Spill
	movq	%r10, 304(%rsp)         # 8-byte Spill
	movq	%r11, 296(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	424(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	496(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movabsq	$1, %rcx
	leaq	.L.str46, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str16, %r9
	movabsq	$3, %r10
	leaq	.L.str12, %r11
	movabsq	$16, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str19, %r15
	leaq	.L.str47, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str45, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str9, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	leaq	.L.str17, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rcx
.Ltmp34:
	.loc	1 16 0                  # feature_extraction.c:16:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 184(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%r8, 152(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r9, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 140(%rsp)        # 4-byte Spill
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	1932(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 67(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	jne	.LBB0_6
	jmp	.LBB0_2
.Ltmp35:
.LBB0_6:                                # %._crit_edge3
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rsi
	movabsq	$0, %rdx
	leaq	.L.str7, %r8
	leaq	.L.str8, %rdi
	movabsq	$24, %r9
	leaq	.L.str4, %r10
	leaq	.L.str12, %r11
	leaq	.L.str48, %rbx
	movl	$1, %ebp
	.loc	1 24 0                  # feature_extraction.c:24:0
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rcx
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$1944, %rsp             # imm = 0x798
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp36:
.Ltmp37:
	.size	test_stores, .Ltmp37-test_stores
.Lfunc_end0:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:
	.quad	4631811479262199808     # double 47
.LCPI1_1:
	.quad	4631670741773844480     # double 46
	.text
	.globl	process_data
	.align	16, 0x90
	.type	process_data,@function
process_data:                           # @process_data
	.cfi_startproc
.Lfunc_begin1:
	.loc	1 28 0                  # feature_extraction.c:28:0
# BB#0:
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$23752, %rsp            # imm = 0x5CC8
.Ltmp44:
	.cfi_offset %rbx, -56
.Ltmp45:
	.cfi_offset %r12, -48
.Ltmp46:
	.cfi_offset %r13, -40
.Ltmp47:
	.cfi_offset %r14, -32
.Ltmp48:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: process_data:time_data <- RDI
	#DEBUG_VALUE: process_data:freq_data <- RSI
	#DEBUG_VALUE: process_data:n_samples <- EDX
	#DEBUG_VALUE: process_data:n_channels <- ECX
	#DEBUG_VALUE: process_data:cfg <- R8
	movabsq	$1, %rax
	leaq	.L.str25, %r9
	movabsq	$0, %r10
	leaq	.L.str8, %r11
	movabsq	$2, %rbx
	leaq	.L.str53, %r14
	movabsq	$3, %r15
	leaq	.L.str52, %r12
	movabsq	$38, %r13
	movq	%rax, -48(%rbp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str51, %rax
	movl	%ecx, -68(%rbp)         # 4-byte Spill
.Ltmp49:
	#DEBUG_VALUE: process_data:n_channels <- [RBP+-68]
	movl	$1, %ecx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	leaq	.L.str24, %rax
	.loc	1 28 0 prologue_end     # feature_extraction.c:28:0
.Ltmp50:
	movl	%ecx, -132(%rbp)        # 4-byte Spill
	movl	$.L.str50, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%edx, -136(%rbp)        # 4-byte Spill
.Ltmp51:
	#DEBUG_VALUE: process_data:n_samples <- [RBP+-136]
	movl	$5, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	%rdi, -144(%rbp)        # 8-byte Spill
.Ltmp52:
	#DEBUG_VALUE: process_data:time_data <- [RBP+-144]
	movq	%rcx, %rdi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
.Ltmp53:
	#DEBUG_VALUE: process_data:freq_data <- [RBP+-152]
	movq	%rdx, %rsi
	movq	%r13, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%r12, -176(%rbp)        # 8-byte Spill
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r8, -192(%rbp)         # 8-byte Spill
.Ltmp54:
	#DEBUG_VALUE: process_data:cfg <- [RBP+-192]
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%r9, -208(%rbp)         # 8-byte Spill
	movq	%r10, -216(%rbp)        # 8-byte Spill
	movq	%r11, -224(%rbp)        # 8-byte Spill
	movq	%rbx, -232(%rbp)        # 8-byte Spill
	movq	%r14, -240(%rbp)        # 8-byte Spill
	movq	%r15, -248(%rbp)        # 8-byte Spill
	callq	trace_logger_log_entry
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str49, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movl	$1, %esi
	movl	%esi, %ecx
	xorl	%esi, %esi
	movl	%esi, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	movq	-144(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str35, %esi
	movl	%esi, %r8d
	movl	$2, %esi
	movl	%esi, %eax
	movq	%rax, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-136(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %esi
	movl	%esi, %ecx
	movl	$3, %esi
	movl	%esi, %edi
	movl	$32, %esi
	movl	%esi, %edx
	movq	%rdx, %rsi
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %esi
	movl	%esi, %ecx
	movl	$4, %esi
	movl	%esi, %edi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str89, %esi
	movl	%esi, %r8d
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 34 0                  # feature_extraction.c:34:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str5, %esi
	movl	%esi, %eax
	movl	$.L.str6, %esi
	movl	%esi, %ecx
	movl	$34, %esi
	movl	%esi, %edx
	movl	$12, %esi
	movl	%esi, %r8d
	movl	$1, %esi
	movq	%rdx, %rdi
	movq	-168(%rbp), %r9         # 8-byte Reload
	movl	%esi, -324(%rbp)        # 4-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	-136(%rbp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %ecx
	movq	%rcx, %rdi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str13, %esi
	movl	%esi, %eax
	movq	-336(%rbp), %rdi        # 8-byte Reload
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movq	-336(%rbp), %r8         # 8-byte Reload
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str20, %esi
	movl	%esi, %eax
	movl	$26, %esi
	movl	%esi, %ecx
	movq	-336(%rbp), %rdi        # 8-byte Reload
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-368(%rbp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 36 0                  # feature_extraction.c:36:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str24, %esi
	movl	%esi, %ecx
	movl	$36, %esi
	movl	%esi, %edi
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-324(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rax
	movq	-408(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, %rsp
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp55:
	#DEBUG_VALUE: process_data:out <- [RBP+-416]
	#DEBUG_VALUE: channel <- 0
	.loc	1 38 0                  # feature_extraction.c:38:0
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r8         # 8-byte Reload
	movl	-132(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movq	-112(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -417(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	-232(%rbp), %r8         # 8-byte Reload
	movl	-132(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-240(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_2
.Ltmp56:
# BB#1:                                 # %._crit_edge118.thread
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str56, %r8
	leaq	.L.str8, %rdx
	movabsq	$61, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str53, %r9
	leaq	.L.str55, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str31, %r12
	.loc	1 60 0                  # feature_extraction.c:60:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movl	$.L.str53, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movl	$.L.str26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -448(%rbp)        # 8-byte Spill
	movl	$60, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -456(%rbp)        # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -464(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -472(%rbp)        # 8-byte Spill
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -484(%rbp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%r8, -512(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-484(%rbp), %eax        # 4-byte Reload
	movq	%r9, -520(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -528(%rbp)        # 8-byte Spill
	movl	%ebx, -532(%rbp)        # 4-byte Spill
	movq	%r15, -544(%rbp)        # 8-byte Spill
	movq	%r12, -552(%rbp)        # 8-byte Spill
	movq	%r13, -560(%rbp)        # 8-byte Spill
	movq	%r11, -568(%rbp)        # 8-byte Spill
	movq	%r10, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsi, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-584(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %ebx
	movl	%ebx, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edx
	movq	%rdx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rdx, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-600(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-448(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movl	-484(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-448(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	%rcx, %rsi
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movl	-484(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-632(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-616(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-528(%rbp), %rdi        # 8-byte Reload
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, -640(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp57:
	#DEBUG_VALUE: process_data:fft_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 61 0                  # feature_extraction.c:61:0
	subq	$16, %rsp
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	-432(%rbp), %rsi        # 8-byte Reload
	movq	-520(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %rcx        # 8-byte Reload
	movq	-568(%rbp), %r8         # 8-byte Reload
	movl	-532(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-504(%rbp), %rsi        # 8-byte Reload
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-640(%rbp), %rcx        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	jmp	.LBB1_14
.Ltmp58:
.LBB1_2:                                # %.preheader108.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str58, %r8
	leaq	.L.str8, %rdx
	movabsq	$38, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str52, %r9
	leaq	.L.str57, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str34, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, -664(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	movabsq	$40, %rax
	.loc	1 40 0                  # feature_extraction.c:40:0
.Ltmp59:
	subq	$16, %rsp
	movq	%rdi, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -712(%rbp)        # 8-byte Spill
	movq	%rdx, -720(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%r8, -736(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -744(%rbp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, -752(%rbp)        # 8-byte Spill
	movl	%ebx, -756(%rbp)        # 4-byte Spill
	movq	%r14, -768(%rbp)        # 8-byte Spill
	movq	%r12, -776(%rbp)        # 8-byte Spill
	movq	%r15, -784(%rbp)        # 8-byte Spill
	movq	%r11, -792(%rbp)        # 8-byte Spill
	movq	%r10, -800(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-792(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	-672(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp60:
	.loc	1 48 0                  # feature_extraction.c:48:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-768(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-696(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -801(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-680(%rbp), %rdi        # 8-byte Reload
	movq	-712(%rbp), %rsi        # 8-byte Reload
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	-784(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movl	-756(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-792(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	-672(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
.Ltmp61:
	.loc	1 38 0                  # feature_extraction.c:38:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-768(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-784(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -802(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	-712(%rbp), %rsi        # 8-byte Reload
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	-800(%rbp), %rcx        # 8-byte Reload
	movq	-792(%rbp), %r8         # 8-byte Reload
	movl	-756(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-664(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-736(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -816(%rbp)        # 8-byte Spill
.LBB1_3:                                # %.preheader108
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_5 Depth 2
                                        #     Child Loop BB1_8 Depth 2
	movq	-816(%rbp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str33, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str64, %r9
	movabsq	$3, %r10
	leaq	.L.str63, %r11
	movabsq	$40, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str58, %r15
	leaq	.L.str62, %r12
	movl	$1, %r13d
	movq	%rax, -824(%rbp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -832(%rbp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 42 0                  # feature_extraction.c:42:0
.Ltmp62:
	subq	$16, %rsp
	movq	%rax, -952(%rbp)        # 8-byte Spill
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -960(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -968(%rbp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-896(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%r8, -992(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1000(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -1008(%rbp)       # 8-byte Spill
	movq	%rbx, -1016(%rbp)       # 8-byte Spill
	movq	%r15, -1024(%rbp)       # 8-byte Spill
	movq	%r12, -1032(%rbp)       # 8-byte Spill
	movl	%r13d, -1036(%rbp)      # 4-byte Spill
	movq	%r11, -1048(%rbp)       # 8-byte Spill
	movq	%r10, -1056(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-928(%rbp), %r8         # 8-byte Reload
	movq	-984(%rbp), %r9         # 8-byte Reload
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-976(%rbp), %rcx        # 8-byte Reload
	movq	-920(%rbp), %r8         # 8-byte Reload
	movq	-984(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-896(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-856(%rbp), %rcx        # 8-byte Reload
	movq	-904(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-896(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-824(%rbp), %rax        # 8-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-856(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r13d, -1060(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-848(%rbp), %rcx        # 8-byte Reload
	movq	-880(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1060(%rbp), %r13d      # 4-byte Reload
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-856(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1060(%rbp), %r13d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %r13d
.Ltmp63:
	.loc	1 40 0                  # feature_extraction.c:40:0
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-848(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, -1064(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1016(%rbp), %rdi       # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-1032(%rbp), %rcx       # 8-byte Reload
	movq	-960(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-976(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1048(%rbp), %r8        # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-976(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-801(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-984(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-992(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-801(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_4
	jmp	.LBB1_6
.LBB1_4:                                # %.lr.ph111
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str66, %r8
	leaq	.L.str8, %rdx
	movabsq	$40, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str63, %r9
	leaq	.L.str65, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str38, %r12
	movabsq	$32, %r13
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	movq	-1088(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1104(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -1120(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1128(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1136(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -1144(%rbp)       # 8-byte Spill
	movl	%ebx, -1148(%rbp)       # 4-byte Spill
	movq	%r15, -1160(%rbp)       # 8-byte Spill
	movq	%r12, -1168(%rbp)       # 8-byte Spill
	movq	%r13, -1176(%rbp)       # 8-byte Spill
	movq	%r11, -1184(%rbp)       # 8-byte Spill
	movq	%r10, -1192(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-1120(%rbp), %rdi       # 8-byte Reload
	movq	-1176(%rbp), %rsi       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1080(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	-1160(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1168(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1104(%rbp), %rdi       # 8-byte Reload
	movq	-1088(%rbp), %rsi       # 8-byte Reload
	movq	-1136(%rbp), %rdx       # 8-byte Reload
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	movq	-1184(%rbp), %r8        # 8-byte Reload
	movl	-1148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1120(%rbp), %rdi       # 8-byte Reload
	movq	-1072(%rbp), %rsi       # 8-byte Reload
	movq	-1072(%rbp), %rdx       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1128(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1072(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1208(%rbp)       # 8-byte Spill
.LBB1_5:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-1208(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str82, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str66, %r9
	movabsq	$3, %r10
	leaq	.L.str64, %r11
	movabsq	$40, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str83, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -1216(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1224(%rbp)       # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -1240(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -1248(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -1256(%rbp)       # 8-byte Spill
	leaq	.L.str68, %rax
	movq	%rax, -1264(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -1272(%rbp)       # 8-byte Spill
	leaq	.L.str67, %rax
	movq	%rax, -1280(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -1288(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -1296(%rbp)       # 8-byte Spill
	leaq	.L.str79, %rax
	movq	%rax, -1304(%rbp)       # 8-byte Spill
	movabsq	$45, %rax
	movq	%rax, -1312(%rbp)       # 8-byte Spill
	leaq	.L.str80, %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -1328(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -1336(%rbp)       # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, -1344(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1352(%rbp)       # 8-byte Spill
	leaq	.L.str76, %rax
	movq	%rax, -1360(%rbp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, -1368(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
	leaq	.L.str74, %rax
	movq	%rax, -1384(%rbp)       # 8-byte Spill
	movabsq	$43, %rax
	movq	%rax, -1392(%rbp)       # 8-byte Spill
	leaq	.L.str75, %rax
	movq	%rax, -1400(%rbp)       # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, -1408(%rbp)       # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, -1416(%rbp)       # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, -1424(%rbp)       # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, -1432(%rbp)       # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, -1440(%rbp)       # 8-byte Spill
	leaq	.L.str69, %rax
	movq	%rax, -1448(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -1456(%rbp)       # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -1464(%rbp)       # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, -1472(%rbp)       # 8-byte Spill
	leaq	.L.str63, %rax
	movq	%rax, -1480(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -1488(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 42 0                  # feature_extraction.c:42:0
.Ltmp64:
	subq	$16, %rsp
	movq	%rax, -1496(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1504(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -1512(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-1280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1528(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1496(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1536(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1544(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -1552(%rbp)       # 8-byte Spill
	movl	%r12d, -1556(%rbp)      # 4-byte Spill
	movq	%r13, -1568(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -1576(%rbp)      # 8-byte Spill
	movq	%r14, -1584(%rbp)       # 8-byte Spill
	movq	%rbx, -1592(%rbp)       # 8-byte Spill
	movq	%r10, -1600(%rbp)       # 8-byte Spill
	movq	%r11, -1608(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1528(%rbp), %r9        # 8-byte Reload
	movq	-1544(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1528(%rbp), %r9        # 8-byte Reload
	movq	-1480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1344(%rbp), %rcx       # 8-byte Reload
	movq	-1296(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1472(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1216(%rbp), %rax       # 8-byte Reload
	movq	-1200(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1448(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1464(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1624(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1448(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1456(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1448(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-1616(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -1632(%rbp)      # 8-byte Spill
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-400(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1640(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1440(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1640(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1632(%rbp), %xmm0      # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1640(%rbp), %rax       # 8-byte Reload
	vmovsd	-1632(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 43 0                  # feature_extraction.c:43:0
	subq	$16, %rsp
	movq	-1392(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1384(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-400(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	addq	$8, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1648(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1392(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1648(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1648(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 44 0                  # feature_extraction.c:44:0
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1360(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1376(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1656(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1656(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 45 0                  # feature_extraction.c:45:0
	subq	$16, %rsp
	movq	-1312(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	addq	$8, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1664(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1312(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1320(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1664(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1664(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp65:
	.loc	1 40 0                  # feature_extraction.c:40:0
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	movq	-1296(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1216(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1672(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1672(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1672(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1232(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -1676(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1520(%rbp), %rcx       # 8-byte Reload
	movq	-1248(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1676(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1232(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1676(%rbp), %r12d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1528(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1520(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -1677(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1552(%rbp), %rcx       # 8-byte Reload
	movq	-1536(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1512(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1608(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1512(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1544(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1677(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1528(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1520(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1677(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-1672(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1208(%rbp)       # 8-byte Spill
	jne	.LBB1_6
	jmp	.LBB1_5
.Ltmp66:
.LBB1_6:                                # %._crit_edge112
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$3, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str86, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str85, %r10
	leaq	.L.str89, %r11
	movabsq	$4, %rbx
	leaq	kiss_fft, %r14
	leaq	.L.str88, %r15
	movabsq	$47, %r12
	leaq	.L.str50, %r13
	movq	%rax, -1688(%rbp)       # 8-byte Spill
	leaq	.L.str64, %rax
	movq	%rax, -1696(%rbp)       # 8-byte Spill
	leaq	.L.str87, %rax
	movq	%rax, -1704(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -1712(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -1720(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -1728(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -1736(%rbp)       # 8-byte Spill
	leaq	.L.str84, %rax
	movq	%rax, -1744(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1752(%rbp)       # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, -1760(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1768(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1776(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	.loc	1 47 0                  # feature_extraction.c:47:0
	subq	$16, %rsp
	movq	%rdi, -1784(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, -1788(%rbp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	%rax, -1800(%rbp)       # 8-byte Spill
	movq	-1696(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1744(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1816(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1800(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1824(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-1788(%rbp), %eax       # 4-byte Reload
	movq	%r9, -1832(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -1840(%rbp)       # 8-byte Spill
	movq	%r14, -1848(%rbp)       # 8-byte Spill
	movq	%r15, -1856(%rbp)       # 8-byte Spill
	movq	%r12, -1864(%rbp)       # 8-byte Spill
	movq	%rbx, -1872(%rbp)       # 8-byte Spill
	movq	%r11, -1880(%rbp)       # 8-byte Spill
	movq	%r10, -1888(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1768(%rbp), %rsi       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1776(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1896(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1888(%rbp), %rcx       # 8-byte Reload
	movq	-1752(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1760(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1896(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1888(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1808(%rbp), %rcx       # 8-byte Reload
	movq	-1752(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1736(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1896(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1704(%rbp), %rcx       # 8-byte Reload
	movq	-1720(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1872(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1848(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1856(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1880(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1904(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1888(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1784(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1912(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	-1904(%rbp), %rsi       # 8-byte Reload
	movq	-1912(%rbp), %rdx       # 8-byte Reload
	callq	kiss_fft
	movabsq	$1, %rcx
	leaq	.L.str34, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str61, %r9
	movabsq	$3, %r10
	leaq	.L.str91, %r11
	movabsq	$48, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str64, %r15
	leaq	.L.str90, %r12
	movl	$1, %eax
.Ltmp67:
	#DEBUG_VALUE: i <- 0
	.loc	1 48 0                  # feature_extraction.c:48:0
	subq	$16, %rsp
	movq	%rdi, -1920(%rbp)       # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, -1928(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -1944(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-1920(%rbp), %rbx       # 8-byte Reload
	movq	%r8, -1952(%rbp)        # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, -1960(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r10, -1968(%rbp)       # 8-byte Spill
	movq	%r11, -1976(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1968(%rbp), %rdi       # 8-byte Reload
	movq	-1936(%rbp), %rsi       # 8-byte Reload
	movq	-1936(%rbp), %rdx       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1976(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1920(%rbp), %rdi       # 8-byte Reload
	movq	-1936(%rbp), %rsi       # 8-byte Reload
	movq	-1936(%rbp), %rdx       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1960(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-802(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-1944(%rbp), %rdi       # 8-byte Reload
	movq	-1944(%rbp), %rsi       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1952(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-802(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_7
	jmp	.LBB1_9
.LBB1_7:                                # %.lr.ph115
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str94, %r8
	leaq	.L.str8, %rdx
	movabsq	$48, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str91, %r9
	leaq	.L.str93, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str92, %r12
	movabsq	$32, %r13
	movq	%rax, -1984(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1992(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -2000(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -2008(%rbp)       # 8-byte Spill
	movq	-2000(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -2016(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -2032(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-2008(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2040(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2048(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2056(%rbp)       # 8-byte Spill
	movl	%ebx, -2060(%rbp)       # 4-byte Spill
	movq	%r15, -2072(%rbp)       # 8-byte Spill
	movq	%r12, -2080(%rbp)       # 8-byte Spill
	movq	%r13, -2088(%rbp)       # 8-byte Spill
	movq	%r11, -2096(%rbp)       # 8-byte Spill
	movq	%r10, -2104(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-2032(%rbp), %rdi       # 8-byte Reload
	movq	-2088(%rbp), %rsi       # 8-byte Reload
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-1992(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-2056(%rbp), %rdi       # 8-byte Reload
	movq	-2072(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-2080(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2112(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2016(%rbp), %rdi       # 8-byte Reload
	movq	-2000(%rbp), %rsi       # 8-byte Reload
	movq	-2048(%rbp), %rdx       # 8-byte Reload
	movq	-2104(%rbp), %rcx       # 8-byte Reload
	movq	-2096(%rbp), %r8        # 8-byte Reload
	movl	-2060(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2032(%rbp), %rdi       # 8-byte Reload
	movq	-1984(%rbp), %rsi       # 8-byte Reload
	movq	-1984(%rbp), %rdx       # 8-byte Reload
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-2040(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1984(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2120(%rbp)       # 8-byte Spill
.LBB1_8:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-2120(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str103, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str94, %r9
	movabsq	$3, %r10
	leaq	.L.str61, %r11
	movabsq	$48, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str104, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2128(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2136(%rbp)       # 8-byte Spill
	leaq	.L.str102, %rax
	movq	%rax, -2144(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -2152(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2160(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2168(%rbp)       # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, -2176(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2184(%rbp)       # 8-byte Spill
	leaq	.L.str95, %rax
	movq	%rax, -2192(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2200(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -2208(%rbp)       # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, -2216(%rbp)       # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, -2224(%rbp)       # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, -2232(%rbp)       # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, -2240(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -2248(%rbp)       # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, -2256(%rbp)       # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, -2264(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -2272(%rbp)       # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, -2280(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -2288(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -2296(%rbp)       # 8-byte Spill
	leaq	.L.str92, %rax
	movq	%rax, -2304(%rbp)       # 8-byte Spill
	leaq	.L.str91, %rax
	movq	%rax, -2312(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	.loc	1 50 0                  # feature_extraction.c:50:0
.Ltmp68:
	subq	$16, %rsp
	movq	%rdi, -2320(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -2328(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-2192(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2344(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, -2352(%rbp)        # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, -2360(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r13, -2368(%rbp)       # 8-byte Spill
	movq	%r14, -2376(%rbp)       # 8-byte Spill
	movq	%r15, -2384(%rbp)       # 8-byte Spill
	movl	%r12d, -2388(%rbp)      # 4-byte Spill
	movq	%rbx, -2400(%rbp)       # 8-byte Spill
	movq	%r11, -2408(%rbp)       # 8-byte Spill
	movq	%r10, -2416(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2344(%rbp), %r9        # 8-byte Reload
	movq	-2360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2344(%rbp), %r9        # 8-byte Reload
	movq	-2312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2264(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2112(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2304(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2128(%rbp), %rax       # 8-byte Reload
	movq	-2112(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2280(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2416(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2296(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2424(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2344(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2432(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2288(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2432(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2432(%rbp), %rax       # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -2440(%rbp)      # 8-byte Spill
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2320(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2224(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2256(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2424(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2344(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2448(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2224(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2240(%rbp), %rcx       # 8-byte Reload
	movq	-2248(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2448(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2224(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	vmovsd	-2440(%rbp), %xmm0      # 8-byte Reload
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2320(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	-2424(%rbp), %rcx       # 8-byte Reload
	vmovsd	-2440(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp69:
	.loc	1 48 0                  # feature_extraction.c:48:0
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2176(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2128(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2456(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2144(%rbp), %rcx       # 8-byte Reload
	movq	-2184(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2456(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2144(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2460(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2336(%rbp), %rcx       # 8-byte Reload
	movq	-2160(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2152(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2460(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2144(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2460(%rbp), %r12d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2344(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2461(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2384(%rbp), %rcx       # 8-byte Reload
	movq	-2352(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2416(%rbp), %rdi       # 8-byte Reload
	movq	-2328(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2408(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2328(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2360(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2461(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2344(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2461(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2456(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2120(%rbp)       # 8-byte Spill
	jne	.LBB1_9
	jmp	.LBB1_8
.Ltmp70:
.LBB1_9:                                # %._crit_edge116
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$1, %rax
	leaq	.L.str106, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str58, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$38, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str61, %r14
	leaq	.L.str107, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2472(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2480(%rbp)       # 8-byte Spill
	leaq	.L.str105, %rax
	movq	%rax, -2488(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2496(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2504(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2512(%rbp)       # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -2520(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2528(%rbp)       # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -2536(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2544(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 38 0                  # feature_extraction.c:38:0
	subq	$16, %rsp
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -2560(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -2576(%rbp)       # 8-byte Spill
	movq	-2520(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2584(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2576(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2592(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2600(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2608(%rbp)       # 8-byte Spill
	movq	%r15, -2616(%rbp)       # 8-byte Spill
	movl	%r12d, -2620(%rbp)      # 4-byte Spill
	movq	%r13, -2632(%rbp)       # 8-byte Spill
	movq	%rbx, -2640(%rbp)       # 8-byte Spill
	movq	%r11, -2648(%rbp)       # 8-byte Spill
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rdx       # 8-byte Reload
	movq	-2568(%rbp), %rcx       # 8-byte Reload
	movq	-2544(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2536(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-824(%rbp), %rax        # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2520(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2664(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2488(%rbp), %rcx       # 8-byte Reload
	movq	-2528(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-2664(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2520(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2664(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2488(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2668(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2584(%rbp), %rcx       # 8-byte Reload
	movq	-2504(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2496(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2668(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2488(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2668(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2472(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2669(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2616(%rbp), %rcx       # 8-byte Reload
	movq	-2552(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2600(%rbp), %rdi       # 8-byte Reload
	movq	-2568(%rbp), %rsi       # 8-byte Reload
	movq	-2568(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2656(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2568(%rbp), %rsi       # 8-byte Reload
	movq	-2568(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2592(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2669(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2472(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2669(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2664(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	jne	.LBB1_10
	jmp	.LBB1_3
.Ltmp71:
.LBB1_10:                               # %._crit_edge118
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str112, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str56, %r8
	movabsq	$3, %r9
	leaq	.L.str114, %r10
	movabsq	$61, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str108, %r14
	leaq	.L.str113, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2680(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2704(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2712(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2720(%rbp)       # 8-byte Spill
	leaq	.L.str111, %rax
	.loc	1 60 0                  # feature_extraction.c:60:0
	subq	$16, %rsp
	movq	%rax, -2728(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -2736(%rbp)       # 8-byte Spill
	movl	$.L.str108, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2744(%rbp)       # 8-byte Spill
	movl	$.L.str109, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2752(%rbp)       # 8-byte Spill
	movl	$60, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2760(%rbp)       # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2768(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -2776(%rbp)       # 8-byte Spill
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -2784(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movl	%esi, -2788(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-2744(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-2752(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2768(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2816(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-2788(%rbp), %eax       # 4-byte Reload
	movq	%r9, -2824(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -2832(%rbp)       # 8-byte Spill
	movq	%r14, -2840(%rbp)       # 8-byte Spill
	movq	%r15, -2848(%rbp)       # 8-byte Spill
	movl	%r12d, -2852(%rbp)      # 4-byte Spill
	movq	%rbx, -2864(%rbp)       # 8-byte Spill
	movq	%r11, -2872(%rbp)       # 8-byte Spill
	movq	%r10, -2880(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsi, -2888(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2888(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2896(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %r12d
	movl	%r12d, %r8d
	movl	$1, %r12d
	movl	%r12d, %ecx
	movq	%rcx, %rdi
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -2904(%rbp)       # 8-byte Spill
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %r12d
	movl	%r12d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edx
	movq	%rdx, %rdi
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2904(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2752(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-2760(%rbp), %rdi       # 8-byte Reload
	movq	-2776(%rbp), %rsi       # 8-byte Reload
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2928(%rbp)       # 8-byte Spill
	movl	-2788(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2752(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-2912(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rsi
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2928(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str111, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-2760(%rbp), %rdi       # 8-byte Reload
	movq	-2776(%rbp), %rsi       # 8-byte Reload
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movl	-2788(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2936(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2928(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2920(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-2832(%rbp), %rdi       # 8-byte Reload
	movq	-2720(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -2944(%rbp)       # 8-byte Spill
.Ltmp72:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-2944]
	movq	%rdx, %rsi
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2728(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp73:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-2944]
	#DEBUG_VALUE: channel <- 0
	.loc	1 61 0                  # feature_extraction.c:61:0
	subq	$16, %rsp
	movq	-2872(%rbp), %rdi       # 8-byte Reload
	movq	-2864(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movq	-2800(%rbp), %rcx       # 8-byte Reload
	movq	-2712(%rbp), %r8        # 8-byte Reload
	movl	-2852(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2784(%rbp), %rdi       # 8-byte Reload
	movq	-2688(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2680(%rbp), %rcx       # 8-byte Reload
	movq	-2704(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2808(%rbp), %rdi       # 8-byte Reload
	movq	-2688(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2696(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2832(%rbp), %rdi       # 8-byte Reload
	movq	-2808(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2800(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2945(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2872(%rbp), %rdi       # 8-byte Reload
	movq	-2864(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movq	-2848(%rbp), %rcx       # 8-byte Reload
	movq	-2784(%rbp), %r8        # 8-byte Reload
	movl	-2852(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2824(%rbp), %rdi       # 8-byte Reload
	movq	-2680(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2880(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2784(%rbp), %rdi       # 8-byte Reload
	movq	-2680(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2816(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2945(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2808(%rbp), %rdi       # 8-byte Reload
	movq	-2808(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2800(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2945(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2680(%rbp), %rcx       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-2920(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -2960(%rbp)       # 8-byte Spill
	movq	%rdx, -648(%rbp)        # 8-byte Spill
	movq	%rsi, -656(%rbp)        # 8-byte Spill
	jne	.LBB1_11
	jmp	.LBB1_14
.Ltmp74:
.LBB1_11:                               # %.preheader104
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_12 Depth 2
	movq	-2960(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str125, %r8
	leaq	.L.str8, %rsi
	movabsq	$63, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str114, %r10
	leaq	.L.str124, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str123, %r13
	movq	%rax, -2968(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2976(%rbp)       # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, -2984(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -2992(%rbp)       # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, -3000(%rbp)       # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, -3008(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3016(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -3024(%rbp)       # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, -3032(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -3040(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -3048(%rbp)       # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, -3056(%rbp)       # 8-byte Spill
	movabsq	$65, %rax
	movq	%rax, -3064(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3072(%rbp)       # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, -3080(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -3088(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -3096(%rbp)       # 8-byte Spill
	leaq	.L.str117, %rax
	movq	%rax, -3104(%rbp)       # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, -3112(%rbp)       # 8-byte Spill
	leaq	.L.str108, %rax
	movq	%rax, -3120(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3128(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 65 0                  # feature_extraction.c:65:0
.Ltmp75:
	subq	$16, %rsp
	movq	%rax, -3136(%rbp)       # 8-byte Spill
	movq	-3128(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3144(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -3152(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -3160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3032(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3168(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3136(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3176(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -3184(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -3188(%rbp)      # 4-byte Spill
	movq	%r15, -3200(%rbp)       # 8-byte Spill
	movq	%rbx, -3208(%rbp)       # 8-byte Spill
	movq	%r12, -3216(%rbp)       # 8-byte Spill
	movq	%r13, -3224(%rbp)       # 8-byte Spill
	movq	%r11, -3232(%rbp)       # 8-byte Spill
	movq	%r10, -3240(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3160(%rbp), %r9        # 8-byte Reload
	movq	-3120(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3160(%rbp), %r9        # 8-byte Reload
	movq	-3104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3080(%rbp), %rcx       # 8-byte Reload
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2968(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -3244(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3056(%rbp), %rcx       # 8-byte Reload
	movq	-3048(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3088(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3244(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3244(%rbp), %r14d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3056(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3248(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-3072(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3248(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3056(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3248(%rbp), %r14d      # 4-byte Reload
	addl	$1, %r14d
.Ltmp76:
	.loc	1 63 0                  # feature_extraction.c:63:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3252(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3008(%rbp), %rcx       # 8-byte Reload
	movq	-3048(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3040(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-2968(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3160(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3264(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3008(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3000(%rbp), %rcx       # 8-byte Reload
	movq	-3024(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2976(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3264(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3008(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3264(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3000(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3272(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3224(%rbp), %rcx       # 8-byte Reload
	movq	-2992(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-3252(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3252(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3224(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3280(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3232(%rbp), %rcx       # 8-byte Reload
	movq	-3208(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3168(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3176(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3168(%rbp), %rax       # 8-byte Reload
	movq	%rax, -3288(%rbp)       # 8-byte Spill
.LBB1_12:                               #   Parent Loop BB1_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-3288(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str136, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	log10, %r10
	leaq	.L.str139, %r11
	movabsq	$67, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str125, %r15
	leaq	.L.str138, %r12
	movabsq	$49, %r13
	movq	%rsi, -3296(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -3304(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -3312(%rbp)       # 8-byte Spill
	leaq	.L.str135, %rax
	movq	%rax, -3320(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -3328(%rbp)       # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -3336(%rbp)       # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, -3344(%rbp)       # 8-byte Spill
	leaq	.L.str134, %rax
	movq	%rax, -3352(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -3360(%rbp)       # 8-byte Spill
	leaq	.L.str132, %rax
	movq	%rax, -3368(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -3376(%rbp)       # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, -3384(%rbp)       # 8-byte Spill
	leaq	.L.str131, %rax
	movq	%rax, -3392(%rbp)       # 8-byte Spill
	movabsq	$66, %rax
	movq	%rax, -3400(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -3408(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -3416(%rbp)       # 8-byte Spill
	leaq	.L.str128, %rax
	movq	%rax, -3424(%rbp)       # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, -3432(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3440(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3448(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -3456(%rbp)       # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, -3464(%rbp)       # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, -3472(%rbp)       # 8-byte Spill
	leaq	.L.str126, %rax
	movq	%rax, -3480(%rbp)       # 8-byte Spill
	movabsq	$65, %rax
	movq	%rax, -3488(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3496(%rbp)       # 8-byte Spill
	leaq	.L.str114, %rax
	movq	%rax, -3504(%rbp)       # 8-byte Spill
	leaq	.L.str127, %rax
	movq	%rax, -3512(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3520(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 65 0                  # feature_extraction.c:65:0
.Ltmp77:
	subq	$16, %rsp
	movq	%rax, -3528(%rbp)       # 8-byte Spill
	movq	-3520(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3536(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -3540(%rbp)       # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -3552(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-3480(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3560(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3528(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3568(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-3540(%rbp), %eax       # 4-byte Reload
	movq	%r9, -3576(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -3584(%rbp)       # 8-byte Spill
	movq	%r15, -3592(%rbp)       # 8-byte Spill
	movq	%r12, -3600(%rbp)       # 8-byte Spill
	movq	%r13, -3608(%rbp)       # 8-byte Spill
	movq	%rbx, -3616(%rbp)       # 8-byte Spill
	movq	%r11, -3624(%rbp)       # 8-byte Spill
	movq	%r10, -3632(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3536(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3512(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	movq	-3592(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3536(%rbp), %rdx       # 8-byte Reload
	movq	-3536(%rbp), %rcx       # 8-byte Reload
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	movq	-3504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3480(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3488(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3424(%rbp), %rcx       # 8-byte Reload
	movq	-3496(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3480(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3280(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3472(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3280(%rbp), %rcx       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	.loc	1 66 0                  # feature_extraction.c:66:0
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3560(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3640(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3424(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3400(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	movq	-3456(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3432(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3536(%rbp), %rdx       # 8-byte Reload
	movq	-3536(%rbp), %rcx       # 8-byte Reload
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3640(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3424(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3416(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3640(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3648(%rbp)       # 8-byte Spill
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3464(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3400(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3408(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3648(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3464(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3648(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3656(%rbp)      # 8-byte Spill
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3400(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3392(%rbp), %rcx       # 8-byte Reload
	movq	-3456(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3432(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3536(%rbp), %rcx       # 8-byte Reload
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3640(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3424(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3416(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3640(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3664(%rbp)       # 8-byte Spill
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3392(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3400(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3408(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3664(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3392(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3664(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	.loc	1 67 0                  # feature_extraction.c:67:0
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3672(%rbp)      # 8-byte Spill
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3616(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3376(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3656(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3656(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3656(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -3680(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3616(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3376(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3672(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3672(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3672(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -3688(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3616(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3360(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3688(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3680(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3680(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-3688(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -3696(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3616(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3608(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3336(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3696(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3696(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3704(%rbp)      # 8-byte Spill
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3616(%rbp), %rdi       # 8-byte Reload
	movq	-3584(%rbp), %rsi       # 8-byte Reload
	movq	-3592(%rbp), %rdx       # 8-byte Reload
	movq	-3600(%rbp), %rcx       # 8-byte Reload
	movq	-3608(%rbp), %r8        # 8-byte Reload
	movl	-3540(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3576(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	movq	-3632(%rbp), %rdx       # 8-byte Reload
	movq	-3560(%rbp), %rcx       # 8-byte Reload
	movq	-3624(%rbp), %r8        # 8-byte Reload
	movq	-3536(%rbp), %r9        # 8-byte Reload
	movq	-3568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3560(%rbp), %rdi       # 8-byte Reload
	movq	-3552(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3704(%rbp), %xmm0      # 8-byte Reload
	movq	-3560(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3568(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3704(%rbp), %xmm0      # 8-byte Reload
	callq	log10
	movabsq	$1, %rcx
	leaq	.L.str144, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str125, %r9
	movabsq	$3, %r10
	leaq	.L.str117, %r11
	movabsq	$63, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str145, %r15
	movl	$1, %eax
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rcx, -3712(%rbp)       # 8-byte Spill
	leaq	.L.str127, %rcx
	movq	%rcx, -3720(%rbp)       # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, -3728(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -3736(%rbp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -3744(%rbp)       # 8-byte Spill
	leaq	.L.str126, %rcx
	movq	%rcx, -3752(%rbp)       # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, -3760(%rbp)       # 8-byte Spill
	leaq	.L.str138, %rcx
	movq	%rcx, -3768(%rbp)       # 8-byte Spill
	leaq	.L.str141, %rcx
	movq	%rcx, -3776(%rbp)       # 8-byte Spill
	movabsq	$67, %rcx
	movq	%rcx, -3784(%rbp)       # 8-byte Spill
	leaq	.L.str143, %rcx
	movq	%rcx, -3792(%rbp)       # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, -3800(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rcx
	movq	%rcx, -3808(%rbp)       # 8-byte Spill
	leaq	.L.str140, %rcx
	movq	%rcx, -3816(%rbp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, -3824(%rbp)       # 8-byte Spill
	leaq	.L.str122, %rcx
	movq	%rdi, -3832(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, -3840(%rbp)       # 8-byte Spill
	movq	%r13, %rsi
	vmovsd	%xmm0, -3848(%rbp)      # 8-byte Spill
	movq	%rcx, -3856(%rbp)       # 8-byte Spill
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	%rdx, -3864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3768(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -3872(%rbp)        # 8-byte Spill
	movq	-3840(%rbp), %r8        # 8-byte Reload
	movq	%r9, -3880(%rbp)        # 8-byte Spill
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movl	%eax, -3884(%rbp)       # 4-byte Spill
	movq	%r14, -3896(%rbp)       # 8-byte Spill
	movq	%r15, -3904(%rbp)       # 8-byte Spill
	movq	%r12, -3912(%rbp)       # 8-byte Spill
	movq	%r13, -3920(%rbp)       # 8-byte Spill
	movq	%rbx, -3928(%rbp)       # 8-byte Spill
	movq	%r11, -3936(%rbp)       # 8-byte Spill
	movq	%r10, -3944(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3784(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3760(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3272(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3856(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3752(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3304(%rbp), %rcx       # 8-byte Reload
	movq	-3272(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	-3912(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3712(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3952(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3816(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3784(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3776(%rbp), %rcx       # 8-byte Reload
	movq	-3824(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3952(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3816(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3808(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3952(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-3912(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3960(%rbp)       # 8-byte Spill
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3776(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3784(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3792(%rbp), %rcx       # 8-byte Reload
	movq	-3800(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3960(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3776(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3848(%rbp), %xmm0      # 8-byte Reload
	movq	-3712(%rbp), %rdx       # 8-byte Reload
	movq	-3768(%rbp), %rcx       # 8-byte Reload
	movq	-3840(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-2944(%rbp), %rcx       # 8-byte Reload
	movq	-3952(%rbp), %rdx       # 8-byte Reload
	vmovsd	-3848(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp78:
	.loc	1 63 0                  # feature_extraction.c:63:0
	subq	$16, %rsp
	movq	-3928(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3720(%rbp), %rcx       # 8-byte Reload
	movq	-3760(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3712(%rbp), %rdx       # 8-byte Reload
	movq	-3840(%rbp), %rcx       # 8-byte Reload
	movq	-3736(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3752(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3304(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-3912(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3712(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3968(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3720(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3928(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3864(%rbp), %rcx       # 8-byte Reload
	movq	-3744(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3728(%rbp), %rdx       # 8-byte Reload
	movq	-3840(%rbp), %rcx       # 8-byte Reload
	movq	-3736(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3920(%rbp), %rsi       # 8-byte Reload
	movq	-3968(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3720(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3968(%rbp), %rcx       # 8-byte Reload
	cmpq	$47, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-3912(%rbp), %rdi       # 8-byte Reload
	movq	-3712(%rbp), %rsi       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3864(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -3969(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3928(%rbp), %rdi       # 8-byte Reload
	movq	-3896(%rbp), %rsi       # 8-byte Reload
	movq	-3880(%rbp), %rdx       # 8-byte Reload
	movq	-3904(%rbp), %rcx       # 8-byte Reload
	movq	-3872(%rbp), %r8        # 8-byte Reload
	movl	-3884(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3944(%rbp), %rdi       # 8-byte Reload
	movq	-3840(%rbp), %rsi       # 8-byte Reload
	movq	-3840(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3936(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3872(%rbp), %rdi       # 8-byte Reload
	movq	-3840(%rbp), %rsi       # 8-byte Reload
	movq	-3840(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3880(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3969(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-3712(%rbp), %rdi       # 8-byte Reload
	movq	-3712(%rbp), %rsi       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3864(%rbp), %r8        # 8-byte Reload
	movq	-3840(%rbp), %r9        # 8-byte Reload
	movq	-3832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3969(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-3968(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -3288(%rbp)       # 8-byte Spill
	jne	.LBB1_13
	jmp	.LBB1_12
.Ltmp79:
.LBB1_13:                               #   in Loop: Header=BB1_11 Depth=1
	movabsq	$1, %rax
	leaq	.L.str147, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str114, %r8
	movabsq	$3, %r9
	leaq	.L.str149, %r10
	movabsq	$61, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str117, %r14
	leaq	.L.str148, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -3984(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3992(%rbp)       # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, -4000(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4008(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4016(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4024(%rbp)       # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, -4032(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -4040(%rbp)       # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, -4048(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4056(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 61 0                  # feature_extraction.c:61:0
	subq	$16, %rsp
	movq	%rdi, -4064(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -4072(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -4080(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -4088(%rbp)       # 8-byte Spill
	movq	-4032(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4096(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4088(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4104(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -4112(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -4120(%rbp)       # 8-byte Spill
	movq	%r15, -4128(%rbp)       # 8-byte Spill
	movl	%r12d, -4132(%rbp)      # 4-byte Spill
	movq	%r13, -4144(%rbp)       # 8-byte Spill
	movq	%rbx, -4152(%rbp)       # 8-byte Spill
	movq	%r11, -4160(%rbp)       # 8-byte Spill
	movq	%r10, -4168(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-4024(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rdx       # 8-byte Reload
	movq	-4080(%rbp), %rcx       # 8-byte Reload
	movq	-4056(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3984(%rbp), %rdi       # 8-byte Reload
	movq	-4024(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4048(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2968(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-4144(%rbp), %rdi       # 8-byte Reload
	movq	-4024(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4032(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -4176(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4160(%rbp), %rdi       # 8-byte Reload
	movq	-4152(%rbp), %rsi       # 8-byte Reload
	movq	-4120(%rbp), %rdx       # 8-byte Reload
	movq	-4000(%rbp), %rcx       # 8-byte Reload
	movq	-4040(%rbp), %r8        # 8-byte Reload
	movl	-4132(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3984(%rbp), %rdi       # 8-byte Reload
	movq	-4024(%rbp), %rsi       # 8-byte Reload
	movq	-4176(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4032(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4176(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-4144(%rbp), %rdi       # 8-byte Reload
	movq	-3992(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4000(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -4180(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4160(%rbp), %rdi       # 8-byte Reload
	movq	-4152(%rbp), %rsi       # 8-byte Reload
	movq	-4120(%rbp), %rdx       # 8-byte Reload
	movq	-4096(%rbp), %rcx       # 8-byte Reload
	movq	-4016(%rbp), %r8        # 8-byte Reload
	movl	-4132(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-3992(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4008(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4180(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3984(%rbp), %rdi       # 8-byte Reload
	movq	-3992(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4000(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4180(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4144(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4096(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4181(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4160(%rbp), %rdi       # 8-byte Reload
	movq	-4152(%rbp), %rsi       # 8-byte Reload
	movq	-4120(%rbp), %rdx       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4064(%rbp), %r8        # 8-byte Reload
	movl	-4132(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4112(%rbp), %rdi       # 8-byte Reload
	movq	-4080(%rbp), %rsi       # 8-byte Reload
	movq	-4080(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4168(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-4080(%rbp), %rsi       # 8-byte Reload
	movq	-4080(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4104(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4181(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-3984(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-4096(%rbp), %r8        # 8-byte Reload
	movq	-4080(%rbp), %r9        # 8-byte Reload
	movq	-4072(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4181(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4176(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2960(%rbp)       # 8-byte Spill
	jne	.LBB1_15
	jmp	.LBB1_11
.Ltmp80:
.LBB1_14:                               # %._crit_edge107.thread
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	-648(%rbp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str156, %r8
	leaq	.L.str8, %rdi
	movabsq	$73, %r9
	leaq	.L.str50, %r10
	leaq	.L.str56, %r11
	leaq	.L.str155, %rbx
	movabsq	$2, %r14
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -4192(%rbp)       # 8-byte Spill
	leaq	.L.str154, %rax
	.loc	1 71 0                  # feature_extraction.c:71:0
	subq	$16, %rsp
	movq	%rax, -4200(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4208(%rbp)       # 8-byte Spill
	movl	$.L.str56, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4216(%rbp)       # 8-byte Spill
	movl	$.L.str150, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4224(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -4232(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -4240(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -4248(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -4256(%rbp)       # 8-byte Spill
	movq	-4232(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4260(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4216(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4272(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4280(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4240(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4288(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4260(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4296(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -4304(%rbp)       # 8-byte Spill
	movq	%r14, -4312(%rbp)       # 8-byte Spill
	movl	%r15d, -4316(%rbp)      # 4-byte Spill
	movq	%rbx, -4328(%rbp)       # 8-byte Spill
	movq	%r12, -4336(%rbp)       # 8-byte Spill
	movq	%r11, -4344(%rbp)       # 8-byte Spill
	movq	%r10, -4352(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str108, (%rcx)
	movl	$.L.str142, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -4360(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -4368(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-4368(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4360(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -4384(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %r8d
	movq	-4360(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4368(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4280(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4392(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4224(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str151, %eax
	movl	%eax, %ecx
	movq	-4256(%rbp), %rdi       # 8-byte Reload
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4216(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -4400(%rbp)       # 8-byte Spill
	movq	-4240(%rbp), %r8        # 8-byte Reload
	movl	-4260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str108, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %r8d
	movq	-4384(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4368(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %r8d
	movq	-4360(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4368(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movq	-4392(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4192(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4400(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str152, %eax
	movl	%eax, %ecx
	movl	$71, %eax
	movl	%eax, %edx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4216(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4408(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -4416(%rbp)       # 8-byte Spill
	movl	-4260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movq	-4360(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4360(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4424(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4392(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4424(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4416(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str153, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4408(%rbp), %rdi       # 8-byte Reload
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4216(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4432(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4440(%rbp)       # 8-byte Spill
	movq	-4432(%rbp), %r8        # 8-byte Reload
	movl	-4260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4360(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4424(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4416(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4424(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4392(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4448(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4448(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4456(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4440(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 72 0                  # feature_extraction.c:72:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str154, %eax
	movl	%eax, %ecx
	movl	$72, %eax
	movl	%eax, %edi
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4216(%rbp), %rdx       # 8-byte Reload
	movq	-4432(%rbp), %r8        # 8-byte Reload
	movl	-4260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4360(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4424(%rbp), %rdx       # 8-byte Reload
	movq	-4360(%rbp), %rcx       # 8-byte Reload
	movq	-4416(%rbp), %r8        # 8-byte Reload
	movq	-4368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4456(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4336(%rbp), %rdi       # 8-byte Reload
	movq	-4304(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4272(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4464(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4200(%rbp), %r8        # 8-byte Reload
	movq	-4208(%rbp), %r9        # 8-byte Reload
	movq	-4248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp81:
	#DEBUG_VALUE: process_data:fft_stddev <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 73 0                  # feature_extraction.c:73:0
	subq	$16, %rsp
	movq	-4296(%rbp), %rdi       # 8-byte Reload
	movq	-4352(%rbp), %rsi       # 8-byte Reload
	movq	-4344(%rbp), %rdx       # 8-byte Reload
	movq	-4328(%rbp), %rcx       # 8-byte Reload
	movq	-4312(%rbp), %r8        # 8-byte Reload
	movl	-4316(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4272(%rbp), %rdi       # 8-byte Reload
	movq	-4208(%rbp), %rsi       # 8-byte Reload
	movq	-4208(%rbp), %rdx       # 8-byte Reload
	movq	-4272(%rbp), %rcx       # 8-byte Reload
	movq	-4288(%rbp), %r8        # 8-byte Reload
	movq	-4208(%rbp), %r9        # 8-byte Reload
	movq	-4248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4464(%rbp), %rcx       # 8-byte Reload
	movq	-4448(%rbp), %rdx       # 8-byte Reload
	movq	-4424(%rbp), %rsi       # 8-byte Reload
	movq	-4192(%rbp), %rdi       # 8-byte Reload
	movq	-4280(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4472(%rbp)       # 8-byte Spill
	movq	%rdx, -4480(%rbp)       # 8-byte Spill
	movq	%rsi, -4488(%rbp)       # 8-byte Spill
	movq	%rdi, -4496(%rbp)       # 8-byte Spill
	movq	%r8, -4504(%rbp)        # 8-byte Spill
	jmp	.LBB1_16
.Ltmp82:
.LBB1_15:                               # %._crit_edge107
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str160, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str163, %r8
	movabsq	$3, %r9
	leaq	.L.str162, %r10
	movabsq	$73, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str149, %r14
	leaq	.L.str161, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -4512(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4520(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4528(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4536(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4544(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4552(%rbp)       # 8-byte Spill
	leaq	.L.str159, %rax
	.loc	1 71 0                  # feature_extraction.c:71:0
	subq	$16, %rsp
	movq	%rax, -4560(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4568(%rbp)       # 8-byte Spill
	movl	$.L.str149, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4576(%rbp)       # 8-byte Spill
	movl	$.L.str157, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4584(%rbp)       # 8-byte Spill
	movl	$71, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4592(%rbp)       # 8-byte Spill
	movl	$34, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4600(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -4608(%rbp)       # 8-byte Spill
	movq	-4592(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -4616(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-4608(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4620(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4576(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4632(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4584(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4640(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4600(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4648(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4620(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4656(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -4664(%rbp)       # 8-byte Spill
	movq	%r14, -4672(%rbp)       # 8-byte Spill
	movq	%r15, -4680(%rbp)       # 8-byte Spill
	movl	%r12d, -4684(%rbp)      # 4-byte Spill
	movq	%rbx, -4696(%rbp)       # 8-byte Spill
	movq	%r11, -4704(%rbp)       # 8-byte Spill
	movq	%r10, -4712(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %edi
	movq	%rdi, -4720(%rbp)       # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rdx, -4728(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-4728(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4736(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4720(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	movq	-4736(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4744(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	-4728(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4752(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-4584(%rbp), %r8        # 8-byte Reload
	movq	-4720(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str158, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4592(%rbp), %rdi       # 8-byte Reload
	movq	-4608(%rbp), %rsi       # 8-byte Reload
	movq	-4576(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4760(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4768(%rbp)       # 8-byte Spill
	movq	-4760(%rbp), %r8        # 8-byte Reload
	movl	-4620(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4728(%rbp), %rdi       # 8-byte Reload
	movq	-4744(%rbp), %rsi       # 8-byte Reload
	movq	-4736(%rbp), %rdx       # 8-byte Reload
	movq	-4728(%rbp), %rcx       # 8-byte Reload
	movq	-4584(%rbp), %r8        # 8-byte Reload
	movq	-4720(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4736(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4752(%rbp), %rdi       # 8-byte Reload
	movq	-4744(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4776(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4776(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4784(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4728(%rbp), %rcx       # 8-byte Reload
	movq	-4768(%rbp), %r8        # 8-byte Reload
	movq	-4720(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 72 0                  # feature_extraction.c:72:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str159, %eax
	movl	%eax, %ecx
	movl	$72, %eax
	movl	%eax, %edi
	movq	-4608(%rbp), %rsi       # 8-byte Reload
	movq	-4576(%rbp), %rdx       # 8-byte Reload
	movq	-4760(%rbp), %r8        # 8-byte Reload
	movl	-4620(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4728(%rbp), %rdi       # 8-byte Reload
	movq	-4744(%rbp), %rsi       # 8-byte Reload
	movq	-4736(%rbp), %rdx       # 8-byte Reload
	movq	-4728(%rbp), %rcx       # 8-byte Reload
	movq	-4584(%rbp), %r8        # 8-byte Reload
	movq	-4720(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4784(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4664(%rbp), %rdi       # 8-byte Reload
	movq	-4552(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4640(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4792(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4560(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:fft_stddev <- undef
.Ltmp83:
	#DEBUG_VALUE: channel <- 0
	.loc	1 73 0                  # feature_extraction.c:73:0
	subq	$16, %rsp
	movq	-4704(%rbp), %rdi       # 8-byte Reload
	movq	-4696(%rbp), %rsi       # 8-byte Reload
	movq	-4672(%rbp), %rdx       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4544(%rbp), %r8        # 8-byte Reload
	movl	-4684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4616(%rbp), %rdi       # 8-byte Reload
	movq	-4520(%rbp), %rsi       # 8-byte Reload
	movq	-4512(%rbp), %rdx       # 8-byte Reload
	movq	-4512(%rbp), %rcx       # 8-byte Reload
	movq	-4536(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4640(%rbp), %rdi       # 8-byte Reload
	movq	-4520(%rbp), %rsi       # 8-byte Reload
	movq	-4640(%rbp), %rcx       # 8-byte Reload
	movq	-4528(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4664(%rbp), %rdi       # 8-byte Reload
	movq	-4640(%rbp), %rsi       # 8-byte Reload
	movq	-4640(%rbp), %rcx       # 8-byte Reload
	movq	-4632(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4793(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4704(%rbp), %rdi       # 8-byte Reload
	movq	-4696(%rbp), %rsi       # 8-byte Reload
	movq	-4672(%rbp), %rdx       # 8-byte Reload
	movq	-4680(%rbp), %rcx       # 8-byte Reload
	movq	-4616(%rbp), %r8        # 8-byte Reload
	movl	-4684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4656(%rbp), %rdi       # 8-byte Reload
	movq	-4512(%rbp), %rsi       # 8-byte Reload
	movq	-4512(%rbp), %rdx       # 8-byte Reload
	movq	-4640(%rbp), %rcx       # 8-byte Reload
	movq	-4712(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4616(%rbp), %rdi       # 8-byte Reload
	movq	-4512(%rbp), %rsi       # 8-byte Reload
	movq	-4512(%rbp), %rdx       # 8-byte Reload
	movq	-4640(%rbp), %rcx       # 8-byte Reload
	movq	-4648(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4793(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4640(%rbp), %rdi       # 8-byte Reload
	movq	-4640(%rbp), %rsi       # 8-byte Reload
	movq	-4640(%rbp), %rcx       # 8-byte Reload
	movq	-4632(%rbp), %r8        # 8-byte Reload
	movq	-4512(%rbp), %r9        # 8-byte Reload
	movq	-4568(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4793(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4512(%rbp), %rcx       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-4736(%rbp), %rsi       # 8-byte Reload
	movq	-4776(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -4808(%rbp)       # 8-byte Spill
	movq	%rdx, -4816(%rbp)       # 8-byte Spill
	movq	%rsi, -4824(%rbp)       # 8-byte Spill
	movq	%rdi, -4832(%rbp)       # 8-byte Spill
	jne	.LBB1_17
	jmp	.LBB1_23
.Ltmp84:
.LBB1_16:                               # %.preheader95
	movq	-4504(%rbp), %rax       # 8-byte Reload
	movq	-4496(%rbp), %rcx       # 8-byte Reload
	movq	-4488(%rbp), %rdx       # 8-byte Reload
	movq	-4480(%rbp), %rsi       # 8-byte Reload
	movq	-4472(%rbp), %rdi       # 8-byte Reload
	movabsq	$0, %r8
	movabsq	$1, %r9
	leaq	.L.str170, %r10
	leaq	.L.str8, %r11
	movabsq	$2, %rbx
	leaq	.L.str163, %r14
	movabsq	$3, %r15
	leaq	.L.str172, %r12
	movabsq	$83, %r13
	movq	%rax, -4840(%rbp)       # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -4848(%rbp)       # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, -4856(%rbp)       # 8-byte Spill
	leaq	.L.str171, %rax
	movq	%rsi, -4864(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	leaq	.L.str165, %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, -4984(%rbp)       # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, -5016(%rbp)       # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	leaq	.L.str158, %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -5056(%rbp)       # 8-byte Spill
	leaq	.L.str154, %rax
	movq	%rax, -5064(%rbp)       # 8-byte Spill
	leaq	.L.str159, %rax
	.loc	1 83 0                  # feature_extraction.c:83:0
.Ltmp85:
	subq	$16, %rsp
	movq	%rax, -5072(%rbp)       # 8-byte Spill
	movq	-4968(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5080(%rbp)       # 8-byte Spill
.Ltmp86:
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5080]
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5080]
	movq	%rax, %rdi
	movq	-4848(%rbp), %rax       # 8-byte Reload
	movl	%esi, -5084(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4856(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -5096(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-5056(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5104(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4976(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5112(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-5084(%rbp), %eax       # 4-byte Reload
	movq	%r9, -5120(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -5128(%rbp)       # 8-byte Spill
	movq	%r15, -5136(%rbp)       # 8-byte Spill
	movq	%r12, -5144(%rbp)       # 8-byte Spill
	movq	%r13, -5152(%rbp)       # 8-byte Spill
	movq	%rbx, -5160(%rbp)       # 8-byte Spill
	movq	%r11, -5168(%rbp)       # 8-byte Spill
	movq	%r10, -5176(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5072(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5064(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5080(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5056(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4968(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-5032(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5048(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5040(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-4864(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5032(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4968(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-5008(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5024(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5016(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5008(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4968(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-4984(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5000(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4992(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4984(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4968(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4952(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4960(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4944(%rbp), %r8        # 8-byte Reload
	movq	-5120(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-4920(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4928(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-4936(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5152(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-5176(%rbp), %rcx       # 8-byte Reload
	movq	-4912(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-4888(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5112(%rbp), %rcx       # 8-byte Reload
	movq	-4904(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-4888(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-4896(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4880(%rbp), %rdi       # 8-byte Reload
	movq	-5120(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5176(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5177(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5152(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4856(%rbp), %rdx       # 8-byte Reload
	movq	-4872(%rbp), %rcx       # 8-byte Reload
	movq	-5160(%rbp), %r8        # 8-byte Reload
	movl	-5084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5136(%rbp), %rdi       # 8-byte Reload
	movq	-5112(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5144(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-5112(%rbp), %rsi       # 8-byte Reload
	movq	-5112(%rbp), %rdx       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5128(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5177(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-5120(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-5176(%rbp), %r8        # 8-byte Reload
	movq	-5112(%rbp), %r9        # 8-byte Reload
	movq	-5168(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5177(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-5112(%rbp), %rcx       # 8-byte Reload
	movq	-5104(%rbp), %rdx       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -5192(%rbp)       # 8-byte Spill
	movq	%rdx, -4816(%rbp)       # 8-byte Spill
	movq	%rsi, -4824(%rbp)       # 8-byte Spill
	movq	%rdi, -4832(%rbp)       # 8-byte Spill
	jne	.LBB1_20
	jmp	.LBB1_23
.Ltmp87:
.LBB1_17:                               # %.lr.ph103
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_18 Depth 2
	movq	-4808(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str180, %r8
	leaq	.L.str8, %rsi
	movabsq	$76, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str162, %r10
	leaq	.L.str179, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str178, %r13
	movq	%rax, -5200(%rbp)       # 8-byte Spill
	leaq	.L.str177, %rax
	movq	%rax, -5208(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5216(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5224(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -5232(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5240(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -5248(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -5256(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5264(%rbp)       # 8-byte Spill
	movabsq	$75, %rax
	movq	%rax, -5272(%rbp)       # 8-byte Spill
	leaq	.L.str176, %rax
	movq	%rax, -5280(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	leaq	.L.str158, %rax
	movq	%rax, -5296(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -5304(%rbp)       # 8-byte Spill
	leaq	.L.str165, %rax
	movq	%rax, -5312(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, -5328(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -5336(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 75 0                  # feature_extraction.c:75:0
.Ltmp88:
	subq	$16, %rsp
	movq	%rax, -5344(%rbp)       # 8-byte Spill
	movq	-5336(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5352(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5360(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -5368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5240(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5376(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5384(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -5392(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -5396(%rbp)      # 4-byte Spill
	vmovsd	%xmm0, -5408(%rbp)      # 8-byte Spill
	movq	%r15, -5416(%rbp)       # 8-byte Spill
	movq	%rbx, -5424(%rbp)       # 8-byte Spill
	movq	%r12, -5432(%rbp)       # 8-byte Spill
	movq	%r13, -5440(%rbp)       # 8-byte Spill
	movq	%r11, -5448(%rbp)       # 8-byte Spill
	movq	%r10, -5456(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5376(%rbp), %rdx       # 8-byte Reload
	movq	-5376(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5368(%rbp), %r9        # 8-byte Reload
	movq	-5328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5376(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5320(%rbp), %r8        # 8-byte Reload
	movq	-5368(%rbp), %r9        # 8-byte Reload
	movq	-5312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5416(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5200(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5272(%rbp), %rdi       # 8-byte Reload
	movq	-5392(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5264(%rbp), %rcx       # 8-byte Reload
	movq	-5304(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5200(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-4776(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5296(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5200(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4776(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-5416(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5368(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5464(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5264(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5272(%rbp), %rdi       # 8-byte Reload
	movq	-5392(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5280(%rbp), %rcx       # 8-byte Reload
	movq	-5288(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5464(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5264(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5408(%rbp), %xmm0      # 8-byte Reload
	movq	-5376(%rbp), %rdx       # 8-byte Reload
	movq	-5224(%rbp), %rcx       # 8-byte Reload
	movq	-5376(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-4776(%rbp), %rax       # 8-byte Reload
	movq	-5200(%rbp), %rcx       # 8-byte Reload
	vmovsd	-5408(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp89:
	#DEBUG_VALUE: i <- 0
	.loc	1 76 0                  # feature_extraction.c:76:0
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5392(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5208(%rbp), %rcx       # 8-byte Reload
	movq	-5256(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5248(%rbp), %rdx       # 8-byte Reload
	movq	-5376(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5200(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-5200(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-5416(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5368(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5472(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5208(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5392(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5440(%rbp), %rcx       # 8-byte Reload
	movq	-5232(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5216(%rbp), %rdx       # 8-byte Reload
	movq	-5376(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5208(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5472(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-5416(%rbp), %rdi       # 8-byte Reload
	movq	-5432(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5440(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5480(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5392(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5448(%rbp), %rcx       # 8-byte Reload
	movq	-5424(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5368(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5376(%rbp), %rdx       # 8-byte Reload
	movq	-5368(%rbp), %rcx       # 8-byte Reload
	movq	-5384(%rbp), %r8        # 8-byte Reload
	movq	-5376(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5376(%rbp), %rax       # 8-byte Reload
	.loc	1 78 0                  # feature_extraction.c:78:0
.Ltmp90:
	vmovsd	-5408(%rbp), %xmm0      # 8-byte Reload
	movq	%rax, -5488(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -5496(%rbp)      # 8-byte Spill
.LBB1_18:                               #   Parent Loop BB1_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-5496(%rbp), %xmm0      # 8-byte Reload
	movq	-5488(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str188, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str180, %r9
	movabsq	$3, %r10
	leaq	.L.str165, %r11
	movabsq	$76, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str189, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -5504(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -5512(%rbp)       # 8-byte Spill
	leaq	.L.str182, %rax
	movq	%rax, -5520(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -5528(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5536(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -5544(%rbp)       # 8-byte Spill
	leaq	.L.str181, %rax
	movq	%rax, -5552(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -5560(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, -5568(%rbp)       # 8-byte Spill
	leaq	.L.str187, %rax
	movq	%rax, -5576(%rbp)       # 8-byte Spill
	leaq	.L.str183, %rax
	movq	%rax, -5584(%rbp)       # 8-byte Spill
	movabsq	$78, %rax
	movq	%rax, -5592(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -5600(%rbp)       # 8-byte Spill
	leaq	.L.str186, %rax
	movq	%rax, -5608(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -5616(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, -5624(%rbp)       # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, -5632(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -5640(%rbp)       # 8-byte Spill
	leaq	.L.str178, %rax
	movq	%rax, -5648(%rbp)       # 8-byte Spill
	leaq	.L.str162, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -5656(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -5664(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -5672(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5680(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -5688(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-5552(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5696(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5664(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5704(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -5712(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -5720(%rbp)      # 8-byte Spill
	vmovsd	%xmm1, -5728(%rbp)      # 8-byte Spill
	movq	%r15, -5736(%rbp)       # 8-byte Spill
	movl	%r12d, -5740(%rbp)      # 4-byte Spill
	movq	%r13, -5752(%rbp)       # 8-byte Spill
	movq	%r14, -5760(%rbp)       # 8-byte Spill
	movq	%rbx, -5768(%rbp)       # 8-byte Spill
	movq	%r10, -5776(%rbp)       # 8-byte Spill
	movq	%r11, -5784(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5696(%rbp), %r9        # 8-byte Reload
	movq	-5712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5696(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5592(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5584(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5568(%rbp), %r8        # 8-byte Reload
	movq	-5696(%rbp), %r9        # 8-byte Reload
	movq	-5712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5728(%rbp), %xmm0      # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5536(%rbp), %rcx       # 8-byte Reload
	movq	-5696(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5720(%rbp), %xmm0      # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5584(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5592(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5632(%rbp), %rcx       # 8-byte Reload
	movq	-5560(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5480(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5648(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5504(%rbp), %rax       # 8-byte Reload
	movq	-5480(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5632(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5792(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5592(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5608(%rbp), %rcx       # 8-byte Reload
	movq	-5640(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5632(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5624(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5792(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-2944(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5696(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5800(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5608(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5592(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5576(%rbp), %rcx       # 8-byte Reload
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5800(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5608(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2944(%rbp), %rax       # 8-byte Reload
	movq	-5792(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -5808(%rbp)      # 8-byte Spill
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5576(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5672(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5592(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	movq	-5600(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5720(%rbp), %xmm0      # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5584(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5672(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5808(%rbp), %xmm0      # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5576(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5672(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-5808(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-5720(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp91:
	.loc	1 76 0                  # feature_extraction.c:76:0
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5672(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -5816(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5768(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5520(%rbp), %rcx       # 8-byte Reload
	movq	-5560(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5504(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5824(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5768(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5688(%rbp), %rcx       # 8-byte Reload
	movq	-5544(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5528(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5512(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5824(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5696(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5688(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5825(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5768(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5712(%rbp), %rdx       # 8-byte Reload
	movq	-5736(%rbp), %rcx       # 8-byte Reload
	movq	-5704(%rbp), %r8        # 8-byte Reload
	movl	-5740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5776(%rbp), %rdi       # 8-byte Reload
	movq	-5680(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5784(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5704(%rbp), %rdi       # 8-byte Reload
	movq	-5680(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5712(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5825(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5696(%rbp), %rdi       # 8-byte Reload
	movq	-5696(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rcx       # 8-byte Reload
	movq	-5688(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5825(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	.loc	1 78 0                  # feature_extraction.c:78:0
.Ltmp92:
	vmovsd	-5816(%rbp), %xmm0      # 8-byte Reload
.Ltmp93:
	.loc	1 76 0                  # feature_extraction.c:76:0
	movq	%rcx, -5488(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -5496(%rbp)      # 8-byte Spill
	jne	.LBB1_19
	jmp	.LBB1_18
.Ltmp94:
.LBB1_19:                               #   in Loop: Header=BB1_17 Depth=1
	movabsq	$1, %rax
	leaq	.L.str193, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str162, %r8
	movabsq	$3, %r9
	leaq	.L.str156, %r10
	movabsq	$73, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str165, %r14
	leaq	.L.str194, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -5840(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5848(%rbp)       # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, -5856(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -5864(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -5872(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -5880(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5888(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -5896(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5904(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5912(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -5920(%rbp)       # 8-byte Spill
	leaq	.L.str190, %rax
	movq	%rax, -5928(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5936(%rbp)       # 8-byte Spill
	movabsq	$80, %rax
	movq	%rax, -5944(%rbp)       # 8-byte Spill
	leaq	.L.str191, %rax
	movq	%rax, -5952(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -5960(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	vmovsd	.LCPI1_0, %xmm0
	movq	%rax, -5968(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, -5976(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 80 0                  # feature_extraction.c:80:0
	subq	$16, %rsp
	movq	%rax, -5984(%rbp)       # 8-byte Spill
	movq	-5944(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5992(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6000(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -6008(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-5928(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6016(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6024(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6032(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -6040(%rbp)       # 8-byte Spill
	movl	%r12d, -6044(%rbp)      # 4-byte Spill
	movq	%r13, -6056(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6064(%rbp)      # 8-byte Spill
	movq	%r14, -6072(%rbp)       # 8-byte Spill
	movq	%rbx, -6080(%rbp)       # 8-byte Spill
	movq	%r10, -6088(%rbp)       # 8-byte Spill
	movq	%r11, -6096(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-5992(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6064(%rbp), %xmm0      # 8-byte Reload
	movq	-6008(%rbp), %rdx       # 8-byte Reload
	movq	-5912(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movq	-6000(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5816(%rbp), %xmm0      # 8-byte Reload
	movq	-5840(%rbp), %rdx       # 8-byte Reload
	movq	-5976(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movq	-6000(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-5816(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6064(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-6056(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-5840(%rbp), %rdx       # 8-byte Reload
	movq	-5928(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movq	-6000(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6104(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5944(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6072(%rbp), %rdx       # 8-byte Reload
	movq	-5952(%rbp), %rcx       # 8-byte Reload
	movq	-5960(%rbp), %r8        # 8-byte Reload
	movl	-6044(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5992(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	movq	-5464(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5936(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6104(%rbp), %xmm0      # 8-byte Reload
	movq	-5840(%rbp), %rdx       # 8-byte Reload
	movq	-5928(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movq	-6000(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5464(%rbp), %rax       # 8-byte Reload
	vmovsd	-6104(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp95:
	.loc	1 73 0                  # feature_extraction.c:73:0
	subq	$16, %rsp
	movq	-6096(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6072(%rbp), %rdx       # 8-byte Reload
	movq	-5888(%rbp), %rcx       # 8-byte Reload
	movq	-5920(%rbp), %r8        # 8-byte Reload
	movl	-6044(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5992(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rdx       # 8-byte Reload
	movq	-6008(%rbp), %rcx       # 8-byte Reload
	movq	-5912(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	movq	-5200(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5904(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5200(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-6056(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5888(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6112(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6096(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6072(%rbp), %rdx       # 8-byte Reload
	movq	-5856(%rbp), %rcx       # 8-byte Reload
	movq	-5896(%rbp), %r8        # 8-byte Reload
	movl	-6044(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5880(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5888(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6112(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6056(%rbp), %rdi       # 8-byte Reload
	movq	-5848(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5856(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -6116(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6096(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6072(%rbp), %rdx       # 8-byte Reload
	movq	-6016(%rbp), %rcx       # 8-byte Reload
	movq	-5872(%rbp), %r8        # 8-byte Reload
	movl	-6044(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5992(%rbp), %rdi       # 8-byte Reload
	movq	-5848(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5864(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6116(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5848(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5856(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6116(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-6056(%rbp), %rdi       # 8-byte Reload
	movq	-5840(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6016(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6117(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6096(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6072(%rbp), %rdx       # 8-byte Reload
	movq	-6040(%rbp), %rcx       # 8-byte Reload
	movq	-5992(%rbp), %r8        # 8-byte Reload
	movl	-6044(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6032(%rbp), %rdi       # 8-byte Reload
	movq	-6008(%rbp), %rsi       # 8-byte Reload
	movq	-6008(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6088(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5992(%rbp), %rdi       # 8-byte Reload
	movq	-6008(%rbp), %rsi       # 8-byte Reload
	movq	-6008(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6024(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6117(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5840(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6016(%rbp), %r8        # 8-byte Reload
	movq	-6008(%rbp), %r9        # 8-byte Reload
	movq	-6000(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6117(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4792(%rbp), %rcx       # 8-byte Reload
	movq	-4776(%rbp), %rdx       # 8-byte Reload
	movq	-4736(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdi       # 8-byte Reload
	movq	-2944(%rbp), %r8        # 8-byte Reload
	movq	-6112(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4472(%rbp)       # 8-byte Spill
	movq	%rdx, -4480(%rbp)       # 8-byte Spill
	movq	%rsi, -4488(%rbp)       # 8-byte Spill
	movq	%rdi, -4496(%rbp)       # 8-byte Spill
	movq	%r8, -4504(%rbp)        # 8-byte Spill
	movq	%r9, -4808(%rbp)        # 8-byte Spill
	jne	.LBB1_16
	jmp	.LBB1_17
.Ltmp96:
.LBB1_20:                               # %.preheader92
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_21 Depth 2
	movq	-5192(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str203, %r8
	leaq	.L.str8, %rsi
	movabsq	$87, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str172, %r10
	leaq	.L.str202, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str201, %r13
	movq	%rax, -6128(%rbp)       # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, -6136(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6144(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6152(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -6160(%rbp)       # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, -6168(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -6176(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -6184(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -6192(%rbp)       # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, -6200(%rbp)       # 8-byte Spill
	movabsq	$89, %rax
	movq	%rax, -6208(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -6216(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -6224(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6232(%rbp)       # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, -6240(%rbp)       # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, -6248(%rbp)       # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, -6256(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -6264(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 89 0                  # feature_extraction.c:89:0
.Ltmp97:
	subq	$16, %rsp
	movq	%rax, -6272(%rbp)       # 8-byte Spill
	movq	-6264(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6280(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6288(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -6296(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6168(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6304(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6312(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6320(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -6324(%rbp)      # 4-byte Spill
	vmovsd	%xmm0, -6336(%rbp)      # 8-byte Spill
	movq	%r15, -6344(%rbp)       # 8-byte Spill
	movq	%rbx, -6352(%rbp)       # 8-byte Spill
	movq	%r12, -6360(%rbp)       # 8-byte Spill
	movq	%r13, -6368(%rbp)       # 8-byte Spill
	movq	%r11, -6376(%rbp)       # 8-byte Spill
	movq	%r10, -6384(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6352(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6304(%rbp), %rdx       # 8-byte Reload
	movq	-6304(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6296(%rbp), %r9        # 8-byte Reload
	movq	-6256(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6304(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6248(%rbp), %r8        # 8-byte Reload
	movq	-6296(%rbp), %r9        # 8-byte Reload
	movq	-6240(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6344(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6168(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6240(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6208(%rbp), %rdi       # 8-byte Reload
	movq	-6320(%rbp), %rsi       # 8-byte Reload
	movq	-6384(%rbp), %rdx       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6232(%rbp), %r8        # 8-byte Reload
	movl	-6324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6352(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6168(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-4864(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6224(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6128(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4864(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-6344(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6296(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6392(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6200(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6208(%rbp), %rdi       # 8-byte Reload
	movq	-6320(%rbp), %rsi       # 8-byte Reload
	movq	-6384(%rbp), %rdx       # 8-byte Reload
	movq	-6192(%rbp), %rcx       # 8-byte Reload
	movq	-6216(%rbp), %r8        # 8-byte Reload
	movl	-6324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6392(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6200(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4864(%rbp), %rax       # 8-byte Reload
	movq	-6128(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp98:
	.loc	1 87 0                  # feature_extraction.c:87:0
	movq	-6344(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -6400(%rbp)      # 8-byte Spill
	movq	-6296(%rbp), %rdx       # 8-byte Reload
	movq	-6192(%rbp), %rcx       # 8-byte Reload
	movq	-6304(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6320(%rbp), %rsi       # 8-byte Reload
	movq	-6384(%rbp), %rdx       # 8-byte Reload
	movq	-6136(%rbp), %rcx       # 8-byte Reload
	movq	-6184(%rbp), %r8        # 8-byte Reload
	movl	-6324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6352(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6176(%rbp), %rdx       # 8-byte Reload
	movq	-6304(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6168(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-6128(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-6344(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6296(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6408(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6136(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6320(%rbp), %rsi       # 8-byte Reload
	movq	-6384(%rbp), %rdx       # 8-byte Reload
	movq	-6368(%rbp), %rcx       # 8-byte Reload
	movq	-6160(%rbp), %r8        # 8-byte Reload
	movl	-6324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6352(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6144(%rbp), %rdx       # 8-byte Reload
	movq	-6304(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	-6408(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6136(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6408(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-6344(%rbp), %rdi       # 8-byte Reload
	movq	-6360(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6368(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6416(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6320(%rbp), %rsi       # 8-byte Reload
	movq	-6384(%rbp), %rdx       # 8-byte Reload
	movq	-6376(%rbp), %rcx       # 8-byte Reload
	movq	-6352(%rbp), %r8        # 8-byte Reload
	movl	-6324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6296(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6304(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6312(%rbp), %r8        # 8-byte Reload
	movq	-6304(%rbp), %r9        # 8-byte Reload
	movq	-6288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6304(%rbp), %rax       # 8-byte Reload
	vmovsd	-6336(%rbp), %xmm0      # 8-byte Reload
	movq	%rax, -6424(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6432(%rbp)      # 8-byte Spill
.LBB1_21:                               #   Parent Loop BB1_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-6432(%rbp), %xmm0      # 8-byte Reload
	movq	-6424(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str213, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str203, %r9
	movabsq	$3, %r10
	leaq	.L.str197, %r11
	movabsq	$87, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str214, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -6440(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -6448(%rbp)       # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, -6456(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -6464(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6472(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -6480(%rbp)       # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, -6488(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -6496(%rbp)       # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, -6504(%rbp)       # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, -6512(%rbp)       # 8-byte Spill
	leaq	.L.str212, %rax
	movq	%rax, -6520(%rbp)       # 8-byte Spill
	movabsq	$89, %rax
	movq	%rax, -6528(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -6536(%rbp)       # 8-byte Spill
	leaq	.L.str211, %rax
	movq	%rax, -6544(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -6552(%rbp)       # 8-byte Spill
	leaq	.L.str210, %rax
	movq	%rax, -6560(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -6568(%rbp)       # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -6576(%rbp)       # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, -6584(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -6592(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -6600(%rbp)       # 8-byte Spill
	leaq	.L.str208, %rax
	movq	%rax, -6608(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6616(%rbp)       # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, -6624(%rbp)       # 8-byte Spill
	leaq	.L.str172, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -6632(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -6640(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 89 0                  # feature_extraction.c:89:0
.Ltmp99:
	subq	$16, %rsp
	movq	%rax, -6648(%rbp)       # 8-byte Spill
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6656(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6664(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -6672(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-6488(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6680(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6648(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6688(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6696(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -6704(%rbp)      # 8-byte Spill
	movq	%r15, -6712(%rbp)       # 8-byte Spill
	movl	%r12d, -6716(%rbp)      # 4-byte Spill
	movq	%r13, -6728(%rbp)       # 8-byte Spill
	vmovsd	%xmm1, -6736(%rbp)      # 8-byte Spill
	movq	%r14, -6744(%rbp)       # 8-byte Spill
	movq	%rbx, -6752(%rbp)       # 8-byte Spill
	movq	%r10, -6760(%rbp)       # 8-byte Spill
	movq	%r11, -6768(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6680(%rbp), %r9        # 8-byte Reload
	movq	-6696(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6680(%rbp), %r9        # 8-byte Reload
	movq	-6632(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6440(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6488(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6632(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6640(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6504(%rbp), %r8        # 8-byte Reload
	movq	-6680(%rbp), %r9        # 8-byte Reload
	movq	-6696(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6736(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6472(%rbp), %rcx       # 8-byte Reload
	movq	-6680(%rbp), %r8        # 8-byte Reload
	movq	-6632(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6704(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6632(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6608(%rbp), %rcx       # 8-byte Reload
	movq	-6496(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6416(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6624(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6440(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6488(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6440(%rbp), %rax       # 8-byte Reload
	movq	-6416(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6608(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6776(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6584(%rbp), %rcx       # 8-byte Reload
	movq	-6616(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6776(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6608(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6600(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6776(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4840(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6680(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6784(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6584(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6560(%rbp), %rcx       # 8-byte Reload
	movq	-6592(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6784(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6584(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4840(%rbp), %rax       # 8-byte Reload
	movq	-6776(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -6792(%rbp)      # 8-byte Spill
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6560(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6576(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6400(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6568(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6792(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6560(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6792(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6400(%rbp), %xmm1      # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6800(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6520(%rbp), %rcx       # 8-byte Reload
	movq	-6552(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6520(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -6808(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6504(%rbp), %rcx       # 8-byte Reload
	movq	-6536(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6808(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6520(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6704(%rbp), %xmm0      # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6704(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6808(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6504(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6656(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6816(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp100:
	#DEBUG_VALUE: stddev_temp <- [RBP+-6816]
	.loc	1 87 0                  # feature_extraction.c:87:0
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6456(%rbp), %rcx       # 8-byte Reload
	movq	-6496(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6440(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6488(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6440(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6824(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6672(%rbp), %rcx       # 8-byte Reload
	movq	-6480(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6464(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6448(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6824(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6728(%rbp), %rdi       # 8-byte Reload
	movq	-6680(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6825(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6744(%rbp), %rsi       # 8-byte Reload
	movq	-6696(%rbp), %rdx       # 8-byte Reload
	movq	-6712(%rbp), %rcx       # 8-byte Reload
	movq	-6688(%rbp), %r8        # 8-byte Reload
	movl	-6716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6760(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6768(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6688(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6696(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6825(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6680(%rbp), %rdi       # 8-byte Reload
	movq	-6680(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rcx       # 8-byte Reload
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6825(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	vmovsd	-6816(%rbp), %xmm0      # 8-byte Reload
	movq	%rcx, -6424(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6432(%rbp)      # 8-byte Spill
	jne	.LBB1_22
	jmp	.LBB1_21
.Ltmp101:
.LBB1_22:                               #   in Loop: Header=BB1_20 Depth=1
	movabsq	$1, %rax
	leaq	.L.str220, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str172, %r8
	movabsq	$3, %r9
	leaq	.L.str222, %r10
	movabsq	$83, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str197, %r14
	leaq	.L.str221, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -6840(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6848(%rbp)       # 8-byte Spill
	leaq	.L.str219, %rax
	movq	%rax, -6856(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -6864(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -6872(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -6880(%rbp)       # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, -6888(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -6896(%rbp)       # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, -6904(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6912(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -6920(%rbp)       # 8-byte Spill
	leaq	.L.str216, %rax
	movq	%rax, -6928(%rbp)       # 8-byte Spill
	leaq	.L.str217, %rax
	movq	%rax, -6936(%rbp)       # 8-byte Spill
	movabsq	$93, %rax
	movq	%rax, -6944(%rbp)       # 8-byte Spill
	leaq	.L.str218, %rax
	movq	%rax, -6952(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -6960(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -6968(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6976(%rbp)       # 8-byte Spill
	leaq	.L.str215, %rax
	movq	%rax, -6984(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -6992(%rbp)       # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -7000(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	vmovsd	.LCPI1_1, %xmm0
	movq	%rax, -7008(%rbp)       # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, -7016(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 93 0                  # feature_extraction.c:93:0
	subq	$16, %rsp
	movq	%rax, -7024(%rbp)       # 8-byte Spill
	movq	-6944(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7032(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -7040(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -7048(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-6984(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7056(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7064(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -7072(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -7080(%rbp)       # 8-byte Spill
	movl	%r12d, -7084(%rbp)      # 4-byte Spill
	movq	%r13, -7096(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -7104(%rbp)      # 8-byte Spill
	movq	%r14, -7112(%rbp)       # 8-byte Spill
	movq	%rbx, -7120(%rbp)       # 8-byte Spill
	movq	%r10, -7128(%rbp)       # 8-byte Spill
	movq	%r11, -7136(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7104(%rbp), %xmm0      # 8-byte Reload
	movq	-7048(%rbp), %rdx       # 8-byte Reload
	movq	-6912(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6816(%rbp), %xmm0      # 8-byte Reload
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-7016(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6816(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-7104(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-6984(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -7144(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6944(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-6928(%rbp), %rcx       # 8-byte Reload
	movq	-7008(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6992(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-7000(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7144(%rbp), %xmm0      # 8-byte Reload
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-6984(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-7144(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -7152(%rbp)      # 8-byte Spill
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-6928(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6944(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-6936(%rbp), %rcx       # 8-byte Reload
	movq	-6976(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6904(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-5080(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6968(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6128(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-5080(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6840(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7160(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6936(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6944(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-6952(%rbp), %rcx       # 8-byte Reload
	movq	-6960(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-7160(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6936(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7152(%rbp), %xmm0      # 8-byte Reload
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-6928(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7040(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5080(%rbp), %rax       # 8-byte Reload
	movq	-6128(%rbp), %rcx       # 8-byte Reload
	vmovsd	-7152(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp102:
	.loc	1 83 0                  # feature_extraction.c:83:0
	subq	$16, %rsp
	movq	-7136(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-6888(%rbp), %rcx       # 8-byte Reload
	movq	-6920(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rdx       # 8-byte Reload
	movq	-7048(%rbp), %rcx       # 8-byte Reload
	movq	-6912(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6904(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6128(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6888(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -7168(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7136(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-6856(%rbp), %rcx       # 8-byte Reload
	movq	-6896(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-7168(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6888(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7168(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6848(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6856(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -7172(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7136(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-7056(%rbp), %rcx       # 8-byte Reload
	movq	-6872(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-6848(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6864(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7172(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6848(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6856(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7172(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-7096(%rbp), %rdi       # 8-byte Reload
	movq	-6840(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-7056(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7173(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7136(%rbp), %rdi       # 8-byte Reload
	movq	-7120(%rbp), %rsi       # 8-byte Reload
	movq	-7112(%rbp), %rdx       # 8-byte Reload
	movq	-7080(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movl	-7084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7072(%rbp), %rdi       # 8-byte Reload
	movq	-7048(%rbp), %rsi       # 8-byte Reload
	movq	-7048(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-7128(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7032(%rbp), %rdi       # 8-byte Reload
	movq	-7048(%rbp), %rsi       # 8-byte Reload
	movq	-7048(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-7064(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7173(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6840(%rbp), %rdi       # 8-byte Reload
	movq	-6840(%rbp), %rsi       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-7056(%rbp), %r8        # 8-byte Reload
	movq	-7048(%rbp), %r9        # 8-byte Reload
	movq	-7040(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7173(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-7168(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -5192(%rbp)       # 8-byte Spill
	jne	.LBB1_24
	jmp	.LBB1_20
.Ltmp103:
.LBB1_23:                               # %._crit_edge97.thread
	movq	-4832(%rbp), %rax       # 8-byte Reload
	movq	-4824(%rbp), %rcx       # 8-byte Reload
	movq	-4816(%rbp), %rdx       # 8-byte Reload
	movabsq	$1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str228, %r8
	leaq	.L.str8, %r9
	movabsq	$96, %r10
	leaq	.L.str50, %r11
	leaq	.L.str163, %rbx
	leaq	.L.str227, %r14
	movabsq	$2, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -7184(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -7192(%rbp)       # 8-byte Spill
	leaq	.L.str226, %rax
	.loc	1 95 0                  # feature_extraction.c:95:0
	subq	$16, %rsp
	movq	%rax, -7200(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -7208(%rbp)       # 8-byte Spill
	movl	$.L.str163, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7216(%rbp)       # 8-byte Spill
	movl	$.L.str223, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7224(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -7232(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -7240(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -7248(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -7256(%rbp)       # 8-byte Spill
	movq	-7232(%rbp), %rax       # 8-byte Reload
	movl	%esi, -7260(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-7216(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7272(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7224(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7280(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7240(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7288(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7260(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7296(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -7304(%rbp)       # 8-byte Spill
	movq	%r14, -7312(%rbp)       # 8-byte Spill
	movq	%r15, -7320(%rbp)       # 8-byte Spill
	movl	%r12d, -7324(%rbp)      # 4-byte Spill
	movq	%rbx, -7336(%rbp)       # 8-byte Spill
	movq	%r11, -7344(%rbp)       # 8-byte Spill
	movq	%r10, -7352(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str149, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -7360(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -7368(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7368(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7376(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7360(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -7384(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$.L.str168, %eax
	movl	%eax, %r8d
	movq	-7360(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7368(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7272(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7392(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7224(%rbp), %r8        # 8-byte Reload
	movq	-7368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str224, %eax
	movl	%eax, %ecx
	movq	-7256(%rbp), %rdi       # 8-byte Reload
	movq	-7232(%rbp), %rsi       # 8-byte Reload
	movq	-7216(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7400(%rbp)       # 8-byte Spill
	movq	-7240(%rbp), %r8        # 8-byte Reload
	movl	-7260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str149, (%rcx)
	movl	$.L.str157, %eax
	movl	%eax, %r8d
	movq	-7384(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7368(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-7360(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7368(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movq	-7392(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7280(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7400(%rbp), %r8        # 8-byte Reload
	movq	-7368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str225, %eax
	movl	%eax, %ecx
	movq	-7256(%rbp), %rdi       # 8-byte Reload
	movq	-7232(%rbp), %rsi       # 8-byte Reload
	movq	-7216(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7408(%rbp)       # 8-byte Spill
	movq	-7240(%rbp), %r8        # 8-byte Reload
	movl	-7260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str149, (%rcx)
	movl	$.L.str158, %eax
	movl	%eax, %r8d
	movq	-7384(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7368(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$.L.str166, %eax
	movl	%eax, %r8d
	movq	-7360(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7368(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movq	-7392(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7184(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7408(%rbp), %r8        # 8-byte Reload
	movq	-7368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str226, %eax
	movl	%eax, %ecx
	movl	$95, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-7232(%rbp), %rsi       # 8-byte Reload
	movq	-7216(%rbp), %rdx       # 8-byte Reload
	movl	-7260(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7360(%rbp), %rdi       # 8-byte Reload
	movq	-7376(%rbp), %rsi       # 8-byte Reload
	movq	-7272(%rbp), %rdx       # 8-byte Reload
	movq	-7360(%rbp), %rcx       # 8-byte Reload
	movq	-7224(%rbp), %r8        # 8-byte Reload
	movq	-7368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7272(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7304(%rbp), %rdi       # 8-byte Reload
	movq	-7192(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7416(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7416(%rbp), %rdx       # 8-byte Reload
	movq	-7208(%rbp), %rcx       # 8-byte Reload
	movq	-7200(%rbp), %r8        # 8-byte Reload
	movq	-7248(%rbp), %r9        # 8-byte Reload
	movq	-7296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp104:
	#DEBUG_VALUE: process_data:scaled_fft_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	-7352(%rbp), %rdi       # 8-byte Reload
	movq	-7344(%rbp), %rsi       # 8-byte Reload
	movq	-7336(%rbp), %rdx       # 8-byte Reload
	movq	-7312(%rbp), %rcx       # 8-byte Reload
	movq	-7320(%rbp), %r8        # 8-byte Reload
	movl	-7324(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7208(%rbp), %rdi       # 8-byte Reload
	movq	-7248(%rbp), %rsi       # 8-byte Reload
	movq	-7248(%rbp), %rdx       # 8-byte Reload
	movq	-7208(%rbp), %rcx       # 8-byte Reload
	movq	-7288(%rbp), %r8        # 8-byte Reload
	movq	-7248(%rbp), %r9        # 8-byte Reload
	movq	-7296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7416(%rbp), %rcx       # 8-byte Reload
	movq	-7280(%rbp), %rdx       # 8-byte Reload
	movq	-7184(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -7424(%rbp)       # 8-byte Spill
	movq	%rdx, -7432(%rbp)       # 8-byte Spill
	movq	%rsi, -7440(%rbp)       # 8-byte Spill
	jmp	.LBB1_31
.Ltmp105:
.LBB1_24:                               # %._crit_edge97
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str230, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str233, %r8
	movabsq	$3, %r9
	leaq	.L.str232, %r10
	movabsq	$96, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str222, %r14
	leaq	.L.str231, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -7448(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7456(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -7464(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7472(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -7480(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -7488(%rbp)       # 8-byte Spill
	leaq	.L.str229, %rax
	.loc	1 95 0                  # feature_extraction.c:95:0
	subq	$16, %rsp
	movq	%rax, -7496(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -7504(%rbp)       # 8-byte Spill
	movl	$.L.str222, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7512(%rbp)       # 8-byte Spill
	movl	$.L.str229, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7520(%rbp)       # 8-byte Spill
	movl	$95, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7528(%rbp)       # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7536(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -7544(%rbp)       # 8-byte Spill
	movq	-7528(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7552(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-7544(%rbp), %rax       # 8-byte Reload
	movl	%esi, -7556(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-7512(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7568(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7520(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7576(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7536(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7584(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7556(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7592(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -7600(%rbp)       # 8-byte Spill
	movq	%r14, -7608(%rbp)       # 8-byte Spill
	movq	%r15, -7616(%rbp)       # 8-byte Spill
	movl	%r12d, -7620(%rbp)      # 4-byte Spill
	movq	%rbx, -7632(%rbp)       # 8-byte Spill
	movq	%r11, -7640(%rbp)       # 8-byte Spill
	movq	%r10, -7648(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str168, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-5104(%rbp), %rdx       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7600(%rbp), %rdi       # 8-byte Reload
	movq	-7488(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7656(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7656(%rbp), %rdx       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7496(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:scaled_fft_data <- undef
.Ltmp106:
	#DEBUG_VALUE: channel <- 0
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	-7640(%rbp), %rdi       # 8-byte Reload
	movq	-7632(%rbp), %rsi       # 8-byte Reload
	movq	-7608(%rbp), %rdx       # 8-byte Reload
	movq	-7568(%rbp), %rcx       # 8-byte Reload
	movq	-7480(%rbp), %r8        # 8-byte Reload
	movl	-7620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7552(%rbp), %rdi       # 8-byte Reload
	movq	-7456(%rbp), %rsi       # 8-byte Reload
	movq	-7448(%rbp), %rdx       # 8-byte Reload
	movq	-7448(%rbp), %rcx       # 8-byte Reload
	movq	-7472(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7576(%rbp), %rdi       # 8-byte Reload
	movq	-7456(%rbp), %rsi       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7464(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7600(%rbp), %rdi       # 8-byte Reload
	movq	-7576(%rbp), %rsi       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7568(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7657(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7640(%rbp), %rdi       # 8-byte Reload
	movq	-7632(%rbp), %rsi       # 8-byte Reload
	movq	-7608(%rbp), %rdx       # 8-byte Reload
	movq	-7616(%rbp), %rcx       # 8-byte Reload
	movq	-7552(%rbp), %r8        # 8-byte Reload
	movl	-7620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7592(%rbp), %rdi       # 8-byte Reload
	movq	-7448(%rbp), %rsi       # 8-byte Reload
	movq	-7448(%rbp), %rdx       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7648(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7552(%rbp), %rdi       # 8-byte Reload
	movq	-7448(%rbp), %rsi       # 8-byte Reload
	movq	-7448(%rbp), %rdx       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7584(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7657(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7576(%rbp), %rdi       # 8-byte Reload
	movq	-7576(%rbp), %rsi       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7568(%rbp), %r8        # 8-byte Reload
	movq	-7448(%rbp), %r9        # 8-byte Reload
	movq	-7504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7657(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-7448(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -7672(%rbp)       # 8-byte Spill
	jne	.LBB1_26
.Ltmp107:
# BB#25:                                # %._crit_edge91.thread
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str238, %r8
	leaq	.L.str8, %rdx
	movabsq	$109, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str233, %r9
	leaq	.L.str237, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str236, %r12
	.loc	1 108 0                 # feature_extraction.c:108:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -7680(%rbp)       # 8-byte Spill
	movl	$.L.str233, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7688(%rbp)       # 8-byte Spill
	movl	$.L.str234, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7696(%rbp)       # 8-byte Spill
	movl	$108, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7704(%rbp)       # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7712(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -7720(%rbp)       # 8-byte Spill
	movq	-7704(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7728(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -7732(%rbp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	-7688(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7744(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7696(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7752(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7712(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7760(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7732(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7768(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -7776(%rbp)       # 8-byte Spill
	movl	%ebx, -7780(%rbp)       # 4-byte Spill
	movq	%r15, -7792(%rbp)       # 8-byte Spill
	movq	%r12, -7800(%rbp)       # 8-byte Spill
	movq	%r13, -7808(%rbp)       # 8-byte Spill
	movq	%r11, -7816(%rbp)       # 8-byte Spill
	movq	%r10, -7824(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %edx
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %r8d
	xorl	%r9d, %r9d
	movl	%r9d, %r10d
	movq	%rsi, -7832(%rbp)       # 8-byte Spill
	movq	%rdx, -7840(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -7848(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7840(%rbp), %r11       # 8-byte Reload
	movq	%r8, -7856(%rbp)        # 8-byte Spill
	movq	%r11, %r8
	movq	%r10, %r9
	movq	%r10, -7864(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7856(%rbp), %rdi       # 8-byte Reload
	movq	-7832(%rbp), %rsi       # 8-byte Reload
	movq	-7848(%rbp), %rdx       # 8-byte Reload
	movq	-7856(%rbp), %rcx       # 8-byte Reload
	movq	-7840(%rbp), %r8        # 8-byte Reload
	movq	-7864(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	%eax, %eax
	movl	%eax, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	-7832(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -7872(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-7856(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7880(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7696(%rbp), %r8        # 8-byte Reload
	movq	-7864(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7808(%rbp), %rsi       # 8-byte Reload
	movq	-7688(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7888(%rbp)       # 8-byte Spill
	movl	-7732(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7856(%rbp), %rdi       # 8-byte Reload
	movq	-7832(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7856(%rbp), %rcx       # 8-byte Reload
	movq	-7696(%rbp), %r8        # 8-byte Reload
	movq	-7864(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-7872(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rsi
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7856(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7896(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7888(%rbp), %r8        # 8-byte Reload
	movq	-7864(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str236, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7808(%rbp), %rsi       # 8-byte Reload
	movq	-7688(%rbp), %rdx       # 8-byte Reload
	movl	-7732(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7856(%rbp), %rdi       # 8-byte Reload
	movq	-7896(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7856(%rbp), %rcx       # 8-byte Reload
	movq	-7888(%rbp), %r8        # 8-byte Reload
	movq	-7864(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7880(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7776(%rbp), %rdi       # 8-byte Reload
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7904(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7904(%rbp), %rdx       # 8-byte Reload
	movq	-7720(%rbp), %rcx       # 8-byte Reload
	movq	-7800(%rbp), %r8        # 8-byte Reload
	movq	-7752(%rbp), %r9        # 8-byte Reload
	movq	-7744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp108:
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- undef
	#DEBUG_VALUE: i <- 0
	.loc	1 109 0                 # feature_extraction.c:109:0
	subq	$16, %rsp
	movq	-7728(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7768(%rbp), %rdx       # 8-byte Reload
	movq	-7824(%rbp), %rcx       # 8-byte Reload
	movq	-7816(%rbp), %r8        # 8-byte Reload
	movl	-7780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7720(%rbp), %rdi       # 8-byte Reload
	movq	-7752(%rbp), %rsi       # 8-byte Reload
	movq	-7752(%rbp), %rdx       # 8-byte Reload
	movq	-7720(%rbp), %rcx       # 8-byte Reload
	movq	-7760(%rbp), %r8        # 8-byte Reload
	movq	-7752(%rbp), %r9        # 8-byte Reload
	movq	-7744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7904(%rbp), %rcx       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -7912(%rbp)       # 8-byte Spill
	movq	%rdx, -7920(%rbp)       # 8-byte Spill
	movq	%rsi, -7928(%rbp)       # 8-byte Spill
	jmp	.LBB1_37
.Ltmp109:
.LBB1_26:                               # %.preheader88
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_27 Depth 2
	movq	-7672(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str249, %r8
	leaq	.L.str8, %rsi
	movabsq	$98, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str232, %r10
	leaq	.L.str248, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str247, %r13
	movq	%rax, -7936(%rbp)       # 8-byte Spill
	leaq	.L.str246, %rax
	movq	%rax, -7944(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7952(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7960(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -7968(%rbp)       # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, -7976(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -7984(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -7992(%rbp)       # 8-byte Spill
	leaq	.L.str245, %rax
	movq	%rax, -8000(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -8008(%rbp)       # 8-byte Spill
	movabsq	$102, %rax
	movq	%rax, -8016(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -8024(%rbp)       # 8-byte Spill
	leaq	.L.str244, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -8032(%rbp)       # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, -8040(%rbp)       # 8-byte Spill
	movabsq	$100, %rax
	movq	%rax, -8048(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -8056(%rbp)       # 8-byte Spill
	leaq	.L.str242, %rax
	movq	%rax, -8064(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -8072(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -8080(%rbp)       # 8-byte Spill
	leaq	.L.str241, %rax
	movq	%rax, -8088(%rbp)       # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, -8096(%rbp)       # 8-byte Spill
	leaq	.L.str222, %rax
	movq	%rax, -8104(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -8112(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 100 0                 # feature_extraction.c:100:0
.Ltmp110:
	subq	$16, %rsp
	movq	%rax, -8120(%rbp)       # 8-byte Spill
	movq	-8112(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -8128(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -8136(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -8144(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7976(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8152(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8120(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8160(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8168(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -8176(%rbp)       # 8-byte Spill
	movq	%r12, -8184(%rbp)       # 8-byte Spill
	movl	%r14d, -8188(%rbp)      # 4-byte Spill
	movq	%r13, -8200(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -8208(%rbp)      # 8-byte Spill
	movq	%rbx, -8216(%rbp)       # 8-byte Spill
	movq	%r10, -8224(%rbp)       # 8-byte Spill
	movq	%r11, -8232(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-8152(%rbp), %rdx       # 8-byte Reload
	movq	-8152(%rbp), %rcx       # 8-byte Reload
	movq	-7960(%rbp), %r8        # 8-byte Reload
	movq	-8144(%rbp), %r9        # 8-byte Reload
	movq	-8104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-8152(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8096(%rbp), %r8        # 8-byte Reload
	movq	-8144(%rbp), %r9        # 8-byte Reload
	movq	-8088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8048(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8064(%rbp), %rcx       # 8-byte Reload
	movq	-8024(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-5080(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8080(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7936(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-5080(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8240(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8064(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8048(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8040(%rbp), %rcx       # 8-byte Reload
	movq	-8072(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-8240(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8064(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5080(%rbp), %rax       # 8-byte Reload
	movq	-7936(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8248(%rbp)      # 8-byte Spill
	movq	-8144(%rbp), %rdx       # 8-byte Reload
	movq	-8040(%rbp), %rcx       # 8-byte Reload
	movq	-8152(%rbp), %r8        # 8-byte Reload
	movq	-8136(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8048(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8032(%rbp), %rcx       # 8-byte Reload
	movq	-8056(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8208(%rbp), %xmm0      # 8-byte Reload
	movq	-8152(%rbp), %rdx       # 8-byte Reload
	movq	-7960(%rbp), %rcx       # 8-byte Reload
	movq	-8152(%rbp), %r8        # 8-byte Reload
	movq	-8136(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8248(%rbp), %xmm0      # 8-byte Reload
	movq	-8144(%rbp), %rdx       # 8-byte Reload
	movq	-8040(%rbp), %rcx       # 8-byte Reload
	movq	-8152(%rbp), %r8        # 8-byte Reload
	movq	-8136(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8248(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8208(%rbp), %xmm1      # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	.loc	1 102 0                 # feature_extraction.c:102:0
.Ltmp111:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-8144(%rbp), %r8        # 8-byte Reload
	movb	%cl, -8249(%rbp)        # 1-byte Spill
	movq	%r8, %rcx
	movq	-8032(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8016(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8000(%rbp), %rcx       # 8-byte Reload
	movq	-8024(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-4864(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8008(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7936(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-4864(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
.Ltmp112:
	.loc	1 98 0                  # feature_extraction.c:98:0
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -8264(%rbp)       # 8-byte Spill
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8000(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8128(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-7944(%rbp), %rcx       # 8-byte Reload
	movq	-7992(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7984(%rbp), %rdx       # 8-byte Reload
	movq	-8152(%rbp), %rcx       # 8-byte Reload
	movq	-7960(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rcx     # imm = 0x2F00000000
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	imulq	%rcx, %rdx
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -8272(%rbp)       # 8-byte Spill
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7944(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8128(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8200(%rbp), %rcx       # 8-byte Reload
	movq	-7968(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8216(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7952(%rbp), %rdx       # 8-byte Reload
	movq	-8152(%rbp), %rcx       # 8-byte Reload
	movq	-7960(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-8272(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-7944(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8272(%rbp), %rcx       # 8-byte Reload
	sarq	$32, %rcx
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8144(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -8280(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-8200(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8128(%rbp), %rdi       # 8-byte Reload
	movq	-8168(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8232(%rbp), %rcx       # 8-byte Reload
	movq	-8216(%rbp), %r8        # 8-byte Reload
	movl	-8188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8144(%rbp), %rdi       # 8-byte Reload
	movq	-8152(%rbp), %rsi       # 8-byte Reload
	movq	-8152(%rbp), %rdx       # 8-byte Reload
	movq	-8144(%rbp), %rcx       # 8-byte Reload
	movq	-8160(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8136(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8152(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -8288(%rbp)       # 8-byte Spill
.LBB1_27:                               #   Parent Loop BB1_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-8288(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str244, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str252, %r9
	movabsq	$3, %r10
	leaq	.L.str254, %r11
	movabsq	$100, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str249, %r15
	leaq	.L.str253, %r12
	movl	$1, %r13d
	movq	%rax, -8296(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8304(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8312(%rbp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, -8320(%rbp)       # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, -8328(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8336(%rbp)       # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, -8344(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -8352(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 100 0                 # feature_extraction.c:100:0
.Ltmp113:
	subq	$16, %rsp
	movq	%rax, -8360(%rbp)       # 8-byte Spill
	movq	-8352(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -8368(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -8376(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -8384(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-8320(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8392(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8360(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8400(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8408(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8416(%rbp)       # 8-byte Spill
	movq	%rbx, -8424(%rbp)       # 8-byte Spill
	movq	%r15, -8432(%rbp)       # 8-byte Spill
	movq	%r12, -8440(%rbp)       # 8-byte Spill
	movl	%r13d, -8444(%rbp)      # 4-byte Spill
	movq	%r11, -8456(%rbp)       # 8-byte Spill
	movq	%r10, -8464(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8368(%rbp), %rdi       # 8-byte Reload
	movq	-8312(%rbp), %rsi       # 8-byte Reload
	movq	-8384(%rbp), %rdx       # 8-byte Reload
	movq	-8392(%rbp), %rcx       # 8-byte Reload
	movq	-8344(%rbp), %r8        # 8-byte Reload
	movq	-8392(%rbp), %r9        # 8-byte Reload
	movq	-8408(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8392(%rbp), %rdi       # 8-byte Reload
	movq	-8312(%rbp), %rsi       # 8-byte Reload
	movq	-8384(%rbp), %rdx       # 8-byte Reload
	movq	-8384(%rbp), %rcx       # 8-byte Reload
	movq	-8336(%rbp), %r8        # 8-byte Reload
	movq	-8392(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8304(%rbp), %rdi       # 8-byte Reload
	movq	-8312(%rbp), %rsi       # 8-byte Reload
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	movq	-8392(%rbp), %rcx       # 8-byte Reload
	movq	-8320(%rbp), %r8        # 8-byte Reload
	movq	-8384(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8424(%rbp), %rdi       # 8-byte Reload
	movq	-8416(%rbp), %rsi       # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8368(%rbp), %r8        # 8-byte Reload
	movl	-8444(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8464(%rbp), %rdi       # 8-byte Reload
	movq	-8384(%rbp), %rsi       # 8-byte Reload
	movq	-8384(%rbp), %rdx       # 8-byte Reload
	movq	-8392(%rbp), %rcx       # 8-byte Reload
	movq	-8456(%rbp), %r8        # 8-byte Reload
	movq	-8384(%rbp), %r9        # 8-byte Reload
	movq	-8376(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8368(%rbp), %rdi       # 8-byte Reload
	movq	-8384(%rbp), %rsi       # 8-byte Reload
	movq	-8384(%rbp), %rdx       # 8-byte Reload
	movq	-8392(%rbp), %rcx       # 8-byte Reload
	movq	-8408(%rbp), %r8        # 8-byte Reload
	movq	-8384(%rbp), %r9        # 8-byte Reload
	movq	-8376(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8249(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-8392(%rbp), %rdi       # 8-byte Reload
	movq	-8392(%rbp), %rsi       # 8-byte Reload
	movq	-8392(%rbp), %rcx       # 8-byte Reload
	movq	-8400(%rbp), %r8        # 8-byte Reload
	movq	-8384(%rbp), %r9        # 8-byte Reload
	movq	-8376(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8249(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_28
	jmp	.LBB1_29
.LBB1_28:                               #   in Loop: Header=BB1_27 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str252, %r8
	leaq	.L.str8, %rdx
	movabsq	$104, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str254, %r9
	leaq	.L.str263, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str260, %r15
	leaq	.L.str261, %r12
	movabsq	$102, %r13
	movq	%rax, -8472(%rbp)       # 8-byte Spill
	leaq	.L.str262, %rax
	movq	%rax, -8480(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -8488(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8496(%rbp)       # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, -8504(%rbp)       # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, -8512(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -8520(%rbp)       # 8-byte Spill
	leaq	.L.str259, %rax
	movq	%rax, -8528(%rbp)       # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, -8536(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -8544(%rbp)       # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, -8552(%rbp)       # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, -8560(%rbp)       # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -8568(%rbp)       # 8-byte Spill
	leaq	.L.str245, %rax
	movq	%rax, -8576(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -8584(%rbp)       # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, -8592(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -8600(%rbp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, -8608(%rbp)       # 8-byte Spill
	leaq	.L.str247, %rax
	movq	%rax, -8616(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 102 0                 # feature_extraction.c:102:0
.Ltmp114:
	subq	$16, %rsp
	movq	%rdi, -8624(%rbp)       # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -8632(%rbp)       # 8-byte Spill
	movq	%rdx, -8640(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, -8648(%rbp)       # 8-byte Spill
	movq	-8512(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8656(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8648(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8664(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8672(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8680(%rbp)       # 8-byte Spill
	movl	%ebx, -8684(%rbp)       # 4-byte Spill
	movq	%r15, -8696(%rbp)       # 8-byte Spill
	movq	%r13, -8704(%rbp)       # 8-byte Spill
	movq	%r12, -8712(%rbp)       # 8-byte Spill
	movq	%r11, -8720(%rbp)       # 8-byte Spill
	movq	%r10, -8728(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8280(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8608(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8296(%rbp), %rax       # 8-byte Reload
	movq	-8280(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8512(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8736(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8592(%rbp), %rcx       # 8-byte Reload
	movq	-8520(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8736(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8512(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8600(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8736(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4840(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8472(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8744(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8592(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8552(%rbp), %rcx       # 8-byte Reload
	movq	-8584(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8744(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8592(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4840(%rbp), %rax       # 8-byte Reload
	movq	-8736(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8752(%rbp)      # 8-byte Spill
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8552(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8560(%rbp), %rcx       # 8-byte Reload
	movq	-8584(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8264(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8576(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8264(%rbp), %rax       # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8760(%rbp)      # 8-byte Spill
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8560(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8528(%rbp), %rcx       # 8-byte Reload
	movq	-8568(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8760(%rbp), %xmm0      # 8-byte Reload
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8560(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8752(%rbp), %xmm0      # 8-byte Reload
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8552(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8752(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8760(%rbp), %xmm1      # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8528(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -8768(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8696(%rbp), %rcx       # 8-byte Reload
	movq	-8544(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8248(%rbp), %xmm0      # 8-byte Reload
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8536(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8768(%rbp), %xmm0      # 8-byte Reload
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8528(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8768(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8248(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8696(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -8776(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8712(%rbp), %rcx       # 8-byte Reload
	movq	-8520(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8736(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8512(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-7656(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8504(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8736(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8496(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8472(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8784(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8712(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8704(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8480(%rbp), %rcx       # 8-byte Reload
	movq	-8488(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8720(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	movq	-8784(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8712(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8680(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8776(%rbp), %xmm0      # 8-byte Reload
	movq	-8472(%rbp), %rdx       # 8-byte Reload
	movq	-8696(%rbp), %rcx       # 8-byte Reload
	movq	-8656(%rbp), %r8        # 8-byte Reload
	movq	-8640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-7656(%rbp), %rax       # 8-byte Reload
	movq	-8736(%rbp), %rcx       # 8-byte Reload
	vmovsd	-8776(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	1 104 0                 # feature_extraction.c:104:0
	subq	$16, %rsp
	movq	-8624(%rbp), %rdi       # 8-byte Reload
	movq	-8632(%rbp), %rsi       # 8-byte Reload
	movq	-8672(%rbp), %rdx       # 8-byte Reload
	movq	-8728(%rbp), %rcx       # 8-byte Reload
	movq	-8720(%rbp), %r8        # 8-byte Reload
	movl	-8684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8472(%rbp), %rdi       # 8-byte Reload
	movq	-8656(%rbp), %rsi       # 8-byte Reload
	movq	-8656(%rbp), %rdx       # 8-byte Reload
	movq	-8472(%rbp), %rcx       # 8-byte Reload
	movq	-8664(%rbp), %r8        # 8-byte Reload
	movq	-8656(%rbp), %r9        # 8-byte Reload
	movq	-8640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp115:
.LBB1_29:                               #   in Loop: Header=BB1_27 Depth=2
	movabsq	$1, %rax
	leaq	.L.str264, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str249, %r8
	movabsq	$3, %r9
	leaq	.L.str241, %r10
	movabsq	$98, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str252, %r14
	leaq	.L.str265, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -8792(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8800(%rbp)       # 8-byte Spill
	leaq	.L.str251, %rax
	movq	%rax, -8808(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -8816(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8824(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -8832(%rbp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, -8840(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 98 0                  # feature_extraction.c:98:0
	subq	$16, %rsp
	movq	%rdi, -8848(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -8856(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -8864(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -8872(%rbp)       # 8-byte Spill
	movq	-8808(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8880(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8872(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8888(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8896(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8904(%rbp)       # 8-byte Spill
	movq	%r15, -8912(%rbp)       # 8-byte Spill
	movl	%r12d, -8916(%rbp)      # 4-byte Spill
	movq	%r13, -8928(%rbp)       # 8-byte Spill
	movq	%rbx, -8936(%rbp)       # 8-byte Spill
	movq	%r11, -8944(%rbp)       # 8-byte Spill
	movq	%r10, -8952(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8848(%rbp), %rdi       # 8-byte Reload
	movq	-8800(%rbp), %rsi       # 8-byte Reload
	movq	-8792(%rbp), %rdx       # 8-byte Reload
	movq	-8864(%rbp), %rcx       # 8-byte Reload
	movq	-8824(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8792(%rbp), %rdi       # 8-byte Reload
	movq	-8800(%rbp), %rsi       # 8-byte Reload
	movq	-8296(%rbp), %rdx       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8840(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8296(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-8928(%rbp), %rdi       # 8-byte Reload
	movq	-8800(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8808(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8960(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8944(%rbp), %rdi       # 8-byte Reload
	movq	-8936(%rbp), %rsi       # 8-byte Reload
	movq	-8904(%rbp), %rdx       # 8-byte Reload
	movq	-8880(%rbp), %rcx       # 8-byte Reload
	movq	-8832(%rbp), %r8        # 8-byte Reload
	movl	-8916(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8848(%rbp), %rdi       # 8-byte Reload
	movq	-8800(%rbp), %rsi       # 8-byte Reload
	movq	-8816(%rbp), %rdx       # 8-byte Reload
	movq	-8864(%rbp), %rcx       # 8-byte Reload
	movq	-8824(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8792(%rbp), %rdi       # 8-byte Reload
	movq	-8800(%rbp), %rsi       # 8-byte Reload
	movq	-8960(%rbp), %rdx       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8808(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8960(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8928(%rbp), %rdi       # 8-byte Reload
	movq	-8792(%rbp), %rsi       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8880(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -8961(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8944(%rbp), %rdi       # 8-byte Reload
	movq	-8936(%rbp), %rsi       # 8-byte Reload
	movq	-8904(%rbp), %rdx       # 8-byte Reload
	movq	-8912(%rbp), %rcx       # 8-byte Reload
	movq	-8848(%rbp), %r8        # 8-byte Reload
	movl	-8916(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8896(%rbp), %rdi       # 8-byte Reload
	movq	-8864(%rbp), %rsi       # 8-byte Reload
	movq	-8864(%rbp), %rdx       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8952(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8848(%rbp), %rdi       # 8-byte Reload
	movq	-8864(%rbp), %rsi       # 8-byte Reload
	movq	-8864(%rbp), %rdx       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8888(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8961(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8792(%rbp), %rdi       # 8-byte Reload
	movq	-8792(%rbp), %rsi       # 8-byte Reload
	movq	-8792(%rbp), %rcx       # 8-byte Reload
	movq	-8880(%rbp), %r8        # 8-byte Reload
	movq	-8864(%rbp), %r9        # 8-byte Reload
	movq	-8856(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8961(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-8960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -8288(%rbp)       # 8-byte Spill
	jne	.LBB1_30
	jmp	.LBB1_27
.Ltmp116:
.LBB1_30:                               #   in Loop: Header=BB1_26 Depth=1
	movabsq	$1, %rax
	leaq	.L.str267, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str232, %r8
	movabsq	$3, %r9
	leaq	.L.str228, %r10
	movabsq	$96, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str241, %r14
	leaq	.L.str268, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -8976(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -8984(%rbp)       # 8-byte Spill
	leaq	.L.str266, %rax
	movq	%rax, -8992(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9000(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -9008(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -9016(%rbp)       # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, -9024(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -9032(%rbp)       # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, -9040(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9048(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	%rdi, -9056(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -9064(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -9072(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -9080(%rbp)       # 8-byte Spill
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9088(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9080(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9096(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -9104(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -9112(%rbp)       # 8-byte Spill
	movq	%r15, -9120(%rbp)       # 8-byte Spill
	movl	%r12d, -9124(%rbp)      # 4-byte Spill
	movq	%r13, -9136(%rbp)       # 8-byte Spill
	movq	%rbx, -9144(%rbp)       # 8-byte Spill
	movq	%r11, -9152(%rbp)       # 8-byte Spill
	movq	%r10, -9160(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9056(%rbp), %rdi       # 8-byte Reload
	movq	-9016(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rdx       # 8-byte Reload
	movq	-9072(%rbp), %rcx       # 8-byte Reload
	movq	-9048(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8976(%rbp), %rdi       # 8-byte Reload
	movq	-9016(%rbp), %rsi       # 8-byte Reload
	movq	-7936(%rbp), %rdx       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9040(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7936(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-9136(%rbp), %rdi       # 8-byte Reload
	movq	-9016(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9024(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9168(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9152(%rbp), %rdi       # 8-byte Reload
	movq	-9144(%rbp), %rsi       # 8-byte Reload
	movq	-9112(%rbp), %rdx       # 8-byte Reload
	movq	-8992(%rbp), %rcx       # 8-byte Reload
	movq	-9032(%rbp), %r8        # 8-byte Reload
	movl	-9124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8976(%rbp), %rdi       # 8-byte Reload
	movq	-9016(%rbp), %rsi       # 8-byte Reload
	movq	-9168(%rbp), %rdx       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9024(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9168(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9136(%rbp), %rdi       # 8-byte Reload
	movq	-8984(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-8992(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -9172(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9152(%rbp), %rdi       # 8-byte Reload
	movq	-9144(%rbp), %rsi       # 8-byte Reload
	movq	-9112(%rbp), %rdx       # 8-byte Reload
	movq	-9088(%rbp), %rcx       # 8-byte Reload
	movq	-9008(%rbp), %r8        # 8-byte Reload
	movl	-9124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-9056(%rbp), %rdi       # 8-byte Reload
	movq	-8984(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9000(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9172(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-8976(%rbp), %rdi       # 8-byte Reload
	movq	-8984(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-8992(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9172(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-9136(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9088(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -9173(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9152(%rbp), %rdi       # 8-byte Reload
	movq	-9144(%rbp), %rsi       # 8-byte Reload
	movq	-9112(%rbp), %rdx       # 8-byte Reload
	movq	-9120(%rbp), %rcx       # 8-byte Reload
	movq	-9056(%rbp), %r8        # 8-byte Reload
	movl	-9124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9104(%rbp), %rdi       # 8-byte Reload
	movq	-9072(%rbp), %rsi       # 8-byte Reload
	movq	-9072(%rbp), %rdx       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9160(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9056(%rbp), %rdi       # 8-byte Reload
	movq	-9072(%rbp), %rsi       # 8-byte Reload
	movq	-9072(%rbp), %rdx       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9096(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9173(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8976(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	-8976(%rbp), %rcx       # 8-byte Reload
	movq	-9088(%rbp), %r8        # 8-byte Reload
	movq	-9072(%rbp), %r9        # 8-byte Reload
	movq	-9064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9173(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-9168(%rbp), %rcx       # 8-byte Reload
	movq	-7656(%rbp), %rdx       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -7672(%rbp)       # 8-byte Spill
	movq	%rdx, -7424(%rbp)       # 8-byte Spill
	movq	%rsi, -7432(%rbp)       # 8-byte Spill
	movq	%rdi, -7440(%rbp)       # 8-byte Spill
	jne	.LBB1_31
	jmp	.LBB1_26
.Ltmp117:
.LBB1_31:                               # %._crit_edge91
	movq	-7440(%rbp), %rax       # 8-byte Reload
	movq	-7432(%rbp), %rcx       # 8-byte Reload
	movq	-7424(%rbp), %rdx       # 8-byte Reload
	movabsq	$0, %rsi
	movabsq	$1, %rdi
	leaq	.L.str275, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	.L.str238, %r11
	movabsq	$3, %rbx
	leaq	.L.str277, %r14
	movabsq	$109, %r15
	leaq	.L.str50, %r12
	leaq	.L.str228, %r13
	movq	%rax, -9184(%rbp)       # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rsi, -9192(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -9200(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -9208(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9216(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9224(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9232(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -9240(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -9248(%rbp)       # 8-byte Spill
	leaq	.L.str274, %rax
	.loc	1 108 0                 # feature_extraction.c:108:0
	subq	$16, %rsp
	movq	%rax, -9256(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%esi, -9260(%rbp)       # 4-byte Spill
	movl	$.L.str228, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -9272(%rbp)       # 8-byte Spill
	movl	$.L.str269, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -9280(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -9288(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -9296(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -9304(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -9312(%rbp)       # 8-byte Spill
	movq	-9288(%rbp), %rax       # 8-byte Reload
	movl	%esi, -9316(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-9272(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -9328(%rbp)       # 8-byte Spill
.Ltmp118:
	#DEBUG_VALUE: process_data:scaled_fft_data <- [RBP+-9328]
	#DEBUG_VALUE: process_data:scaled_fft_data <- [RBP+-9328]
	movq	%rax, %rdx
	movq	-9280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9296(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9344(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-9316(%rbp), %eax       # 4-byte Reload
	movq	%r9, -9352(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -9360(%rbp)       # 8-byte Spill
	movq	%r14, -9368(%rbp)       # 8-byte Spill
	movq	%r15, -9376(%rbp)       # 8-byte Spill
	movq	%r12, -9384(%rbp)       # 8-byte Spill
	movq	%rbx, -9392(%rbp)       # 8-byte Spill
	movq	%r11, -9400(%rbp)       # 8-byte Spill
	movq	%r10, -9408(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str241, (%rcx)
	movl	$.L.str229, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -9416(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -9424(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-9424(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -9432(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-9416(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -9440(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$.L.str226, %eax
	movl	%eax, %r8d
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9424(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9328(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9448(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9280(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str270, %eax
	movl	%eax, %ecx
	movq	-9312(%rbp), %rdi       # 8-byte Reload
	movq	-9288(%rbp), %rsi       # 8-byte Reload
	movq	-9272(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -9456(%rbp)       # 8-byte Spill
	movq	-9296(%rbp), %r8        # 8-byte Reload
	movl	-9316(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str241, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-9440(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9424(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$.L.str224, %eax
	movl	%eax, %r8d
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9424(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movq	-9448(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9336(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9456(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str271, %eax
	movl	%eax, %ecx
	movq	-9312(%rbp), %rdi       # 8-byte Reload
	movq	-9288(%rbp), %rsi       # 8-byte Reload
	movq	-9272(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -9464(%rbp)       # 8-byte Spill
	movq	-9296(%rbp), %r8        # 8-byte Reload
	movl	-9316(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str241, (%rcx)
	movl	$.L.str166, %eax
	movl	%eax, %r8d
	movq	-9440(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9424(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$.L.str225, %eax
	movl	%eax, %r8d
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9424(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movq	-9448(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9184(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9464(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str272, %eax
	movl	%eax, %ecx
	movl	$108, %eax
	movl	%eax, %edx
	movl	$12, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	-9288(%rbp), %rsi       # 8-byte Reload
	movq	-9272(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -9472(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -9480(%rbp)       # 8-byte Spill
	movl	-9316(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %edx
	movl	$32, %r9d
	movl	%r9d, %esi
	movq	-9440(%rbp), %rdi       # 8-byte Reload
	movq	%rsi, -9488(%rbp)       # 8-byte Spill
	movq	%rdx, -9496(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-9416(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9504(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9496(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9488(%rbp), %rsi       # 8-byte Reload
	movq	-9504(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9496(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	%eax, %eax
	movl	%eax, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movq	-9448(%rbp), %rdi       # 8-byte Reload
	movq	-9488(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-9416(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9512(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9480(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str273, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-9472(%rbp), %rdi       # 8-byte Reload
	movq	-9288(%rbp), %rsi       # 8-byte Reload
	movq	-9272(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -9520(%rbp)       # 8-byte Spill
	movl	-9316(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9488(%rbp), %rsi       # 8-byte Reload
	movq	-9512(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9480(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9448(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9512(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9520(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str274, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-9472(%rbp), %rdi       # 8-byte Reload
	movq	-9288(%rbp), %rsi       # 8-byte Reload
	movq	-9272(%rbp), %rdx       # 8-byte Reload
	movl	-9316(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9512(%rbp), %rdx       # 8-byte Reload
	movq	-9416(%rbp), %rcx       # 8-byte Reload
	movq	-9520(%rbp), %r8        # 8-byte Reload
	movq	-9424(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9512(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-9208(%rbp), %rdi       # 8-byte Reload
	movq	-9248(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -9528(%rbp)       # 8-byte Spill
.Ltmp119:
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- [RBP+-9528]
	movq	%rdx, %rsi
	movq	-9528(%rbp), %rdx       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9256(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp120:
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- [RBP+-9528]
	#DEBUG_VALUE: i <- 0
	.loc	1 109 0                 # feature_extraction.c:109:0
	subq	$16, %rsp
	movq	-9376(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9360(%rbp), %rdx       # 8-byte Reload
	movq	-9344(%rbp), %rcx       # 8-byte Reload
	movq	-9240(%rbp), %r8        # 8-byte Reload
	movl	-9260(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9408(%rbp), %rdi       # 8-byte Reload
	movq	-9216(%rbp), %rsi       # 8-byte Reload
	movq	-9192(%rbp), %rdx       # 8-byte Reload
	movq	-9192(%rbp), %rcx       # 8-byte Reload
	movq	-9232(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-9304(%rbp), %rdi       # 8-byte Reload
	movq	-9216(%rbp), %rsi       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9224(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-9208(%rbp), %rdi       # 8-byte Reload
	movq	-9304(%rbp), %rsi       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9344(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -9529(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9376(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9360(%rbp), %rdx       # 8-byte Reload
	movq	-9200(%rbp), %rcx       # 8-byte Reload
	movq	-9408(%rbp), %r8        # 8-byte Reload
	movl	-9260(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9392(%rbp), %rdi       # 8-byte Reload
	movq	-9192(%rbp), %rsi       # 8-byte Reload
	movq	-9192(%rbp), %rdx       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9368(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9408(%rbp), %rdi       # 8-byte Reload
	movq	-9192(%rbp), %rsi       # 8-byte Reload
	movq	-9192(%rbp), %rdx       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9400(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9529(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-9304(%rbp), %rdi       # 8-byte Reload
	movq	-9304(%rbp), %rsi       # 8-byte Reload
	movq	-9304(%rbp), %rcx       # 8-byte Reload
	movq	-9344(%rbp), %r8        # 8-byte Reload
	movq	-9192(%rbp), %r9        # 8-byte Reload
	movq	-9352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9529(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-9192(%rbp), %rcx       # 8-byte Reload
	movq	-9528(%rbp), %rdx       # 8-byte Reload
	movq	-9512(%rbp), %rsi       # 8-byte Reload
	movq	-9336(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -9544(%rbp)       # 8-byte Spill
	movq	%rdx, -7912(%rbp)       # 8-byte Spill
	movq	%rsi, -7920(%rbp)       # 8-byte Spill
	movq	%rdi, -7928(%rbp)       # 8-byte Spill
	jne	.LBB1_32
	jmp	.LBB1_37
.Ltmp121:
.LBB1_32:                               # %.lr.ph84
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_33 Depth 2
                                        #       Child Loop BB1_34 Depth 3
	movq	-9544(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str288, %r8
	leaq	.L.str8, %rsi
	movabsq	$113, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str277, %r10
	leaq	.L.str287, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str286, %r13
	movq	%rax, -9552(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9560(%rbp)       # 8-byte Spill
	leaq	.L.str282, %rax
	movq	%rax, -9568(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -9576(%rbp)       # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, -9584(%rbp)       # 8-byte Spill
	leaq	.L.str284, %rax
	movq	%rax, -9592(%rbp)       # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, -9600(%rbp)       # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, -9608(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -9616(%rbp)       # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, -9624(%rbp)       # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, -9632(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -9640(%rbp)       # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, -9648(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9656(%rbp)       # 8-byte Spill
	movabsq	$115, %rax
	movq	%rax, -9664(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -9672(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -9680(%rbp)       # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, -9688(%rbp)       # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, -9696(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9704(%rbp)       # 8-byte Spill
	leaq	.L.str228, %rax
	movq	%rax, -9712(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -9720(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 115 0                 # feature_extraction.c:115:0
.Ltmp122:
	subq	$16, %rsp
	movq	%rax, -9728(%rbp)       # 8-byte Spill
	movq	-9720(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -9736(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -9744(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -9752(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-9632(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9760(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9728(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9768(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -9776(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -9780(%rbp)      # 4-byte Spill
	movq	%r15, -9792(%rbp)       # 8-byte Spill
	movq	%rbx, -9800(%rbp)       # 8-byte Spill
	movq	%r12, -9808(%rbp)       # 8-byte Spill
	movq	%r13, -9816(%rbp)       # 8-byte Spill
	movq	%r11, -9824(%rbp)       # 8-byte Spill
	movq	%r10, -9832(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9800(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9752(%rbp), %rdx       # 8-byte Reload
	movq	-9752(%rbp), %rcx       # 8-byte Reload
	movq	-9704(%rbp), %r8        # 8-byte Reload
	movq	-9760(%rbp), %r9        # 8-byte Reload
	movq	-9712(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9752(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9696(%rbp), %r8        # 8-byte Reload
	movq	-9760(%rbp), %r9        # 8-byte Reload
	movq	-9688(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9552(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9632(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9688(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9664(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9648(%rbp), %rcx       # 8-byte Reload
	movq	-9680(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9552(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9632(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9552(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9648(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -9836(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9664(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9568(%rbp), %rcx       # 8-byte Reload
	movq	-9672(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9800(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9656(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9836(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9648(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9836(%rbp), %r14d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
	.loc	1 120 0                 # feature_extraction.c:120:0
.Ltmp123:
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9568(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -9840(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9608(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9600(%rbp), %rcx       # 8-byte Reload
	movq	-9640(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9800(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9552(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9632(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9184(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9624(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9552(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-9184(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-9760(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9848(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9600(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9608(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9592(%rbp), %rcx       # 8-byte Reload
	movq	-9616(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	-9848(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9600(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9184(%rbp), %rax       # 8-byte Reload
	movq	-9552(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp124:
	.loc	1 113 0                 # feature_extraction.c:113:0
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -9856(%rbp)      # 8-byte Spill
	movq	-9760(%rbp), %rdx       # 8-byte Reload
	movq	-9592(%rbp), %rcx       # 8-byte Reload
	movq	-9752(%rbp), %r8        # 8-byte Reload
	movq	-9744(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-9736(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9584(%rbp), %rcx       # 8-byte Reload
	movq	-9576(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-9840(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9568(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9840(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9584(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9864(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9736(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9816(%rbp), %rcx       # 8-byte Reload
	movq	-9576(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-9840(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9560(%rbp), %rsi       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9568(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9840(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-9792(%rbp), %rdi       # 8-byte Reload
	movq	-9808(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9816(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9872(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9736(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9832(%rbp), %rdx       # 8-byte Reload
	movq	-9824(%rbp), %rcx       # 8-byte Reload
	movq	-9800(%rbp), %r8        # 8-byte Reload
	movl	-9780(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9760(%rbp), %rdi       # 8-byte Reload
	movq	-9752(%rbp), %rsi       # 8-byte Reload
	movq	-9752(%rbp), %rdx       # 8-byte Reload
	movq	-9760(%rbp), %rcx       # 8-byte Reload
	movq	-9768(%rbp), %r8        # 8-byte Reload
	movq	-9752(%rbp), %r9        # 8-byte Reload
	movq	-9744(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9552(%rbp), %rax       # 8-byte Reload
	movq	%rax, -9880(%rbp)       # 8-byte Spill
.LBB1_33:                               #   Parent Loop BB1_32 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB1_34 Depth 3
	movq	-9880(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str302, %r8
	leaq	.L.str8, %rsi
	movabsq	$117, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str288, %r10
	leaq	.L.str301, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str300, %r13
	movq	%rax, -9888(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9896(%rbp)       # 8-byte Spill
	leaq	.L.str297, %rax
	movq	%rax, -9904(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -9912(%rbp)       # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, -9920(%rbp)       # 8-byte Spill
	leaq	.L.str298, %rax
	movq	%rax, -9928(%rbp)       # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, -9936(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -9944(%rbp)       # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, -9952(%rbp)       # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, -9960(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -9968(%rbp)       # 8-byte Spill
	leaq	.L.str296, %rax
	movq	%rax, -9976(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9984(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -9992(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -10000(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -10008(%rbp)      # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, -10016(%rbp)      # 8-byte Spill
	movabsq	$115, %rax
	movq	%rax, -10024(%rbp)      # 8-byte Spill
	leaq	.L.str295, %rax
	movq	%rax, -10032(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -10040(%rbp)      # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, -10048(%rbp)      # 8-byte Spill
	leaq	.L.str292, %rax
	movq	%rax, -10056(%rbp)      # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, -10064(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -10072(%rbp)      # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, -10080(%rbp)      # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, -10088(%rbp)      # 8-byte Spill
	leaq	.L.str290, %rax
	movq	%rax, -10096(%rbp)      # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, -10104(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -10112(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 115 0                 # feature_extraction.c:115:0
.Ltmp125:
	subq	$16, %rsp
	movq	%rax, -10120(%rbp)      # 8-byte Spill
	movq	-10112(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -10128(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -10136(%rbp)      # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -10144(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-9960(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -10152(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10120(%rbp), %rax      # 8-byte Reload
	movq	%r8, -10160(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10168(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -10172(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -10184(%rbp)     # 8-byte Spill
	movq	%r15, -10192(%rbp)      # 8-byte Spill
	movq	%rbx, -10200(%rbp)      # 8-byte Spill
	movq	%r12, -10208(%rbp)      # 8-byte Spill
	movq	%r13, -10216(%rbp)      # 8-byte Spill
	movq	%r11, -10224(%rbp)      # 8-byte Spill
	movq	%r10, -10232(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-10152(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10096(%rbp), %r8       # 8-byte Reload
	movq	-10144(%rbp), %r9       # 8-byte Reload
	movq	-10104(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-10152(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10088(%rbp), %r8       # 8-byte Reload
	movq	-10144(%rbp), %r9       # 8-byte Reload
	movq	-10080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9960(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10024(%rbp), %rdi      # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-10056(%rbp), %rcx      # 8-byte Reload
	movq	-10072(%rbp), %r8       # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9872(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10064(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9960(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9888(%rbp), %rax       # 8-byte Reload
	movq	-9872(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10056(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10240(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10024(%rbp), %rdi      # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-10016(%rbp), %rcx      # 8-byte Reload
	movq	-9968(%rbp), %r8        # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-10240(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10056(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9528(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10048(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10240(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9528(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10144(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10248(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10016(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10024(%rbp), %rdi      # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-10032(%rbp), %rcx      # 8-byte Reload
	movq	-10040(%rbp), %r8       # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-10248(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10016(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10184(%rbp), %xmm0     # 8-byte Reload
	movq	-10152(%rbp), %rdx      # 8-byte Reload
	movq	-10008(%rbp), %rcx      # 8-byte Reload
	movq	-10152(%rbp), %r8       # 8-byte Reload
	movq	-10136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-9528(%rbp), %rax       # 8-byte Reload
	movq	-10240(%rbp), %rcx      # 8-byte Reload
	vmovsd	-10184(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp126:
	#DEBUG_VALUE: k <- 0
	.loc	1 120 0                 # feature_extraction.c:120:0
	subq	$16, %rsp
	movq	-9936(%rbp), %rdi       # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-9976(%rbp), %rcx       # 8-byte Reload
	movq	-10000(%rbp), %r8       # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9960(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9888(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-9896(%rbp), %rsi       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9976(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -10252(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9936(%rbp), %rdi       # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-9904(%rbp), %rcx       # 8-byte Reload
	movq	-9992(%rbp), %r8        # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-9896(%rbp), %rsi       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9984(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10252(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-9896(%rbp), %rsi       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9976(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10252(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-9896(%rbp), %rsi       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9904(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -10256(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9936(%rbp), %rdi       # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-9928(%rbp), %rcx       # 8-byte Reload
	movq	-9968(%rbp), %r8        # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10200(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9960(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-9184(%rbp), %rdx       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9952(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9888(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-9184(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10144(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10264(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-9928(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9936(%rbp), %rdi       # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-9920(%rbp), %rcx       # 8-byte Reload
	movq	-9944(%rbp), %r8        # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	-10264(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9928(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9184(%rbp), %rax       # 8-byte Reload
	movq	-9888(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp127:
	.loc	1 117 0                 # feature_extraction.c:117:0
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -10272(%rbp)     # 8-byte Spill
	movq	-10144(%rbp), %rdx      # 8-byte Reload
	movq	-9920(%rbp), %rcx       # 8-byte Reload
	movq	-10152(%rbp), %r8       # 8-byte Reload
	movq	-10136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10128(%rbp), %rdi      # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-10216(%rbp), %rcx      # 8-byte Reload
	movq	-9912(%rbp), %r8        # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-10256(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-9896(%rbp), %rsi       # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-9904(%rbp), %r8        # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10256(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-10192(%rbp), %rdi      # 8-byte Reload
	movq	-10208(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10216(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10280(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10128(%rbp), %rdi      # 8-byte Reload
	movq	-10168(%rbp), %rsi      # 8-byte Reload
	movq	-10232(%rbp), %rdx      # 8-byte Reload
	movq	-10224(%rbp), %rcx      # 8-byte Reload
	movq	-10200(%rbp), %r8       # 8-byte Reload
	movl	-10172(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10144(%rbp), %rdi      # 8-byte Reload
	movq	-10152(%rbp), %rsi      # 8-byte Reload
	movq	-10152(%rbp), %rdx      # 8-byte Reload
	movq	-10144(%rbp), %rcx      # 8-byte Reload
	movq	-10160(%rbp), %r8       # 8-byte Reload
	movq	-10152(%rbp), %r9       # 8-byte Reload
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10152(%rbp), %rax      # 8-byte Reload
	.loc	1 120 0                 # feature_extraction.c:120:0
.Ltmp128:
	vmovsd	-10184(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -10288(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10296(%rbp)     # 8-byte Spill
.LBB1_34:                               #   Parent Loop BB1_32 Depth=1
                                        #     Parent Loop BB1_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	-10296(%rbp), %xmm0     # 8-byte Reload
	movq	-10288(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str316, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str302, %r9
	movabsq	$3, %r10
	leaq	.L.str291, %r11
	movabsq	$117, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str317, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -10304(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -10312(%rbp)      # 8-byte Spill
	leaq	.L.str304, %rax
	movq	%rax, -10320(%rbp)      # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -10328(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -10336(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -10344(%rbp)      # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, -10352(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -10360(%rbp)      # 8-byte Spill
	leaq	.L.str306, %rax
	movq	%rax, -10368(%rbp)      # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, -10376(%rbp)      # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, -10384(%rbp)      # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, -10392(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -10400(%rbp)      # 8-byte Spill
	leaq	.L.str310, %rax
	movq	%rax, -10408(%rbp)      # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, -10416(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -10424(%rbp)      # 8-byte Spill
	leaq	.L.str313, %rax
	movq	%rax, -10432(%rbp)      # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, -10440(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -10448(%rbp)      # 8-byte Spill
	leaq	.L.str312, %rax
	movq	%rax, -10456(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -10464(%rbp)      # 8-byte Spill
	leaq	.L.str269, %rax
	movq	%rax, -10472(%rbp)      # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, -10480(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -10488(%rbp)      # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, -10496(%rbp)      # 8-byte Spill
	leaq	.L.str309, %rax
	movq	%rax, -10504(%rbp)      # 8-byte Spill
	leaq	.L.str284, %rax
	movq	%rax, -10512(%rbp)      # 8-byte Spill
	leaq	.L.str308, %rax
	movq	%rax, -10520(%rbp)      # 8-byte Spill
	leaq	.L.str307, %rax
	movq	%rax, -10528(%rbp)      # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, -10536(%rbp)      # 8-byte Spill
	leaq	.L.str288, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -10544(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -10552(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -10560(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -10568(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -10576(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10584(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10552(%rbp), %rax      # 8-byte Reload
	movq	%r8, -10592(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10600(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -10608(%rbp)     # 8-byte Spill
	vmovsd	%xmm1, -10616(%rbp)     # 8-byte Spill
	movq	%r15, -10624(%rbp)      # 8-byte Spill
	movl	%r12d, -10628(%rbp)     # 4-byte Spill
	movq	%r13, -10640(%rbp)      # 8-byte Spill
	movq	%r14, -10648(%rbp)      # 8-byte Spill
	movq	%rbx, -10656(%rbp)      # 8-byte Spill
	movq	%r10, -10664(%rbp)      # 8-byte Spill
	movq	%r11, -10672(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10320(%rbp), %r8       # 8-byte Reload
	movq	-10584(%rbp), %r9       # 8-byte Reload
	movq	-10600(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10568(%rbp), %rcx      # 8-byte Reload
	movq	-10336(%rbp), %r8       # 8-byte Reload
	movq	-10584(%rbp), %r9       # 8-byte Reload
	movq	-10544(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10304(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10352(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10544(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10552(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10368(%rbp), %r8       # 8-byte Reload
	movq	-10584(%rbp), %r9       # 8-byte Reload
	movq	-10600(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10616(%rbp), %xmm0     # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10336(%rbp), %rcx      # 8-byte Reload
	movq	-10584(%rbp), %r8       # 8-byte Reload
	movq	-10544(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10608(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10544(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10528(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-9864(%rbp), %rdx       # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10536(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10304(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10352(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10304(%rbp), %rax      # 8-byte Reload
	movq	-9864(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10528(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10680(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10520(%rbp), %rcx      # 8-byte Reload
	movq	-10488(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10680(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10528(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-9328(%rbp), %rdx       # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10472(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10680(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9328(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10584(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10688(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10520(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10504(%rbp), %rcx      # 8-byte Reload
	movq	-10464(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10688(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10520(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9328(%rbp), %rax       # 8-byte Reload
	movq	-10680(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -10696(%rbp)     # 8-byte Spill
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10504(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10408(%rbp), %rcx      # 8-byte Reload
	movq	-10448(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-9856(%rbp), %xmm0      # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10512(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10696(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10504(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10696(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-9856(%rbp), %xmm1      # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10408(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10704(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10480(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10280(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10496(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10304(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10352(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10304(%rbp), %rax      # 8-byte Reload
	movq	-10280(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10480(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10712(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10456(%rbp), %rcx      # 8-byte Reload
	movq	-10488(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10712(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10480(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-9328(%rbp), %rdx       # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10472(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10712(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9328(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10584(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10720(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10456(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10432(%rbp), %rcx      # 8-byte Reload
	movq	-10464(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10720(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10456(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9328(%rbp), %rax       # 8-byte Reload
	movq	-10712(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -10728(%rbp)     # 8-byte Spill
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10432(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10416(%rbp), %rcx      # 8-byte Reload
	movq	-10448(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10272(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10440(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10728(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10432(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10728(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10272(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10416(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10736(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10384(%rbp), %rcx      # 8-byte Reload
	movq	-10424(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10736(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10416(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10704(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10408(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10704(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10736(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10384(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10744(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10392(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10368(%rbp), %rcx      # 8-byte Reload
	movq	-10400(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10744(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10384(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10608(%rbp), %xmm0     # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10608(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10744(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp129:
	.loc	1 117 0                 # feature_extraction.c:117:0
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10368(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10560(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10752(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10320(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10584(%rbp), %rdx      # 8-byte Reload
	movq	-10568(%rbp), %rcx      # 8-byte Reload
	movq	-10336(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10304(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10352(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10304(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10320(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10760(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10576(%rbp), %rcx      # 8-byte Reload
	movq	-10344(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10328(%rbp), %rdx      # 8-byte Reload
	movq	-10568(%rbp), %rcx      # 8-byte Reload
	movq	-10336(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10312(%rbp), %rsi      # 8-byte Reload
	movq	-10760(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10320(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10760(%rbp), %rax      # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10640(%rbp), %rdi      # 8-byte Reload
	movq	-10584(%rbp), %rsi      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10576(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -10761(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10648(%rbp), %rsi      # 8-byte Reload
	movq	-10600(%rbp), %rdx      # 8-byte Reload
	movq	-10624(%rbp), %rcx      # 8-byte Reload
	movq	-10592(%rbp), %r8       # 8-byte Reload
	movl	-10628(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10664(%rbp), %rdi      # 8-byte Reload
	movq	-10568(%rbp), %rsi      # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10672(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10592(%rbp), %rdi      # 8-byte Reload
	movq	-10568(%rbp), %rsi      # 8-byte Reload
	movq	-10568(%rbp), %rdx      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10600(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10761(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10584(%rbp), %rdi      # 8-byte Reload
	movq	-10584(%rbp), %rsi      # 8-byte Reload
	movq	-10584(%rbp), %rcx      # 8-byte Reload
	movq	-10576(%rbp), %r8       # 8-byte Reload
	movq	-10568(%rbp), %r9       # 8-byte Reload
	movq	-10560(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10761(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-10760(%rbp), %rcx      # 8-byte Reload
	.loc	1 120 0                 # feature_extraction.c:120:0
.Ltmp130:
	vmovsd	-10752(%rbp), %xmm0     # 8-byte Reload
.Ltmp131:
	.loc	1 117 0                 # feature_extraction.c:117:0
	movq	%rcx, -10288(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10296(%rbp)     # 8-byte Spill
	jne	.LBB1_35
	jmp	.LBB1_34
.Ltmp132:
.LBB1_35:                               #   in Loop: Header=BB1_33 Depth=2
	movabsq	$1, %rax
	leaq	.L.str321, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str288, %r8
	movabsq	$3, %r9
	leaq	.L.str280, %r10
	movabsq	$113, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str291, %r14
	leaq	.L.str322, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -10776(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -10784(%rbp)      # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, -10792(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -10800(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -10808(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -10816(%rbp)      # 8-byte Spill
	leaq	.L.str290, %rax
	movq	%rax, -10824(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -10832(%rbp)      # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, -10840(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -10848(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -10856(%rbp)      # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, -10864(%rbp)      # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, -10872(%rbp)      # 8-byte Spill
	movabsq	$124, %rax
	movq	%rax, -10880(%rbp)      # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, -10888(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	vmovsd	.LCPI1_1, %xmm0
	movq	%rax, -10896(%rbp)      # 8-byte Spill
	leaq	.L.str306, %rax
	movq	%rax, -10904(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 124 0                 # feature_extraction.c:124:0
	subq	$16, %rsp
	movq	%rax, -10912(%rbp)      # 8-byte Spill
	movq	-10880(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -10920(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -10928(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -10936(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-10864(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10944(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10912(%rbp), %rax      # 8-byte Reload
	movq	%r8, -10952(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10960(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -10968(%rbp)      # 8-byte Spill
	movl	%r12d, -10972(%rbp)     # 4-byte Spill
	movq	%r13, -10984(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10992(%rbp)     # 8-byte Spill
	movq	%r14, -11000(%rbp)      # 8-byte Spill
	movq	%rbx, -11008(%rbp)      # 8-byte Spill
	movq	%r10, -11016(%rbp)      # 8-byte Spill
	movq	%r11, -11024(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10992(%rbp), %xmm0     # 8-byte Reload
	movq	-10936(%rbp), %rdx      # 8-byte Reload
	movq	-10848(%rbp), %rcx      # 8-byte Reload
	movq	-10936(%rbp), %r8       # 8-byte Reload
	movq	-10928(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10752(%rbp), %xmm0     # 8-byte Reload
	movq	-10776(%rbp), %rdx      # 8-byte Reload
	movq	-10904(%rbp), %rcx      # 8-byte Reload
	movq	-10936(%rbp), %r8       # 8-byte Reload
	movq	-10928(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10752(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10992(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-10984(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10776(%rbp), %rdx      # 8-byte Reload
	movq	-10864(%rbp), %rcx      # 8-byte Reload
	movq	-10936(%rbp), %r8       # 8-byte Reload
	movq	-10928(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -11032(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10880(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11000(%rbp), %rdx      # 8-byte Reload
	movq	-10888(%rbp), %rcx      # 8-byte Reload
	movq	-10896(%rbp), %r8       # 8-byte Reload
	movl	-10972(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-10248(%rbp), %rdx      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10872(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	vmovsd	-11032(%rbp), %xmm0     # 8-byte Reload
	movq	-10776(%rbp), %rdx      # 8-byte Reload
	movq	-10864(%rbp), %rcx      # 8-byte Reload
	movq	-10936(%rbp), %r8       # 8-byte Reload
	movq	-10928(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10248(%rbp), %rax      # 8-byte Reload
	vmovsd	-11032(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp133:
	.loc	1 113 0                 # feature_extraction.c:113:0
	subq	$16, %rsp
	movq	-11024(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11000(%rbp), %rdx      # 8-byte Reload
	movq	-10824(%rbp), %rcx      # 8-byte Reload
	movq	-10856(%rbp), %r8       # 8-byte Reload
	movl	-10972(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rdx      # 8-byte Reload
	movq	-10936(%rbp), %rcx      # 8-byte Reload
	movq	-10848(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-9888(%rbp), %rdx       # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10840(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9888(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-10984(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10824(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -11040(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11024(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11000(%rbp), %rdx      # 8-byte Reload
	movq	-10792(%rbp), %rcx      # 8-byte Reload
	movq	-10832(%rbp), %r8       # 8-byte Reload
	movl	-10972(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-11040(%rbp), %rdx      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10824(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11040(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10984(%rbp), %rdi      # 8-byte Reload
	movq	-10784(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10792(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -11044(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11024(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11000(%rbp), %rdx      # 8-byte Reload
	movq	-10944(%rbp), %rcx      # 8-byte Reload
	movq	-10808(%rbp), %r8       # 8-byte Reload
	movl	-10972(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10784(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10800(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11044(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10784(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10792(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11044(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-10984(%rbp), %rdi      # 8-byte Reload
	movq	-10776(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10944(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -11045(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11024(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11000(%rbp), %rdx      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-10920(%rbp), %r8       # 8-byte Reload
	movl	-10972(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10960(%rbp), %rdi      # 8-byte Reload
	movq	-10936(%rbp), %rsi      # 8-byte Reload
	movq	-10936(%rbp), %rdx      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-11016(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10920(%rbp), %rdi      # 8-byte Reload
	movq	-10936(%rbp), %rsi      # 8-byte Reload
	movq	-10936(%rbp), %rdx      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10952(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11045(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10776(%rbp), %rdi      # 8-byte Reload
	movq	-10776(%rbp), %rsi      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10944(%rbp), %r8       # 8-byte Reload
	movq	-10936(%rbp), %r9       # 8-byte Reload
	movq	-10928(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11045(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-11040(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -9880(%rbp)       # 8-byte Spill
	jne	.LBB1_36
	jmp	.LBB1_33
.Ltmp134:
.LBB1_36:                               # %._crit_edge85
                                        #   in Loop: Header=BB1_32 Depth=1
	movabsq	$1, %rax
	leaq	.L.str324, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str277, %r8
	movabsq	$3, %r9
	leaq	.L.str326, %r10
	movabsq	$109, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str280, %r14
	leaq	.L.str325, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -11056(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -11064(%rbp)      # 8-byte Spill
	leaq	.L.str323, %rax
	movq	%rax, -11072(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -11080(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -11088(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11096(%rbp)      # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, -11104(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -11112(%rbp)      # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, -11120(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11128(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 109 0                 # feature_extraction.c:109:0
	subq	$16, %rsp
	movq	%rdi, -11136(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -11144(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -11152(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -11160(%rbp)      # 8-byte Spill
	movq	-11104(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11168(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11160(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11176(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -11184(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -11192(%rbp)      # 8-byte Spill
	movq	%r15, -11200(%rbp)      # 8-byte Spill
	movl	%r12d, -11204(%rbp)     # 4-byte Spill
	movq	%r13, -11216(%rbp)      # 8-byte Spill
	movq	%rbx, -11224(%rbp)      # 8-byte Spill
	movq	%r11, -11232(%rbp)      # 8-byte Spill
	movq	%r10, -11240(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11136(%rbp), %rdi      # 8-byte Reload
	movq	-11096(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rdx      # 8-byte Reload
	movq	-11152(%rbp), %rcx      # 8-byte Reload
	movq	-11128(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11056(%rbp), %rdi      # 8-byte Reload
	movq	-11096(%rbp), %rsi      # 8-byte Reload
	movq	-9552(%rbp), %rdx       # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11120(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9552(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-11216(%rbp), %rdi      # 8-byte Reload
	movq	-11096(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11104(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -11248(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11232(%rbp), %rdi      # 8-byte Reload
	movq	-11224(%rbp), %rsi      # 8-byte Reload
	movq	-11192(%rbp), %rdx      # 8-byte Reload
	movq	-11072(%rbp), %rcx      # 8-byte Reload
	movq	-11112(%rbp), %r8       # 8-byte Reload
	movl	-11204(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11056(%rbp), %rdi      # 8-byte Reload
	movq	-11096(%rbp), %rsi      # 8-byte Reload
	movq	-11248(%rbp), %rdx      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11104(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11248(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-11216(%rbp), %rdi      # 8-byte Reload
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11072(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -11252(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11232(%rbp), %rdi      # 8-byte Reload
	movq	-11224(%rbp), %rsi      # 8-byte Reload
	movq	-11192(%rbp), %rdx      # 8-byte Reload
	movq	-11168(%rbp), %rcx      # 8-byte Reload
	movq	-11088(%rbp), %r8       # 8-byte Reload
	movl	-11204(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11136(%rbp), %rdi      # 8-byte Reload
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11080(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11252(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-11056(%rbp), %rdi      # 8-byte Reload
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11072(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11252(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-11216(%rbp), %rdi      # 8-byte Reload
	movq	-11056(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11168(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -11253(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11232(%rbp), %rdi      # 8-byte Reload
	movq	-11224(%rbp), %rsi      # 8-byte Reload
	movq	-11192(%rbp), %rdx      # 8-byte Reload
	movq	-11200(%rbp), %rcx      # 8-byte Reload
	movq	-11136(%rbp), %r8       # 8-byte Reload
	movl	-11204(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11184(%rbp), %rdi      # 8-byte Reload
	movq	-11152(%rbp), %rsi      # 8-byte Reload
	movq	-11152(%rbp), %rdx      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11240(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11136(%rbp), %rdi      # 8-byte Reload
	movq	-11152(%rbp), %rsi      # 8-byte Reload
	movq	-11152(%rbp), %rdx      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11176(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11253(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11056(%rbp), %rdi      # 8-byte Reload
	movq	-11056(%rbp), %rsi      # 8-byte Reload
	movq	-11056(%rbp), %rcx      # 8-byte Reload
	movq	-11168(%rbp), %r8       # 8-byte Reload
	movq	-11152(%rbp), %r9       # 8-byte Reload
	movq	-11144(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11253(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-11248(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -9544(%rbp)       # 8-byte Spill
	jne	.LBB1_38
	jmp	.LBB1_32
.Ltmp135:
.LBB1_37:                               # %._crit_edge87.thread
	movq	-7928(%rbp), %rax       # 8-byte Reload
	movq	-7920(%rbp), %rcx       # 8-byte Reload
	movq	-7912(%rbp), %rdx       # 8-byte Reload
	movabsq	$1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str332, %r8
	leaq	.L.str8, %r9
	movabsq	$129, %r10
	leaq	.L.str50, %r11
	leaq	.L.str238, %rbx
	leaq	.L.str331, %r14
	movabsq	$2, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -11264(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11272(%rbp)      # 8-byte Spill
	leaq	.L.str330, %rax
	.loc	1 128 0                 # feature_extraction.c:128:0
	subq	$16, %rsp
	movq	%rax, -11280(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -11288(%rbp)      # 8-byte Spill
	movl	$.L.str238, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11296(%rbp)      # 8-byte Spill
	movl	$.L.str327, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11304(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -11312(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -11320(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -11328(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -11336(%rbp)      # 8-byte Spill
	movq	-11312(%rbp), %rax      # 8-byte Reload
	movl	%esi, -11340(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-11296(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -11352(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-11304(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11360(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11320(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11368(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-11340(%rbp), %eax      # 4-byte Reload
	movq	%r9, -11376(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -11384(%rbp)      # 8-byte Spill
	movq	%r14, -11392(%rbp)      # 8-byte Spill
	movq	%r15, -11400(%rbp)      # 8-byte Spill
	movl	%r12d, -11404(%rbp)     # 4-byte Spill
	movq	%rbx, -11416(%rbp)      # 8-byte Spill
	movq	%r11, -11424(%rbp)      # 8-byte Spill
	movq	%r10, -11432(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str228, (%rcx)
	movl	$.L.str294, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -11440(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -11448(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-11448(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -11456(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-11440(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -11464(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movl	$.L.str236, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11448(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11352(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11472(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11304(%rbp), %r8       # 8-byte Reload
	movq	-11448(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str328, %eax
	movl	%eax, %ecx
	movq	-11336(%rbp), %rdi      # 8-byte Reload
	movq	-11312(%rbp), %rsi      # 8-byte Reload
	movq	-11296(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11480(%rbp)      # 8-byte Spill
	movq	-11320(%rbp), %r8       # 8-byte Reload
	movl	-11340(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str228, (%rcx)
	movl	$.L.str273, %eax
	movl	%eax, %r8d
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11448(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11448(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movq	-11472(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11360(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11480(%rbp), %r8       # 8-byte Reload
	movq	-11448(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str329, %eax
	movl	%eax, %ecx
	movq	-11336(%rbp), %rdi      # 8-byte Reload
	movq	-11312(%rbp), %rsi      # 8-byte Reload
	movq	-11296(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11488(%rbp)      # 8-byte Spill
	movq	-11320(%rbp), %r8       # 8-byte Reload
	movl	-11340(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str228, (%rcx)
	movl	$.L.str270, %eax
	movl	%eax, %r8d
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11448(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11448(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str233, (%rcx)
	movq	-11472(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11448(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str330, %eax
	movl	%eax, %ecx
	movl	$128, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-11312(%rbp), %rsi      # 8-byte Reload
	movq	-11296(%rbp), %rdx      # 8-byte Reload
	movl	-11340(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11456(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11448(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11264(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-11384(%rbp), %rdi      # 8-byte Reload
	movq	-11272(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -11496(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-11496(%rbp), %rdx      # 8-byte Reload
	movq	-11288(%rbp), %rcx      # 8-byte Reload
	movq	-11280(%rbp), %r8       # 8-byte Reload
	movq	-11328(%rbp), %r9       # 8-byte Reload
	movq	-11376(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp136:
	#DEBUG_VALUE: process_data:freq_corr_coeff <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 129 0                 # feature_extraction.c:129:0
	subq	$16, %rsp
	movq	-11432(%rbp), %rdi      # 8-byte Reload
	movq	-11424(%rbp), %rsi      # 8-byte Reload
	movq	-11416(%rbp), %rdx      # 8-byte Reload
	movq	-11392(%rbp), %rcx      # 8-byte Reload
	movq	-11400(%rbp), %r8       # 8-byte Reload
	movl	-11404(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11288(%rbp), %rdi      # 8-byte Reload
	movq	-11328(%rbp), %rsi      # 8-byte Reload
	movq	-11328(%rbp), %rdx      # 8-byte Reload
	movq	-11288(%rbp), %rcx      # 8-byte Reload
	movq	-11368(%rbp), %r8       # 8-byte Reload
	movq	-11328(%rbp), %r9       # 8-byte Reload
	movq	-11376(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11496(%rbp), %rcx      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	-11360(%rbp), %rsi      # 8-byte Reload
	movq	-11352(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, -11504(%rbp)      # 8-byte Spill
	movq	%rdx, -11512(%rbp)      # 8-byte Spill
	movq	%rsi, -11520(%rbp)      # 8-byte Spill
	movq	%rdi, -11528(%rbp)      # 8-byte Spill
	jmp	.LBB1_39
.Ltmp137:
.LBB1_38:                               # %._crit_edge87
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str334, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str337, %r8
	movabsq	$3, %r9
	leaq	.L.str336, %r10
	movabsq	$129, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str326, %r14
	leaq	.L.str335, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -11536(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -11544(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -11552(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11560(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -11568(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11576(%rbp)      # 8-byte Spill
	leaq	.L.str333, %rax
	.loc	1 128 0                 # feature_extraction.c:128:0
	subq	$16, %rsp
	movq	%rax, -11584(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -11592(%rbp)      # 8-byte Spill
	movl	$.L.str326, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11600(%rbp)      # 8-byte Spill
	movl	$.L.str333, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11608(%rbp)      # 8-byte Spill
	movl	$128, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11616(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11624(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -11632(%rbp)      # 8-byte Spill
	movq	-11616(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -11640(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-11632(%rbp), %rax      # 8-byte Reload
	movl	%esi, -11644(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-11600(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -11656(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-11608(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11664(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11624(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11672(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-11644(%rbp), %eax      # 4-byte Reload
	movq	%r9, -11680(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -11688(%rbp)      # 8-byte Spill
	movq	%r14, -11696(%rbp)      # 8-byte Spill
	movq	%r15, -11704(%rbp)      # 8-byte Spill
	movl	%r12d, -11708(%rbp)     # 4-byte Spill
	movq	%rbx, -11720(%rbp)      # 8-byte Spill
	movq	%r11, -11728(%rbp)      # 8-byte Spill
	movq	%r10, -11736(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str270, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-9336(%rbp), %rdx       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9336(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-11688(%rbp), %rdi      # 8-byte Reload
	movq	-11576(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -11744(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-11744(%rbp), %rdx      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11584(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:freq_corr_coeff <- undef
.Ltmp138:
	#DEBUG_VALUE: channel <- 0
	.loc	1 129 0                 # feature_extraction.c:129:0
	subq	$16, %rsp
	movq	-11728(%rbp), %rdi      # 8-byte Reload
	movq	-11720(%rbp), %rsi      # 8-byte Reload
	movq	-11696(%rbp), %rdx      # 8-byte Reload
	movq	-11656(%rbp), %rcx      # 8-byte Reload
	movq	-11568(%rbp), %r8       # 8-byte Reload
	movl	-11708(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11640(%rbp), %rdi      # 8-byte Reload
	movq	-11544(%rbp), %rsi      # 8-byte Reload
	movq	-11536(%rbp), %rdx      # 8-byte Reload
	movq	-11536(%rbp), %rcx      # 8-byte Reload
	movq	-11560(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11664(%rbp), %rdi      # 8-byte Reload
	movq	-11544(%rbp), %rsi      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11552(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11688(%rbp), %rdi      # 8-byte Reload
	movq	-11664(%rbp), %rsi      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11656(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -11745(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11728(%rbp), %rdi      # 8-byte Reload
	movq	-11720(%rbp), %rsi      # 8-byte Reload
	movq	-11696(%rbp), %rdx      # 8-byte Reload
	movq	-11704(%rbp), %rcx      # 8-byte Reload
	movq	-11640(%rbp), %r8       # 8-byte Reload
	movl	-11708(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11680(%rbp), %rdi      # 8-byte Reload
	movq	-11536(%rbp), %rsi      # 8-byte Reload
	movq	-11536(%rbp), %rdx      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11736(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11640(%rbp), %rdi      # 8-byte Reload
	movq	-11536(%rbp), %rsi      # 8-byte Reload
	movq	-11536(%rbp), %rdx      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11672(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11745(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11664(%rbp), %rdi      # 8-byte Reload
	movq	-11664(%rbp), %rsi      # 8-byte Reload
	movq	-11664(%rbp), %rcx      # 8-byte Reload
	movq	-11656(%rbp), %r8       # 8-byte Reload
	movq	-11536(%rbp), %r9       # 8-byte Reload
	movq	-11592(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11745(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-11536(%rbp), %rcx      # 8-byte Reload
	movq	-9512(%rbp), %rdx       # 8-byte Reload
	movq	-9336(%rbp), %rsi       # 8-byte Reload
	movq	-9528(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -11760(%rbp)      # 8-byte Spill
	movq	%rdx, -11768(%rbp)      # 8-byte Spill
	movq	%rsi, -11776(%rbp)      # 8-byte Spill
	movq	%rdi, -11784(%rbp)      # 8-byte Spill
	jne	.LBB1_40
	jmp	.LBB1_44
.Ltmp139:
.LBB1_39:                               # %.preheader73
	movq	-11528(%rbp), %rax      # 8-byte Reload
	movq	-11520(%rbp), %rcx      # 8-byte Reload
	movq	-11512(%rbp), %rdx      # 8-byte Reload
	movq	-11504(%rbp), %rsi      # 8-byte Reload
	movabsq	$0, %rdi
	movabsq	$1, %r8
	leaq	.L.str342, %r9
	leaq	.L.str8, %r10
	movabsq	$2, %r11
	leaq	.L.str337, %rbx
	movabsq	$3, %r14
	leaq	.L.str344, %r15
	movabsq	$133, %r12
	leaq	.L.str50, %r13
	movq	%rax, -11792(%rbp)      # 8-byte Spill
	leaq	.L.str332, %rax
	movq	%rax, -11800(%rbp)      # 8-byte Spill
	leaq	.L.str343, %rax
	movq	%rsi, -11808(%rbp)      # 8-byte Spill
.Ltmp140:
	#DEBUG_VALUE: process_data:freq_corr_coeff <- [RBP+-11808]
	#DEBUG_VALUE: process_data:freq_corr_coeff <- [RBP+-11808]
	movl	$1, %esi
	movq	%rax, -11816(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -11824(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -11832(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -11840(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11848(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -11856(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11864(%rbp)      # 8-byte Spill
	leaq	.L.str341, %rax
	movq	%rax, -11872(%rbp)      # 8-byte Spill
	leaq	.L.str238, %rax
	movq	%rax, -11880(%rbp)      # 8-byte Spill
	leaq	.L.str327, %rax
	movq	%rax, -11888(%rbp)      # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, -11896(%rbp)      # 8-byte Spill
	leaq	.L.str336, %rax
	movq	%rax, -11904(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -11912(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -11920(%rbp)      # 8-byte Spill
	leaq	.L.str340, %rax
	movq	%rax, -11928(%rbp)      # 8-byte Spill
	leaq	.L.str328, %rax
	movq	%rax, -11936(%rbp)      # 8-byte Spill
	leaq	.L.str273, %rax
	movq	%rax, -11944(%rbp)      # 8-byte Spill
	leaq	.L.str339, %rax
	movq	%rax, -11952(%rbp)      # 8-byte Spill
	leaq	.L.str329, %rax
	movq	%rax, -11960(%rbp)      # 8-byte Spill
	leaq	.L.str270, %rax
	movq	%rax, -11968(%rbp)      # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, -11976(%rbp)      # 8-byte Spill
	leaq	.L.str330, %rax
	movq	%rax, -11984(%rbp)      # 8-byte Spill
	leaq	.L.str333, %rax
	.loc	1 133 0                 # feature_extraction.c:133:0
.Ltmp141:
	subq	$16, %rsp
	movq	%rax, -11992(%rbp)      # 8-byte Spill
	movq	-11912(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -12000(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -12004(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-11800(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -12016(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-11976(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12024(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11920(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12032(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-12004(%rbp), %eax      # 4-byte Reload
	movq	%r9, -12040(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -12048(%rbp)      # 8-byte Spill
	movq	%r15, -12056(%rbp)      # 8-byte Spill
	movq	%r12, -12064(%rbp)      # 8-byte Spill
	movq	%r13, -12072(%rbp)      # 8-byte Spill
	movq	%rbx, -12080(%rbp)      # 8-byte Spill
	movq	%r11, -12088(%rbp)      # 8-byte Spill
	movq	%r10, -12096(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11992(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11904(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11984(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11824(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-11808(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11976(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11912(%rbp), %rdi      # 8-byte Reload
	movq	-12072(%rbp), %rsi      # 8-byte Reload
	movq	-11800(%rbp), %rdx      # 8-byte Reload
	movq	-11952(%rbp), %rcx      # 8-byte Reload
	movq	-11920(%rbp), %r8       # 8-byte Reload
	movl	-12004(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11968(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11904(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11960(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11824(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12016(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11952(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11912(%rbp), %rdi      # 8-byte Reload
	movq	-12072(%rbp), %rsi      # 8-byte Reload
	movq	-11800(%rbp), %rdx      # 8-byte Reload
	movq	-11928(%rbp), %rcx      # 8-byte Reload
	movq	-11920(%rbp), %r8       # 8-byte Reload
	movl	-12004(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11944(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11904(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11936(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11824(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12024(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11928(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11912(%rbp), %rdi      # 8-byte Reload
	movq	-12072(%rbp), %rsi      # 8-byte Reload
	movq	-11800(%rbp), %rdx      # 8-byte Reload
	movq	-11872(%rbp), %rcx      # 8-byte Reload
	movq	-11920(%rbp), %r8       # 8-byte Reload
	movl	-12004(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11896(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11904(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11888(%rbp), %r8       # 8-byte Reload
	movq	-12032(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11824(%rbp), %rdi      # 8-byte Reload
	movq	-11864(%rbp), %rsi      # 8-byte Reload
	movq	-11792(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11872(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-11880(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12064(%rbp), %rdi      # 8-byte Reload
	movq	-12072(%rbp), %rsi      # 8-byte Reload
	movq	-11800(%rbp), %rdx      # 8-byte Reload
	movq	-12040(%rbp), %rcx      # 8-byte Reload
	movq	-11856(%rbp), %r8       # 8-byte Reload
	movl	-12004(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-11832(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12000(%rbp), %rcx      # 8-byte Reload
	movq	-11848(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-11832(%rbp), %rsi      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-11840(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-11824(%rbp), %rdi      # 8-byte Reload
	movq	-12032(%rbp), %rsi      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-12040(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -12097(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12064(%rbp), %rdi      # 8-byte Reload
	movq	-12072(%rbp), %rsi      # 8-byte Reload
	movq	-11800(%rbp), %rdx      # 8-byte Reload
	movq	-11816(%rbp), %rcx      # 8-byte Reload
	movq	-12088(%rbp), %r8       # 8-byte Reload
	movl	-12004(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12048(%rbp), %rdi      # 8-byte Reload
	movq	-12000(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-12056(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12088(%rbp), %rdi      # 8-byte Reload
	movq	-12000(%rbp), %rsi      # 8-byte Reload
	movq	-12000(%rbp), %rdx      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-12080(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12097(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-12032(%rbp), %rdi      # 8-byte Reload
	movq	-12032(%rbp), %rsi      # 8-byte Reload
	movq	-12032(%rbp), %rcx      # 8-byte Reload
	movq	-12040(%rbp), %r8       # 8-byte Reload
	movq	-12000(%rbp), %r9       # 8-byte Reload
	movq	-12096(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12097(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-12000(%rbp), %rcx      # 8-byte Reload
	movq	-12024(%rbp), %rdx      # 8-byte Reload
	movq	-12016(%rbp), %rsi      # 8-byte Reload
	movq	-11792(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, -12112(%rbp)      # 8-byte Spill
	movq	%rdx, -11768(%rbp)      # 8-byte Spill
	movq	%rsi, -11776(%rbp)      # 8-byte Spill
	movq	%rdi, -11784(%rbp)      # 8-byte Spill
	jne	.LBB1_41
	jmp	.LBB1_44
.Ltmp142:
.LBB1_40:                               # %.lr.ph78
                                        # =>This Inner Loop Header: Depth=1
	movq	-11760(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str357, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str336, %r9
	movabsq	$3, %r10
	leaq	.L.str332, %r11
	movabsq	$129, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str358, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -12120(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -12128(%rbp)      # 8-byte Spill
	leaq	.L.str356, %rax
	movq	%rax, -12136(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -12144(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -12152(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -12160(%rbp)      # 8-byte Spill
	leaq	.L.str346, %rax
	movq	%rax, -12168(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -12176(%rbp)      # 8-byte Spill
	leaq	.L.str345, %rax
	movq	%rax, -12184(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -12192(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -12200(%rbp)      # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, -12208(%rbp)      # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, -12216(%rbp)      # 8-byte Spill
	movabsq	$131, %rax
	movq	%rax, -12224(%rbp)      # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, -12232(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -12240(%rbp)      # 8-byte Spill
	leaq	.L.str333, %rax
	movq	%rax, -12248(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -12256(%rbp)      # 8-byte Spill
	leaq	.L.str352, %rax
	movq	%rax, -12264(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -12272(%rbp)      # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, -12280(%rbp)      # 8-byte Spill
	leaq	.L.str351, %rax
	movq	%rax, -12288(%rbp)      # 8-byte Spill
	leaq	.L.str350, %rax
	movq	%rax, -12296(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -12304(%rbp)      # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, -12312(%rbp)      # 8-byte Spill
	leaq	.L.str349, %rax
	movq	%rax, -12320(%rbp)      # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, -12328(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -12336(%rbp)      # 8-byte Spill
	leaq	.L.str326, %rax
	movq	%rax, -12344(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -12352(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 131 0                 # feature_extraction.c:131:0
.Ltmp143:
	subq	$16, %rsp
	movq	%rax, -12360(%rbp)      # 8-byte Spill
	movq	-12352(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -12368(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -12376(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -12384(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-12184(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12392(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12360(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12400(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12408(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -12416(%rbp)      # 8-byte Spill
	movq	%r15, -12424(%rbp)      # 8-byte Spill
	movl	%r12d, -12428(%rbp)     # 4-byte Spill
	movq	%r13, -12440(%rbp)      # 8-byte Spill
	movq	%rbx, -12448(%rbp)      # 8-byte Spill
	movq	%r11, -12456(%rbp)      # 8-byte Spill
	movq	%r10, -12464(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12376(%rbp), %rdx      # 8-byte Reload
	movq	-12376(%rbp), %rcx      # 8-byte Reload
	movq	-12192(%rbp), %r8       # 8-byte Reload
	movq	-12392(%rbp), %r9       # 8-byte Reload
	movq	-12344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12376(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12168(%rbp), %r8       # 8-byte Reload
	movq	-12392(%rbp), %r9       # 8-byte Reload
	movq	-12408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12120(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12328(%rbp), %rcx      # 8-byte Reload
	movq	-12176(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12120(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12120(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12328(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -12468(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12312(%rbp), %rcx      # 8-byte Reload
	movq	-12336(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12144(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12468(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12328(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12468(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12312(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -12472(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12176(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12120(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12120(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12320(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -12476(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12296(%rbp), %rcx      # 8-byte Reload
	movq	-12200(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-12476(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12320(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12472(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12312(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12472(%rbp), %r12d     # 4-byte Reload
	movl	-12476(%rbp), %esi      # 4-byte Reload
	addl	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12296(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -12480(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12288(%rbp), %rcx      # 8-byte Reload
	movq	-12304(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-12480(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12296(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12480(%rbp), %r12d     # 4-byte Reload
	movslq	%r12d, %rax
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12288(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12488(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12264(%rbp), %rcx      # 8-byte Reload
	movq	-12256(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12488(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12288(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-9528(%rbp), %rdx       # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12280(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12488(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9528(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-12392(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12496(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12264(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12208(%rbp), %rcx      # 8-byte Reload
	movq	-12272(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12496(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12264(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9528(%rbp), %rax       # 8-byte Reload
	movq	-12488(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -12504(%rbp)     # 8-byte Spill
	movq	-12392(%rbp), %rdx      # 8-byte Reload
	movq	-12208(%rbp), %rcx      # 8-byte Reload
	movq	-12376(%rbp), %r8       # 8-byte Reload
	movq	-12368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12216(%rbp), %rcx      # 8-byte Reload
	movq	-12256(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12120(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-11744(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12248(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12120(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11744(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-12392(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12512(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12216(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12224(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12232(%rbp), %rcx      # 8-byte Reload
	movq	-12240(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12512(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12216(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12504(%rbp), %xmm0     # 8-byte Reload
	movq	-12392(%rbp), %rdx      # 8-byte Reload
	movq	-12208(%rbp), %rcx      # 8-byte Reload
	movq	-12376(%rbp), %r8       # 8-byte Reload
	movq	-12368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-11744(%rbp), %rax      # 8-byte Reload
	movq	-12120(%rbp), %rcx      # 8-byte Reload
	vmovsd	-12504(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp144:
	.loc	1 129 0                 # feature_extraction.c:129:0
	subq	$16, %rsp
	movq	-12448(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12168(%rbp), %rcx      # 8-byte Reload
	movq	-12200(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rdx      # 8-byte Reload
	movq	-12376(%rbp), %rcx      # 8-byte Reload
	movq	-12192(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12120(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12120(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12168(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12520(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12448(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12136(%rbp), %rcx      # 8-byte Reload
	movq	-12176(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12160(%rbp), %rsi      # 8-byte Reload
	movq	-12520(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12168(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12520(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12136(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -12524(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12448(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12384(%rbp), %rcx      # 8-byte Reload
	movq	-12152(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12144(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12524(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12128(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12136(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12524(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-12440(%rbp), %rdi      # 8-byte Reload
	movq	-12392(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12384(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -12525(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12448(%rbp), %rdi      # 8-byte Reload
	movq	-12416(%rbp), %rsi      # 8-byte Reload
	movq	-12408(%rbp), %rdx      # 8-byte Reload
	movq	-12424(%rbp), %rcx      # 8-byte Reload
	movq	-12400(%rbp), %r8       # 8-byte Reload
	movl	-12428(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12464(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12376(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12456(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12400(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12376(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12408(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12525(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12392(%rbp), %rdi      # 8-byte Reload
	movq	-12392(%rbp), %rsi      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12384(%rbp), %r8       # 8-byte Reload
	movq	-12376(%rbp), %r9       # 8-byte Reload
	movq	-12368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12525(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-11744(%rbp), %rcx      # 8-byte Reload
	movq	-9336(%rbp), %rdx       # 8-byte Reload
	movq	-9512(%rbp), %rsi       # 8-byte Reload
	movq	-9528(%rbp), %rdi       # 8-byte Reload
	movq	-12520(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11504(%rbp)      # 8-byte Spill
	movq	%rdx, -11512(%rbp)      # 8-byte Spill
	movq	%rsi, -11520(%rbp)      # 8-byte Spill
	movq	%rdi, -11528(%rbp)      # 8-byte Spill
	movq	%r8, -11760(%rbp)       # 8-byte Spill
	jne	.LBB1_39
	jmp	.LBB1_40
.Ltmp145:
.LBB1_41:                               # %.lr.ph71
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_42 Depth 2
	movq	-12112(%rbp), %rax      # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str368, %r8
	leaq	.L.str8, %rsi
	movabsq	$135, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str344, %r10
	leaq	.L.str367, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str366, %r13
	movq	%rax, -12536(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -12544(%rbp)      # 8-byte Spill
	leaq	.L.str365, %rax
	movq	%rax, -12552(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -12560(%rbp)      # 8-byte Spill
	leaq	.L.str364, %rax
	movq	%rax, -12568(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -12576(%rbp)      # 8-byte Spill
	movabsq	$137, %rax
	movq	%rax, -12584(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -12592(%rbp)      # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, -12600(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -12608(%rbp)      # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, -12616(%rbp)      # 8-byte Spill
	leaq	.L.str362, %rax
	movq	%rax, -12624(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -12632(%rbp)      # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, -12640(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -12648(%rbp)      # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, -12656(%rbp)      # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, -12664(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -12672(%rbp)      # 8-byte Spill
	leaq	.L.str332, %rax
	movq	%rax, -12680(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -12688(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 137 0                 # feature_extraction.c:137:0
.Ltmp146:
	subq	$16, %rsp
	movq	%rax, -12696(%rbp)      # 8-byte Spill
	movq	-12688(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -12704(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -12712(%rbp)      # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -12720(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-12600(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12728(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12696(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12736(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12744(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -12748(%rbp)     # 4-byte Spill
	movq	%r15, -12760(%rbp)      # 8-byte Spill
	movq	%rbx, -12768(%rbp)      # 8-byte Spill
	movq	%r12, -12776(%rbp)      # 8-byte Spill
	movq	%r13, -12784(%rbp)      # 8-byte Spill
	movq	%r11, -12792(%rbp)      # 8-byte Spill
	movq	%r10, -12800(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12768(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12728(%rbp), %rdx      # 8-byte Reload
	movq	-12728(%rbp), %rcx      # 8-byte Reload
	movq	-12672(%rbp), %r8       # 8-byte Reload
	movq	-12720(%rbp), %r9       # 8-byte Reload
	movq	-12680(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12728(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12664(%rbp), %r8       # 8-byte Reload
	movq	-12720(%rbp), %r9       # 8-byte Reload
	movq	-12656(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12536(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12600(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12656(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12584(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12624(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12768(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12536(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12600(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-11808(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12640(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12536(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11808(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-12720(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12808(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12624(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12584(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12616(%rbp), %rcx      # 8-byte Reload
	movq	-12632(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12808(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12624(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11808(%rbp), %rax      # 8-byte Reload
	movq	-12536(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -12816(%rbp)     # 8-byte Spill
	movq	-12720(%rbp), %rdx      # 8-byte Reload
	movq	-12616(%rbp), %rcx      # 8-byte Reload
	movq	-12728(%rbp), %r8       # 8-byte Reload
	movq	-12712(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12584(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12568(%rbp), %rcx      # 8-byte Reload
	movq	-12608(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	-12536(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12600(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12536(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12544(%rbp), %rsi      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12568(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -12820(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12584(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12552(%rbp), %rcx      # 8-byte Reload
	movq	-12592(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-12768(%rbp), %rdi      # 8-byte Reload
	movq	-12544(%rbp), %rsi      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12576(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12820(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12544(%rbp), %rsi      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12568(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12820(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
.Ltmp147:
	.loc	1 135 0                 # feature_extraction.c:135:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12544(%rbp), %rsi      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12552(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -12824(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12704(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12784(%rbp), %rcx      # 8-byte Reload
	movq	-12560(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-12824(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12544(%rbp), %rsi      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12552(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12824(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-12760(%rbp), %rdi      # 8-byte Reload
	movq	-12776(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12784(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12832(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12704(%rbp), %rdi      # 8-byte Reload
	movq	-12744(%rbp), %rsi      # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12792(%rbp), %rcx      # 8-byte Reload
	movq	-12768(%rbp), %r8       # 8-byte Reload
	movl	-12748(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12720(%rbp), %rdi      # 8-byte Reload
	movq	-12728(%rbp), %rsi      # 8-byte Reload
	movq	-12728(%rbp), %rdx      # 8-byte Reload
	movq	-12720(%rbp), %rcx      # 8-byte Reload
	movq	-12736(%rbp), %r8       # 8-byte Reload
	movq	-12728(%rbp), %r9       # 8-byte Reload
	movq	-12712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12728(%rbp), %rax      # 8-byte Reload
	movq	%rax, -12840(%rbp)      # 8-byte Spill
.LBB1_42:                               #   Parent Loop BB1_41 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-12840(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str381, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str368, %r9
	movabsq	$3, %r10
	leaq	.L.str361, %r11
	movabsq	$135, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str382, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -12848(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -12856(%rbp)      # 8-byte Spill
	leaq	.L.str380, %rax
	movq	%rax, -12864(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -12872(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -12880(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -12888(%rbp)      # 8-byte Spill
	leaq	.L.str370, %rax
	movq	%rax, -12896(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -12904(%rbp)      # 8-byte Spill
	leaq	.L.str369, %rax
	movq	%rax, -12912(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -12920(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -12928(%rbp)      # 8-byte Spill
	leaq	.L.str378, %rax
	movq	%rax, -12936(%rbp)      # 8-byte Spill
	leaq	.L.str376, %rax
	movq	%rax, -12944(%rbp)      # 8-byte Spill
	movabsq	$137, %rax
	movq	%rax, -12952(%rbp)      # 8-byte Spill
	leaq	.L.str379, %rax
	movq	%rax, -12960(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -12968(%rbp)      # 8-byte Spill
	leaq	.L.str377, %rax
	movq	%rax, -12976(%rbp)      # 8-byte Spill
	leaq	.L.str374, %rax
	movq	%rax, -12984(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -12992(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -13000(%rbp)      # 8-byte Spill
	leaq	.L.str341, %rax
	movq	%rax, -13008(%rbp)      # 8-byte Spill
	leaq	.L.str375, %rax
	movq	%rax, -13016(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -13024(%rbp)      # 8-byte Spill
	leaq	.L.str366, %rax
	movq	%rax, -13032(%rbp)      # 8-byte Spill
	leaq	.L.str373, %rax
	movq	%rax, -13040(%rbp)      # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -13048(%rbp)      # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -13056(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -13064(%rbp)      # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, -13072(%rbp)      # 8-byte Spill
	leaq	.L.str372, %rax
	movq	%rax, -13080(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -13088(%rbp)      # 8-byte Spill
	leaq	.L.str371, %rax
	movq	%rax, -13096(%rbp)      # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, -13104(%rbp)      # 8-byte Spill
	leaq	.L.str344, %rax
	movq	%rax, -13112(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -13120(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 137 0                 # feature_extraction.c:137:0
.Ltmp148:
	subq	$16, %rsp
	movq	%rax, -13128(%rbp)      # 8-byte Spill
	movq	-13120(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13136(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -13144(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -13152(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-12912(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13160(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13128(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13168(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -13176(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -13184(%rbp)      # 8-byte Spill
	movq	%r15, -13192(%rbp)      # 8-byte Spill
	movl	%r12d, -13196(%rbp)     # 4-byte Spill
	movq	%r13, -13208(%rbp)      # 8-byte Spill
	movq	%rbx, -13216(%rbp)      # 8-byte Spill
	movq	%r11, -13224(%rbp)      # 8-byte Spill
	movq	%r10, -13232(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13144(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12896(%rbp), %r8       # 8-byte Reload
	movq	-13160(%rbp), %r9       # 8-byte Reload
	movq	-13176(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13144(%rbp), %rdx      # 8-byte Reload
	movq	-13144(%rbp), %rcx      # 8-byte Reload
	movq	-12920(%rbp), %r8       # 8-byte Reload
	movq	-13160(%rbp), %r9       # 8-byte Reload
	movq	-13112(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-12848(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12912(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13112(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13096(%rbp), %rcx      # 8-byte Reload
	movq	-13024(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-12848(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12912(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-11808(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13104(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12848(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11808(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13160(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13240(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13096(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13080(%rbp), %rcx      # 8-byte Reload
	movq	-13000(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13240(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13096(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11808(%rbp), %rax      # 8-byte Reload
	movq	-12848(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -13248(%rbp)     # 8-byte Spill
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13080(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13040(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13248(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13080(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12816(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13072(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-12816(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-13248(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13040(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -13256(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12984(%rbp), %rcx      # 8-byte Reload
	movq	-13064(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13048(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13056(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13256(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13040(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-13256(%rbp), %xmm0     # 8-byte Reload
	callq	sqrt
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -13264(%rbp)     # 8-byte Spill
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12984(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13016(%rbp), %rcx      # 8-byte Reload
	movq	-12928(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-12832(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13032(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-12848(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12912(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12848(%rbp), %rax      # 8-byte Reload
	movq	-12832(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13016(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -13272(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12944(%rbp), %rcx      # 8-byte Reload
	movq	-13024(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13272(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13016(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-11792(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13008(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13272(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11792(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13160(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13280(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12944(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12976(%rbp), %rcx      # 8-byte Reload
	movq	-13000(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13280(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12944(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11792(%rbp), %rax      # 8-byte Reload
	movq	-13272(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -13288(%rbp)     # 8-byte Spill
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12976(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12936(%rbp), %rcx      # 8-byte Reload
	movq	-12992(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13264(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12984(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13288(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12976(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-13288(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-13264(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12936(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -13296(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12952(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12960(%rbp), %rcx      # 8-byte Reload
	movq	-12968(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13280(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12944(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13296(%rbp), %xmm0     # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-12936(%rbp), %rcx      # 8-byte Reload
	movq	-13144(%rbp), %r8       # 8-byte Reload
	movq	-13136(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-11792(%rbp), %rax      # 8-byte Reload
	movq	-13272(%rbp), %rcx      # 8-byte Reload
	vmovsd	-13296(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp149:
	.loc	1 135 0                 # feature_extraction.c:135:0
	subq	$16, %rsp
	movq	-13216(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12896(%rbp), %rcx      # 8-byte Reload
	movq	-12928(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rdx      # 8-byte Reload
	movq	-13144(%rbp), %rcx      # 8-byte Reload
	movq	-12920(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-12848(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12912(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12848(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12896(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -13304(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13216(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-12864(%rbp), %rcx      # 8-byte Reload
	movq	-12904(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12888(%rbp), %rsi      # 8-byte Reload
	movq	-13304(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12896(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13304(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-12856(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12864(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -13308(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13216(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13152(%rbp), %rcx      # 8-byte Reload
	movq	-12880(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-12856(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12872(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13308(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-12856(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-12864(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13308(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-13160(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13152(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -13309(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13216(%rbp), %rdi      # 8-byte Reload
	movq	-13184(%rbp), %rsi      # 8-byte Reload
	movq	-13176(%rbp), %rdx      # 8-byte Reload
	movq	-13192(%rbp), %rcx      # 8-byte Reload
	movq	-13168(%rbp), %r8       # 8-byte Reload
	movl	-13196(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13232(%rbp), %rdi      # 8-byte Reload
	movq	-13144(%rbp), %rsi      # 8-byte Reload
	movq	-13144(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13224(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13168(%rbp), %rdi      # 8-byte Reload
	movq	-13144(%rbp), %rsi      # 8-byte Reload
	movq	-13144(%rbp), %rdx      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13176(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13309(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-13160(%rbp), %rsi      # 8-byte Reload
	movq	-13160(%rbp), %rcx      # 8-byte Reload
	movq	-13152(%rbp), %r8       # 8-byte Reload
	movq	-13144(%rbp), %r9       # 8-byte Reload
	movq	-13136(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13309(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-13304(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -12840(%rbp)      # 8-byte Spill
	jne	.LBB1_43
	jmp	.LBB1_42
.Ltmp150:
.LBB1_43:                               # %._crit_edge72
                                        #   in Loop: Header=BB1_41 Depth=1
	movabsq	$1, %rax
	leaq	.L.str384, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str344, %r8
	movabsq	$3, %r9
	leaq	.L.str337, %r10
	movabsq	$133, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str361, %r14
	leaq	.L.str385, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -13320(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -13328(%rbp)      # 8-byte Spill
	leaq	.L.str383, %rax
	movq	%rax, -13336(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -13344(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -13352(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -13360(%rbp)      # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, -13368(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -13376(%rbp)      # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, -13384(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -13392(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 133 0                 # feature_extraction.c:133:0
	subq	$16, %rsp
	movq	%rdi, -13400(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -13408(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -13416(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -13424(%rbp)      # 8-byte Spill
	movq	-13368(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13432(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13424(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13440(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -13448(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -13456(%rbp)      # 8-byte Spill
	movq	%r15, -13464(%rbp)      # 8-byte Spill
	movl	%r12d, -13468(%rbp)     # 4-byte Spill
	movq	%r13, -13480(%rbp)      # 8-byte Spill
	movq	%rbx, -13488(%rbp)      # 8-byte Spill
	movq	%r11, -13496(%rbp)      # 8-byte Spill
	movq	%r10, -13504(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13400(%rbp), %rdi      # 8-byte Reload
	movq	-13360(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rdx      # 8-byte Reload
	movq	-13416(%rbp), %rcx      # 8-byte Reload
	movq	-13392(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13320(%rbp), %rdi      # 8-byte Reload
	movq	-13360(%rbp), %rsi      # 8-byte Reload
	movq	-12536(%rbp), %rdx      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13384(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12536(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-13480(%rbp), %rdi      # 8-byte Reload
	movq	-13360(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13368(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -13512(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13496(%rbp), %rdi      # 8-byte Reload
	movq	-13488(%rbp), %rsi      # 8-byte Reload
	movq	-13456(%rbp), %rdx      # 8-byte Reload
	movq	-13336(%rbp), %rcx      # 8-byte Reload
	movq	-13376(%rbp), %r8       # 8-byte Reload
	movl	-13468(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13320(%rbp), %rdi      # 8-byte Reload
	movq	-13360(%rbp), %rsi      # 8-byte Reload
	movq	-13512(%rbp), %rdx      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13368(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13512(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13480(%rbp), %rdi      # 8-byte Reload
	movq	-13328(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13336(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -13516(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13496(%rbp), %rdi      # 8-byte Reload
	movq	-13488(%rbp), %rsi      # 8-byte Reload
	movq	-13456(%rbp), %rdx      # 8-byte Reload
	movq	-13432(%rbp), %rcx      # 8-byte Reload
	movq	-13352(%rbp), %r8       # 8-byte Reload
	movl	-13468(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13400(%rbp), %rdi      # 8-byte Reload
	movq	-13328(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13344(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13516(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13320(%rbp), %rdi      # 8-byte Reload
	movq	-13328(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13336(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13516(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-13480(%rbp), %rdi      # 8-byte Reload
	movq	-13320(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13432(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -13517(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13496(%rbp), %rdi      # 8-byte Reload
	movq	-13488(%rbp), %rsi      # 8-byte Reload
	movq	-13456(%rbp), %rdx      # 8-byte Reload
	movq	-13464(%rbp), %rcx      # 8-byte Reload
	movq	-13400(%rbp), %r8       # 8-byte Reload
	movl	-13468(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13448(%rbp), %rdi      # 8-byte Reload
	movq	-13416(%rbp), %rsi      # 8-byte Reload
	movq	-13416(%rbp), %rdx      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13504(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13400(%rbp), %rdi      # 8-byte Reload
	movq	-13416(%rbp), %rsi      # 8-byte Reload
	movq	-13416(%rbp), %rdx      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13440(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13517(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13320(%rbp), %rdi      # 8-byte Reload
	movq	-13320(%rbp), %rsi      # 8-byte Reload
	movq	-13320(%rbp), %rcx      # 8-byte Reload
	movq	-13432(%rbp), %r8       # 8-byte Reload
	movq	-13416(%rbp), %r9       # 8-byte Reload
	movq	-13408(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13517(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-13512(%rbp), %rcx      # 8-byte Reload
	movq	-12024(%rbp), %rdx      # 8-byte Reload
	movq	-12016(%rbp), %rsi      # 8-byte Reload
	movq	-11792(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, -12112(%rbp)      # 8-byte Spill
	movq	%rdx, -11768(%rbp)      # 8-byte Spill
	movq	%rsi, -11776(%rbp)      # 8-byte Spill
	movq	%rdi, -11784(%rbp)      # 8-byte Spill
	jne	.LBB1_44
	jmp	.LBB1_41
.Ltmp151:
.LBB1_44:                               # %._crit_edge75
	movq	-11784(%rbp), %rax      # 8-byte Reload
	movq	-11776(%rbp), %rcx      # 8-byte Reload
	movq	-11768(%rbp), %rdx      # 8-byte Reload
	movabsq	$1, %rsi
	leaq	.L.str395, %rdi
	movabsq	$0, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	.L.str398, %r11
	movabsq	$3, %rbx
	leaq	.L.str397, %r14
	movabsq	$155, %r15
	leaq	.L.str50, %r12
	leaq	.L.str337, %r13
	movq	%rax, -13528(%rbp)      # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rsi, -13536(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -13544(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -13552(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -13560(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -13568(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -13576(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -13584(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -13592(%rbp)      # 8-byte Spill
	leaq	.L.str394, %rax
	.loc	1 142 0                 # feature_extraction.c:142:0
	subq	$16, %rsp
	movq	%rax, -13600(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%esi, -13604(%rbp)      # 4-byte Spill
	movl	$.L.str337, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13616(%rbp)      # 8-byte Spill
	movl	$.L.str386, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13624(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -13632(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -13640(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -13648(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -13656(%rbp)      # 8-byte Spill
	movq	-13632(%rbp), %rax      # 8-byte Reload
	movl	%esi, -13660(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-13616(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -13672(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-13624(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13680(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13640(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13688(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-13660(%rbp), %eax      # 4-byte Reload
	movq	%r9, -13696(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -13704(%rbp)      # 8-byte Spill
	movq	%r14, -13712(%rbp)      # 8-byte Spill
	movq	%r15, -13720(%rbp)      # 8-byte Spill
	movq	%r12, -13728(%rbp)      # 8-byte Spill
	movq	%rbx, -13736(%rbp)      # 8-byte Spill
	movq	%r11, -13744(%rbp)      # 8-byte Spill
	movq	%r10, -13752(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str326, (%rcx)
	movl	$.L.str273, %eax
	movl	%eax, %r8d
	movl	$3, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, -13760(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -13768(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-13768(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -13776(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-13760(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -13784(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	movl	%eax, -13788(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str361, (%rcx)
	movl	$.L.str340, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %r8       # 8-byte Reload
	movq	%rdx, -13800(%rbp)      # 8-byte Spill
	movq	%r8, %rdx
	movq	-13760(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -13808(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-13808(%rbp), %r8       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13808(%rbp), %r8       # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13672(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13816(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13624(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str387, %eax
	movl	%eax, %ecx
	movq	-13656(%rbp), %rdi      # 8-byte Reload
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -13824(%rbp)      # 8-byte Spill
	movq	-13640(%rbp), %r8       # 8-byte Reload
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str326, (%rcx)
	movl	$.L.str270, %eax
	movl	%eax, %r8d
	movq	-13784(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str361, (%rcx)
	movl	$.L.str339, %eax
	movl	%eax, %ecx
	movq	-13800(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13832(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13832(%rbp), %r8       # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13832(%rbp), %r8       # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13824(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str388, %eax
	movl	%eax, %ecx
	movq	-13656(%rbp), %rdi      # 8-byte Reload
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -13840(%rbp)      # 8-byte Spill
	movq	-13640(%rbp), %r8       # 8-byte Reload
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str326, (%rcx)
	movl	$.L.str294, %eax
	movl	%eax, %r8d
	movq	-13784(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str361, (%rcx)
	movl	$.L.str341, %eax
	movl	%eax, %ecx
	movq	-13800(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13848(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13848(%rbp), %r8       # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13848(%rbp), %r8       # 8-byte Reload
	movq	-13760(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str332, (%rcx)
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13528(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13840(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str389, %eax
	movl	%eax, %ecx
	movl	$142, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %edx
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %r8       # 8-byte Reload
	movq	%rdx, -13856(%rbp)      # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -13864(%rbp)      # 8-byte Spill
	movq	-13856(%rbp), %r8       # 8-byte Reload
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13824(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13680(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %r8       # 8-byte Reload
	movq	%rsi, -13872(%rbp)      # 8-byte Spill
	movq	%r8, %rsi
	movq	-13872(%rbp), %r9       # 8-byte Reload
	movq	%rdx, -13880(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13864(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 143 0                 # feature_extraction.c:143:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str390, %eax
	movl	%eax, %ecx
	movl	$143, %eax
	movl	%eax, %edi
	movl	$49, %eax
	movl	%eax, %r8d
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -13888(%rbp)      # 8-byte Spill
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$rs, %eax
	movl	%eax, %edx
	movl	$.L.str391, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %eax
	movl	%eax, %r8d
	movl	$32, %eax
	movl	%eax, %ecx
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, %rsi
	movq	-13760(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -13896(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-13800(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13528(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13840(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str392, %eax
	movl	%eax, %r8d
	movq	-13784(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13872(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %ecx
	movl	$4, %eax
	movl	%eax, %edi
	movq	-13760(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13768(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13904(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13904(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$5, %eax
	movl	%eax, %edi
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13768(%rbp), %rcx      # 8-byte Reload
	movq	-13904(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %edi         # 4-byte Reload
	movq	-13528(%rbp), %rsi      # 8-byte Reload
	movq	-13872(%rbp), %rdx      # 8-byte Reload
	movl	-13788(%rbp), %ecx      # 4-byte Reload
	movq	-13768(%rbp), %r8       # 8-byte Reload
	callq	rs
	.loc	1 153 0                 # feature_extraction.c:153:0
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13896(%rbp), %rsi      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13888(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str393, %eax
	movl	%eax, %ecx
	movl	$153, %eax
	movl	%eax, %edi
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -13912(%rbp)      # 8-byte Spill
	movq	-13856(%rbp), %r8       # 8-byte Reload
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13824(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-13880(%rbp), %rdx      # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13760(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13920(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13912(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 154 0                 # feature_extraction.c:154:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str394, %eax
	movl	%eax, %ecx
	movl	$154, %eax
	movl	%eax, %edi
	movq	-13632(%rbp), %rsi      # 8-byte Reload
	movq	-13616(%rbp), %rdx      # 8-byte Reload
	movq	-13856(%rbp), %r8       # 8-byte Reload
	movl	-13660(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-13760(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-13760(%rbp), %rcx      # 8-byte Reload
	movq	-13824(%rbp), %r8       # 8-byte Reload
	movq	-13768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-13880(%rbp), %rdx      # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-13552(%rbp), %rdi      # 8-byte Reload
	movq	-13592(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13536(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -13928(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-13600(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp152:
	#DEBUG_VALUE: process_data:time_stddev <- [RBP+-13928]
	#DEBUG_VALUE: channel <- 0
	.loc	1 155 0                 # feature_extraction.c:155:0
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13728(%rbp), %rsi      # 8-byte Reload
	movq	-13704(%rbp), %rdx      # 8-byte Reload
	movq	-13648(%rbp), %rcx      # 8-byte Reload
	movq	-13584(%rbp), %r8       # 8-byte Reload
	movl	-13604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13752(%rbp), %rdi      # 8-byte Reload
	movq	-13560(%rbp), %rsi      # 8-byte Reload
	movq	-13688(%rbp), %rdx      # 8-byte Reload
	movq	-13688(%rbp), %rcx      # 8-byte Reload
	movq	-13576(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-13536(%rbp), %rdi      # 8-byte Reload
	movq	-13560(%rbp), %rsi      # 8-byte Reload
	movq	-13536(%rbp), %rcx      # 8-byte Reload
	movq	-13568(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-13552(%rbp), %rdi      # 8-byte Reload
	movq	-13536(%rbp), %rsi      # 8-byte Reload
	movq	-13536(%rbp), %rcx      # 8-byte Reload
	movq	-13648(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -13929(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13728(%rbp), %rsi      # 8-byte Reload
	movq	-13704(%rbp), %rdx      # 8-byte Reload
	movq	-13544(%rbp), %rcx      # 8-byte Reload
	movq	-13752(%rbp), %r8       # 8-byte Reload
	movl	-13604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13736(%rbp), %rdi      # 8-byte Reload
	movq	-13688(%rbp), %rsi      # 8-byte Reload
	movq	-13688(%rbp), %rdx      # 8-byte Reload
	movq	-13536(%rbp), %rcx      # 8-byte Reload
	movq	-13712(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13752(%rbp), %rdi      # 8-byte Reload
	movq	-13688(%rbp), %rsi      # 8-byte Reload
	movq	-13688(%rbp), %rdx      # 8-byte Reload
	movq	-13536(%rbp), %rcx      # 8-byte Reload
	movq	-13744(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13929(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-13536(%rbp), %rdi      # 8-byte Reload
	movq	-13536(%rbp), %rsi      # 8-byte Reload
	movq	-13536(%rbp), %rcx      # 8-byte Reload
	movq	-13648(%rbp), %r8       # 8-byte Reload
	movq	-13688(%rbp), %r9       # 8-byte Reload
	movq	-13696(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13929(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_45
	jmp	.LBB1_65
.Ltmp153:
.LBB1_45:                               # %.lr.ph67
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str402, %r8
	leaq	.L.str8, %rdx
	movabsq	$155, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str397, %r9
	leaq	.L.str401, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str400, %r12
	.loc	1 158 0                 # feature_extraction.c:158:0
.Ltmp154:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -13944(%rbp)      # 8-byte Spill
	movl	$.L.str397, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13952(%rbp)      # 8-byte Spill
	movl	$.L.str399, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13960(%rbp)      # 8-byte Spill
	movl	$158, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13968(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13976(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -13984(%rbp)      # 8-byte Spill
	movq	-13968(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13992(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -13996(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-13952(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -14008(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-13960(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14016(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13976(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14024(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-13996(%rbp), %eax      # 4-byte Reload
	movq	%r9, -14032(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -14040(%rbp)      # 8-byte Spill
	movl	%ebx, -14044(%rbp)      # 4-byte Spill
	movq	%r15, -14056(%rbp)      # 8-byte Spill
	movq	%r12, -14064(%rbp)      # 8-byte Spill
	movq	%r13, -14072(%rbp)      # 8-byte Spill
	movq	%r11, -14080(%rbp)      # 8-byte Spill
	movq	%r10, -14088(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -14096(%rbp)      # 8-byte Spill
	movq	-14096(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -14104(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str14, %ebx
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %esi
	movq	%rsi, %rdi
	movq	-14104(%rbp), %r8       # 8-byte Reload
	movq	%rsi, -14112(%rbp)      # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, -14120(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-14112(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -14128(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-14120(%rbp), %r8       # 8-byte Reload
	movq	-14096(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp155:
	.loc	1 162 0                 # feature_extraction.c:162:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-14112(%rbp), %rsi      # 8-byte Reload
	movq	-14112(%rbp), %rcx      # 8-byte Reload
	movq	-13960(%rbp), %r8       # 8-byte Reload
	movq	-14096(%rbp), %r9       # 8-byte Reload
	movb	%al, -14129(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str400, %ebx
	movl	%ebx, %ecx
	movl	$162, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-14072(%rbp), %rsi      # 8-byte Reload
	movq	-13952(%rbp), %rdx      # 8-byte Reload
	movl	-13996(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-14112(%rbp), %rdi      # 8-byte Reload
	movq	-14104(%rbp), %rsi      # 8-byte Reload
	movq	-14128(%rbp), %rdx      # 8-byte Reload
	movq	-14112(%rbp), %rcx      # 8-byte Reload
	movq	-14120(%rbp), %r8       # 8-byte Reload
	movq	-14096(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-136(%rbp), %ebx        # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp156:
	.loc	1 155 0                 # feature_extraction.c:155:0
	movq	-14040(%rbp), %rdi      # 8-byte Reload
	movq	-14056(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14144(%rbp)     # 8-byte Spill
	movq	-14016(%rbp), %rdx      # 8-byte Reload
	movq	-14064(%rbp), %rcx      # 8-byte Reload
	movq	-13984(%rbp), %r8       # 8-byte Reload
	movq	-14008(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-13944(%rbp), %rsi      # 8-byte Reload
	movq	-14032(%rbp), %rdx      # 8-byte Reload
	movq	-14088(%rbp), %rcx      # 8-byte Reload
	movq	-14080(%rbp), %r8       # 8-byte Reload
	movl	-14044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-13984(%rbp), %rsi      # 8-byte Reload
	movq	-13984(%rbp), %rdx      # 8-byte Reload
	movq	-14016(%rbp), %rcx      # 8-byte Reload
	movq	-14024(%rbp), %r8       # 8-byte Reload
	movq	-13984(%rbp), %r9       # 8-byte Reload
	movq	-14008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13984(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -14152(%rbp)      # 8-byte Spill
.LBB1_46:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_48 Depth 2
	movq	-14152(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str399, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str405, %r9
	movabsq	$3, %r10
	leaq	.L.str410, %r11
	movabsq	$158, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str402, %r15
	leaq	.L.str409, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -14160(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -14168(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -14176(%rbp)      # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, -14184(%rbp)      # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, -14192(%rbp)      # 8-byte Spill
	leaq	.L.str408, %rax
	movq	%rax, -14200(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -14208(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -14216(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -14224(%rbp)      # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, -14232(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -14240(%rbp)      # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, -14248(%rbp)      # 8-byte Spill
	leaq	.L.str404, %rax
	movq	%rax, -14256(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -14264(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 157 0                 # feature_extraction.c:157:0
.Ltmp157:
	subq	$16, %rsp
	movq	%rax, -14272(%rbp)      # 8-byte Spill
	movq	-14264(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -14280(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -14288(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -14296(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-14232(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14304(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14272(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14312(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14320(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -14328(%rbp)      # 8-byte Spill
	movq	%r14, -14336(%rbp)      # 8-byte Spill
	movq	%r12, -14344(%rbp)      # 8-byte Spill
	movl	%r13d, -14348(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -14360(%rbp)     # 8-byte Spill
	movq	%rbx, -14368(%rbp)      # 8-byte Spill
	movq	%r10, -14376(%rbp)      # 8-byte Spill
	movq	%r11, -14384(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14280(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14296(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14256(%rbp), %r8       # 8-byte Reload
	movq	-14304(%rbp), %r9       # 8-byte Reload
	movq	-14320(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14304(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14296(%rbp), %rdx      # 8-byte Reload
	movq	-14296(%rbp), %rcx      # 8-byte Reload
	movq	-14176(%rbp), %r8       # 8-byte Reload
	movq	-14304(%rbp), %r9       # 8-byte Reload
	movq	-14248(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14216(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14160(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14232(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14248(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14192(%rbp), %rdi      # 8-byte Reload
	movq	-14336(%rbp), %rsi      # 8-byte Reload
	movq	-14328(%rbp), %rdx      # 8-byte Reload
	movq	-14184(%rbp), %rcx      # 8-byte Reload
	movq	-14240(%rbp), %r8       # 8-byte Reload
	movl	-14348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14280(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14160(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14232(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14304(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-13920(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14224(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14160(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13920(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-14216(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-14304(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14392(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14184(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14192(%rbp), %rdi      # 8-byte Reload
	movq	-14336(%rbp), %rsi      # 8-byte Reload
	movq	-14328(%rbp), %rdx      # 8-byte Reload
	movq	-14200(%rbp), %rcx      # 8-byte Reload
	movq	-14208(%rbp), %r8       # 8-byte Reload
	movl	-14348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14280(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14184(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14304(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14360(%rbp), %xmm0     # 8-byte Reload
	movq	-14296(%rbp), %rdx      # 8-byte Reload
	movq	-14176(%rbp), %rcx      # 8-byte Reload
	movq	-14296(%rbp), %r8       # 8-byte Reload
	movq	-14288(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13920(%rbp), %rax      # 8-byte Reload
	movq	-14160(%rbp), %rcx      # 8-byte Reload
	vmovsd	-14360(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp158:
	#DEBUG_VALUE: i <- 0
	.loc	1 158 0                 # feature_extraction.c:158:0
	subq	$16, %rsp
	movq	-14368(%rbp), %rdi      # 8-byte Reload
	movq	-14336(%rbp), %rsi      # 8-byte Reload
	movq	-14328(%rbp), %rdx      # 8-byte Reload
	movq	-14344(%rbp), %rcx      # 8-byte Reload
	movq	-14280(%rbp), %r8       # 8-byte Reload
	movl	-14348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14376(%rbp), %rdi      # 8-byte Reload
	movq	-14296(%rbp), %rsi      # 8-byte Reload
	movq	-14296(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14384(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14280(%rbp), %rdi      # 8-byte Reload
	movq	-14296(%rbp), %rsi      # 8-byte Reload
	movq	-14296(%rbp), %rdx      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14320(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14129(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-14304(%rbp), %rdi      # 8-byte Reload
	movq	-14304(%rbp), %rsi      # 8-byte Reload
	movq	-14304(%rbp), %rcx      # 8-byte Reload
	movq	-14312(%rbp), %r8       # 8-byte Reload
	movq	-14296(%rbp), %r9       # 8-byte Reload
	movq	-14288(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14129(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_47
	jmp	.LBB1_50
.LBB1_47:                               # %.lr.ph61
                                        #   in Loop: Header=BB1_46 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str416, %r8
	leaq	.L.str8, %rdx
	movabsq	$158, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str410, %r9
	leaq	.L.str415, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str414, %r12
	movabsq	$32, %r13
	movq	%rax, -14400(%rbp)      # 8-byte Spill
	leaq	.L.str412, %rax
	movq	%rax, -14408(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -14416(%rbp)      # 8-byte Spill
	leaq	.L.str413, %rax
	movq	%rax, -14424(%rbp)      # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, -14432(%rbp)      # 8-byte Spill
	movabsq	$160, %rax
	movq	%rax, -14440(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -14448(%rbp)      # 8-byte Spill
	leaq	.L.str411, %rax
	movq	%rax, -14456(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -14464(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -14472(%rbp)      # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, -14480(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 160 0                 # feature_extraction.c:160:0
.Ltmp159:
	subq	$16, %rsp
	movq	%rax, -14488(%rbp)      # 8-byte Spill
	movq	-14440(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -14496(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-14496(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -14504(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -14512(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-14456(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14520(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14488(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14528(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14536(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -14544(%rbp)      # 8-byte Spill
	movl	%ebx, -14548(%rbp)      # 4-byte Spill
	movq	%r15, -14560(%rbp)      # 8-byte Spill
	movq	%r12, -14568(%rbp)      # 8-byte Spill
	movq	%r13, -14576(%rbp)      # 8-byte Spill
	movq	%r11, -14584(%rbp)      # 8-byte Spill
	movq	%r10, -14592(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14520(%rbp), %rdi      # 8-byte Reload
	movq	-14560(%rbp), %rsi      # 8-byte Reload
	movq	-14160(%rbp), %rdx      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14480(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14160(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14576(%rbp), %rsi      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14456(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -14596(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14440(%rbp), %rdi      # 8-byte Reload
	movq	-14496(%rbp), %rsi      # 8-byte Reload
	movq	-14536(%rbp), %rdx      # 8-byte Reload
	movq	-14408(%rbp), %rcx      # 8-byte Reload
	movq	-14472(%rbp), %r8       # 8-byte Reload
	movl	-14548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-14584(%rbp), %rdi      # 8-byte Reload
	movq	-14576(%rbp), %rsi      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14464(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14596(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14520(%rbp), %rdi      # 8-byte Reload
	movq	-14576(%rbp), %rsi      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14456(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14596(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14576(%rbp), %rsi      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14408(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -14600(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14440(%rbp), %rdi      # 8-byte Reload
	movq	-14496(%rbp), %rsi      # 8-byte Reload
	movq	-14536(%rbp), %rdx      # 8-byte Reload
	movq	-14424(%rbp), %rcx      # 8-byte Reload
	movq	-14448(%rbp), %r8       # 8-byte Reload
	movl	-14548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14520(%rbp), %rdi      # 8-byte Reload
	movq	-14560(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14432(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14392(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp160:
	.loc	1 158 0                 # feature_extraction.c:158:0
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14560(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14608(%rbp)     # 8-byte Spill
	movq	-14520(%rbp), %rdx      # 8-byte Reload
	movq	-14424(%rbp), %rcx      # 8-byte Reload
	movq	-14400(%rbp), %r8       # 8-byte Reload
	movq	-14512(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14504(%rbp), %rdi      # 8-byte Reload
	movq	-14496(%rbp), %rsi      # 8-byte Reload
	movq	-14536(%rbp), %rdx      # 8-byte Reload
	movq	-14568(%rbp), %rcx      # 8-byte Reload
	movq	-14416(%rbp), %r8       # 8-byte Reload
	movl	-14548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-14600(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-14520(%rbp), %rdi      # 8-byte Reload
	movq	-14576(%rbp), %rsi      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14408(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14600(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14560(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14568(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14616(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14504(%rbp), %rdi      # 8-byte Reload
	movq	-14496(%rbp), %rsi      # 8-byte Reload
	movq	-14536(%rbp), %rdx      # 8-byte Reload
	movq	-14592(%rbp), %rcx      # 8-byte Reload
	movq	-14584(%rbp), %r8       # 8-byte Reload
	movl	-14548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14520(%rbp), %rdi      # 8-byte Reload
	movq	-14400(%rbp), %rsi      # 8-byte Reload
	movq	-14400(%rbp), %rdx      # 8-byte Reload
	movq	-14520(%rbp), %rcx      # 8-byte Reload
	movq	-14528(%rbp), %r8       # 8-byte Reload
	movq	-14400(%rbp), %r9       # 8-byte Reload
	movq	-14512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14400(%rbp), %rax      # 8-byte Reload
	.loc	1 160 0                 # feature_extraction.c:160:0
.Ltmp161:
	vmovsd	-14608(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -14624(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -14632(%rbp)     # 8-byte Spill
.LBB1_48:                               #   Parent Loop BB1_46 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-14632(%rbp), %xmm0     # 8-byte Reload
	movq	-14624(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str425, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str416, %r9
	movabsq	$3, %r10
	leaq	.L.str427, %r11
	movabsq	$158, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str426, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -14640(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -14648(%rbp)      # 8-byte Spill
	leaq	.L.str424, %rax
	movq	%rax, -14656(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -14664(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -14672(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -14680(%rbp)      # 8-byte Spill
	leaq	.L.str418, %rax
	movq	%rax, -14688(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -14696(%rbp)      # 8-byte Spill
	leaq	.L.str417, %rax
	movq	%rax, -14704(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -14712(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -14720(%rbp)      # 8-byte Spill
	leaq	.L.str420, %rax
	movq	%rax, -14728(%rbp)      # 8-byte Spill
	leaq	.L.str423, %rax
	movq	%rax, -14736(%rbp)      # 8-byte Spill
	leaq	.L.str419, %rax
	movq	%rax, -14744(%rbp)      # 8-byte Spill
	movabsq	$160, %rax
	movq	%rax, -14752(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -14760(%rbp)      # 8-byte Spill
	leaq	.L.str422, %rax
	movq	%rax, -14768(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -14776(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -14784(%rbp)      # 8-byte Spill
	leaq	.L.str421, %rax
	movq	%rax, -14792(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -14800(%rbp)      # 8-byte Spill
	leaq	.L.str414, %rax
	movq	%rax, -14808(%rbp)      # 8-byte Spill
	leaq	.L.str410, %rax
	movq	%rax, -14816(%rbp)      # 8-byte Spill
	leaq	.L.str413, %rax
	movq	%rax, -14824(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -14832(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -14840(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -14848(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -14856(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-14704(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14864(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14832(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14872(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14880(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -14888(%rbp)     # 8-byte Spill
	movq	%r13, -14896(%rbp)      # 8-byte Spill
	movq	%r14, -14904(%rbp)      # 8-byte Spill
	movq	%r15, -14912(%rbp)      # 8-byte Spill
	movl	%r12d, -14916(%rbp)     # 4-byte Spill
	movq	%rbx, -14928(%rbp)      # 8-byte Spill
	movq	%r11, -14936(%rbp)      # 8-byte Spill
	movq	%r10, -14944(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14688(%rbp), %r8       # 8-byte Reload
	movq	-14864(%rbp), %r9       # 8-byte Reload
	movq	-14880(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14848(%rbp), %rcx      # 8-byte Reload
	movq	-14712(%rbp), %r8       # 8-byte Reload
	movq	-14864(%rbp), %r9       # 8-byte Reload
	movq	-14816(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14640(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14704(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14816(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14752(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14832(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14728(%rbp), %r8       # 8-byte Reload
	movq	-14864(%rbp), %r9       # 8-byte Reload
	movq	-14880(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14824(%rbp), %r8       # 8-byte Reload
	movq	-14864(%rbp), %r9       # 8-byte Reload
	movq	-14816(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14888(%rbp), %xmm0     # 8-byte Reload
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14848(%rbp), %r8       # 8-byte Reload
	movq	-14816(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14752(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14792(%rbp), %rcx      # 8-byte Reload
	movq	-14720(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14616(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14808(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14640(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14704(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14640(%rbp), %rax      # 8-byte Reload
	movq	-14616(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14792(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14952(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14752(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14768(%rbp), %rcx      # 8-byte Reload
	movq	-14800(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14952(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14792(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14784(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14952(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-14864(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14960(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14768(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14752(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14736(%rbp), %rcx      # 8-byte Reload
	movq	-14776(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14960(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14768(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-14952(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14968(%rbp)     # 8-byte Spill
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14736(%rbp), %rcx      # 8-byte Reload
	movq	-14848(%rbp), %r8       # 8-byte Reload
	movq	-14840(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14752(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14728(%rbp), %rcx      # 8-byte Reload
	movq	-14760(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14888(%rbp), %xmm0     # 8-byte Reload
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14848(%rbp), %r8       # 8-byte Reload
	movq	-14840(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14968(%rbp), %xmm0     # 8-byte Reload
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14736(%rbp), %rcx      # 8-byte Reload
	movq	-14848(%rbp), %r8       # 8-byte Reload
	movq	-14840(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14968(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-14888(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp162:
	.loc	1 158 0                 # feature_extraction.c:158:0
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14728(%rbp), %rcx      # 8-byte Reload
	movq	-14848(%rbp), %r8       # 8-byte Reload
	movq	-14840(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -14976(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14928(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14688(%rbp), %rcx      # 8-byte Reload
	movq	-14720(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rdx      # 8-byte Reload
	movq	-14848(%rbp), %rcx      # 8-byte Reload
	movq	-14712(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14640(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14704(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14640(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14688(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14984(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14928(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14696(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14680(%rbp), %rsi      # 8-byte Reload
	movq	-14984(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14688(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14984(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14648(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14656(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -14988(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14928(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14856(%rbp), %rcx      # 8-byte Reload
	movq	-14672(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14648(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14664(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14988(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14648(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14656(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14988(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-14896(%rbp), %rdi      # 8-byte Reload
	movq	-14864(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14856(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -14989(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14928(%rbp), %rdi      # 8-byte Reload
	movq	-14904(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14912(%rbp), %rcx      # 8-byte Reload
	movq	-14872(%rbp), %r8       # 8-byte Reload
	movl	-14916(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14944(%rbp), %rdi      # 8-byte Reload
	movq	-14848(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14936(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14872(%rbp), %rdi      # 8-byte Reload
	movq	-14848(%rbp), %rsi      # 8-byte Reload
	movq	-14848(%rbp), %rdx      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14989(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14864(%rbp), %rsi      # 8-byte Reload
	movq	-14864(%rbp), %rcx      # 8-byte Reload
	movq	-14856(%rbp), %r8       # 8-byte Reload
	movq	-14848(%rbp), %r9       # 8-byte Reload
	movq	-14840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14989(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-14984(%rbp), %rcx      # 8-byte Reload
	.loc	1 160 0                 # feature_extraction.c:160:0
.Ltmp163:
	vmovsd	-14976(%rbp), %xmm0     # 8-byte Reload
.Ltmp164:
	.loc	1 158 0                 # feature_extraction.c:158:0
	movq	%rcx, -14624(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -14632(%rbp)     # 8-byte Spill
	jne	.LBB1_49
	jmp	.LBB1_48
.LBB1_49:                               # %._crit_edge62
                                        #   in Loop: Header=BB1_46 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str405, %r8
	leaq	.L.str8, %rdx
	movabsq	$158, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str427, %r9
	leaq	.L.str429, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str420, %r15
	leaq	.L.str406, %r12
	movabsq	$160, %r13
	movq	%rax, -15000(%rbp)      # 8-byte Spill
	leaq	.L.str428, %rax
	movq	%rax, -15008(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 160 0                 # feature_extraction.c:160:0
.Ltmp165:
	subq	$16, %rsp
	movq	%rdi, -15016(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -15024(%rbp)      # 8-byte Spill
	movq	%rdx, -15032(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-15008(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -15040(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -15048(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15056(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -15060(%rbp)      # 4-byte Spill
	movq	%r11, -15072(%rbp)      # 8-byte Spill
	movq	%r14, -15080(%rbp)      # 8-byte Spill
	movq	%r12, -15088(%rbp)      # 8-byte Spill
	movq	%r15, -15096(%rbp)      # 8-byte Spill
	movq	%r10, -15104(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15072(%rbp), %rdi      # 8-byte Reload
	movq	-15080(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-15000(%rbp), %rcx      # 8-byte Reload
	movq	-15088(%rbp), %r8       # 8-byte Reload
	movq	-15040(%rbp), %r9       # 8-byte Reload
	movq	-15032(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-15000(%rbp), %rdi      # 8-byte Reload
	movq	-15080(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14976(%rbp), %xmm0     # 8-byte Reload
	movq	-15000(%rbp), %rdx      # 8-byte Reload
	movq	-15096(%rbp), %rcx      # 8-byte Reload
	movq	-15040(%rbp), %r8       # 8-byte Reload
	movq	-15032(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14392(%rbp), %rax      # 8-byte Reload
	vmovsd	-14976(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp166:
	.loc	1 158 0                 # feature_extraction.c:158:0
	subq	$16, %rsp
	movq	-15016(%rbp), %rdi      # 8-byte Reload
	movq	-15024(%rbp), %rsi      # 8-byte Reload
	movq	-15056(%rbp), %rdx      # 8-byte Reload
	movq	-15104(%rbp), %rcx      # 8-byte Reload
	movq	-15072(%rbp), %r8       # 8-byte Reload
	movl	-15060(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15000(%rbp), %rdi      # 8-byte Reload
	movq	-15040(%rbp), %rsi      # 8-byte Reload
	movq	-15040(%rbp), %rdx      # 8-byte Reload
	movq	-15000(%rbp), %rcx      # 8-byte Reload
	movq	-15048(%rbp), %r8       # 8-byte Reload
	movq	-15040(%rbp), %r9       # 8-byte Reload
	movq	-15032(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp167:
.LBB1_50:                               #   in Loop: Header=BB1_46 Depth=1
	movabsq	$1, %rax
	leaq	.L.str434, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str402, %r8
	movabsq	$3, %r9
	leaq	.L.str436, %r10
	movabsq	$155, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str405, %r14
	leaq	.L.str435, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -15112(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -15120(%rbp)      # 8-byte Spill
	leaq	.L.str433, %rax
	movq	%rax, -15128(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -15136(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -15144(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -15152(%rbp)      # 8-byte Spill
	leaq	.L.str404, %rax
	movq	%rax, -15160(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -15168(%rbp)      # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, -15176(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15184(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -15192(%rbp)      # 8-byte Spill
	leaq	.L.str431, %rax
	movq	%rax, -15200(%rbp)      # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, -15208(%rbp)      # 8-byte Spill
	movabsq	$162, %rax
	movq	%rax, -15216(%rbp)      # 8-byte Spill
	leaq	.L.str432, %rax
	movq	%rax, -15224(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -15232(%rbp)      # 8-byte Spill
	leaq	.L.str430, %rax
	movq	%rax, -15240(%rbp)      # 8-byte Spill
	leaq	.L.str400, %rax
	movq	%rax, -15248(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -15256(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 162 0                 # feature_extraction.c:162:0
	subq	$16, %rsp
	movq	%rax, -15264(%rbp)      # 8-byte Spill
	movq	-15216(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15272(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -15280(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -15288(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-15240(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15296(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15264(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15304(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15312(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -15320(%rbp)      # 8-byte Spill
	movq	%r15, -15328(%rbp)      # 8-byte Spill
	movl	%r12d, -15332(%rbp)     # 4-byte Spill
	movq	%r13, -15344(%rbp)      # 8-byte Spill
	movq	%rbx, -15352(%rbp)      # 8-byte Spill
	movq	%r11, -15360(%rbp)      # 8-byte Spill
	movq	%r10, -15368(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15208(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14392(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-15344(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -15376(%rbp)     # 8-byte Spill
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15240(%rbp), %rcx      # 8-byte Reload
	movq	-15288(%rbp), %r8       # 8-byte Reload
	movq	-15280(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-15216(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15200(%rbp), %rcx      # 8-byte Reload
	movq	-15256(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-15272(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14144(%rbp), %xmm0     # 8-byte Reload
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15248(%rbp), %rcx      # 8-byte Reload
	movq	-15288(%rbp), %r8       # 8-byte Reload
	movq	-15280(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	vmovsd	-15376(%rbp), %xmm0     # 8-byte Reload
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15240(%rbp), %rcx      # 8-byte Reload
	movq	-15288(%rbp), %r8       # 8-byte Reload
	movq	-15280(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-15376(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-14144(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-15344(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15200(%rbp), %rcx      # 8-byte Reload
	movq	-15288(%rbp), %r8       # 8-byte Reload
	movq	-15280(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -15384(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-15216(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15232(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15272(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15208(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	vmovsd	-15384(%rbp), %xmm0     # 8-byte Reload
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15200(%rbp), %rcx      # 8-byte Reload
	movq	-15288(%rbp), %r8       # 8-byte Reload
	movq	-15280(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14392(%rbp), %rax      # 8-byte Reload
	vmovsd	-15384(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp168:
	.loc	1 155 0                 # feature_extraction.c:155:0
	subq	$16, %rsp
	movq	-15360(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15160(%rbp), %rcx      # 8-byte Reload
	movq	-15192(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15272(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rdx      # 8-byte Reload
	movq	-15288(%rbp), %rcx      # 8-byte Reload
	movq	-15184(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	-14160(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15176(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14160(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-15344(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15160(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -15392(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15360(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15128(%rbp), %rcx      # 8-byte Reload
	movq	-15168(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rsi      # 8-byte Reload
	movq	-15392(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15160(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15392(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15344(%rbp), %rdi      # 8-byte Reload
	movq	-15120(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15128(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -15396(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15360(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15296(%rbp), %rcx      # 8-byte Reload
	movq	-15144(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15272(%rbp), %rdi      # 8-byte Reload
	movq	-15120(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15136(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-15396(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15120(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15128(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-15396(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-15344(%rbp), %rdi      # 8-byte Reload
	movq	-15112(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15296(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15397(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15360(%rbp), %rdi      # 8-byte Reload
	movq	-15352(%rbp), %rsi      # 8-byte Reload
	movq	-15320(%rbp), %rdx      # 8-byte Reload
	movq	-15328(%rbp), %rcx      # 8-byte Reload
	movq	-15272(%rbp), %r8       # 8-byte Reload
	movl	-15332(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15312(%rbp), %rdi      # 8-byte Reload
	movq	-15288(%rbp), %rsi      # 8-byte Reload
	movq	-15288(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15368(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15272(%rbp), %rdi      # 8-byte Reload
	movq	-15288(%rbp), %rsi      # 8-byte Reload
	movq	-15288(%rbp), %rdx      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15304(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15397(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15112(%rbp), %rdi      # 8-byte Reload
	movq	-15112(%rbp), %rsi      # 8-byte Reload
	movq	-15112(%rbp), %rcx      # 8-byte Reload
	movq	-15296(%rbp), %r8       # 8-byte Reload
	movq	-15288(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15397(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-15392(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -14152(%rbp)      # 8-byte Spill
	jne	.LBB1_51
	jmp	.LBB1_46
.Ltmp169:
.LBB1_51:                               # %._crit_edge68
	movabsq	$1, %rax
	leaq	.L.str438, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str398, %r8
	movabsq	$3, %r9
	leaq	.L.str440, %r10
	movabsq	$165, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str436, %r14
	leaq	.L.str439, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -15408(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -15416(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -15424(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15432(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -15440(%rbp)      # 8-byte Spill
	leaq	.L.str437, %rax
	movq	%rax, -15448(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -15456(%rbp)      # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, -15464(%rbp)      # 8-byte Spill
	movabsq	$164, %rax
	movq	%rax, -15472(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 164 0                 # feature_extraction.c:164:0
	subq	$16, %rsp
	movq	%rax, -15480(%rbp)      # 8-byte Spill
	movq	-15472(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15488(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -15496(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -15504(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-15448(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15512(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15480(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15520(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15528(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -15536(%rbp)      # 8-byte Spill
	movq	%r15, -15544(%rbp)      # 8-byte Spill
	movl	%r12d, -15548(%rbp)     # 4-byte Spill
	movq	%r13, -15560(%rbp)      # 8-byte Spill
	movq	%rbx, -15568(%rbp)      # 8-byte Spill
	movq	%r11, -15576(%rbp)      # 8-byte Spill
	movq	%r10, -15584(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15488(%rbp), %rdi      # 8-byte Reload
	movq	-15416(%rbp), %rsi      # 8-byte Reload
	movq	-15464(%rbp), %rdx      # 8-byte Reload
	movq	-15504(%rbp), %rcx      # 8-byte Reload
	movq	-15432(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15408(%rbp), %rdi      # 8-byte Reload
	movq	-15416(%rbp), %rsi      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15456(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %r12d       # 4-byte Reload
	addl	$4294967295, %r12d      # imm = 0xFFFFFFFF
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15560(%rbp), %rdi      # 8-byte Reload
	movq	-15416(%rbp), %rsi      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15448(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -15588(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp170:
	#DEBUG_VALUE: process_data:n_time_sd <- [RBP+-15588]
	#DEBUG_VALUE: channel <- 0
	.loc	1 165 0                 # feature_extraction.c:165:0
	subq	$16, %rsp
	movq	-15576(%rbp), %rdi      # 8-byte Reload
	movq	-15568(%rbp), %rsi      # 8-byte Reload
	movq	-15536(%rbp), %rdx      # 8-byte Reload
	movq	-15512(%rbp), %rcx      # 8-byte Reload
	movq	-15440(%rbp), %r8       # 8-byte Reload
	movl	-15548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15488(%rbp), %rdi      # 8-byte Reload
	movq	-15416(%rbp), %rsi      # 8-byte Reload
	movq	-15504(%rbp), %rdx      # 8-byte Reload
	movq	-15504(%rbp), %rcx      # 8-byte Reload
	movq	-15432(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15408(%rbp), %rdi      # 8-byte Reload
	movq	-15416(%rbp), %rsi      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15424(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	$0, %r12d
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-15560(%rbp), %rdi      # 8-byte Reload
	movq	-15408(%rbp), %rsi      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15512(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15589(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15576(%rbp), %rdi      # 8-byte Reload
	movq	-15568(%rbp), %rsi      # 8-byte Reload
	movq	-15536(%rbp), %rdx      # 8-byte Reload
	movq	-15544(%rbp), %rcx      # 8-byte Reload
	movq	-15488(%rbp), %r8       # 8-byte Reload
	movl	-15548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15528(%rbp), %rdi      # 8-byte Reload
	movq	-15504(%rbp), %rsi      # 8-byte Reload
	movq	-15504(%rbp), %rdx      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15584(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15488(%rbp), %rdi      # 8-byte Reload
	movq	-15504(%rbp), %rsi      # 8-byte Reload
	movq	-15504(%rbp), %rdx      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15520(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15589(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15408(%rbp), %rdi      # 8-byte Reload
	movq	-15408(%rbp), %rsi      # 8-byte Reload
	movq	-15408(%rbp), %rcx      # 8-byte Reload
	movq	-15512(%rbp), %r8       # 8-byte Reload
	movq	-15504(%rbp), %r9       # 8-byte Reload
	movq	-15496(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15589(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_52
	jmp	.LBB1_65
.Ltmp171:
.LBB1_52:                               # %.lr.ph58
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str444, %r8
	leaq	.L.str8, %rdx
	movabsq	$165, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str440, %r9
	leaq	.L.str443, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str442, %r12
	.loc	1 168 0                 # feature_extraction.c:168:0
.Ltmp172:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -15600(%rbp)      # 8-byte Spill
	movl	$.L.str440, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15608(%rbp)      # 8-byte Spill
	movl	$.L.str441, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15616(%rbp)      # 8-byte Spill
	movl	$168, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15624(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15632(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -15640(%rbp)      # 8-byte Spill
	movq	-15624(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15648(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -15652(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-15608(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -15664(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-15616(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15672(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15632(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15680(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-15652(%rbp), %eax      # 4-byte Reload
	movq	%r9, -15688(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -15696(%rbp)      # 8-byte Spill
	movl	%ebx, -15700(%rbp)      # 4-byte Spill
	movq	%r15, -15712(%rbp)      # 8-byte Spill
	movq	%r12, -15720(%rbp)      # 8-byte Spill
	movq	%r13, -15728(%rbp)      # 8-byte Spill
	movq	%r11, -15736(%rbp)      # 8-byte Spill
	movq	%r10, -15744(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -15752(%rbp)      # 8-byte Spill
	movq	-15752(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -15760(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-15760(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, -15768(%rbp)      # 8-byte Spill
	movq	-15752(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp173:
	.loc	1 174 0                 # feature_extraction.c:174:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-15768(%rbp), %rsi      # 8-byte Reload
	movq	-15768(%rbp), %rcx      # 8-byte Reload
	movq	-15616(%rbp), %r8       # 8-byte Reload
	movq	-15752(%rbp), %r9       # 8-byte Reload
	movb	%al, -15769(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str442, %ebx
	movl	%ebx, %ecx
	movl	$174, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-15728(%rbp), %rsi      # 8-byte Reload
	movq	-15608(%rbp), %rdx      # 8-byte Reload
	movl	-15652(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-15588(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str437, %ebx
	movl	%ebx, %r8d
	movq	-15768(%rbp), %rdi      # 8-byte Reload
	movq	-15760(%rbp), %rsi      # 8-byte Reload
	movq	-15768(%rbp), %rcx      # 8-byte Reload
	movq	-15752(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-15588(%rbp), %ebx      # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp174:
	.loc	1 165 0                 # feature_extraction.c:165:0
	movq	-15696(%rbp), %rdi      # 8-byte Reload
	movq	-15712(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -15784(%rbp)     # 8-byte Spill
	movq	-15672(%rbp), %rdx      # 8-byte Reload
	movq	-15720(%rbp), %rcx      # 8-byte Reload
	movq	-15640(%rbp), %r8       # 8-byte Reload
	movq	-15664(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-15648(%rbp), %rdi      # 8-byte Reload
	movq	-15600(%rbp), %rsi      # 8-byte Reload
	movq	-15688(%rbp), %rdx      # 8-byte Reload
	movq	-15744(%rbp), %rcx      # 8-byte Reload
	movq	-15736(%rbp), %r8       # 8-byte Reload
	movl	-15700(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15672(%rbp), %rdi      # 8-byte Reload
	movq	-15640(%rbp), %rsi      # 8-byte Reload
	movq	-15640(%rbp), %rdx      # 8-byte Reload
	movq	-15672(%rbp), %rcx      # 8-byte Reload
	movq	-15680(%rbp), %r8       # 8-byte Reload
	movq	-15640(%rbp), %r9       # 8-byte Reload
	movq	-15664(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15640(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -15792(%rbp)      # 8-byte Spill
	jmp	.LBB1_56
.Ltmp175:
.LBB1_53:                               # %.preheader47
	movabsq	$1, %rax
	leaq	.L.str446, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str449, %r8
	movabsq	$3, %r9
	leaq	.L.str448, %r10
	movabsq	$178, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str445, %r14
	leaq	.L.str447, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -15800(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -15808(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -15816(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15824(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 178 0                 # feature_extraction.c:178:0
.Ltmp176:
	subq	$16, %rsp
	movq	%rdi, -15832(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -15840(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -15848(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, -15856(%rbp)      # 8-byte Spill
	movq	%r8, -15864(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15872(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%rbx, -15880(%rbp)      # 8-byte Spill
	movq	%r14, -15888(%rbp)      # 8-byte Spill
	movq	%r15, -15896(%rbp)      # 8-byte Spill
	movl	%r12d, -15900(%rbp)     # 4-byte Spill
	movq	%r13, -15912(%rbp)      # 8-byte Spill
	movq	%r11, -15920(%rbp)      # 8-byte Spill
	movq	%r10, -15928(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15832(%rbp), %rdi      # 8-byte Reload
	movq	-15808(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15848(%rbp), %rcx      # 8-byte Reload
	movq	-15824(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15800(%rbp), %rdi      # 8-byte Reload
	movq	-15808(%rbp), %rsi      # 8-byte Reload
	movq	-15800(%rbp), %rcx      # 8-byte Reload
	movq	-15816(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	$0, %r12d
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-15912(%rbp), %rdi      # 8-byte Reload
	movq	-15800(%rbp), %rsi      # 8-byte Reload
	movq	-15800(%rbp), %rcx      # 8-byte Reload
	movq	-15856(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15929(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15920(%rbp), %rdi      # 8-byte Reload
	movq	-15880(%rbp), %rsi      # 8-byte Reload
	movq	-15888(%rbp), %rdx      # 8-byte Reload
	movq	-15896(%rbp), %rcx      # 8-byte Reload
	movq	-15832(%rbp), %r8       # 8-byte Reload
	movl	-15900(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15872(%rbp), %rdi      # 8-byte Reload
	movq	-15848(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15800(%rbp), %rcx      # 8-byte Reload
	movq	-15928(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15832(%rbp), %rdi      # 8-byte Reload
	movq	-15848(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15800(%rbp), %rcx      # 8-byte Reload
	movq	-15864(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15929(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15800(%rbp), %rdi      # 8-byte Reload
	movq	-15800(%rbp), %rsi      # 8-byte Reload
	movq	-15800(%rbp), %rcx      # 8-byte Reload
	movq	-15856(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15929(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_55
.Ltmp177:
# BB#54:                                # %._crit_edge49.thread
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str452, %r8
	leaq	.L.str8, %rdx
	movabsq	$189, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str449, %r9
	leaq	.L.str451, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str450, %r12
	.loc	1 188 0                 # feature_extraction.c:188:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -15944(%rbp)      # 8-byte Spill
	movl	$.L.str449, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15952(%rbp)      # 8-byte Spill
	movl	$.L.str450, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15960(%rbp)      # 8-byte Spill
	movl	$188, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15968(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15976(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -15984(%rbp)      # 8-byte Spill
	movq	-15968(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15992(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -15996(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-15952(%rbp), %r13      # 8-byte Reload
	movq	%rdx, -16008(%rbp)      # 8-byte Spill
	movq	%r13, %rdx
	movq	-15960(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16016(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15976(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16024(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-15996(%rbp), %r13d     # 4-byte Reload
	movq	%r9, -16032(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, -16040(%rbp)      # 8-byte Spill
	movl	%ebx, -16044(%rbp)      # 4-byte Spill
	movq	%r15, -16056(%rbp)      # 8-byte Spill
	movq	%r12, -16064(%rbp)      # 8-byte Spill
	movq	%r11, -16072(%rbp)      # 8-byte Spill
	movq	%r10, -16080(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str386, %r9d
	movl	%r9d, %r8d
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
                                        # kill: R9<def> R9D<kill>
	movq	%rax, %rdi
	movq	-13672(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13672(%rbp), %rax      # 8-byte Reload
	leaq	15(,%rax,8), %rcx
	andq	$-16, %rcx
	movq	%rsp, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rsp
	subq	$16, %rsp
	movq	-16040(%rbp), %rdi      # 8-byte Reload
	movq	-16056(%rbp), %rsi      # 8-byte Reload
	movq	%rdx, -16088(%rbp)      # 8-byte Spill
	movq	-15984(%rbp), %rcx      # 8-byte Reload
	movq	-16064(%rbp), %r8       # 8-byte Reload
	movq	-16016(%rbp), %r9       # 8-byte Reload
	movq	-16008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp178:
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- undef
	#DEBUG_VALUE: i <- 0
	.loc	1 189 0                 # feature_extraction.c:189:0
	subq	$16, %rsp
	movq	-15992(%rbp), %rdi      # 8-byte Reload
	movq	-15944(%rbp), %rsi      # 8-byte Reload
	movq	-16032(%rbp), %rdx      # 8-byte Reload
	movq	-16080(%rbp), %rcx      # 8-byte Reload
	movq	-16072(%rbp), %r8       # 8-byte Reload
	movl	-16044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15984(%rbp), %rdi      # 8-byte Reload
	movq	-16016(%rbp), %rsi      # 8-byte Reload
	movq	-16016(%rbp), %rdx      # 8-byte Reload
	movq	-15984(%rbp), %rcx      # 8-byte Reload
	movq	-16024(%rbp), %r8       # 8-byte Reload
	movq	-16016(%rbp), %r9       # 8-byte Reload
	movq	-16008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, -16096(%rbp)      # 8-byte Spill
	jmp	.LBB1_75
.Ltmp179:
.LBB1_55:                               # %.preheader43.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str455, %r8
	leaq	.L.str8, %rdx
	movabsq	$178, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str448, %r9
	leaq	.L.str454, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str453, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, -16104(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -16112(%rbp)      # 8-byte Spill
	movabsq	$180, %rax
	movq	%rax, -16120(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 180 0                 # feature_extraction.c:180:0
.Ltmp180:
	subq	$16, %rsp
	movq	%rax, -16128(%rbp)      # 8-byte Spill
	movq	-16120(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -16136(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -16144(%rbp)      # 8-byte Spill
	movq	%rdx, -16152(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -16160(%rbp)      # 8-byte Spill
	movq	%r15, %rcx
	movq	-16128(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16168(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16176(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -16184(%rbp)      # 8-byte Spill
	movl	%ebx, -16188(%rbp)      # 4-byte Spill
	movq	%r15, -16200(%rbp)      # 8-byte Spill
	movq	%r13, -16208(%rbp)      # 8-byte Spill
	movq	%r12, -16216(%rbp)      # 8-byte Spill
	movq	%r11, -16224(%rbp)      # 8-byte Spill
	movq	%r10, -16232(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16224(%rbp), %rdi      # 8-byte Reload
	movq	-16216(%rbp), %rsi      # 8-byte Reload
	movq	-16104(%rbp), %rdx      # 8-byte Reload
	movq	-16104(%rbp), %rcx      # 8-byte Reload
	movq	-16112(%rbp), %r8       # 8-byte Reload
	movq	-16104(%rbp), %r9       # 8-byte Reload
	movq	-16152(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16160(%rbp), %rdi      # 8-byte Reload
	movq	-16216(%rbp), %rsi      # 8-byte Reload
	movq	-16160(%rbp), %rcx      # 8-byte Reload
	movq	-16208(%rbp), %r8       # 8-byte Reload
	movq	-16104(%rbp), %r9       # 8-byte Reload
	movq	-16152(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp181:
	.loc	1 178 0                 # feature_extraction.c:178:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-16184(%rbp), %rdi      # 8-byte Reload
	movq	-16160(%rbp), %rsi      # 8-byte Reload
	movq	-16160(%rbp), %rcx      # 8-byte Reload
	movq	-16200(%rbp), %r8       # 8-byte Reload
	movq	-16104(%rbp), %r9       # 8-byte Reload
	movq	-16152(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -16233(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16136(%rbp), %rdi      # 8-byte Reload
	movq	-16144(%rbp), %rsi      # 8-byte Reload
	movq	-16176(%rbp), %rdx      # 8-byte Reload
	movq	-16232(%rbp), %rcx      # 8-byte Reload
	movq	-16224(%rbp), %r8       # 8-byte Reload
	movl	-16188(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16160(%rbp), %rdi      # 8-byte Reload
	movq	-16104(%rbp), %rsi      # 8-byte Reload
	movq	-16104(%rbp), %rdx      # 8-byte Reload
	movq	-16160(%rbp), %rcx      # 8-byte Reload
	movq	-16168(%rbp), %r8       # 8-byte Reload
	movq	-16104(%rbp), %r9       # 8-byte Reload
	movq	-16152(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16104(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -16248(%rbp)      # 8-byte Spill
	jmp	.LBB1_61
.Ltmp182:
.LBB1_56:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_58 Depth 2
	movq	-15792(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str441, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str458, %r9
	movabsq	$3, %r10
	leaq	.L.str463, %r11
	movabsq	$168, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str444, %r15
	leaq	.L.str462, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -16256(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -16264(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -16272(%rbp)      # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, -16280(%rbp)      # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, -16288(%rbp)      # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, -16296(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -16304(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -16312(%rbp)      # 8-byte Spill
	leaq	.L.str460, %rax
	movq	%rax, -16320(%rbp)      # 8-byte Spill
	leaq	.L.str456, %rax
	movq	%rax, -16328(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -16336(%rbp)      # 8-byte Spill
	leaq	.L.str440, %rax
	movq	%rax, -16344(%rbp)      # 8-byte Spill
	leaq	.L.str457, %rax
	movq	%rax, -16352(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -16360(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 167 0                 # feature_extraction.c:167:0
.Ltmp183:
	subq	$16, %rsp
	movq	%rax, -16368(%rbp)      # 8-byte Spill
	movq	-16360(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -16376(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -16384(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -16392(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-16328(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16400(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16368(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16408(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16416(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -16424(%rbp)      # 8-byte Spill
	movq	%r14, -16432(%rbp)      # 8-byte Spill
	movq	%r12, -16440(%rbp)      # 8-byte Spill
	movl	%r13d, -16444(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -16456(%rbp)     # 8-byte Spill
	movq	%rbx, -16464(%rbp)      # 8-byte Spill
	movq	%r10, -16472(%rbp)      # 8-byte Spill
	movq	%r11, -16480(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16376(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-16392(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16352(%rbp), %r8       # 8-byte Reload
	movq	-16400(%rbp), %r9       # 8-byte Reload
	movq	-16416(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16400(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-16392(%rbp), %rdx      # 8-byte Reload
	movq	-16392(%rbp), %rcx      # 8-byte Reload
	movq	-16272(%rbp), %r8       # 8-byte Reload
	movq	-16400(%rbp), %r9       # 8-byte Reload
	movq	-16344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16312(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-16256(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16328(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16288(%rbp), %rdi      # 8-byte Reload
	movq	-16432(%rbp), %rsi      # 8-byte Reload
	movq	-16424(%rbp), %rdx      # 8-byte Reload
	movq	-16280(%rbp), %rcx      # 8-byte Reload
	movq	-16336(%rbp), %r8       # 8-byte Reload
	movl	-16444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16376(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-16256(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16328(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16400(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-13928(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16320(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16256(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13928(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16312(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16400(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16488(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16280(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16288(%rbp), %rdi      # 8-byte Reload
	movq	-16432(%rbp), %rsi      # 8-byte Reload
	movq	-16424(%rbp), %rdx      # 8-byte Reload
	movq	-16296(%rbp), %rcx      # 8-byte Reload
	movq	-16304(%rbp), %r8       # 8-byte Reload
	movl	-16444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16376(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16280(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16400(%rbp), %rdi      # 8-byte Reload
	movq	-16264(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16456(%rbp), %xmm0     # 8-byte Reload
	movq	-16392(%rbp), %rdx      # 8-byte Reload
	movq	-16272(%rbp), %rcx      # 8-byte Reload
	movq	-16392(%rbp), %r8       # 8-byte Reload
	movq	-16384(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13928(%rbp), %rax      # 8-byte Reload
	movq	-16256(%rbp), %rcx      # 8-byte Reload
	vmovsd	-16456(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp184:
	#DEBUG_VALUE: i <- 0
	.loc	1 168 0                 # feature_extraction.c:168:0
	subq	$16, %rsp
	movq	-16464(%rbp), %rdi      # 8-byte Reload
	movq	-16432(%rbp), %rsi      # 8-byte Reload
	movq	-16424(%rbp), %rdx      # 8-byte Reload
	movq	-16440(%rbp), %rcx      # 8-byte Reload
	movq	-16376(%rbp), %r8       # 8-byte Reload
	movl	-16444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16472(%rbp), %rdi      # 8-byte Reload
	movq	-16392(%rbp), %rsi      # 8-byte Reload
	movq	-16392(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16480(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16376(%rbp), %rdi      # 8-byte Reload
	movq	-16392(%rbp), %rsi      # 8-byte Reload
	movq	-16392(%rbp), %rdx      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16416(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15769(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-16400(%rbp), %rdi      # 8-byte Reload
	movq	-16400(%rbp), %rsi      # 8-byte Reload
	movq	-16400(%rbp), %rcx      # 8-byte Reload
	movq	-16408(%rbp), %r8       # 8-byte Reload
	movq	-16392(%rbp), %r9       # 8-byte Reload
	movq	-16384(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15769(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_57
	jmp	.LBB1_60
.LBB1_57:                               # %.lr.ph52
                                        #   in Loop: Header=BB1_56 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str471, %r8
	leaq	.L.str8, %rdx
	movabsq	$168, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str463, %r9
	leaq	.L.str470, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str469, %r12
	movabsq	$32, %r13
	movq	%rax, -16496(%rbp)      # 8-byte Spill
	leaq	.L.str465, %rax
	movq	%rax, -16504(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -16512(%rbp)      # 8-byte Spill
	leaq	.L.str468, %rax
	movq	%rax, -16520(%rbp)      # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, -16528(%rbp)      # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, -16536(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -16544(%rbp)      # 8-byte Spill
	leaq	.L.str467, %rax
	movq	%rax, -16552(%rbp)      # 8-byte Spill
	leaq	.L.str466, %rax
	movq	%rax, -16560(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -16568(%rbp)      # 8-byte Spill
	leaq	.L.str456, %rax
	movq	%rax, -16576(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -16584(%rbp)      # 8-byte Spill
	leaq	.L.str464, %rax
	movq	%rax, -16592(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -16600(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -16608(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 170 0                 # feature_extraction.c:170:0
.Ltmp185:
	subq	$16, %rsp
	movq	%rax, -16616(%rbp)      # 8-byte Spill
	movq	-16536(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -16624(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-16624(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -16632(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -16640(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-16592(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16648(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16616(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16656(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16664(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -16672(%rbp)      # 8-byte Spill
	movl	%ebx, -16676(%rbp)      # 4-byte Spill
	movq	%r15, -16688(%rbp)      # 8-byte Spill
	movq	%r12, -16696(%rbp)      # 8-byte Spill
	movq	%r13, -16704(%rbp)      # 8-byte Spill
	movq	%r11, -16712(%rbp)      # 8-byte Spill
	movq	%r10, -16720(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	-16256(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16576(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16256(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16704(%rbp), %rsi      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16592(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -16724(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16536(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16504(%rbp), %rcx      # 8-byte Reload
	movq	-16608(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-16712(%rbp), %rdi      # 8-byte Reload
	movq	-16704(%rbp), %rsi      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16600(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16724(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16704(%rbp), %rsi      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16592(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16724(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16704(%rbp), %rsi      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16504(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -16728(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16536(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16560(%rbp), %rcx      # 8-byte Reload
	movq	-16584(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16712(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	-16256(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16576(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	-13920(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16568(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16256(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13920(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16648(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16736(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16560(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16536(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16552(%rbp), %rcx      # 8-byte Reload
	movq	-16544(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	-16736(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16560(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13920(%rbp), %rax      # 8-byte Reload
	movq	-16256(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -16744(%rbp)     # 8-byte Spill
	movq	-16648(%rbp), %rdx      # 8-byte Reload
	movq	-16552(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16640(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16536(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16520(%rbp), %rcx      # 8-byte Reload
	movq	-16544(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16528(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16488(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp186:
	.loc	1 168 0                 # feature_extraction.c:168:0
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -16752(%rbp)     # 8-byte Spill
	movq	-16648(%rbp), %rdx      # 8-byte Reload
	movq	-16520(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16640(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16632(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16696(%rbp), %rcx      # 8-byte Reload
	movq	-16512(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-16728(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16704(%rbp), %rsi      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16504(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16728(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-16672(%rbp), %rdi      # 8-byte Reload
	movq	-16688(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16696(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -16760(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16632(%rbp), %rdi      # 8-byte Reload
	movq	-16624(%rbp), %rsi      # 8-byte Reload
	movq	-16664(%rbp), %rdx      # 8-byte Reload
	movq	-16720(%rbp), %rcx      # 8-byte Reload
	movq	-16712(%rbp), %r8       # 8-byte Reload
	movl	-16676(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16648(%rbp), %rdi      # 8-byte Reload
	movq	-16496(%rbp), %rsi      # 8-byte Reload
	movq	-16496(%rbp), %rdx      # 8-byte Reload
	movq	-16648(%rbp), %rcx      # 8-byte Reload
	movq	-16656(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16496(%rbp), %rax      # 8-byte Reload
	.loc	1 170 0                 # feature_extraction.c:170:0
.Ltmp187:
	vmovsd	-16752(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -16768(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -16776(%rbp)     # 8-byte Spill
.LBB1_58:                               #   Parent Loop BB1_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-16776(%rbp), %xmm0     # 8-byte Reload
	movq	-16768(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str482, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str471, %r9
	movabsq	$3, %r10
	leaq	.L.str484, %r11
	movabsq	$168, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str483, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -16784(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -16792(%rbp)      # 8-byte Spill
	leaq	.L.str481, %rax
	movq	%rax, -16800(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -16808(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -16816(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -16824(%rbp)      # 8-byte Spill
	leaq	.L.str473, %rax
	movq	%rax, -16832(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -16840(%rbp)      # 8-byte Spill
	leaq	.L.str472, %rax
	movq	%rax, -16848(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -16856(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -16864(%rbp)      # 8-byte Spill
	leaq	.L.str475, %rax
	movq	%rax, -16872(%rbp)      # 8-byte Spill
	leaq	.L.str474, %rax
	movq	%rax, -16880(%rbp)      # 8-byte Spill
	leaq	.L.str480, %rax
	movq	%rax, -16888(%rbp)      # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, -16896(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -16904(%rbp)      # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, -16912(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -16920(%rbp)      # 8-byte Spill
	leaq	.L.str478, %rax
	movq	%rax, -16928(%rbp)      # 8-byte Spill
	leaq	.L.str467, %rax
	movq	%rax, -16936(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -16944(%rbp)      # 8-byte Spill
	leaq	.L.str477, %rax
	movq	%rax, -16952(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -16960(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -16968(%rbp)      # 8-byte Spill
	leaq	.L.str476, %rax
	movq	%rax, -16976(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -16984(%rbp)      # 8-byte Spill
	leaq	.L.str469, %rax
	movq	%rax, -16992(%rbp)      # 8-byte Spill
	leaq	.L.str463, %rax
	movq	%rax, -17000(%rbp)      # 8-byte Spill
	leaq	.L.str468, %rax
	movq	%rax, -17008(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -17016(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -17024(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -17032(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -17040(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-16848(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17048(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17016(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17056(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17064(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -17072(%rbp)     # 8-byte Spill
	movq	%r13, -17080(%rbp)      # 8-byte Spill
	movq	%r14, -17088(%rbp)      # 8-byte Spill
	movq	%r15, -17096(%rbp)      # 8-byte Spill
	movl	%r12d, -17100(%rbp)     # 4-byte Spill
	movq	%rbx, -17112(%rbp)      # 8-byte Spill
	movq	%r11, -17120(%rbp)      # 8-byte Spill
	movq	%r10, -17128(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16832(%rbp), %r8       # 8-byte Reload
	movq	-17048(%rbp), %r9       # 8-byte Reload
	movq	-17064(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17032(%rbp), %rcx      # 8-byte Reload
	movq	-16856(%rbp), %r8       # 8-byte Reload
	movq	-17048(%rbp), %r9       # 8-byte Reload
	movq	-17000(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16784(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16848(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17000(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16880(%rbp), %rcx      # 8-byte Reload
	movq	-17016(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16872(%rbp), %r8       # 8-byte Reload
	movq	-17048(%rbp), %r9       # 8-byte Reload
	movq	-17064(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-17008(%rbp), %r8       # 8-byte Reload
	movq	-17048(%rbp), %r9       # 8-byte Reload
	movq	-17000(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17072(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16880(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17000(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16976(%rbp), %rcx      # 8-byte Reload
	movq	-16864(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16760(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16992(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16784(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16848(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16784(%rbp), %rax      # 8-byte Reload
	movq	-16760(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16976(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17136(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16952(%rbp), %rcx      # 8-byte Reload
	movq	-16984(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17136(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16976(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16968(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17136(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-17048(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17144(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16952(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16928(%rbp), %rcx      # 8-byte Reload
	movq	-16960(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17144(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16952(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-17136(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -17152(%rbp)     # 8-byte Spill
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16928(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16912(%rbp), %rcx      # 8-byte Reload
	movq	-16944(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16744(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16936(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17152(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16928(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17152(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-16744(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16912(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -17160(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16888(%rbp), %rcx      # 8-byte Reload
	movq	-16920(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17160(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16912(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17160(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16912(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17160(%rbp), %xmm0     # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16888(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm1, -17168(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16896(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16872(%rbp), %rcx      # 8-byte Reload
	movq	-16904(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17168(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16888(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17072(%rbp), %xmm0     # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16880(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17072(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-17168(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp188:
	.loc	1 168 0                 # feature_extraction.c:168:0
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-16872(%rbp), %rcx      # 8-byte Reload
	movq	-17032(%rbp), %r8       # 8-byte Reload
	movq	-17024(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -17176(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17112(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16832(%rbp), %rcx      # 8-byte Reload
	movq	-16864(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rdx      # 8-byte Reload
	movq	-17032(%rbp), %rcx      # 8-byte Reload
	movq	-16856(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16784(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16848(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16784(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16832(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17184(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17112(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-16800(%rbp), %rcx      # 8-byte Reload
	movq	-16840(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-17184(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16832(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17184(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-16792(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16800(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -17188(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17112(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-17040(%rbp), %rcx      # 8-byte Reload
	movq	-16816(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-16792(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16808(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17188(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-16792(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-16800(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17188(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-17080(%rbp), %rdi      # 8-byte Reload
	movq	-17048(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-17040(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -17189(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17112(%rbp), %rdi      # 8-byte Reload
	movq	-17088(%rbp), %rsi      # 8-byte Reload
	movq	-17064(%rbp), %rdx      # 8-byte Reload
	movq	-17096(%rbp), %rcx      # 8-byte Reload
	movq	-17056(%rbp), %r8       # 8-byte Reload
	movl	-17100(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17128(%rbp), %rdi      # 8-byte Reload
	movq	-17032(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-17120(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17056(%rbp), %rdi      # 8-byte Reload
	movq	-17032(%rbp), %rsi      # 8-byte Reload
	movq	-17032(%rbp), %rdx      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-17064(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17189(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-17048(%rbp), %rdi      # 8-byte Reload
	movq	-17048(%rbp), %rsi      # 8-byte Reload
	movq	-17048(%rbp), %rcx      # 8-byte Reload
	movq	-17040(%rbp), %r8       # 8-byte Reload
	movq	-17032(%rbp), %r9       # 8-byte Reload
	movq	-17024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17189(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-17184(%rbp), %rcx      # 8-byte Reload
	.loc	1 170 0                 # feature_extraction.c:170:0
.Ltmp189:
	vmovsd	-17176(%rbp), %xmm0     # 8-byte Reload
.Ltmp190:
	.loc	1 168 0                 # feature_extraction.c:168:0
	movq	%rcx, -16768(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -16776(%rbp)     # 8-byte Spill
	jne	.LBB1_59
	jmp	.LBB1_58
.LBB1_59:                               # %._crit_edge53
                                        #   in Loop: Header=BB1_56 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str458, %r8
	leaq	.L.str8, %rdx
	movabsq	$168, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str484, %r9
	leaq	.L.str486, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str475, %r15
	leaq	.L.str459, %r12
	movabsq	$170, %r13
	movq	%rax, -17200(%rbp)      # 8-byte Spill
	leaq	.L.str485, %rax
	movq	%rax, -17208(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 170 0                 # feature_extraction.c:170:0
.Ltmp191:
	subq	$16, %rsp
	movq	%rdi, -17216(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -17224(%rbp)      # 8-byte Spill
	movq	%rdx, -17232(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-17208(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -17240(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -17248(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17256(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -17260(%rbp)      # 4-byte Spill
	movq	%r11, -17272(%rbp)      # 8-byte Spill
	movq	%r14, -17280(%rbp)      # 8-byte Spill
	movq	%r12, -17288(%rbp)      # 8-byte Spill
	movq	%r15, -17296(%rbp)      # 8-byte Spill
	movq	%r10, -17304(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17272(%rbp), %rdi      # 8-byte Reload
	movq	-17280(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-17200(%rbp), %rcx      # 8-byte Reload
	movq	-17288(%rbp), %r8       # 8-byte Reload
	movq	-17240(%rbp), %r9       # 8-byte Reload
	movq	-17232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17200(%rbp), %rdi      # 8-byte Reload
	movq	-17280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17176(%rbp), %xmm0     # 8-byte Reload
	movq	-17200(%rbp), %rdx      # 8-byte Reload
	movq	-17296(%rbp), %rcx      # 8-byte Reload
	movq	-17240(%rbp), %r8       # 8-byte Reload
	movq	-17232(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-16488(%rbp), %rax      # 8-byte Reload
	vmovsd	-17176(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp192:
	.loc	1 168 0                 # feature_extraction.c:168:0
	subq	$16, %rsp
	movq	-17216(%rbp), %rdi      # 8-byte Reload
	movq	-17224(%rbp), %rsi      # 8-byte Reload
	movq	-17256(%rbp), %rdx      # 8-byte Reload
	movq	-17304(%rbp), %rcx      # 8-byte Reload
	movq	-17272(%rbp), %r8       # 8-byte Reload
	movl	-17260(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17200(%rbp), %rdi      # 8-byte Reload
	movq	-17240(%rbp), %rsi      # 8-byte Reload
	movq	-17240(%rbp), %rdx      # 8-byte Reload
	movq	-17200(%rbp), %rcx      # 8-byte Reload
	movq	-17248(%rbp), %r8       # 8-byte Reload
	movq	-17240(%rbp), %r9       # 8-byte Reload
	movq	-17232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp193:
.LBB1_60:                               #   in Loop: Header=BB1_56 Depth=1
	movabsq	$1, %rax
	leaq	.L.str494, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str444, %r8
	movabsq	$3, %r9
	leaq	.L.str445, %r10
	movabsq	$165, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str458, %r14
	leaq	.L.str495, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -17312(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -17320(%rbp)      # 8-byte Spill
	leaq	.L.str493, %rax
	movq	%rax, -17328(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -17336(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -17344(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -17352(%rbp)      # 8-byte Spill
	leaq	.L.str457, %rax
	movq	%rax, -17360(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -17368(%rbp)      # 8-byte Spill
	leaq	.L.str456, %rax
	movq	%rax, -17376(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -17384(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -17392(%rbp)      # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, -17400(%rbp)      # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, -17408(%rbp)      # 8-byte Spill
	movabsq	$174, %rax
	movq	%rax, -17416(%rbp)      # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, -17424(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -17432(%rbp)      # 8-byte Spill
	leaq	.L.str490, %rax
	movq	%rax, -17440(%rbp)      # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, -17448(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -17456(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -17464(%rbp)      # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, -17472(%rbp)      # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -17480(%rbp)      # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -17488(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -17496(%rbp)      # 8-byte Spill
	leaq	.L.str487, %rax
	movq	%rax, -17504(%rbp)      # 8-byte Spill
	leaq	.L.str442, %rax
	.loc	1 174 0                 # feature_extraction.c:174:0
	subq	$16, %rsp
	movq	%rax, -17512(%rbp)      # 8-byte Spill
	movq	-17416(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17520(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -17528(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -17536(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17544(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17464(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17552(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17560(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -17568(%rbp)      # 8-byte Spill
	movq	%r15, -17576(%rbp)      # 8-byte Spill
	movl	%r12d, -17580(%rbp)     # 4-byte Spill
	movq	%r13, -17592(%rbp)      # 8-byte Spill
	movq	%rbx, -17600(%rbp)      # 8-byte Spill
	movq	%r11, -17608(%rbp)      # 8-byte Spill
	movq	%r10, -17616(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17408(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16488(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -17624(%rbp)     # 8-byte Spill
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17504(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17472(%rbp), %rcx      # 8-byte Reload
	movq	-17456(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-15784(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17512(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17624(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17504(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17624(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-15784(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17472(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -17632(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17448(%rbp), %rcx      # 8-byte Reload
	movq	-17496(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-17480(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17488(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17632(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17472(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17632(%rbp), %xmm0     # 8-byte Reload
	callq	sqrt
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -17640(%rbp)     # 8-byte Spill
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17448(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17440(%rbp), %rcx      # 8-byte Reload
	movq	-17464(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17408(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16488(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -17648(%rbp)     # 8-byte Spill
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17440(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17400(%rbp), %rcx      # 8-byte Reload
	movq	-17456(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17640(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17448(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17648(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17440(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-17648(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-17640(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17400(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -17656(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17424(%rbp), %rcx      # 8-byte Reload
	movq	-17432(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-16488(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17408(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17656(%rbp), %xmm0     # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17400(%rbp), %rcx      # 8-byte Reload
	movq	-17536(%rbp), %r8       # 8-byte Reload
	movq	-17528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-16488(%rbp), %rax      # 8-byte Reload
	vmovsd	-17656(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp194:
	.loc	1 165 0                 # feature_extraction.c:165:0
	subq	$16, %rsp
	movq	-17608(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17360(%rbp), %rcx      # 8-byte Reload
	movq	-17392(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rdx      # 8-byte Reload
	movq	-17536(%rbp), %rcx      # 8-byte Reload
	movq	-17384(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-16256(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17376(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16256(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17360(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17664(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17608(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17328(%rbp), %rcx      # 8-byte Reload
	movq	-17368(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17352(%rbp), %rsi      # 8-byte Reload
	movq	-17664(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17360(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17664(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17320(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17328(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -17668(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17608(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17544(%rbp), %rcx      # 8-byte Reload
	movq	-17344(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17320(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17336(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17668(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17320(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17328(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17668(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-17592(%rbp), %rdi      # 8-byte Reload
	movq	-17312(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17544(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -17669(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17608(%rbp), %rdi      # 8-byte Reload
	movq	-17600(%rbp), %rsi      # 8-byte Reload
	movq	-17568(%rbp), %rdx      # 8-byte Reload
	movq	-17576(%rbp), %rcx      # 8-byte Reload
	movq	-17520(%rbp), %r8       # 8-byte Reload
	movl	-17580(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17560(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17536(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17616(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17536(%rbp), %rdx      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17552(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17669(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-17312(%rbp), %rdi      # 8-byte Reload
	movq	-17312(%rbp), %rsi      # 8-byte Reload
	movq	-17312(%rbp), %rcx      # 8-byte Reload
	movq	-17544(%rbp), %r8       # 8-byte Reload
	movq	-17536(%rbp), %r9       # 8-byte Reload
	movq	-17528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17669(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-17664(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -15792(%rbp)      # 8-byte Spill
	jne	.LBB1_53
	jmp	.LBB1_56
.Ltmp195:
.LBB1_61:                               # %.preheader43
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_63 Depth 2
	movq	-16248(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str453, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str498, %r9
	movabsq	$3, %r10
	leaq	.L.str500, %r11
	movabsq	$180, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str455, %r15
	leaq	.L.str499, %r12
	movl	$1, %r13d
	movq	%rax, -17680(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -17688(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -17696(%rbp)      # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, -17704(%rbp)      # 8-byte Spill
	leaq	.L.str448, %rax
	movq	%rax, -17712(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -17720(%rbp)      # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, -17728(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -17736(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 180 0                 # feature_extraction.c:180:0
.Ltmp196:
	subq	$16, %rsp
	movq	%rax, -17744(%rbp)      # 8-byte Spill
	movq	-17736(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17752(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -17760(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -17768(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-17704(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17776(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17744(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17784(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17792(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -17800(%rbp)      # 8-byte Spill
	movq	%rbx, -17808(%rbp)      # 8-byte Spill
	movq	%r15, -17816(%rbp)      # 8-byte Spill
	movq	%r12, -17824(%rbp)      # 8-byte Spill
	movl	%r13d, -17828(%rbp)     # 4-byte Spill
	movq	%r11, -17840(%rbp)      # 8-byte Spill
	movq	%r10, -17848(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17752(%rbp), %rdi      # 8-byte Reload
	movq	-17696(%rbp), %rsi      # 8-byte Reload
	movq	-17768(%rbp), %rdx      # 8-byte Reload
	movq	-17776(%rbp), %rcx      # 8-byte Reload
	movq	-17728(%rbp), %r8       # 8-byte Reload
	movq	-17776(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17776(%rbp), %rdi      # 8-byte Reload
	movq	-17696(%rbp), %rsi      # 8-byte Reload
	movq	-17768(%rbp), %rdx      # 8-byte Reload
	movq	-17768(%rbp), %rcx      # 8-byte Reload
	movq	-17720(%rbp), %r8       # 8-byte Reload
	movq	-17776(%rbp), %r9       # 8-byte Reload
	movq	-17712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17688(%rbp), %rdi      # 8-byte Reload
	movq	-17696(%rbp), %rsi      # 8-byte Reload
	movq	-17680(%rbp), %rdx      # 8-byte Reload
	movq	-17776(%rbp), %rcx      # 8-byte Reload
	movq	-17704(%rbp), %r8       # 8-byte Reload
	movq	-17768(%rbp), %r9       # 8-byte Reload
	movq	-17712(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17800(%rbp), %rsi      # 8-byte Reload
	movq	-17816(%rbp), %rdx      # 8-byte Reload
	movq	-17824(%rbp), %rcx      # 8-byte Reload
	movq	-17752(%rbp), %r8       # 8-byte Reload
	movl	-17828(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17848(%rbp), %rdi      # 8-byte Reload
	movq	-17768(%rbp), %rsi      # 8-byte Reload
	movq	-17768(%rbp), %rdx      # 8-byte Reload
	movq	-17776(%rbp), %rcx      # 8-byte Reload
	movq	-17840(%rbp), %r8       # 8-byte Reload
	movq	-17768(%rbp), %r9       # 8-byte Reload
	movq	-17760(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17752(%rbp), %rdi      # 8-byte Reload
	movq	-17768(%rbp), %rsi      # 8-byte Reload
	movq	-17768(%rbp), %rdx      # 8-byte Reload
	movq	-17776(%rbp), %rcx      # 8-byte Reload
	movq	-17792(%rbp), %r8       # 8-byte Reload
	movq	-17768(%rbp), %r9       # 8-byte Reload
	movq	-17760(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16233(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-17776(%rbp), %rdi      # 8-byte Reload
	movq	-17776(%rbp), %rsi      # 8-byte Reload
	movq	-17776(%rbp), %rcx      # 8-byte Reload
	movq	-17784(%rbp), %r8       # 8-byte Reload
	movq	-17768(%rbp), %r9       # 8-byte Reload
	movq	-17760(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16233(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_62
	jmp	.LBB1_64
.LBB1_62:                               # %.lr.ph45
                                        #   in Loop: Header=BB1_61 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str509, %r8
	leaq	.L.str8, %rdx
	movabsq	$180, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str500, %r9
	leaq	.L.str508, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str507, %r12
	movabsq	$32, %r13
	movq	%rax, -17856(%rbp)      # 8-byte Spill
	leaq	.L.str502, %rax
	movq	%rax, -17864(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -17872(%rbp)      # 8-byte Spill
	leaq	.L.str506, %rax
	movq	%rax, -17880(%rbp)      # 8-byte Spill
	leaq	.L.str505, %rax
	movq	%rax, -17888(%rbp)      # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, -17896(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -17904(%rbp)      # 8-byte Spill
	leaq	.L.str460, %rax
	movq	%rax, -17912(%rbp)      # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, -17920(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -17928(%rbp)      # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, -17936(%rbp)      # 8-byte Spill
	leaq	.L.str503, %rax
	movq	%rax, -17944(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -17952(%rbp)      # 8-byte Spill
	leaq	.L.str501, %rax
	movq	%rax, -17960(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -17968(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -17976(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 183 0                 # feature_extraction.c:183:0
.Ltmp197:
	subq	$16, %rsp
	movq	%rax, -17984(%rbp)      # 8-byte Spill
	movq	-17896(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17992(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-17992(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -18000(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -18008(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-17960(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18016(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17984(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18024(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18032(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -18040(%rbp)      # 8-byte Spill
	movl	%ebx, -18044(%rbp)      # 4-byte Spill
	movq	%r15, -18056(%rbp)      # 8-byte Spill
	movq	%r12, -18064(%rbp)      # 8-byte Spill
	movq	%r13, -18072(%rbp)      # 8-byte Spill
	movq	%r11, -18080(%rbp)      # 8-byte Spill
	movq	%r10, -18088(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-17680(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17920(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17680(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17960(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -18092(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17896(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17864(%rbp), %rcx      # 8-byte Reload
	movq	-17976(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-18080(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17968(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18092(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17960(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18092(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17864(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -18096(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17896(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17944(%rbp), %rcx      # 8-byte Reload
	movq	-17928(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18080(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-17680(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17920(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-13920(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17952(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17680(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13920(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18016(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18104(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17944(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17896(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17936(%rbp), %rcx      # 8-byte Reload
	movq	-17904(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-18104(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17944(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13920(%rbp), %rax      # 8-byte Reload
	movq	-17680(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18112(%rbp)     # 8-byte Spill
	movq	-18016(%rbp), %rdx      # 8-byte Reload
	movq	-17936(%rbp), %rcx      # 8-byte Reload
	movq	-17856(%rbp), %r8       # 8-byte Reload
	movq	-18008(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17896(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17888(%rbp), %rcx      # 8-byte Reload
	movq	-17928(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18080(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-17680(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17920(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-13928(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17912(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17680(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13928(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18016(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18120(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17888(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17896(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17880(%rbp), %rcx      # 8-byte Reload
	movq	-17904(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	-18120(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17888(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13928(%rbp), %rax      # 8-byte Reload
	movq	-17680(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp198:
	.loc	1 180 0                 # feature_extraction.c:180:0
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18128(%rbp)     # 8-byte Spill
	movq	-18016(%rbp), %rdx      # 8-byte Reload
	movq	-17880(%rbp), %rcx      # 8-byte Reload
	movq	-17856(%rbp), %r8       # 8-byte Reload
	movq	-18008(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18000(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-18064(%rbp), %rcx      # 8-byte Reload
	movq	-17872(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-18096(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-17864(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18096(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-18040(%rbp), %rdi      # 8-byte Reload
	movq	-18056(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-18064(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18136(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18000(%rbp), %rdi      # 8-byte Reload
	movq	-17992(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-18088(%rbp), %rcx      # 8-byte Reload
	movq	-18080(%rbp), %r8       # 8-byte Reload
	movl	-18044(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-17856(%rbp), %rsi      # 8-byte Reload
	movq	-17856(%rbp), %rdx      # 8-byte Reload
	movq	-18016(%rbp), %rcx      # 8-byte Reload
	movq	-18024(%rbp), %r8       # 8-byte Reload
	movq	-17856(%rbp), %r9       # 8-byte Reload
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17856(%rbp), %rax      # 8-byte Reload
	movq	%rax, -18144(%rbp)      # 8-byte Spill
.LBB1_63:                               #   Parent Loop BB1_61 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-18144(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str519, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str509, %r9
	movabsq	$3, %r10
	leaq	.L.str498, %r11
	movabsq	$180, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str520, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -18152(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -18160(%rbp)      # 8-byte Spill
	leaq	.L.str518, %rax
	movq	%rax, -18168(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -18176(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -18184(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -18192(%rbp)      # 8-byte Spill
	leaq	.L.str511, %rax
	movq	%rax, -18200(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -18208(%rbp)      # 8-byte Spill
	leaq	.L.str510, %rax
	movq	%rax, -18216(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -18224(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -18232(%rbp)      # 8-byte Spill
	leaq	.L.str516, %rax
	movq	%rax, -18240(%rbp)      # 8-byte Spill
	leaq	.L.str513, %rax
	movq	%rax, -18248(%rbp)      # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, -18256(%rbp)      # 8-byte Spill
	leaq	.L.str517, %rax
	movq	%rax, -18264(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -18272(%rbp)      # 8-byte Spill
	leaq	.L.str515, %rax
	movq	%rax, -18280(%rbp)      # 8-byte Spill
	leaq	.L.str506, %rax
	movq	%rax, -18288(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -18296(%rbp)      # 8-byte Spill
	leaq	.L.str514, %rax
	movq	%rax, -18304(%rbp)      # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, -18312(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -18320(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -18328(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -18336(%rbp)      # 8-byte Spill
	leaq	.L.str512, %rax
	movq	%rax, -18344(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -18352(%rbp)      # 8-byte Spill
	leaq	.L.str507, %rax
	movq	%rax, -18360(%rbp)      # 8-byte Spill
	leaq	.L.str500, %rax
	movq	%rax, -18368(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -18376(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 183 0                 # feature_extraction.c:183:0
.Ltmp199:
	subq	$16, %rsp
	movq	%rax, -18384(%rbp)      # 8-byte Spill
	movq	-18376(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -18392(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -18400(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -18408(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-18216(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18416(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18384(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18424(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18432(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -18440(%rbp)      # 8-byte Spill
	movq	%r15, -18448(%rbp)      # 8-byte Spill
	movl	%r12d, -18452(%rbp)     # 4-byte Spill
	movq	%r13, -18464(%rbp)      # 8-byte Spill
	movq	%rbx, -18472(%rbp)      # 8-byte Spill
	movq	%r11, -18480(%rbp)      # 8-byte Spill
	movq	%r10, -18488(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18400(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18416(%rbp), %r9       # 8-byte Reload
	movq	-18432(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18400(%rbp), %rdx      # 8-byte Reload
	movq	-18400(%rbp), %rcx      # 8-byte Reload
	movq	-18224(%rbp), %r8       # 8-byte Reload
	movq	-18416(%rbp), %r9       # 8-byte Reload
	movq	-18368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18344(%rbp), %rcx      # 8-byte Reload
	movq	-18232(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18136(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18360(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18152(%rbp), %rax      # 8-byte Reload
	movq	-18136(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18344(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18496(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18248(%rbp), %rcx      # 8-byte Reload
	movq	-18352(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18496(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18344(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18336(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18496(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18416(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18504(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18248(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18304(%rbp), %rcx      # 8-byte Reload
	movq	-18328(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18504(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18248(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-18496(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18512(%rbp)     # 8-byte Spill
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18304(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18320(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18112(%rbp), %xmm0     # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18312(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18512(%rbp), %xmm0     # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18304(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-18512(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-18112(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -18520(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18240(%rbp), %rcx      # 8-byte Reload
	movq	-18296(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18128(%rbp), %xmm0     # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18288(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18520(%rbp), %xmm0     # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-18520(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-18128(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18240(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -18528(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18256(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18264(%rbp), %rcx      # 8-byte Reload
	movq	-18272(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18504(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18248(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18528(%rbp), %xmm0     # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18240(%rbp), %rcx      # 8-byte Reload
	movq	-18400(%rbp), %r8       # 8-byte Reload
	movq	-18392(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-18496(%rbp), %rcx      # 8-byte Reload
	vmovsd	-18528(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp200:
	.loc	1 180 0                 # feature_extraction.c:180:0
	subq	$16, %rsp
	movq	-18472(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18200(%rbp), %rcx      # 8-byte Reload
	movq	-18232(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rdx      # 8-byte Reload
	movq	-18400(%rbp), %rcx      # 8-byte Reload
	movq	-18224(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18152(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18536(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18472(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18168(%rbp), %rcx      # 8-byte Reload
	movq	-18208(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18536(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18536(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18168(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -18540(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18472(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18408(%rbp), %rcx      # 8-byte Reload
	movq	-18184(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18176(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18540(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18168(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18540(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-18464(%rbp), %rdi      # 8-byte Reload
	movq	-18416(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -18541(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18472(%rbp), %rdi      # 8-byte Reload
	movq	-18440(%rbp), %rsi      # 8-byte Reload
	movq	-18432(%rbp), %rdx      # 8-byte Reload
	movq	-18448(%rbp), %rcx      # 8-byte Reload
	movq	-18424(%rbp), %r8       # 8-byte Reload
	movl	-18452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18488(%rbp), %rdi      # 8-byte Reload
	movq	-18400(%rbp), %rsi      # 8-byte Reload
	movq	-18400(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18480(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18400(%rbp), %rsi      # 8-byte Reload
	movq	-18400(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18432(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18541(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18416(%rbp), %rdi      # 8-byte Reload
	movq	-18416(%rbp), %rsi      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	movq	-18392(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18541(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-18536(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -18144(%rbp)      # 8-byte Spill
	jne	.LBB1_64
	jmp	.LBB1_63
.Ltmp201:
.LBB1_64:                               # %._crit_edge46
                                        #   in Loop: Header=BB1_61 Depth=1
	movabsq	$1, %rax
	leaq	.L.str522, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str455, %r8
	movabsq	$3, %r9
	leaq	.L.str524, %r10
	movabsq	$178, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str498, %r14
	leaq	.L.str523, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -18552(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -18560(%rbp)      # 8-byte Spill
	leaq	.L.str521, %rax
	movq	%rax, -18568(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -18576(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -18584(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -18592(%rbp)      # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, -18600(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -18608(%rbp)      # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, -18616(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -18624(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 178 0                 # feature_extraction.c:178:0
	subq	$16, %rsp
	movq	%rdi, -18632(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -18640(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -18648(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -18656(%rbp)      # 8-byte Spill
	movq	-18600(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18664(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18656(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18672(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18680(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -18688(%rbp)      # 8-byte Spill
	movq	%r15, -18696(%rbp)      # 8-byte Spill
	movl	%r12d, -18700(%rbp)     # 4-byte Spill
	movq	%r13, -18712(%rbp)      # 8-byte Spill
	movq	%rbx, -18720(%rbp)      # 8-byte Spill
	movq	%r11, -18728(%rbp)      # 8-byte Spill
	movq	%r10, -18736(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18632(%rbp), %rdi      # 8-byte Reload
	movq	-18592(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rdx      # 8-byte Reload
	movq	-18648(%rbp), %rcx      # 8-byte Reload
	movq	-18624(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18552(%rbp), %rdi      # 8-byte Reload
	movq	-18592(%rbp), %rsi      # 8-byte Reload
	movq	-17680(%rbp), %rdx      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18616(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17680(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-18712(%rbp), %rdi      # 8-byte Reload
	movq	-18592(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18600(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18744(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18728(%rbp), %rdi      # 8-byte Reload
	movq	-18720(%rbp), %rsi      # 8-byte Reload
	movq	-18688(%rbp), %rdx      # 8-byte Reload
	movq	-18568(%rbp), %rcx      # 8-byte Reload
	movq	-18608(%rbp), %r8       # 8-byte Reload
	movl	-18700(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18552(%rbp), %rdi      # 8-byte Reload
	movq	-18592(%rbp), %rsi      # 8-byte Reload
	movq	-18744(%rbp), %rdx      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18600(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18744(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18712(%rbp), %rdi      # 8-byte Reload
	movq	-18560(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18568(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -18748(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18728(%rbp), %rdi      # 8-byte Reload
	movq	-18720(%rbp), %rsi      # 8-byte Reload
	movq	-18688(%rbp), %rdx      # 8-byte Reload
	movq	-18664(%rbp), %rcx      # 8-byte Reload
	movq	-18584(%rbp), %r8       # 8-byte Reload
	movl	-18700(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18632(%rbp), %rdi      # 8-byte Reload
	movq	-18560(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18576(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18748(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18552(%rbp), %rdi      # 8-byte Reload
	movq	-18560(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18568(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18748(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-18712(%rbp), %rdi      # 8-byte Reload
	movq	-18552(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18664(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -18749(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18728(%rbp), %rdi      # 8-byte Reload
	movq	-18720(%rbp), %rsi      # 8-byte Reload
	movq	-18688(%rbp), %rdx      # 8-byte Reload
	movq	-18696(%rbp), %rcx      # 8-byte Reload
	movq	-18632(%rbp), %r8       # 8-byte Reload
	movl	-18700(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18680(%rbp), %rdi      # 8-byte Reload
	movq	-18648(%rbp), %rsi      # 8-byte Reload
	movq	-18648(%rbp), %rdx      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18736(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18632(%rbp), %rdi      # 8-byte Reload
	movq	-18648(%rbp), %rsi      # 8-byte Reload
	movq	-18648(%rbp), %rdx      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18672(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18749(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18552(%rbp), %rdi      # 8-byte Reload
	movq	-18552(%rbp), %rsi      # 8-byte Reload
	movq	-18552(%rbp), %rcx      # 8-byte Reload
	movq	-18664(%rbp), %r8       # 8-byte Reload
	movq	-18648(%rbp), %r9       # 8-byte Reload
	movq	-18640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18749(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-18744(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -16248(%rbp)      # 8-byte Spill
	jne	.LBB1_66
	jmp	.LBB1_61
.Ltmp202:
.LBB1_65:                               # %._crit_edge49.thread250
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str452, %r8
	leaq	.L.str8, %rdx
	movabsq	$189, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str398, %r9
	leaq	.L.str526, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str525, %r12
	.loc	1 188 0                 # feature_extraction.c:188:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -18760(%rbp)      # 8-byte Spill
	movl	$.L.str398, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18768(%rbp)      # 8-byte Spill
	movl	$.L.str525, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18776(%rbp)      # 8-byte Spill
	movl	$188, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18784(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18792(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -18800(%rbp)      # 8-byte Spill
	movq	-18784(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -18808(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -18812(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-18768(%rbp), %r13      # 8-byte Reload
	movq	%rdx, -18824(%rbp)      # 8-byte Spill
	movq	%r13, %rdx
	movq	-18776(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18832(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18792(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18840(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-18812(%rbp), %r13d     # 4-byte Reload
	movq	%r9, -18848(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, -18856(%rbp)      # 8-byte Spill
	movl	%ebx, -18860(%rbp)      # 4-byte Spill
	movq	%r15, -18872(%rbp)      # 8-byte Spill
	movq	%r12, -18880(%rbp)      # 8-byte Spill
	movq	%r11, -18888(%rbp)      # 8-byte Spill
	movq	%r10, -18896(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str386, %r9d
	movl	%r9d, %r8d
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
                                        # kill: R9<def> R9D<kill>
	movq	%rax, %rdi
	movq	-13672(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13672(%rbp), %rax      # 8-byte Reload
	leaq	15(,%rax,8), %rcx
	andq	$-16, %rcx
	movq	%rsp, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rsp
	subq	$16, %rsp
	movq	-18856(%rbp), %rdi      # 8-byte Reload
	movq	-18872(%rbp), %rsi      # 8-byte Reload
	movq	%rdx, -18904(%rbp)      # 8-byte Spill
	movq	-18800(%rbp), %rcx      # 8-byte Reload
	movq	-18880(%rbp), %r8       # 8-byte Reload
	movq	-18832(%rbp), %r9       # 8-byte Reload
	movq	-18824(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- undef
	#DEBUG_VALUE: i <- 0
	.loc	1 189 0                 # feature_extraction.c:189:0
.Ltmp203:
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-18760(%rbp), %rsi      # 8-byte Reload
	movq	-18848(%rbp), %rdx      # 8-byte Reload
	movq	-18896(%rbp), %rcx      # 8-byte Reload
	movq	-18888(%rbp), %r8       # 8-byte Reload
	movl	-18860(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18800(%rbp), %rdi      # 8-byte Reload
	movq	-18832(%rbp), %rsi      # 8-byte Reload
	movq	-18832(%rbp), %rdx      # 8-byte Reload
	movq	-18800(%rbp), %rcx      # 8-byte Reload
	movq	-18840(%rbp), %r8       # 8-byte Reload
	movq	-18832(%rbp), %r9       # 8-byte Reload
	movq	-18824(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18904(%rbp), %rax      # 8-byte Reload
	movq	%rax, -16096(%rbp)      # 8-byte Spill
	jmp	.LBB1_75
.Ltmp204:
.LBB1_66:                               # %._crit_edge49
	movabsq	$1, %rax
	leaq	.L.str528, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str452, %r8
	movabsq	$3, %r9
	leaq	.L.str530, %r10
	movabsq	$189, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str524, %r14
	leaq	.L.str529, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -18912(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -18920(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -18928(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -18936(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -18944(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -18952(%rbp)      # 8-byte Spill
	leaq	.L.str527, %rax
	.loc	1 188 0                 # feature_extraction.c:188:0
	subq	$16, %rsp
	movq	%rax, -18960(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -18968(%rbp)      # 8-byte Spill
	movl	$.L.str524, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18976(%rbp)      # 8-byte Spill
	movl	$.L.str527, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18984(%rbp)      # 8-byte Spill
	movl	$188, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -18992(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19000(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -19008(%rbp)      # 8-byte Spill
	movq	-18992(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -19016(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-19008(%rbp), %rax      # 8-byte Reload
	movl	%esi, -19020(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -19032(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-18984(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19040(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19000(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19048(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-19020(%rbp), %eax      # 4-byte Reload
	movq	%r9, -19056(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -19064(%rbp)      # 8-byte Spill
	movq	%r14, -19072(%rbp)      # 8-byte Spill
	movq	%r15, -19080(%rbp)      # 8-byte Spill
	movl	%r12d, -19084(%rbp)     # 4-byte Spill
	movq	%rbx, -19096(%rbp)      # 8-byte Spill
	movq	%r11, -19104(%rbp)      # 8-byte Spill
	movq	%r10, -19112(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str386, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-13672(%rbp), %rdx      # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13672(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-19064(%rbp), %rdi      # 8-byte Reload
	movq	-18952(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -19120(%rbp)      # 8-byte Spill
.Ltmp205:
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- [RBP+-19120]
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- [RBP+-19120]
	movq	%rdx, %rsi
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-18960(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp206:
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- [RBP+-19120]
	#DEBUG_VALUE: i <- 0
	.loc	1 189 0                 # feature_extraction.c:189:0
	subq	$16, %rsp
	movq	-19104(%rbp), %rdi      # 8-byte Reload
	movq	-19096(%rbp), %rsi      # 8-byte Reload
	movq	-19072(%rbp), %rdx      # 8-byte Reload
	movq	-19040(%rbp), %rcx      # 8-byte Reload
	movq	-18944(%rbp), %r8       # 8-byte Reload
	movl	-19084(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19016(%rbp), %rdi      # 8-byte Reload
	movq	-18920(%rbp), %rsi      # 8-byte Reload
	movq	-19032(%rbp), %rdx      # 8-byte Reload
	movq	-19032(%rbp), %rcx      # 8-byte Reload
	movq	-18936(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18912(%rbp), %rdi      # 8-byte Reload
	movq	-18920(%rbp), %rsi      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-18928(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-19064(%rbp), %rdi      # 8-byte Reload
	movq	-18912(%rbp), %rsi      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-19040(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -19121(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19104(%rbp), %rdi      # 8-byte Reload
	movq	-19096(%rbp), %rsi      # 8-byte Reload
	movq	-19072(%rbp), %rdx      # 8-byte Reload
	movq	-19080(%rbp), %rcx      # 8-byte Reload
	movq	-19016(%rbp), %r8       # 8-byte Reload
	movl	-19084(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19032(%rbp), %rsi      # 8-byte Reload
	movq	-19032(%rbp), %rdx      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-19112(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19016(%rbp), %rdi      # 8-byte Reload
	movq	-19032(%rbp), %rsi      # 8-byte Reload
	movq	-19032(%rbp), %rdx      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-19048(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19121(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18912(%rbp), %rdi      # 8-byte Reload
	movq	-18912(%rbp), %rsi      # 8-byte Reload
	movq	-18912(%rbp), %rcx      # 8-byte Reload
	movq	-19040(%rbp), %r8       # 8-byte Reload
	movq	-19032(%rbp), %r9       # 8-byte Reload
	movq	-18968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19121(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-19120(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -16096(%rbp)      # 8-byte Spill
	jne	.LBB1_67
	jmp	.LBB1_75
.Ltmp207:
.LBB1_67:                               # %.preheader37.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str534, %r8
	leaq	.L.str8, %rdx
	movabsq	$189, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str530, %r9
	leaq	.L.str533, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str532, %r12
	.loc	1 195 0                 # feature_extraction.c:195:0
.Ltmp208:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -19136(%rbp)      # 8-byte Spill
	movl	$.L.str530, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19144(%rbp)      # 8-byte Spill
	movl	$.L.str531, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19152(%rbp)      # 8-byte Spill
	movl	$195, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19160(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19168(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -19176(%rbp)      # 8-byte Spill
	movq	-19160(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -19184(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -19188(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-19144(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -19200(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-19152(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19208(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19168(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19216(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-19188(%rbp), %eax      # 4-byte Reload
	movq	%r9, -19224(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -19232(%rbp)      # 8-byte Spill
	movl	%ebx, -19236(%rbp)      # 4-byte Spill
	movq	%r15, -19248(%rbp)      # 8-byte Spill
	movq	%r12, -19256(%rbp)      # 8-byte Spill
	movq	%r13, -19264(%rbp)      # 8-byte Spill
	movq	%r11, -19272(%rbp)      # 8-byte Spill
	movq	%r10, -19280(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -19288(%rbp)      # 8-byte Spill
	movq	-19288(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -19296(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-19296(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, -19304(%rbp)      # 8-byte Spill
	movq	-19288(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp209:
	.loc	1 202 0                 # feature_extraction.c:202:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-19304(%rbp), %rsi      # 8-byte Reload
	movq	-19304(%rbp), %rcx      # 8-byte Reload
	movq	-19152(%rbp), %r8       # 8-byte Reload
	movq	-19288(%rbp), %r9       # 8-byte Reload
	movb	%al, -19305(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str532, %ebx
	movl	%ebx, %ecx
	movl	$202, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-19264(%rbp), %rsi      # 8-byte Reload
	movq	-19144(%rbp), %rdx      # 8-byte Reload
	movl	-19188(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-15588(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str437, %ebx
	movl	%ebx, %r8d
	movq	-19304(%rbp), %rdi      # 8-byte Reload
	movq	-19296(%rbp), %rsi      # 8-byte Reload
	movq	-19304(%rbp), %rcx      # 8-byte Reload
	movq	-19288(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-15588(%rbp), %ebx      # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp210:
	.loc	1 189 0                 # feature_extraction.c:189:0
	movq	-19232(%rbp), %rdi      # 8-byte Reload
	movq	-19248(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -19320(%rbp)     # 8-byte Spill
	movq	-19208(%rbp), %rdx      # 8-byte Reload
	movq	-19256(%rbp), %rcx      # 8-byte Reload
	movq	-19176(%rbp), %r8       # 8-byte Reload
	movq	-19200(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-19184(%rbp), %rdi      # 8-byte Reload
	movq	-19136(%rbp), %rsi      # 8-byte Reload
	movq	-19224(%rbp), %rdx      # 8-byte Reload
	movq	-19280(%rbp), %rcx      # 8-byte Reload
	movq	-19272(%rbp), %r8       # 8-byte Reload
	movl	-19236(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19208(%rbp), %rdi      # 8-byte Reload
	movq	-19176(%rbp), %rsi      # 8-byte Reload
	movq	-19176(%rbp), %rdx      # 8-byte Reload
	movq	-19208(%rbp), %rcx      # 8-byte Reload
	movq	-19216(%rbp), %r8       # 8-byte Reload
	movq	-19176(%rbp), %r9       # 8-byte Reload
	movq	-19200(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19176(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -19328(%rbp)      # 8-byte Spill
.LBB1_68:                               # %.lr.ph39
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_69 Depth 2
                                        #       Child Loop BB1_71 Depth 3
	movq	-19328(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str544, %r8
	leaq	.L.str8, %rsi
	movabsq	$192, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str534, %r10
	leaq	.L.str543, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str542, %r13
	movq	%rax, -19336(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -19344(%rbp)      # 8-byte Spill
	leaq	.L.str539, %rax
	movq	%rax, -19352(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -19360(%rbp)      # 8-byte Spill
	leaq	.L.str541, %rax
	movq	%rax, -19368(%rbp)      # 8-byte Spill
	leaq	.L.str540, %rax
	movq	%rax, -19376(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -19384(%rbp)      # 8-byte Spill
	leaq	.L.str535, %rax
	movq	%rax, -19392(%rbp)      # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, -19400(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -19408(%rbp)      # 8-byte Spill
	leaq	.L.str538, %rax
	movq	%rax, -19416(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -19424(%rbp)      # 8-byte Spill
	movabsq	$194, %rax
	movq	%rax, -19432(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -19440(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -19448(%rbp)      # 8-byte Spill
	leaq	.L.str530, %rax
	movq	%rax, -19456(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -19464(%rbp)      # 8-byte Spill
	leaq	.L.str536, %rax
	movq	%rax, -19472(%rbp)      # 8-byte Spill
	leaq	.L.str537, %rax
	movq	%rax, -19480(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -19488(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 194 0                 # feature_extraction.c:194:0
.Ltmp211:
	subq	$16, %rsp
	movq	%rax, -19496(%rbp)      # 8-byte Spill
	movq	-19488(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -19504(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -19512(%rbp)      # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -19520(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-19392(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19528(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19496(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19536(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -19544(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -19548(%rbp)     # 4-byte Spill
	movq	%r15, -19560(%rbp)      # 8-byte Spill
	movq	%rbx, -19568(%rbp)      # 8-byte Spill
	movq	%r12, -19576(%rbp)      # 8-byte Spill
	movq	%r13, -19584(%rbp)      # 8-byte Spill
	movq	%r11, -19592(%rbp)      # 8-byte Spill
	movq	%r10, -19600(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19568(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19520(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19472(%rbp), %r8       # 8-byte Reload
	movq	-19528(%rbp), %r9       # 8-byte Reload
	movq	-19480(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19520(%rbp), %rdx      # 8-byte Reload
	movq	-19520(%rbp), %rcx      # 8-byte Reload
	movq	-19464(%rbp), %r8       # 8-byte Reload
	movq	-19528(%rbp), %r9       # 8-byte Reload
	movq	-19456(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19336(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19392(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19456(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19432(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19416(%rbp), %rcx      # 8-byte Reload
	movq	-19448(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19336(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19392(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19336(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19416(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -19604(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19432(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19352(%rbp), %rcx      # 8-byte Reload
	movq	-19440(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-19568(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19424(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19604(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19416(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19604(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
	.loc	1 197 0                 # feature_extraction.c:197:0
.Ltmp212:
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19352(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -19608(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19400(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19376(%rbp), %rcx      # 8-byte Reload
	movq	-19408(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19568(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19336(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19392(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-13920(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19384(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19336(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13920(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
.Ltmp213:
	.loc	1 192 0                 # feature_extraction.c:192:0
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-19528(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19616(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19376(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19504(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19368(%rbp), %rcx      # 8-byte Reload
	movq	-19360(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-19608(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19352(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19608(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19368(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19624(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19504(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19584(%rbp), %rcx      # 8-byte Reload
	movq	-19360(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-19608(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19352(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19608(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-19560(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19584(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19632(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19504(%rbp), %rdi      # 8-byte Reload
	movq	-19544(%rbp), %rsi      # 8-byte Reload
	movq	-19600(%rbp), %rdx      # 8-byte Reload
	movq	-19592(%rbp), %rcx      # 8-byte Reload
	movq	-19568(%rbp), %r8       # 8-byte Reload
	movl	-19548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19528(%rbp), %rdi      # 8-byte Reload
	movq	-19520(%rbp), %rsi      # 8-byte Reload
	movq	-19520(%rbp), %rdx      # 8-byte Reload
	movq	-19528(%rbp), %rcx      # 8-byte Reload
	movq	-19536(%rbp), %r8       # 8-byte Reload
	movq	-19520(%rbp), %r9       # 8-byte Reload
	movq	-19512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19336(%rbp), %rax      # 8-byte Reload
	movq	%rax, -19640(%rbp)      # 8-byte Spill
.LBB1_69:                               #   Parent Loop BB1_68 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB1_71 Depth 3
	movq	-19640(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str531, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str547, %r9
	movabsq	$3, %r10
	leaq	.L.str553, %r11
	movabsq	$195, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str544, %r15
	leaq	.L.str552, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -19648(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -19656(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -19664(%rbp)      # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, -19672(%rbp)      # 8-byte Spill
	movabsq	$194, %rax
	movq	%rax, -19680(%rbp)      # 8-byte Spill
	leaq	.L.str551, %rax
	movq	%rax, -19688(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -19696(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -19704(%rbp)      # 8-byte Spill
	leaq	.L.str550, %rax
	movq	%rax, -19712(%rbp)      # 8-byte Spill
	leaq	.L.str548, %rax
	movq	%rax, -19720(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -19728(%rbp)      # 8-byte Spill
	leaq	.L.str545, %rax
	movq	%rax, -19736(%rbp)      # 8-byte Spill
	leaq	.L.str542, %rax
	movq	%rax, -19744(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -19752(%rbp)      # 8-byte Spill
	leaq	.L.str534, %rax
	movq	%rax, -19760(%rbp)      # 8-byte Spill
	leaq	.L.str535, %rax
	movq	%rax, -19768(%rbp)      # 8-byte Spill
	leaq	.L.str546, %rax
	movq	%rax, -19776(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -19784(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 194 0                 # feature_extraction.c:194:0
.Ltmp214:
	subq	$16, %rsp
	movq	%rax, -19792(%rbp)      # 8-byte Spill
	movq	-19784(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -19800(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -19808(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -19816(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-19736(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19824(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19792(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19832(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -19840(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -19848(%rbp)      # 8-byte Spill
	movq	%r14, -19856(%rbp)      # 8-byte Spill
	movq	%r12, -19864(%rbp)      # 8-byte Spill
	movl	%r13d, -19868(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -19880(%rbp)     # 8-byte Spill
	movq	%rbx, -19888(%rbp)      # 8-byte Spill
	movq	%r10, -19896(%rbp)      # 8-byte Spill
	movq	%r11, -19904(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19800(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19816(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19776(%rbp), %r8       # 8-byte Reload
	movq	-19824(%rbp), %r9       # 8-byte Reload
	movq	-19840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19824(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19816(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19768(%rbp), %r8       # 8-byte Reload
	movq	-19824(%rbp), %r9       # 8-byte Reload
	movq	-19760(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19704(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19736(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19760(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19680(%rbp), %rdi      # 8-byte Reload
	movq	-19856(%rbp), %rsi      # 8-byte Reload
	movq	-19848(%rbp), %rdx      # 8-byte Reload
	movq	-19720(%rbp), %rcx      # 8-byte Reload
	movq	-19752(%rbp), %r8       # 8-byte Reload
	movl	-19868(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19800(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19632(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19744(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19824(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19736(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19648(%rbp), %rax      # 8-byte Reload
	movq	-19632(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-19704(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19720(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19912(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19680(%rbp), %rdi      # 8-byte Reload
	movq	-19856(%rbp), %rsi      # 8-byte Reload
	movq	-19848(%rbp), %rdx      # 8-byte Reload
	movq	-19672(%rbp), %rcx      # 8-byte Reload
	movq	-19728(%rbp), %r8       # 8-byte Reload
	movl	-19868(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19800(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19912(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19720(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19824(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19712(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19912(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-19120(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-19704(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-19824(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19920(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19672(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19680(%rbp), %rdi      # 8-byte Reload
	movq	-19856(%rbp), %rsi      # 8-byte Reload
	movq	-19848(%rbp), %rdx      # 8-byte Reload
	movq	-19688(%rbp), %rcx      # 8-byte Reload
	movq	-19696(%rbp), %r8       # 8-byte Reload
	movl	-19868(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19800(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	movq	-19920(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19672(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19824(%rbp), %rdi      # 8-byte Reload
	movq	-19656(%rbp), %rsi      # 8-byte Reload
	vmovsd	-19880(%rbp), %xmm0     # 8-byte Reload
	movq	-19816(%rbp), %rdx      # 8-byte Reload
	movq	-19664(%rbp), %rcx      # 8-byte Reload
	movq	-19816(%rbp), %r8       # 8-byte Reload
	movq	-19808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-19120(%rbp), %rax      # 8-byte Reload
	movq	-19912(%rbp), %rcx      # 8-byte Reload
	vmovsd	-19880(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp215:
	#DEBUG_VALUE: k <- 0
	.loc	1 195 0                 # feature_extraction.c:195:0
	subq	$16, %rsp
	movq	-19888(%rbp), %rdi      # 8-byte Reload
	movq	-19856(%rbp), %rsi      # 8-byte Reload
	movq	-19848(%rbp), %rdx      # 8-byte Reload
	movq	-19864(%rbp), %rcx      # 8-byte Reload
	movq	-19800(%rbp), %r8       # 8-byte Reload
	movl	-19868(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19896(%rbp), %rdi      # 8-byte Reload
	movq	-19816(%rbp), %rsi      # 8-byte Reload
	movq	-19816(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19904(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19800(%rbp), %rdi      # 8-byte Reload
	movq	-19816(%rbp), %rsi      # 8-byte Reload
	movq	-19816(%rbp), %rdx      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19840(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19305(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-19824(%rbp), %rdi      # 8-byte Reload
	movq	-19824(%rbp), %rsi      # 8-byte Reload
	movq	-19824(%rbp), %rcx      # 8-byte Reload
	movq	-19832(%rbp), %r8       # 8-byte Reload
	movq	-19816(%rbp), %r9       # 8-byte Reload
	movq	-19808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19305(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_70
	jmp	.LBB1_73
.LBB1_70:                               # %.lr.ph35
                                        #   in Loop: Header=BB1_69 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str562, %r8
	leaq	.L.str8, %rdx
	movabsq	$195, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str553, %r9
	leaq	.L.str561, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str560, %r12
	movabsq	$32, %r13
	movq	%rax, -19928(%rbp)      # 8-byte Spill
	leaq	.L.str556, %rax
	movq	%rax, -19936(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -19944(%rbp)      # 8-byte Spill
	leaq	.L.str559, %rax
	movq	%rax, -19952(%rbp)      # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, -19960(%rbp)      # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, -19968(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -19976(%rbp)      # 8-byte Spill
	leaq	.L.str558, %rax
	movq	%rax, -19984(%rbp)      # 8-byte Spill
	leaq	.L.str557, %rax
	movq	%rax, -19992(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -20000(%rbp)      # 8-byte Spill
	leaq	.L.str545, %rax
	movq	%rax, -20008(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -20016(%rbp)      # 8-byte Spill
	leaq	.L.str555, %rax
	movq	%rax, -20024(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -20032(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -20040(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -20048(%rbp)      # 8-byte Spill
	leaq	.L.str554, %rax
	movq	%rax, -20056(%rbp)      # 8-byte Spill
	leaq	.L.str540, %rax
	.loc	1 197 0                 # feature_extraction.c:197:0
.Ltmp216:
	subq	$16, %rsp
	movq	%rax, -20064(%rbp)      # 8-byte Spill
	movq	-19968(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -20072(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-20072(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -20080(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -20088(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-20056(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -20096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19976(%rbp), %rax      # 8-byte Reload
	movq	%r8, -20104(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -20112(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -20120(%rbp)      # 8-byte Spill
	movl	%ebx, -20124(%rbp)      # 4-byte Spill
	movq	%r15, -20136(%rbp)      # 8-byte Spill
	movq	%r12, -20144(%rbp)      # 8-byte Spill
	movq	%r13, -20152(%rbp)      # 8-byte Spill
	movq	%r11, -20160(%rbp)      # 8-byte Spill
	movq	%r10, -20168(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-19616(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20064(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19616(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -20176(%rbp)     # 8-byte Spill
	movq	-20096(%rbp), %rdx      # 8-byte Reload
	movq	-20056(%rbp), %rcx      # 8-byte Reload
	movq	-19928(%rbp), %r8       # 8-byte Reload
	movq	-20088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-19968(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-20024(%rbp), %rcx      # 8-byte Reload
	movq	-20048(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20008(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19648(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20152(%rbp), %rsi      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20024(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -20180(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19968(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-19936(%rbp), %rcx      # 8-byte Reload
	movq	-20040(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-20160(%rbp), %rdi      # 8-byte Reload
	movq	-20152(%rbp), %rsi      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20032(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-20180(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20152(%rbp), %rsi      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20024(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-20180(%rbp), %ebx      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20152(%rbp), %rsi      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-19936(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -20184(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19968(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-19992(%rbp), %rcx      # 8-byte Reload
	movq	-20016(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20160(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20008(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-13920(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20000(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19648(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-13920(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-20096(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -20192(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19992(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19968(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-19984(%rbp), %rcx      # 8-byte Reload
	movq	-19976(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-20192(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-19992(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13920(%rbp), %rax      # 8-byte Reload
	movq	-19648(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -20200(%rbp)     # 8-byte Spill
	movq	-20096(%rbp), %rdx      # 8-byte Reload
	movq	-19984(%rbp), %rcx      # 8-byte Reload
	movq	-19928(%rbp), %r8       # 8-byte Reload
	movq	-20088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-19968(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-19952(%rbp), %rcx      # 8-byte Reload
	movq	-19976(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	-19920(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-19960(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19920(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp217:
	.loc	1 195 0                 # feature_extraction.c:195:0
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -20208(%rbp)     # 8-byte Spill
	movq	-20096(%rbp), %rdx      # 8-byte Reload
	movq	-19952(%rbp), %rcx      # 8-byte Reload
	movq	-19928(%rbp), %r8       # 8-byte Reload
	movq	-20088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20080(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-20144(%rbp), %rcx      # 8-byte Reload
	movq	-19944(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-20184(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-20152(%rbp), %rsi      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-19936(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-20184(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-20120(%rbp), %rdi      # 8-byte Reload
	movq	-20136(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20144(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -20216(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20080(%rbp), %rdi      # 8-byte Reload
	movq	-20072(%rbp), %rsi      # 8-byte Reload
	movq	-20112(%rbp), %rdx      # 8-byte Reload
	movq	-20168(%rbp), %rcx      # 8-byte Reload
	movq	-20160(%rbp), %r8       # 8-byte Reload
	movl	-20124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20096(%rbp), %rdi      # 8-byte Reload
	movq	-19928(%rbp), %rsi      # 8-byte Reload
	movq	-19928(%rbp), %rdx      # 8-byte Reload
	movq	-20096(%rbp), %rcx      # 8-byte Reload
	movq	-20104(%rbp), %r8       # 8-byte Reload
	movq	-19928(%rbp), %r9       # 8-byte Reload
	movq	-20088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19928(%rbp), %rax      # 8-byte Reload
	.loc	1 197 0                 # feature_extraction.c:197:0
.Ltmp218:
	vmovsd	-20208(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -20224(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -20232(%rbp)     # 8-byte Spill
.LBB1_71:                               #   Parent Loop BB1_68 Depth=1
                                        #     Parent Loop BB1_69 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	-20232(%rbp), %xmm0     # 8-byte Reload
	movq	-20224(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str577, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str562, %r9
	movabsq	$3, %r10
	leaq	.L.str579, %r11
	movabsq	$195, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str578, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -20240(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -20248(%rbp)      # 8-byte Spill
	leaq	.L.str576, %rax
	movq	%rax, -20256(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -20264(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -20272(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -20280(%rbp)      # 8-byte Spill
	leaq	.L.str564, %rax
	movq	%rax, -20288(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -20296(%rbp)      # 8-byte Spill
	leaq	.L.str563, %rax
	movq	%rax, -20304(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -20312(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -20320(%rbp)      # 8-byte Spill
	leaq	.L.str566, %rax
	movq	%rax, -20328(%rbp)      # 8-byte Spill
	leaq	.L.str565, %rax
	movq	%rax, -20336(%rbp)      # 8-byte Spill
	leaq	.L.str575, %rax
	movq	%rax, -20344(%rbp)      # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, -20352(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -20360(%rbp)      # 8-byte Spill
	leaq	.L.str570, %rax
	movq	%rax, -20368(%rbp)      # 8-byte Spill
	leaq	.L.str574, %rax
	movq	%rax, -20376(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -20384(%rbp)      # 8-byte Spill
	leaq	.L.str573, %rax
	movq	%rax, -20392(%rbp)      # 8-byte Spill
	leaq	.L.str558, %rax
	movq	%rax, -20400(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -20408(%rbp)      # 8-byte Spill
	leaq	.L.str572, %rax
	movq	%rax, -20416(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -20424(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -20432(%rbp)      # 8-byte Spill
	leaq	.L.str571, %rax
	movq	%rax, -20440(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -20448(%rbp)      # 8-byte Spill
	leaq	.L.str560, %rax
	movq	%rax, -20456(%rbp)      # 8-byte Spill
	leaq	.L.str569, %rax
	movq	%rax, -20464(%rbp)      # 8-byte Spill
	leaq	.L.str554, %rax
	movq	%rax, -20472(%rbp)      # 8-byte Spill
	leaq	.L.str568, %rax
	movq	%rax, -20480(%rbp)      # 8-byte Spill
	leaq	.L.str567, %rax
	movq	%rax, -20488(%rbp)      # 8-byte Spill
	leaq	.L.str541, %rax
	movq	%rax, -20496(%rbp)      # 8-byte Spill
	leaq	.L.str553, %rax
	movq	%rax, -20504(%rbp)      # 8-byte Spill
	leaq	.L.str559, %rax
	movq	%rax, -20512(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -20520(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -20528(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -20536(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -20544(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-20304(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -20552(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20520(%rbp), %rax      # 8-byte Reload
	movq	%r8, -20560(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -20568(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -20576(%rbp)     # 8-byte Spill
	movq	%r13, -20584(%rbp)      # 8-byte Spill
	movq	%r14, -20592(%rbp)      # 8-byte Spill
	movq	%r15, -20600(%rbp)      # 8-byte Spill
	movl	%r12d, -20604(%rbp)     # 4-byte Spill
	movq	%rbx, -20616(%rbp)      # 8-byte Spill
	movq	%r11, -20624(%rbp)      # 8-byte Spill
	movq	%r10, -20632(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20288(%rbp), %r8       # 8-byte Reload
	movq	-20552(%rbp), %r9       # 8-byte Reload
	movq	-20568(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20536(%rbp), %rcx      # 8-byte Reload
	movq	-20312(%rbp), %r8       # 8-byte Reload
	movq	-20552(%rbp), %r9       # 8-byte Reload
	movq	-20504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20240(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20304(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20336(%rbp), %rcx      # 8-byte Reload
	movq	-20520(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20328(%rbp), %r8       # 8-byte Reload
	movq	-20552(%rbp), %r9       # 8-byte Reload
	movq	-20568(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20512(%rbp), %r8       # 8-byte Reload
	movq	-20552(%rbp), %r9       # 8-byte Reload
	movq	-20504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20576(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20336(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20504(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20488(%rbp), %rcx      # 8-byte Reload
	movq	-20320(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-19624(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20496(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20240(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20304(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-20240(%rbp), %rax      # 8-byte Reload
	movq	-19624(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20488(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -20640(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20480(%rbp), %rcx      # 8-byte Reload
	movq	-20448(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20640(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20488(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20432(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-20640(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-20552(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -20648(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20480(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20464(%rbp), %rcx      # 8-byte Reload
	movq	-20424(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20648(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20480(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-20640(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -20656(%rbp)     # 8-byte Spill
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20464(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20368(%rbp), %rcx      # 8-byte Reload
	movq	-20408(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20176(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20472(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20656(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20464(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-20656(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-20176(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20368(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -20664(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20440(%rbp), %rcx      # 8-byte Reload
	movq	-20320(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20216(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20456(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20240(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20304(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-20240(%rbp), %rax      # 8-byte Reload
	movq	-20216(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20440(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -20672(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20416(%rbp), %rcx      # 8-byte Reload
	movq	-20448(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20672(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20440(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20432(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-20672(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-20552(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -20680(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-20416(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20392(%rbp), %rcx      # 8-byte Reload
	movq	-20424(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20680(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20416(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-20672(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -20688(%rbp)     # 8-byte Spill
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20392(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20376(%rbp), %rcx      # 8-byte Reload
	movq	-20408(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20200(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20400(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20688(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20392(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-20688(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-20200(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20376(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -20696(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20344(%rbp), %rcx      # 8-byte Reload
	movq	-20384(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20696(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20376(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20664(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20368(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-20664(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-20696(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20344(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -20704(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20352(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20328(%rbp), %rcx      # 8-byte Reload
	movq	-20360(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20704(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20344(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20576(%rbp), %xmm0     # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20336(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-20576(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-20704(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp219:
	.loc	1 195 0                 # feature_extraction.c:195:0
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20328(%rbp), %rcx      # 8-byte Reload
	movq	-20536(%rbp), %r8       # 8-byte Reload
	movq	-20528(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -20712(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20616(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20288(%rbp), %rcx      # 8-byte Reload
	movq	-20320(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rdx      # 8-byte Reload
	movq	-20536(%rbp), %rcx      # 8-byte Reload
	movq	-20312(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20240(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20304(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-20240(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20288(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -20720(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20616(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20256(%rbp), %rcx      # 8-byte Reload
	movq	-20296(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20280(%rbp), %rsi      # 8-byte Reload
	movq	-20720(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20288(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-20720(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20248(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20256(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -20724(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20616(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20544(%rbp), %rcx      # 8-byte Reload
	movq	-20272(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20248(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20264(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-20724(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20248(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20256(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-20724(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-20584(%rbp), %rdi      # 8-byte Reload
	movq	-20552(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20544(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -20725(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20616(%rbp), %rdi      # 8-byte Reload
	movq	-20592(%rbp), %rsi      # 8-byte Reload
	movq	-20568(%rbp), %rdx      # 8-byte Reload
	movq	-20600(%rbp), %rcx      # 8-byte Reload
	movq	-20560(%rbp), %r8       # 8-byte Reload
	movl	-20604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20632(%rbp), %rdi      # 8-byte Reload
	movq	-20536(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20624(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20560(%rbp), %rdi      # 8-byte Reload
	movq	-20536(%rbp), %rsi      # 8-byte Reload
	movq	-20536(%rbp), %rdx      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20568(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-20725(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-20552(%rbp), %rdi      # 8-byte Reload
	movq	-20552(%rbp), %rsi      # 8-byte Reload
	movq	-20552(%rbp), %rcx      # 8-byte Reload
	movq	-20544(%rbp), %r8       # 8-byte Reload
	movq	-20536(%rbp), %r9       # 8-byte Reload
	movq	-20528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-20725(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-20720(%rbp), %rcx      # 8-byte Reload
	.loc	1 197 0                 # feature_extraction.c:197:0
.Ltmp220:
	vmovsd	-20712(%rbp), %xmm0     # 8-byte Reload
.Ltmp221:
	.loc	1 195 0                 # feature_extraction.c:195:0
	movq	%rcx, -20224(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -20232(%rbp)     # 8-byte Spill
	jne	.LBB1_72
	jmp	.LBB1_71
.LBB1_72:                               # %._crit_edge36
                                        #   in Loop: Header=BB1_69 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str547, %r8
	leaq	.L.str8, %rdx
	movabsq	$195, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str579, %r9
	leaq	.L.str581, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str566, %r15
	leaq	.L.str549, %r12
	movabsq	$197, %r13
	movq	%rax, -20736(%rbp)      # 8-byte Spill
	leaq	.L.str580, %rax
	movq	%rax, -20744(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 197 0                 # feature_extraction.c:197:0
.Ltmp222:
	subq	$16, %rsp
	movq	%rdi, -20752(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -20760(%rbp)      # 8-byte Spill
	movq	%rdx, -20768(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-20744(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -20776(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -20784(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -20792(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -20796(%rbp)      # 4-byte Spill
	movq	%r11, -20808(%rbp)      # 8-byte Spill
	movq	%r14, -20816(%rbp)      # 8-byte Spill
	movq	%r12, -20824(%rbp)      # 8-byte Spill
	movq	%r15, -20832(%rbp)      # 8-byte Spill
	movq	%r10, -20840(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20808(%rbp), %rdi      # 8-byte Reload
	movq	-20816(%rbp), %rsi      # 8-byte Reload
	movq	-19920(%rbp), %rdx      # 8-byte Reload
	movq	-20736(%rbp), %rcx      # 8-byte Reload
	movq	-20824(%rbp), %r8       # 8-byte Reload
	movq	-20776(%rbp), %r9       # 8-byte Reload
	movq	-20768(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-20736(%rbp), %rdi      # 8-byte Reload
	movq	-20816(%rbp), %rsi      # 8-byte Reload
	vmovsd	-20712(%rbp), %xmm0     # 8-byte Reload
	movq	-20736(%rbp), %rdx      # 8-byte Reload
	movq	-20832(%rbp), %rcx      # 8-byte Reload
	movq	-20776(%rbp), %r8       # 8-byte Reload
	movq	-20768(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-19920(%rbp), %rax      # 8-byte Reload
	vmovsd	-20712(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp223:
	.loc	1 195 0                 # feature_extraction.c:195:0
	subq	$16, %rsp
	movq	-20752(%rbp), %rdi      # 8-byte Reload
	movq	-20760(%rbp), %rsi      # 8-byte Reload
	movq	-20792(%rbp), %rdx      # 8-byte Reload
	movq	-20840(%rbp), %rcx      # 8-byte Reload
	movq	-20808(%rbp), %r8       # 8-byte Reload
	movl	-20796(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20736(%rbp), %rdi      # 8-byte Reload
	movq	-20776(%rbp), %rsi      # 8-byte Reload
	movq	-20776(%rbp), %rdx      # 8-byte Reload
	movq	-20736(%rbp), %rcx      # 8-byte Reload
	movq	-20784(%rbp), %r8       # 8-byte Reload
	movq	-20776(%rbp), %r9       # 8-byte Reload
	movq	-20768(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp224:
.LBB1_73:                               #   in Loop: Header=BB1_69 Depth=2
	movabsq	$1, %rax
	leaq	.L.str586, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str544, %r8
	movabsq	$3, %r9
	leaq	.L.str537, %r10
	movabsq	$192, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str547, %r14
	leaq	.L.str587, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -20848(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -20856(%rbp)      # 8-byte Spill
	leaq	.L.str585, %rax
	movq	%rax, -20864(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -20872(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -20880(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -20888(%rbp)      # 8-byte Spill
	leaq	.L.str546, %rax
	movq	%rax, -20896(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -20904(%rbp)      # 8-byte Spill
	leaq	.L.str545, %rax
	movq	%rax, -20912(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -20920(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -20928(%rbp)      # 8-byte Spill
	leaq	.L.str583, %rax
	movq	%rax, -20936(%rbp)      # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, -20944(%rbp)      # 8-byte Spill
	movabsq	$202, %rax
	movq	%rax, -20952(%rbp)      # 8-byte Spill
	leaq	.L.str584, %rax
	movq	%rax, -20960(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -20968(%rbp)      # 8-byte Spill
	leaq	.L.str582, %rax
	movq	%rax, -20976(%rbp)      # 8-byte Spill
	leaq	.L.str532, %rax
	movq	%rax, -20984(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -20992(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 202 0                 # feature_extraction.c:202:0
	subq	$16, %rsp
	movq	%rax, -21000(%rbp)      # 8-byte Spill
	movq	-20952(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -21008(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -21016(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -21024(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-20976(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -21032(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-21000(%rbp), %rax      # 8-byte Reload
	movq	%r8, -21040(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -21048(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -21056(%rbp)      # 8-byte Spill
	movq	%r15, -21064(%rbp)      # 8-byte Spill
	movl	%r12d, -21068(%rbp)     # 4-byte Spill
	movq	%r13, -21080(%rbp)      # 8-byte Spill
	movq	%rbx, -21088(%rbp)      # 8-byte Spill
	movq	%r11, -21096(%rbp)      # 8-byte Spill
	movq	%r10, -21104(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	-19920(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20944(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19920(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-21080(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -21112(%rbp)     # 8-byte Spill
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-20976(%rbp), %rcx      # 8-byte Reload
	movq	-21024(%rbp), %r8       # 8-byte Reload
	movq	-21016(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20952(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-20936(%rbp), %rcx      # 8-byte Reload
	movq	-20992(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-21008(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-19320(%rbp), %xmm0     # 8-byte Reload
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-20984(%rbp), %rcx      # 8-byte Reload
	movq	-21024(%rbp), %r8       # 8-byte Reload
	movq	-21016(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-21112(%rbp), %xmm0     # 8-byte Reload
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-20976(%rbp), %rcx      # 8-byte Reload
	movq	-21024(%rbp), %r8       # 8-byte Reload
	movq	-21016(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-21112(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-19320(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-21080(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-20936(%rbp), %rcx      # 8-byte Reload
	movq	-21024(%rbp), %r8       # 8-byte Reload
	movq	-21016(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -21120(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-20952(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-20960(%rbp), %rcx      # 8-byte Reload
	movq	-20968(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21008(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	-19920(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20944(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	vmovsd	-21120(%rbp), %xmm0     # 8-byte Reload
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-20936(%rbp), %rcx      # 8-byte Reload
	movq	-21024(%rbp), %r8       # 8-byte Reload
	movq	-21016(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-19920(%rbp), %rax      # 8-byte Reload
	vmovsd	-21120(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp225:
	.loc	1 192 0                 # feature_extraction.c:192:0
	subq	$16, %rsp
	movq	-21096(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-20896(%rbp), %rcx      # 8-byte Reload
	movq	-20928(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21008(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rdx      # 8-byte Reload
	movq	-21024(%rbp), %rcx      # 8-byte Reload
	movq	-20920(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20912(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19648(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-21080(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20896(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -21128(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21096(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-20864(%rbp), %rcx      # 8-byte Reload
	movq	-20904(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20888(%rbp), %rsi      # 8-byte Reload
	movq	-21128(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20896(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-21128(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-21080(%rbp), %rdi      # 8-byte Reload
	movq	-20856(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20864(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -21132(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21096(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-21032(%rbp), %rcx      # 8-byte Reload
	movq	-20880(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21008(%rbp), %rdi      # 8-byte Reload
	movq	-20856(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20872(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-21132(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20856(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-20864(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-21132(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-21080(%rbp), %rdi      # 8-byte Reload
	movq	-20848(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-21032(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -21133(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21096(%rbp), %rdi      # 8-byte Reload
	movq	-21088(%rbp), %rsi      # 8-byte Reload
	movq	-21056(%rbp), %rdx      # 8-byte Reload
	movq	-21064(%rbp), %rcx      # 8-byte Reload
	movq	-21008(%rbp), %r8       # 8-byte Reload
	movl	-21068(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21048(%rbp), %rdi      # 8-byte Reload
	movq	-21024(%rbp), %rsi      # 8-byte Reload
	movq	-21024(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-21104(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21008(%rbp), %rdi      # 8-byte Reload
	movq	-21024(%rbp), %rsi      # 8-byte Reload
	movq	-21024(%rbp), %rdx      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-21040(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21133(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-20848(%rbp), %rdi      # 8-byte Reload
	movq	-20848(%rbp), %rsi      # 8-byte Reload
	movq	-20848(%rbp), %rcx      # 8-byte Reload
	movq	-21032(%rbp), %r8       # 8-byte Reload
	movq	-21024(%rbp), %r9       # 8-byte Reload
	movq	-21016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21133(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-21128(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -19640(%rbp)      # 8-byte Spill
	jne	.LBB1_74
	jmp	.LBB1_69
.Ltmp226:
.LBB1_74:                               # %._crit_edge40
                                        #   in Loop: Header=BB1_68 Depth=1
	movabsq	$1, %rax
	leaq	.L.str589, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str534, %r8
	movabsq	$3, %r9
	leaq	.L.str591, %r10
	movabsq	$189, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str537, %r14
	leaq	.L.str590, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -21144(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -21152(%rbp)      # 8-byte Spill
	leaq	.L.str588, %rax
	movq	%rax, -21160(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -21168(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -21176(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -21184(%rbp)      # 8-byte Spill
	leaq	.L.str536, %rax
	movq	%rax, -21192(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -21200(%rbp)      # 8-byte Spill
	leaq	.L.str535, %rax
	movq	%rax, -21208(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -21216(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 189 0                 # feature_extraction.c:189:0
	subq	$16, %rsp
	movq	%rdi, -21224(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -21232(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -21240(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -21248(%rbp)      # 8-byte Spill
	movq	-21192(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -21256(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-21248(%rbp), %rax      # 8-byte Reload
	movq	%r8, -21264(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -21272(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -21280(%rbp)      # 8-byte Spill
	movq	%r15, -21288(%rbp)      # 8-byte Spill
	movl	%r12d, -21292(%rbp)     # 4-byte Spill
	movq	%r13, -21304(%rbp)      # 8-byte Spill
	movq	%rbx, -21312(%rbp)      # 8-byte Spill
	movq	%r11, -21320(%rbp)      # 8-byte Spill
	movq	%r10, -21328(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21224(%rbp), %rdi      # 8-byte Reload
	movq	-21184(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rdx      # 8-byte Reload
	movq	-21240(%rbp), %rcx      # 8-byte Reload
	movq	-21216(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21144(%rbp), %rdi      # 8-byte Reload
	movq	-21184(%rbp), %rsi      # 8-byte Reload
	movq	-19336(%rbp), %rdx      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21208(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19336(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-21304(%rbp), %rdi      # 8-byte Reload
	movq	-21184(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21192(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -21336(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21320(%rbp), %rdi      # 8-byte Reload
	movq	-21312(%rbp), %rsi      # 8-byte Reload
	movq	-21280(%rbp), %rdx      # 8-byte Reload
	movq	-21160(%rbp), %rcx      # 8-byte Reload
	movq	-21200(%rbp), %r8       # 8-byte Reload
	movl	-21292(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21144(%rbp), %rdi      # 8-byte Reload
	movq	-21184(%rbp), %rsi      # 8-byte Reload
	movq	-21336(%rbp), %rdx      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21192(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-21336(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-21304(%rbp), %rdi      # 8-byte Reload
	movq	-21152(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21160(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -21340(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21320(%rbp), %rdi      # 8-byte Reload
	movq	-21312(%rbp), %rsi      # 8-byte Reload
	movq	-21280(%rbp), %rdx      # 8-byte Reload
	movq	-21256(%rbp), %rcx      # 8-byte Reload
	movq	-21176(%rbp), %r8       # 8-byte Reload
	movl	-21292(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21224(%rbp), %rdi      # 8-byte Reload
	movq	-21152(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21168(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-21340(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-21144(%rbp), %rdi      # 8-byte Reload
	movq	-21152(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21160(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-21340(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-21304(%rbp), %rdi      # 8-byte Reload
	movq	-21144(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21256(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -21341(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21320(%rbp), %rdi      # 8-byte Reload
	movq	-21312(%rbp), %rsi      # 8-byte Reload
	movq	-21280(%rbp), %rdx      # 8-byte Reload
	movq	-21288(%rbp), %rcx      # 8-byte Reload
	movq	-21224(%rbp), %r8       # 8-byte Reload
	movl	-21292(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21272(%rbp), %rdi      # 8-byte Reload
	movq	-21240(%rbp), %rsi      # 8-byte Reload
	movq	-21240(%rbp), %rdx      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21328(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21224(%rbp), %rdi      # 8-byte Reload
	movq	-21240(%rbp), %rsi      # 8-byte Reload
	movq	-21240(%rbp), %rdx      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21264(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21341(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21144(%rbp), %rdi      # 8-byte Reload
	movq	-21144(%rbp), %rsi      # 8-byte Reload
	movq	-21144(%rbp), %rcx      # 8-byte Reload
	movq	-21256(%rbp), %r8       # 8-byte Reload
	movq	-21240(%rbp), %r9       # 8-byte Reload
	movq	-21232(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21341(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-21336(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -19328(%rbp)      # 8-byte Spill
	jne	.LBB1_76
	jmp	.LBB1_68
.Ltmp227:
.LBB1_75:                               # %._crit_edge42.thread
	movq	-16096(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str595, %r8
	leaq	.L.str8, %rsi
	movabsq	$207, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str452, %r10
	leaq	.L.str594, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str593, %r13
	.loc	1 206 0                 # feature_extraction.c:206:0
	subq	$16, %rsp
	movq	%rax, -21352(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -21360(%rbp)      # 8-byte Spill
	movl	$.L.str452, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21368(%rbp)      # 8-byte Spill
	movl	$.L.str592, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21376(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -21384(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -21392(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -21400(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-21384(%rbp), %rax      # 8-byte Reload
	movl	%esi, -21404(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-21368(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -21416(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-21376(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -21424(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-21392(%rbp), %rax      # 8-byte Reload
	movq	%r8, -21432(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-21404(%rbp), %eax      # 4-byte Reload
	movq	%r9, -21440(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -21448(%rbp)      # 8-byte Spill
	movl	%r14d, -21452(%rbp)     # 4-byte Spill
	movq	%r15, -21464(%rbp)      # 8-byte Spill
	movq	%rbx, -21472(%rbp)      # 8-byte Spill
	movq	%r12, -21480(%rbp)      # 8-byte Spill
	movq	%r11, -21488(%rbp)      # 8-byte Spill
	movq	%r10, -21496(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str398, (%rcx)
	movl	$.L.str525, %eax
	movl	%eax, %r8d
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %esi
	movq	%rsi, -21504(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -21512(%rbp)      # 8-byte Spill
	movq	-21504(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -21520(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str524, (%rcx)
	movl	$.L.str550, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movq	-21520(%rbp), %rsi      # 8-byte Reload
	movq	-21512(%rbp), %rdx      # 8-byte Reload
	movq	-21504(%rbp), %rcx      # 8-byte Reload
	movq	-21504(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str449, (%rcx)
	movl	$.L.str450, %eax
	movl	%eax, %r8d
	movq	-21504(%rbp), %rdi      # 8-byte Reload
	movq	-21520(%rbp), %rsi      # 8-byte Reload
	movq	-21512(%rbp), %rdx      # 8-byte Reload
	movq	-21504(%rbp), %rcx      # 8-byte Reload
	movq	-21504(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str449, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	-21520(%rbp), %rsi      # 8-byte Reload
	movq	-21352(%rbp), %rdx      # 8-byte Reload
	movq	-21504(%rbp), %rcx      # 8-byte Reload
	movq	-21376(%rbp), %r8       # 8-byte Reload
	movq	-21512(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str593, %eax
	movl	%eax, %ecx
	movl	$206, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-21384(%rbp), %rsi      # 8-byte Reload
	movq	-21368(%rbp), %rdx      # 8-byte Reload
	movl	-21404(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str387, %eax
	movl	%eax, %r8d
	movq	-21504(%rbp), %rdi      # 8-byte Reload
	movq	-21520(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-21504(%rbp), %rcx      # 8-byte Reload
	movq	-21512(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13680(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-21464(%rbp), %rdi      # 8-byte Reload
	movq	-21480(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -21528(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-21528(%rbp), %rdx      # 8-byte Reload
	movq	-21424(%rbp), %rcx      # 8-byte Reload
	movq	-21448(%rbp), %r8       # 8-byte Reload
	movq	-21416(%rbp), %r9       # 8-byte Reload
	movq	-21360(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp228:
	#DEBUG_VALUE: process_data:time_corr_coeff <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 207 0                 # feature_extraction.c:207:0
	subq	$16, %rsp
	movq	-21400(%rbp), %rdi      # 8-byte Reload
	movq	-21440(%rbp), %rsi      # 8-byte Reload
	movq	-21496(%rbp), %rdx      # 8-byte Reload
	movq	-21488(%rbp), %rcx      # 8-byte Reload
	movq	-21472(%rbp), %r8       # 8-byte Reload
	movl	-21452(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21424(%rbp), %rdi      # 8-byte Reload
	movq	-21416(%rbp), %rsi      # 8-byte Reload
	movq	-21416(%rbp), %rdx      # 8-byte Reload
	movq	-21424(%rbp), %rcx      # 8-byte Reload
	movq	-21432(%rbp), %r8       # 8-byte Reload
	movq	-21416(%rbp), %r9       # 8-byte Reload
	movq	-21360(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-21528(%rbp), %rcx      # 8-byte Reload
	movq	-21352(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -21536(%rbp)      # 8-byte Spill
	movq	%rdx, -21544(%rbp)      # 8-byte Spill
	jmp	.LBB1_77
.Ltmp229:
.LBB1_76:                               # %._crit_edge42
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str597, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str600, %r8
	movabsq	$3, %r9
	leaq	.L.str599, %r10
	movabsq	$207, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str591, %r14
	leaq	.L.str598, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -21552(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -21560(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -21568(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -21576(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -21584(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -21592(%rbp)      # 8-byte Spill
	leaq	.L.str596, %rax
	.loc	1 206 0                 # feature_extraction.c:206:0
	subq	$16, %rsp
	movq	%rax, -21600(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -21608(%rbp)      # 8-byte Spill
	movl	$.L.str591, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21616(%rbp)      # 8-byte Spill
	movl	$.L.str596, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21624(%rbp)      # 8-byte Spill
	movl	$206, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21632(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -21640(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -21648(%rbp)      # 8-byte Spill
	movq	-21632(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -21656(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-21648(%rbp), %rax      # 8-byte Reload
	movl	%esi, -21660(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-21616(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -21672(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-21624(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -21680(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-21640(%rbp), %rax      # 8-byte Reload
	movq	%r8, -21688(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-21660(%rbp), %eax      # 4-byte Reload
	movq	%r9, -21696(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -21704(%rbp)      # 8-byte Spill
	movq	%r14, -21712(%rbp)      # 8-byte Spill
	movq	%r15, -21720(%rbp)      # 8-byte Spill
	movl	%r12d, -21724(%rbp)     # 4-byte Spill
	movq	%rbx, -21736(%rbp)      # 8-byte Spill
	movq	%r11, -21744(%rbp)      # 8-byte Spill
	movq	%r10, -21752(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str387, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13680(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-21704(%rbp), %rdi      # 8-byte Reload
	movq	-21592(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -21760(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-21760(%rbp), %rdx      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21600(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:time_corr_coeff <- undef
.Ltmp230:
	#DEBUG_VALUE: channel <- 0
	.loc	1 207 0                 # feature_extraction.c:207:0
	subq	$16, %rsp
	movq	-21744(%rbp), %rdi      # 8-byte Reload
	movq	-21736(%rbp), %rsi      # 8-byte Reload
	movq	-21712(%rbp), %rdx      # 8-byte Reload
	movq	-21672(%rbp), %rcx      # 8-byte Reload
	movq	-21584(%rbp), %r8       # 8-byte Reload
	movl	-21724(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21656(%rbp), %rdi      # 8-byte Reload
	movq	-21560(%rbp), %rsi      # 8-byte Reload
	movq	-21552(%rbp), %rdx      # 8-byte Reload
	movq	-21552(%rbp), %rcx      # 8-byte Reload
	movq	-21576(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21680(%rbp), %rdi      # 8-byte Reload
	movq	-21560(%rbp), %rsi      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21568(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21704(%rbp), %rdi      # 8-byte Reload
	movq	-21680(%rbp), %rsi      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21672(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -21761(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21744(%rbp), %rdi      # 8-byte Reload
	movq	-21736(%rbp), %rsi      # 8-byte Reload
	movq	-21712(%rbp), %rdx      # 8-byte Reload
	movq	-21720(%rbp), %rcx      # 8-byte Reload
	movq	-21656(%rbp), %r8       # 8-byte Reload
	movl	-21724(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21696(%rbp), %rdi      # 8-byte Reload
	movq	-21552(%rbp), %rsi      # 8-byte Reload
	movq	-21552(%rbp), %rdx      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21752(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21656(%rbp), %rdi      # 8-byte Reload
	movq	-21552(%rbp), %rsi      # 8-byte Reload
	movq	-21552(%rbp), %rdx      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21688(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21761(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-21680(%rbp), %rdi      # 8-byte Reload
	movq	-21680(%rbp), %rsi      # 8-byte Reload
	movq	-21680(%rbp), %rcx      # 8-byte Reload
	movq	-21672(%rbp), %r8       # 8-byte Reload
	movq	-21552(%rbp), %r9       # 8-byte Reload
	movq	-21608(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-21761(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-21552(%rbp), %rcx      # 8-byte Reload
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -21776(%rbp)      # 8-byte Spill
	movq	%rdx, -21784(%rbp)      # 8-byte Spill
	jne	.LBB1_78
	jmp	.LBB1_82
.Ltmp231:
.LBB1_77:                               # %.preheader27
	movq	-21544(%rbp), %rax      # 8-byte Reload
	movq	-21536(%rbp), %rcx      # 8-byte Reload
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	leaq	.L.str603, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str600, %r10
	movabsq	$3, %r11
	leaq	.L.str23, %rbx
	movabsq	$211, %r14
	leaq	.L.str50, %r15
	leaq	.L.str595, %r12
	leaq	.L.str604, %r13
	movq	%rsi, -21792(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -21800(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -21808(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -21816(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -21824(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -21832(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -21840(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -21848(%rbp)      # 8-byte Spill
	leaq	.L.str602, %rax
	movq	%rax, -21856(%rbp)      # 8-byte Spill
	leaq	.L.str452, %rax
	movq	%rax, -21864(%rbp)      # 8-byte Spill
	leaq	.L.str592, %rax
	movq	%rax, -21872(%rbp)      # 8-byte Spill
	leaq	.L.str550, %rax
	movq	%rax, -21880(%rbp)      # 8-byte Spill
	leaq	.L.str599, %rax
	movq	%rax, -21888(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -21896(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -21904(%rbp)      # 8-byte Spill
	leaq	.L.str601, %rax
	movq	%rax, -21912(%rbp)      # 8-byte Spill
	leaq	.L.str593, %rax
	movq	%rax, -21920(%rbp)      # 8-byte Spill
	leaq	.L.str596, %rax
	.loc	1 211 0                 # feature_extraction.c:211:0
.Ltmp232:
	subq	$16, %rsp
	movq	%rax, -21928(%rbp)      # 8-byte Spill
	movq	-21896(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -21936(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -21940(%rbp)      # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, -21952(%rbp)      # 8-byte Spill
	movq	%r12, %rdx
	movq	-21912(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -21960(%rbp)      # 8-byte Spill
.Ltmp233:
	#DEBUG_VALUE: process_data:time_corr_coeff <- [RBP+-21960]
	#DEBUG_VALUE: process_data:time_corr_coeff <- [RBP+-21960]
	movq	%rax, %rcx
	movq	-21904(%rbp), %rax      # 8-byte Reload
	movq	%r8, -21968(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-21940(%rbp), %eax      # 4-byte Reload
	movq	%r9, -21976(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -21984(%rbp)      # 8-byte Spill
	movq	%r15, -21992(%rbp)      # 8-byte Spill
	movq	%r12, -22000(%rbp)      # 8-byte Spill
	movq	%r13, -22008(%rbp)      # 8-byte Spill
	movq	%rbx, -22016(%rbp)      # 8-byte Spill
	movq	%r11, -22024(%rbp)      # 8-byte Spill
	movq	%r10, -22032(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21976(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21928(%rbp), %r8       # 8-byte Reload
	movq	-21792(%rbp), %r9       # 8-byte Reload
	movq	-21888(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21792(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21920(%rbp), %r8       # 8-byte Reload
	movq	-21792(%rbp), %r9       # 8-byte Reload
	movq	-21864(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21808(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21960(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21912(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21864(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21896(%rbp), %rdi      # 8-byte Reload
	movq	-21992(%rbp), %rsi      # 8-byte Reload
	movq	-22000(%rbp), %rdx      # 8-byte Reload
	movq	-21856(%rbp), %rcx      # 8-byte Reload
	movq	-21904(%rbp), %r8       # 8-byte Reload
	movl	-21940(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21976(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21880(%rbp), %r8       # 8-byte Reload
	movq	-21792(%rbp), %r9       # 8-byte Reload
	movq	-21888(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21792(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21872(%rbp), %r8       # 8-byte Reload
	movq	-21792(%rbp), %r9       # 8-byte Reload
	movq	-21864(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21808(%rbp), %rdi      # 8-byte Reload
	movq	-21848(%rbp), %rsi      # 8-byte Reload
	movq	-21800(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21856(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21864(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21984(%rbp), %rdi      # 8-byte Reload
	movq	-21992(%rbp), %rsi      # 8-byte Reload
	movq	-22000(%rbp), %rdx      # 8-byte Reload
	movq	-21936(%rbp), %rcx      # 8-byte Reload
	movq	-21840(%rbp), %r8       # 8-byte Reload
	movl	-21940(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21976(%rbp), %rdi      # 8-byte Reload
	movq	-21816(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21952(%rbp), %rcx      # 8-byte Reload
	movq	-21832(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-21792(%rbp), %rdi      # 8-byte Reload
	movq	-21816(%rbp), %rsi      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21824(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-21808(%rbp), %rdi      # 8-byte Reload
	movq	-21792(%rbp), %rsi      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21936(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -22033(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21984(%rbp), %rdi      # 8-byte Reload
	movq	-21992(%rbp), %rsi      # 8-byte Reload
	movq	-22000(%rbp), %rdx      # 8-byte Reload
	movq	-22008(%rbp), %rcx      # 8-byte Reload
	movq	-21976(%rbp), %r8       # 8-byte Reload
	movl	-21940(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22024(%rbp), %rdi      # 8-byte Reload
	movq	-21952(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-22016(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-21976(%rbp), %rdi      # 8-byte Reload
	movq	-21952(%rbp), %rsi      # 8-byte Reload
	movq	-21952(%rbp), %rdx      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-22032(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-22033(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-21792(%rbp), %rdi      # 8-byte Reload
	movq	-21792(%rbp), %rsi      # 8-byte Reload
	movq	-21792(%rbp), %rcx      # 8-byte Reload
	movq	-21936(%rbp), %r8       # 8-byte Reload
	movq	-21952(%rbp), %r9       # 8-byte Reload
	movq	-21968(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-22033(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-21952(%rbp), %rcx      # 8-byte Reload
	movq	-21800(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -22048(%rbp)      # 8-byte Spill
	movq	%rdx, -21784(%rbp)      # 8-byte Spill
	jne	.LBB1_79
	jmp	.LBB1_82
.Ltmp234:
.LBB1_78:                               # %.lr.ph32
                                        # =>This Inner Loop Header: Depth=1
	movq	-21776(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str617, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str599, %r9
	movabsq	$3, %r10
	leaq	.L.str595, %r11
	movabsq	$207, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str618, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -22056(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -22064(%rbp)      # 8-byte Spill
	leaq	.L.str616, %rax
	movq	%rax, -22072(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -22080(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -22088(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -22096(%rbp)      # 8-byte Spill
	leaq	.L.str606, %rax
	movq	%rax, -22104(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -22112(%rbp)      # 8-byte Spill
	leaq	.L.str605, %rax
	movq	%rax, -22120(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -22128(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -22136(%rbp)      # 8-byte Spill
	leaq	.L.str613, %rax
	movq	%rax, -22144(%rbp)      # 8-byte Spill
	leaq	.L.str614, %rax
	movq	%rax, -22152(%rbp)      # 8-byte Spill
	movabsq	$209, %rax
	movq	%rax, -22160(%rbp)      # 8-byte Spill
	leaq	.L.str615, %rax
	movq	%rax, -22168(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -22176(%rbp)      # 8-byte Spill
	leaq	.L.str596, %rax
	movq	%rax, -22184(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -22192(%rbp)      # 8-byte Spill
	leaq	.L.str612, %rax
	movq	%rax, -22200(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -22208(%rbp)      # 8-byte Spill
	leaq	.L.str550, %rax
	movq	%rax, -22216(%rbp)      # 8-byte Spill
	leaq	.L.str611, %rax
	movq	%rax, -22224(%rbp)      # 8-byte Spill
	leaq	.L.str610, %rax
	movq	%rax, -22232(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -22240(%rbp)      # 8-byte Spill
	leaq	.L.str608, %rax
	movq	%rax, -22248(%rbp)      # 8-byte Spill
	leaq	.L.str609, %rax
	movq	%rax, -22256(%rbp)      # 8-byte Spill
	leaq	.L.str607, %rax
	movq	%rax, -22264(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -22272(%rbp)      # 8-byte Spill
	leaq	.L.str591, %rax
	movq	%rax, -22280(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -22288(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 209 0                 # feature_extraction.c:209:0
.Ltmp235:
	subq	$16, %rsp
	movq	%rax, -22296(%rbp)      # 8-byte Spill
	movq	-22288(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -22304(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -22312(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -22320(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-22120(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -22328(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22296(%rbp), %rax      # 8-byte Reload
	movq	%r8, -22336(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -22344(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -22352(%rbp)      # 8-byte Spill
	movq	%r15, -22360(%rbp)      # 8-byte Spill
	movl	%r12d, -22364(%rbp)     # 4-byte Spill
	movq	%r13, -22376(%rbp)      # 8-byte Spill
	movq	%rbx, -22384(%rbp)      # 8-byte Spill
	movq	%r11, -22392(%rbp)      # 8-byte Spill
	movq	%r10, -22400(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22312(%rbp), %rdx      # 8-byte Reload
	movq	-22312(%rbp), %rcx      # 8-byte Reload
	movq	-22128(%rbp), %r8       # 8-byte Reload
	movq	-22328(%rbp), %r9       # 8-byte Reload
	movq	-22280(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22312(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22104(%rbp), %r8       # 8-byte Reload
	movq	-22328(%rbp), %r9       # 8-byte Reload
	movq	-22344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22056(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22120(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22264(%rbp), %rcx      # 8-byte Reload
	movq	-22112(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22056(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22120(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22056(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22264(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -22404(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22248(%rbp), %rcx      # 8-byte Reload
	movq	-22272(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22080(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22404(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22264(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22404(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22248(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -22408(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22256(%rbp), %rcx      # 8-byte Reload
	movq	-22112(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22056(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22120(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22056(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22256(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -22412(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22232(%rbp), %rcx      # 8-byte Reload
	movq	-22136(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-22412(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22256(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22408(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22248(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22408(%rbp), %r12d     # 4-byte Reload
	movl	-22412(%rbp), %esi      # 4-byte Reload
	addl	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22232(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -22416(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22224(%rbp), %rcx      # 8-byte Reload
	movq	-22240(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-22416(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22232(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22416(%rbp), %r12d     # 4-byte Reload
	movslq	%r12d, %rax
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22224(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -22424(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22200(%rbp), %rcx      # 8-byte Reload
	movq	-22192(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22424(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22224(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22216(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-22424(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-19120(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-22328(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -22432(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22200(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22144(%rbp), %rcx      # 8-byte Reload
	movq	-22208(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22432(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22200(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19120(%rbp), %rax      # 8-byte Reload
	movq	-22424(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -22440(%rbp)     # 8-byte Spill
	movq	-22328(%rbp), %rdx      # 8-byte Reload
	movq	-22144(%rbp), %rcx      # 8-byte Reload
	movq	-22312(%rbp), %r8       # 8-byte Reload
	movq	-22304(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22152(%rbp), %rcx      # 8-byte Reload
	movq	-22192(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22056(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22120(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-21760(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22184(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-22056(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-21760(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-22328(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -22448(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22152(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22160(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22168(%rbp), %rcx      # 8-byte Reload
	movq	-22176(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22448(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22152(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	vmovsd	-22440(%rbp), %xmm0     # 8-byte Reload
	movq	-22328(%rbp), %rdx      # 8-byte Reload
	movq	-22144(%rbp), %rcx      # 8-byte Reload
	movq	-22312(%rbp), %r8       # 8-byte Reload
	movq	-22304(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-21760(%rbp), %rax      # 8-byte Reload
	movq	-22056(%rbp), %rcx      # 8-byte Reload
	vmovsd	-22440(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp236:
	.loc	1 207 0                 # feature_extraction.c:207:0
	subq	$16, %rsp
	movq	-22384(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22104(%rbp), %rcx      # 8-byte Reload
	movq	-22136(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rdx      # 8-byte Reload
	movq	-22312(%rbp), %rcx      # 8-byte Reload
	movq	-22128(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22056(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22120(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22056(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22104(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -22456(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22384(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22072(%rbp), %rcx      # 8-byte Reload
	movq	-22112(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22096(%rbp), %rsi      # 8-byte Reload
	movq	-22456(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22104(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22456(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22072(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -22460(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22384(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22320(%rbp), %rcx      # 8-byte Reload
	movq	-22088(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22080(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22460(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22064(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22072(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22460(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-22376(%rbp), %rdi      # 8-byte Reload
	movq	-22328(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22320(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -22461(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22384(%rbp), %rdi      # 8-byte Reload
	movq	-22352(%rbp), %rsi      # 8-byte Reload
	movq	-22344(%rbp), %rdx      # 8-byte Reload
	movq	-22360(%rbp), %rcx      # 8-byte Reload
	movq	-22336(%rbp), %r8       # 8-byte Reload
	movl	-22364(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22400(%rbp), %rdi      # 8-byte Reload
	movq	-22312(%rbp), %rsi      # 8-byte Reload
	movq	-22312(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22392(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22336(%rbp), %rdi      # 8-byte Reload
	movq	-22312(%rbp), %rsi      # 8-byte Reload
	movq	-22312(%rbp), %rdx      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22344(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-22461(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-22328(%rbp), %rdi      # 8-byte Reload
	movq	-22328(%rbp), %rsi      # 8-byte Reload
	movq	-22328(%rbp), %rcx      # 8-byte Reload
	movq	-22320(%rbp), %r8       # 8-byte Reload
	movq	-22312(%rbp), %r9       # 8-byte Reload
	movq	-22304(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-22461(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-21760(%rbp), %rcx      # 8-byte Reload
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	-22456(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, -21536(%rbp)      # 8-byte Spill
	movq	%rdx, -21544(%rbp)      # 8-byte Spill
	movq	%rsi, -21776(%rbp)      # 8-byte Spill
	jne	.LBB1_77
	jmp	.LBB1_78
.Ltmp237:
.LBB1_79:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_80 Depth 2
	movq	-22048(%rbp), %rax      # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str626, %r8
	leaq	.L.str8, %rsi
	movabsq	$213, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str23, %r10
	leaq	.L.str27, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str625, %r13
	movq	%rax, -22472(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -22480(%rbp)      # 8-byte Spill
	leaq	.L.str624, %rax
	movq	%rax, -22488(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -22496(%rbp)      # 8-byte Spill
	leaq	.L.str623, %rax
	movq	%rax, -22504(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -22512(%rbp)      # 8-byte Spill
	movabsq	$215, %rax
	movq	%rax, -22520(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -22528(%rbp)      # 8-byte Spill
	leaq	.L.str619, %rax
	movq	%rax, -22536(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -22544(%rbp)      # 8-byte Spill
	leaq	.L.str622, %rax
	movq	%rax, -22552(%rbp)      # 8-byte Spill
	leaq	.L.str621, %rax
	movq	%rax, -22560(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -22568(%rbp)      # 8-byte Spill
	leaq	.L.str601, %rax
	movq	%rax, -22576(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -22584(%rbp)      # 8-byte Spill
	leaq	.L.str19, %rax
	movq	%rax, -22592(%rbp)      # 8-byte Spill
	leaq	.L.str620, %rax
	movq	%rax, -22600(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -22608(%rbp)      # 8-byte Spill
	leaq	.L.str595, %rax
	movq	%rax, -22616(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -22624(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 215 0                 # feature_extraction.c:215:0
.Ltmp238:
	subq	$16, %rsp
	movq	%rax, -22632(%rbp)      # 8-byte Spill
	movq	-22624(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -22640(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -22648(%rbp)      # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -22656(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-22536(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -22664(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22632(%rbp), %rax      # 8-byte Reload
	movq	%r8, -22672(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -22680(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -22684(%rbp)     # 4-byte Spill
	movq	%r15, -22696(%rbp)      # 8-byte Spill
	movq	%rbx, -22704(%rbp)      # 8-byte Spill
	movq	%r12, -22712(%rbp)      # 8-byte Spill
	movq	%r13, -22720(%rbp)      # 8-byte Spill
	movq	%r11, -22728(%rbp)      # 8-byte Spill
	movq	%r10, -22736(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22704(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22664(%rbp), %rdx      # 8-byte Reload
	movq	-22664(%rbp), %rcx      # 8-byte Reload
	movq	-22608(%rbp), %r8       # 8-byte Reload
	movq	-22656(%rbp), %r9       # 8-byte Reload
	movq	-22616(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22664(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22600(%rbp), %r8       # 8-byte Reload
	movq	-22656(%rbp), %r9       # 8-byte Reload
	movq	-22592(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22472(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22536(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22592(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22520(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22560(%rbp), %rcx      # 8-byte Reload
	movq	-22584(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22704(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22472(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22536(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-21960(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22576(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-22472(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-21960(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-22656(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -22744(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22560(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22520(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22552(%rbp), %rcx      # 8-byte Reload
	movq	-22568(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22744(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22560(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-21960(%rbp), %rax      # 8-byte Reload
	movq	-22472(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -22752(%rbp)     # 8-byte Spill
	movq	-22656(%rbp), %rdx      # 8-byte Reload
	movq	-22552(%rbp), %rcx      # 8-byte Reload
	movq	-22664(%rbp), %r8       # 8-byte Reload
	movq	-22648(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22520(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22504(%rbp), %rcx      # 8-byte Reload
	movq	-22544(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	-22472(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22536(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22472(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22480(%rbp), %rsi      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22504(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -22756(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22520(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22488(%rbp), %rcx      # 8-byte Reload
	movq	-22528(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-22704(%rbp), %rdi      # 8-byte Reload
	movq	-22480(%rbp), %rsi      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22512(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22756(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22480(%rbp), %rsi      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22504(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22756(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
.Ltmp239:
	.loc	1 213 0                 # feature_extraction.c:213:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22480(%rbp), %rsi      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22488(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -22760(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22640(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22720(%rbp), %rcx      # 8-byte Reload
	movq	-22496(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-22760(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22480(%rbp), %rsi      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22488(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-22760(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-22696(%rbp), %rdi      # 8-byte Reload
	movq	-22712(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22720(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -22768(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22640(%rbp), %rdi      # 8-byte Reload
	movq	-22680(%rbp), %rsi      # 8-byte Reload
	movq	-22736(%rbp), %rdx      # 8-byte Reload
	movq	-22728(%rbp), %rcx      # 8-byte Reload
	movq	-22704(%rbp), %r8       # 8-byte Reload
	movl	-22684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22656(%rbp), %rdi      # 8-byte Reload
	movq	-22664(%rbp), %rsi      # 8-byte Reload
	movq	-22664(%rbp), %rdx      # 8-byte Reload
	movq	-22656(%rbp), %rcx      # 8-byte Reload
	movq	-22672(%rbp), %r8       # 8-byte Reload
	movq	-22664(%rbp), %r9       # 8-byte Reload
	movq	-22648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22664(%rbp), %rax      # 8-byte Reload
	movq	%rax, -22776(%rbp)      # 8-byte Spill
.LBB1_80:                               #   Parent Loop BB1_79 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-22776(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str626, %r9
	movabsq	$3, %r10
	leaq	.L.str19, %r11
	movabsq	$213, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str636, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -22784(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -22792(%rbp)      # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, -22800(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -22808(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -22816(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -22824(%rbp)      # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, -22832(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -22840(%rbp)      # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -22848(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -22856(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -22864(%rbp)      # 8-byte Spill
	leaq	.L.str634, %rax
	movq	%rax, -22872(%rbp)      # 8-byte Spill
	leaq	.L.str632, %rax
	movq	%rax, -22880(%rbp)      # 8-byte Spill
	movabsq	$215, %rax
	movq	%rax, -22888(%rbp)      # 8-byte Spill
	leaq	.L.str635, %rax
	movq	%rax, -22896(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -22904(%rbp)      # 8-byte Spill
	leaq	.L.str633, %rax
	movq	%rax, -22912(%rbp)      # 8-byte Spill
	leaq	.L.str630, %rax
	movq	%rax, -22920(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -22928(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -22936(%rbp)      # 8-byte Spill
	leaq	.L.str602, %rax
	movq	%rax, -22944(%rbp)      # 8-byte Spill
	leaq	.L.str631, %rax
	movq	%rax, -22952(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -22960(%rbp)      # 8-byte Spill
	leaq	.L.str625, %rax
	movq	%rax, -22968(%rbp)      # 8-byte Spill
	leaq	.L.str629, %rax
	movq	%rax, -22976(%rbp)      # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -22984(%rbp)      # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -22992(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -23000(%rbp)      # 8-byte Spill
	leaq	.L.str622, %rax
	movq	%rax, -23008(%rbp)      # 8-byte Spill
	leaq	.L.str628, %rax
	movq	%rax, -23016(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -23024(%rbp)      # 8-byte Spill
	leaq	.L.str627, %rax
	movq	%rax, -23032(%rbp)      # 8-byte Spill
	leaq	.L.str601, %rax
	movq	%rax, -23040(%rbp)      # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, -23048(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -23056(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 215 0                 # feature_extraction.c:215:0
.Ltmp240:
	subq	$16, %rsp
	movq	%rax, -23064(%rbp)      # 8-byte Spill
	movq	-23056(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -23072(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -23080(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -23088(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-22848(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -23096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-23064(%rbp), %rax      # 8-byte Reload
	movq	%r8, -23104(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -23112(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -23120(%rbp)      # 8-byte Spill
	movq	%r15, -23128(%rbp)      # 8-byte Spill
	movl	%r12d, -23132(%rbp)     # 4-byte Spill
	movq	%r13, -23144(%rbp)      # 8-byte Spill
	movq	%rbx, -23152(%rbp)      # 8-byte Spill
	movq	%r11, -23160(%rbp)      # 8-byte Spill
	movq	%r10, -23168(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23080(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22832(%rbp), %r8       # 8-byte Reload
	movq	-23096(%rbp), %r9       # 8-byte Reload
	movq	-23112(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23080(%rbp), %rdx      # 8-byte Reload
	movq	-23080(%rbp), %rcx      # 8-byte Reload
	movq	-22856(%rbp), %r8       # 8-byte Reload
	movq	-23096(%rbp), %r9       # 8-byte Reload
	movq	-23048(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22784(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22848(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23048(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-23032(%rbp), %rcx      # 8-byte Reload
	movq	-22960(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22784(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22848(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-21960(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23040(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-22784(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-21960(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-23096(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -23176(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-23032(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-23016(%rbp), %rcx      # 8-byte Reload
	movq	-22936(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23176(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23032(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-21960(%rbp), %rax      # 8-byte Reload
	movq	-22784(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -23184(%rbp)     # 8-byte Spill
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-23016(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22976(%rbp), %rcx      # 8-byte Reload
	movq	-23024(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-23184(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-23016(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-22752(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-23008(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-22752(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-23184(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22976(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -23192(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22920(%rbp), %rcx      # 8-byte Reload
	movq	-23000(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22984(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22992(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-23192(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22976(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-23192(%rbp), %xmm0     # 8-byte Reload
	callq	sqrt
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -23200(%rbp)     # 8-byte Spill
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22920(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22952(%rbp), %rcx      # 8-byte Reload
	movq	-22864(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22768(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22968(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22784(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22848(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22784(%rbp), %rax      # 8-byte Reload
	movq	-22768(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22952(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -23208(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22880(%rbp), %rcx      # 8-byte Reload
	movq	-22960(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23208(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22952(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-21800(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22944(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-23208(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-21800(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-23096(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -23216(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-22880(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22912(%rbp), %rcx      # 8-byte Reload
	movq	-22936(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23216(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22880(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-21800(%rbp), %rax      # 8-byte Reload
	movq	-23208(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -23224(%rbp)     # 8-byte Spill
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22912(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22872(%rbp), %rcx      # 8-byte Reload
	movq	-22928(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-23200(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22920(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-23224(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22912(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-23224(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-23200(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22872(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -23232(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-22888(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22896(%rbp), %rcx      # 8-byte Reload
	movq	-22904(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23216(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22880(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	vmovsd	-23232(%rbp), %xmm0     # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-22872(%rbp), %rcx      # 8-byte Reload
	movq	-23080(%rbp), %r8       # 8-byte Reload
	movq	-23072(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-21800(%rbp), %rax      # 8-byte Reload
	movq	-23208(%rbp), %rcx      # 8-byte Reload
	vmovsd	-23232(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp241:
	.loc	1 213 0                 # feature_extraction.c:213:0
	subq	$16, %rsp
	movq	-23152(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22832(%rbp), %rcx      # 8-byte Reload
	movq	-22864(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rdx      # 8-byte Reload
	movq	-23080(%rbp), %rcx      # 8-byte Reload
	movq	-22856(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-22784(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22848(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22784(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22832(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -23240(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23152(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-22800(%rbp), %rcx      # 8-byte Reload
	movq	-22840(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22824(%rbp), %rsi      # 8-byte Reload
	movq	-23240(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22832(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-23240(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-22792(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22800(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -23244(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23152(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-23088(%rbp), %rcx      # 8-byte Reload
	movq	-22816(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-22792(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22808(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-23244(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-22792(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-22800(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-23244(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-23144(%rbp), %rdi      # 8-byte Reload
	movq	-23096(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23088(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -23245(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23152(%rbp), %rdi      # 8-byte Reload
	movq	-23120(%rbp), %rsi      # 8-byte Reload
	movq	-23112(%rbp), %rdx      # 8-byte Reload
	movq	-23128(%rbp), %rcx      # 8-byte Reload
	movq	-23104(%rbp), %r8       # 8-byte Reload
	movl	-23132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23168(%rbp), %rdi      # 8-byte Reload
	movq	-23080(%rbp), %rsi      # 8-byte Reload
	movq	-23080(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23160(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23104(%rbp), %rdi      # 8-byte Reload
	movq	-23080(%rbp), %rsi      # 8-byte Reload
	movq	-23080(%rbp), %rdx      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23112(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-23245(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-23096(%rbp), %rdi      # 8-byte Reload
	movq	-23096(%rbp), %rsi      # 8-byte Reload
	movq	-23096(%rbp), %rcx      # 8-byte Reload
	movq	-23088(%rbp), %r8       # 8-byte Reload
	movq	-23080(%rbp), %r9       # 8-byte Reload
	movq	-23072(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-23245(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-23240(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -22776(%rbp)      # 8-byte Spill
	jne	.LBB1_81
	jmp	.LBB1_80
.Ltmp242:
.LBB1_81:                               # %._crit_edge
                                        #   in Loop: Header=BB1_79 Depth=1
	movabsq	$1, %rax
	leaq	.L.str638, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str23, %r8
	movabsq	$3, %r9
	leaq	.L.str600, %r10
	movabsq	$211, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str19, %r14
	leaq	.L.str47, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -23256(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -23264(%rbp)      # 8-byte Spill
	leaq	.L.str637, %rax
	movq	%rax, -23272(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -23280(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -23288(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -23296(%rbp)      # 8-byte Spill
	leaq	.L.str620, %rax
	movq	%rax, -23304(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -23312(%rbp)      # 8-byte Spill
	leaq	.L.str619, %rax
	movq	%rax, -23320(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -23328(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 211 0                 # feature_extraction.c:211:0
	subq	$16, %rsp
	movq	%rdi, -23336(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -23344(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -23352(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -23360(%rbp)      # 8-byte Spill
	movq	-23304(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -23368(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-23360(%rbp), %rax      # 8-byte Reload
	movq	%r8, -23376(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -23384(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -23392(%rbp)      # 8-byte Spill
	movq	%r15, -23400(%rbp)      # 8-byte Spill
	movl	%r12d, -23404(%rbp)     # 4-byte Spill
	movq	%r13, -23416(%rbp)      # 8-byte Spill
	movq	%rbx, -23424(%rbp)      # 8-byte Spill
	movq	%r11, -23432(%rbp)      # 8-byte Spill
	movq	%r10, -23440(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23336(%rbp), %rdi      # 8-byte Reload
	movq	-23296(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rdx      # 8-byte Reload
	movq	-23352(%rbp), %rcx      # 8-byte Reload
	movq	-23328(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23256(%rbp), %rdi      # 8-byte Reload
	movq	-23296(%rbp), %rsi      # 8-byte Reload
	movq	-22472(%rbp), %rdx      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23320(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-22472(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-23416(%rbp), %rdi      # 8-byte Reload
	movq	-23296(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23304(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -23448(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23432(%rbp), %rdi      # 8-byte Reload
	movq	-23424(%rbp), %rsi      # 8-byte Reload
	movq	-23392(%rbp), %rdx      # 8-byte Reload
	movq	-23272(%rbp), %rcx      # 8-byte Reload
	movq	-23312(%rbp), %r8       # 8-byte Reload
	movl	-23404(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23256(%rbp), %rdi      # 8-byte Reload
	movq	-23296(%rbp), %rsi      # 8-byte Reload
	movq	-23448(%rbp), %rdx      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23304(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-23448(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-23416(%rbp), %rdi      # 8-byte Reload
	movq	-23264(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23272(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -23452(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23432(%rbp), %rdi      # 8-byte Reload
	movq	-23424(%rbp), %rsi      # 8-byte Reload
	movq	-23392(%rbp), %rdx      # 8-byte Reload
	movq	-23368(%rbp), %rcx      # 8-byte Reload
	movq	-23288(%rbp), %r8       # 8-byte Reload
	movl	-23404(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-23336(%rbp), %rdi      # 8-byte Reload
	movq	-23264(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23280(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-23452(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-23256(%rbp), %rdi      # 8-byte Reload
	movq	-23264(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23272(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-23452(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-23416(%rbp), %rdi      # 8-byte Reload
	movq	-23256(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23368(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -23453(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23432(%rbp), %rdi      # 8-byte Reload
	movq	-23424(%rbp), %rsi      # 8-byte Reload
	movq	-23392(%rbp), %rdx      # 8-byte Reload
	movq	-23400(%rbp), %rcx      # 8-byte Reload
	movq	-23336(%rbp), %r8       # 8-byte Reload
	movl	-23404(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23384(%rbp), %rdi      # 8-byte Reload
	movq	-23352(%rbp), %rsi      # 8-byte Reload
	movq	-23352(%rbp), %rdx      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23440(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23336(%rbp), %rdi      # 8-byte Reload
	movq	-23352(%rbp), %rsi      # 8-byte Reload
	movq	-23352(%rbp), %rdx      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23376(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-23453(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-23256(%rbp), %rdi      # 8-byte Reload
	movq	-23256(%rbp), %rsi      # 8-byte Reload
	movq	-23256(%rbp), %rcx      # 8-byte Reload
	movq	-23368(%rbp), %r8       # 8-byte Reload
	movq	-23352(%rbp), %r9       # 8-byte Reload
	movq	-23344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-23453(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-23448(%rbp), %rcx      # 8-byte Reload
	movq	-21800(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -22048(%rbp)      # 8-byte Spill
	movq	%rdx, -21784(%rbp)      # 8-byte Spill
	jne	.LBB1_82
	jmp	.LBB1_79
.Ltmp243:
.LBB1_82:                               # %._crit_edge29
	movq	-21784(%rbp), %rax      # 8-byte Reload
	movl	$0, %ecx
	movabsq	$0, %rdx
	movabsq	$5, %rdi
	movabsq	$64, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$4, %r10
	movabsq	$1, %r11
	movabsq	$3, %rbx
	leaq	.L.str642, %r14
	movabsq	$2, %r15
	leaq	.L.str639, %r12
	movabsq	$32, %r13
	movq	%rax, -23464(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -23472(%rbp)      # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -23480(%rbp)      # 8-byte Spill
	leaq	rs, %rax
	movq	%rax, -23488(%rbp)      # 8-byte Spill
	leaq	.L.str391, %rax
	movq	%rax, -23496(%rbp)      # 8-byte Spill
	movabsq	$222, %rax
	movq	%rax, -23504(%rbp)      # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -23512(%rbp)      # 8-byte Spill
	leaq	.L.str600, %rax
	movq	%rax, -23520(%rbp)      # 8-byte Spill
	leaq	.L.str641, %rax
	movq	%rax, -23528(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, -23532(%rbp)      # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, -23544(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -23552(%rbp)      # 8-byte Spill
	leaq	.L.str640, %rax
	.loc	1 221 0                 # feature_extraction.c:221:0
	subq	$16, %rsp
	movq	%rax, -23560(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%ecx, -23564(%rbp)      # 4-byte Spill
	movl	$.L.str600, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rsi, -23576(%rbp)      # 8-byte Spill
	movl	$.L.str639, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -23584(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -23592(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -23600(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -23608(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-23592(%rbp), %rax      # 8-byte Reload
	movl	%esi, -23612(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -23624(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-23584(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -23632(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-23600(%rbp), %rax      # 8-byte Reload
	movq	%r8, -23640(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-23612(%rbp), %eax      # 4-byte Reload
	movq	%r9, -23648(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -23656(%rbp)      # 8-byte Spill
	movq	%r15, -23664(%rbp)      # 8-byte Spill
	movq	%r12, -23672(%rbp)      # 8-byte Spill
	movq	%r14, -23680(%rbp)      # 8-byte Spill
	movq	%rbx, -23688(%rbp)      # 8-byte Spill
	movq	%r11, -23696(%rbp)      # 8-byte Spill
	movq	%r10, -23704(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str591, (%rcx)
	movl	$.L.str550, %eax
	movl	%eax, %r8d
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %esi
	movq	%rsi, -23712(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -23720(%rbp)      # 8-byte Spill
	movq	-23712(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -23728(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str19, (%rcx)
	movl	$.L.str602, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edi
	movq	-23728(%rbp), %rsi      # 8-byte Reload
	movq	-23720(%rbp), %rdx      # 8-byte Reload
	movq	-23712(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -23736(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-23736(%rbp), %r8       # 8-byte Reload
	movq	-23712(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str595, (%rcx)
	movq	-23712(%rbp), %rdi      # 8-byte Reload
	movq	-23728(%rbp), %rsi      # 8-byte Reload
	movq	-23720(%rbp), %rdx      # 8-byte Reload
	movq	-23712(%rbp), %rcx      # 8-byte Reload
	movq	-23736(%rbp), %r8       # 8-byte Reload
	movq	-23712(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str595, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	-23728(%rbp), %rsi      # 8-byte Reload
	movq	-23464(%rbp), %rdx      # 8-byte Reload
	movq	-23712(%rbp), %rcx      # 8-byte Reload
	movq	-23584(%rbp), %r8       # 8-byte Reload
	movq	-23720(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str640, %eax
	movl	%eax, %ecx
	movl	$221, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-23592(%rbp), %rsi      # 8-byte Reload
	movq	-23632(%rbp), %rdx      # 8-byte Reload
	movl	-23612(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str387, %eax
	movl	%eax, %r8d
	movq	-23712(%rbp), %rdi      # 8-byte Reload
	movq	-23728(%rbp), %rsi      # 8-byte Reload
	movq	-13680(%rbp), %rdx      # 8-byte Reload
	movq	-23712(%rbp), %rcx      # 8-byte Reload
	movq	-23720(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13680(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-23552(%rbp), %rdi      # 8-byte Reload
	movq	-23576(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -23744(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-23744(%rbp), %rdx      # 8-byte Reload
	movq	-23696(%rbp), %rcx      # 8-byte Reload
	movq	-23560(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp244:
	#DEBUG_VALUE: process_data:time_eigenvalues <- [RBP+-23744]
	.loc	1 222 0                 # feature_extraction.c:222:0
	subq	$16, %rsp
	movq	-23504(%rbp), %rdi      # 8-byte Reload
	movq	-23512(%rbp), %rsi      # 8-byte Reload
	movq	-23520(%rbp), %rdx      # 8-byte Reload
	movq	-23528(%rbp), %rcx      # 8-byte Reload
	movq	-23544(%rbp), %r8       # 8-byte Reload
	movl	-23564(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23480(%rbp), %rdi      # 8-byte Reload
	movq	-23576(%rbp), %rsi      # 8-byte Reload
	movq	-23488(%rbp), %rdx      # 8-byte Reload
	movq	-23696(%rbp), %rcx      # 8-byte Reload
	movq	-23496(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-23696(%rbp), %rdi      # 8-byte Reload
	movq	-23656(%rbp), %rsi      # 8-byte Reload
	movq	-23696(%rbp), %rcx      # 8-byte Reload
	movq	-23472(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23664(%rbp), %rdi      # 8-byte Reload
	movq	-23576(%rbp), %rsi      # 8-byte Reload
	movq	-23464(%rbp), %rdx      # 8-byte Reload
	movq	-23696(%rbp), %rcx      # 8-byte Reload
	movq	-23672(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23688(%rbp), %rdi      # 8-byte Reload
	movq	-23576(%rbp), %rsi      # 8-byte Reload
	movq	-23744(%rbp), %rdx      # 8-byte Reload
	movq	-23696(%rbp), %rcx      # 8-byte Reload
	movq	-23680(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23704(%rbp), %rdi      # 8-byte Reload
	movq	-23696(%rbp), %rsi      # 8-byte Reload
	movq	-23624(%rbp), %rdx      # 8-byte Reload
	movq	-23624(%rbp), %rcx      # 8-byte Reload
	movq	-23640(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23608(%rbp), %rdi      # 8-byte Reload
	movq	-23576(%rbp), %rsi      # 8-byte Reload
	movq	-23624(%rbp), %rdx      # 8-byte Reload
	movq	-23624(%rbp), %rcx      # 8-byte Reload
	movq	-23640(%rbp), %r8       # 8-byte Reload
	movq	-23624(%rbp), %r9       # 8-byte Reload
	movq	-23648(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %edi         # 4-byte Reload
	movq	-23464(%rbp), %rsi      # 8-byte Reload
	movq	-23744(%rbp), %rdx      # 8-byte Reload
	movl	-23532(%rbp), %ecx      # 4-byte Reload
	movq	-23624(%rbp), %r8       # 8-byte Reload
	callq	rs
	movabsq	$229, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str600, %rdx
	leaq	.L.str643, %rcx
	movabsq	$1, %r8
	movl	$1, %r9d
	movabsq	$19134, %r10            # imm = 0x4ABE
	movabsq	$32, %r11
	leaq	.L.str641, %rbx
	movabsq	$0, %r14
	leaq	.L.str8, %r15
	.loc	1 229 0                 # feature_extraction.c:229:0
	movl	%eax, %eax
	movl	%eax, %r12d
	subq	$16, %rsp
	movq	%rdi, -23752(%rbp)      # 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -23760(%rbp)      # 8-byte Spill
	movq	%r11, %rsi
	movq	%rdx, -23768(%rbp)      # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, -23776(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	%r8, -23784(%rbp)       # 8-byte Spill
	movq	%rbx, %r8
	movl	%r9d, -23788(%rbp)      # 4-byte Spill
	movq	%r14, %r9
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-23752(%rbp), %rdi      # 8-byte Reload
	movq	-23760(%rbp), %rsi      # 8-byte Reload
	movq	-23768(%rbp), %rdx      # 8-byte Reload
	movq	-23776(%rbp), %rcx      # 8-byte Reload
	movq	-23784(%rbp), %r8       # 8-byte Reload
	movl	-23788(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
.Ltmp245:
	ret
.Ltmp246:
.Ltmp247:
	.size	process_data, .Ltmp247-process_data
.Lfunc_end1:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_0:
	.quad	-4616189618054758400    # double -1
.LCPI2_1:
	.quad	4621819117588971520     # double 10
	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	1 231 0                 # feature_extraction.c:231:0
# BB#0:
	pushq	%rbp
.Ltmp255:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp256:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp257:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp258:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp259:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp260:
	.cfi_def_cfa_offset 56
	subq	$2232, %rsp             # imm = 0x8B8
.Ltmp261:
	.cfi_def_cfa_offset 2288
.Ltmp262:
	.cfi_offset %rbx, -56
.Ltmp263:
	.cfi_offset %r12, -48
.Ltmp264:
	.cfi_offset %r13, -40
.Ltmp265:
	.cfi_offset %r14, -32
.Ltmp266:
	.cfi_offset %r15, -24
.Ltmp267:
	.cfi_offset %rbp, -16
	leaq	.L.str661, %rdi
	movabsq	$1827, %rsi             # imm = 0x723
	.loc	1 233 0 prologue_end    # feature_extraction.c:233:0
.Ltmp268:
	callq	trace_logger_write_labelmap
	movabsq	$1, %rsi
	movabsq	$64, %rdi
	movabsq	$18000, %rdx            # imm = 0x4650
	movabsq	$0, %rax
	leaq	.L.str7, %r8
	leaq	.L.str8, %rcx
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str645, %r11
	movabsq	$233, %rbx
	leaq	.L.str644, %r14
	leaq	.L.str5, %r15
	leaq	.L.str6, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 2224(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, 2216(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 2212(%rsp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2200(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 2192(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 2184(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 2176(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 2168(%rsp)        # 8-byte Spill
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	movq	%r10, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2160(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2160(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$18000, %ebp            # imm = 0x4650
	movl	%ebp, %edi
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	movabsq	$18000, %rsi            # imm = 0x4650
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	malloc, %r11
	leaq	.L.str645, %rbx
	movabsq	$234, %r14
	leaq	.L.str644, %r15
	leaq	.L.str5, %r12
	leaq	.L.str20, %r13
	movabsq	$49, %rbp
	movq	%rsi, 2144(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2140(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$233, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2080(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 2076(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2064(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 2056(%rsp)        # 8-byte Spill
	movq	2104(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2048(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2040(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 2032(%rsp)        # 8-byte Spill
	movq	%r12, 2024(%rsp)        # 8-byte Spill
	movq	%r13, 2016(%rsp)        # 8-byte Spill
	movq	%rbp, 2008(%rsp)        # 8-byte Spill
	movq	%r14, 2000(%rsp)        # 8-byte Spill
	movq	%rbx, 1992(%rsp)        # 8-byte Spill
	movq	%r10, 1984(%rsp)        # 8-byte Spill
	movq	%r11, 1976(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	2120(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp269:
	#DEBUG_VALUE: main:time_data <- [RSP+1968]
	.loc	1 234 0                 # feature_extraction.c:234:0
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2048(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$18000, %esi            # imm = 0x4650
	movl	%esi, %edi
	callq	malloc
.Ltmp270:
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdi
	movabsq	$237, %r9
	leaq	.L.str644, %r10
	leaq	.L.str5, %r11
	leaq	.L.str646, %rbx
	movabsq	$2, %r14
	movl	$0, %esi
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str24, %r13
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$234, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 1936(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 1932(%rsp)        # 4-byte Spill
	movq	%r12, %rsi
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1912(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1912(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1952(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1896(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1904(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1888(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1884(%rsp)        # 4-byte Spill
	movq	%r15, 1872(%rsp)        # 8-byte Spill
	movq	%r12, 1864(%rsp)        # 8-byte Spill
	movq	%r13, 1856(%rsp)        # 8-byte Spill
	movq	%r14, 1848(%rsp)        # 8-byte Spill
	movq	%r10, 1840(%rsp)        # 8-byte Spill
	movq	%r11, 1832(%rsp)        # 8-byte Spill
	movq	%rbx, 1824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1864(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp271:
	#DEBUG_VALUE: main:freq_data <- [RSP+1816]
	#DEBUG_VALUE: j <- 0
	.loc	1 237 0                 # feature_extraction.c:237:0
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1808(%rsp)        # 8-byte Spill
.Ltmp272:
.LBB2_1:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movq	1808(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str650, %r8
	leaq	.L.str8, %rsi
	movabsq	$239, %rdi
	leaq	.L.str644, %r9
	leaq	.L.str16, %r10
	leaq	.L.str22, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str25, %r13
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str647, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$241, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str648, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str649, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 241 0                 # feature_extraction.c:241:0
.Ltmp273:
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1712(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1704(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1696(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1720(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1680(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1672(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1668(%rsp)       # 4-byte Spill
	movq	%r15, 1656(%rsp)        # 8-byte Spill
	movl	%ebp, 1652(%rsp)        # 4-byte Spill
	movq	%r12, 1640(%rsp)        # 8-byte Spill
	movq	%r13, 1632(%rsp)        # 8-byte Spill
	movq	%rbx, 1624(%rsp)        # 8-byte Spill
	movq	%r10, 1616(%rsp)        # 8-byte Spill
	movq	%r11, 1608(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1736(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rax        # 8-byte Reload
	imulq	$150, %rax, %rcx
.Ltmp274:
	.loc	1 239 0                 # feature_extraction.c:239:0
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movl	1652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1592(%rsp)        # 8-byte Spill
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1592(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str650, %r9
	movabsq	$3, %r10
	leaq	.L.str649, %r11
	movabsq	$239, %rbx
	leaq	.L.str644, %r14
	leaq	.L.str654, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	vmovsd	.LCPI2_0, %xmm0
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movabsq	$242, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str653, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	movabsq	$241, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str652, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	cos, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str651, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$10, %rax
	vmovsd	.LCPI2_1, %xmm1
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 241 0                 # feature_extraction.c:241:0
.Ltmp275:
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str644, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1336(%rsp)        # 8-byte Spill
	movl	$.L.str650, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1328(%rsp)        # 8-byte Spill
	movl	$.L.str29, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1320(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 1304(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 1296(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1312(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1292(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1292(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1256(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm1, 1248(%rsp)       # 8-byte Spill
	movl	%r12d, 1244(%rsp)       # 4-byte Spill
	movq	%r13, 1232(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1224(%rsp)       # 8-byte Spill
	movl	%ebp, 1220(%rsp)        # 4-byte Spill
	movq	%r15, 1208(%rsp)        # 8-byte Spill
	movq	%r10, 1200(%rsp)        # 8-byte Spill
	movq	%r11, 1192(%rsp)        # 8-byte Spill
	movq	%rbx, 1184(%rsp)        # 8-byte Spill
	movq	%r14, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str650, (%rcx)
	movl	$.L.str30, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	1292(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	1168(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str16, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str16, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %ecx
	movl	$241, %eax
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 1136(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movl	1292(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movl	$32, %ebp
	movl	%ebp, %esi
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	movl	%eax, 1108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movl	1292(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	1108(%rsp), %eax        # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1096(%rsp)       # 8-byte Spill
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1088(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	callq	cos
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1080(%rsp)       # 8-byte Spill
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1080(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1072(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1968(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1056(%rsp)        # 8-byte Spill
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	1 242 0                 # feature_extraction.c:242:0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1816(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1048(%rsp)        # 8-byte Spill
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp276:
	.loc	1 239 0                 # feature_extraction.c:239:0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1040(%rsp), %rcx        # 8-byte Reload
	cmpq	$150, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1039(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1200(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	jne	.LBB2_3
	jmp	.LBB2_2
.Ltmp277:
.LBB2_3:                                #   in Loop: Header=BB2_1 Depth=1
	movabsq	$1, %rax
	leaq	.L.str655, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str16, %r8
	movabsq	$3, %r9
	leaq	.L.str657, %r10
	movabsq	$237, %r11
	leaq	.L.str644, %rbx
	leaq	.L.str649, %r14
	leaq	.L.str656, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str648, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$15, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str647, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 237 0                 # feature_extraction.c:237:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 960(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 952(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 912(%rsp)         # 8-byte Spill
	movl	%ebp, 908(%rsp)         # 4-byte Spill
	movl	%r12d, 904(%rsp)        # 4-byte Spill
	movq	%r13, 896(%rsp)         # 8-byte Spill
	movq	%r14, 888(%rsp)         # 8-byte Spill
	movq	%rbx, 880(%rsp)         # 8-byte Spill
	movq	%r10, 872(%rsp)         # 8-byte Spill
	movq	%r11, 864(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rax         # 8-byte Reload
	cmpq	$15, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 855(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	jne	.LBB2_4
	jmp	.LBB2_1
.Ltmp278:
.LBB2_4:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$0, %rcx
	leaq	.L.str7, %rdx
	leaq	.L.str8, %rsi
	movabsq	$3, %r8
	movabsq	$2, %r9
	movabsq	$32, %r10
	movabsq	$1, %r11
	movabsq	$150, %rbx
	movabsq	$5, %r14
	leaq	kiss_fft_alloc, %r15
	leaq	.L.str658, %r12
	movabsq	$249, %r13
	leaq	.L.str644, %rbp
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str657, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 812(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 249 0                 # feature_extraction.c:249:0
	movq	%rdi, 800(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 796(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	832(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 784(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	824(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 768(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	812(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 760(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r14, 744(%rsp)         # 8-byte Spill
	movq	%r15, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	movq	%r10, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	xorl	%ebp, %ebp
	movl	%ebp, %eax
	movl	$150, %edi
	movl	%ebp, %esi
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	kiss_fft_alloc
	movabsq	$5, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str70, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	movabsq	$15, %r14
	leaq	.L.str7, %r15
	movabsq	$3, %r12
	movabsq	$150, %r13
	movabsq	$2, %rsi
	leaq	.L.str24, %rbp
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	process_data, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$252, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str644, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str657, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str659, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 628(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rdi, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 604(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 592(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 576(%rsp)          # 8-byte Spill
	movq	%r9, 568(%rsp)          # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%rbp, 560(%rsp)         # 8-byte Spill
	movq	%r13, 552(%rsp)         # 8-byte Spill
	movq	%r12, 544(%rsp)         # 8-byte Spill
	movq	%r15, 536(%rsp)         # 8-byte Spill
	movq	%r14, 528(%rsp)         # 8-byte Spill
	movq	%r10, 520(%rsp)         # 8-byte Spill
	movq	%r11, 512(%rsp)         # 8-byte Spill
	movq	%rbx, 504(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp279:
	#DEBUG_VALUE: main:cfg <- [RSP+704]
	.loc	1 252 0                 # feature_extraction.c:252:0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	628(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$150, %edx
	movl	$15, %ecx
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	callq	process_data
.Ltmp280:
	movabsq	$4, %rdi
	movabsq	$32, %rax
	movabsq	$15, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$3, %r10
	movabsq	$150, %r11
	movabsq	$2, %rbx
	movabsq	$64, %r14
	movabsq	$1, %r15
	leaq	.L.str24, %r12
                                        # implicit-def: R13
	movabsq	$5, %rbp
	leaq	test_stores, %rcx
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str4, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$266, %rax              # imm = 0x10A
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str644, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str657, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 444(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 266 0                 # feature_extraction.c:266:0
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 408(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 392(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	444(%rsp), %eax         # 4-byte Reload
	movq	%r9, 384(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 376(%rsp)         # 8-byte Spill
	movq	%r13, 368(%rsp)         # 8-byte Spill
	movq	%rbp, 360(%rsp)         # 8-byte Spill
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r14, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$150, %edx
	movl	$15, %ecx
                                        # implicit-def: RDI
	movq	1816(%rsp), %rsi        # 8-byte Reload
	callq	test_stores
	movabsq	$2, %rdi
	movabsq	$64, %rsi
	leaq	.L.str3, %rdx
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str74, %rbx
	movabsq	$3, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$271, %r13              # imm = 0x10F
	leaq	.L.str644, %rbp
	leaq	.L.str657, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str76, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 300(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$268, %rcx              # imm = 0x10C
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rcx
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r12, 168(%rsp)         # 8-byte Spill
	movq	%rbp, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%r10, 128(%rsp)         # 8-byte Spill
	movq	%r11, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp281:
	#DEBUG_VALUE: main:num_failures <- 0
	.loc	1 268 0                 # feature_extraction.c:268:0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp282:
	.loc	1 271 0                 # feature_extraction.c:271:0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 104(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str3, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movl	$0, %esi
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$273, %r10              # imm = 0x111
	leaq	.L.str644, %r11
	leaq	.L.str657, %rbx
	leaq	.L.str660, %r14
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str76, %r12
	.loc	1 273 0                 # feature_extraction.c:273:0
	movl	%eax, %eax
	movl	%eax, %r13d
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r15, %r9
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	92(%rsp), %eax          # 4-byte Reload
	addq	$2232, %rsp             # imm = 0x8B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp283:
.Ltmp284:
	.size	main, .Ltmp284-main
.Lfunc_end2:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_0:
	.quad	-4604611780675359464    # double -6.2831853071795862
.LCPI3_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	kiss_fft_alloc
	.align	16, 0x90
	.type	kiss_fft_alloc,@function
kiss_fft_alloc:                         # @kiss_fft_alloc
	.cfi_startproc
.Lfunc_begin3:
	.loc	2 348 0                 # kiss_fft.c:348:0
# BB#0:
	pushq	%rbp
.Ltmp292:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp293:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp294:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp295:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp296:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp297:
	.cfi_def_cfa_offset 56
	subq	$3176, %rsp             # imm = 0xC68
.Ltmp298:
	.cfi_def_cfa_offset 3232
.Ltmp299:
	.cfi_offset %rbx, -56
.Ltmp300:
	.cfi_offset %r12, -48
.Ltmp301:
	.cfi_offset %r13, -40
.Ltmp302:
	.cfi_offset %r14, -32
.Ltmp303:
	.cfi_offset %r15, -24
.Ltmp304:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str9671, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %r10
	movabsq	$2, %r11
	leaq	.L.str13675, %rbx
	movabsq	$3, %r14
	leaq	.L.str12674, %r15
	movabsq	$353, %r12              # imm = 0x161
	leaq	.L.str662, %r13
	leaq	.L.str1663, %rbp
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str11673, %rax
	movl	%esi, 3164(%rsp)        # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 3160(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str10672, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	movabsq	$280, %rax              # imm = 0x118
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$350, %rax              # imm = 0x15E
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str5667, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str20682, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str42704, %rax
	.loc	2 347 0 prologue_end    # kiss_fft.c:347:0
.Ltmp305:
	movl	%esi, 2988(%rsp)        # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movq	3000(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2972(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3040(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2960(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2952(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3016(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2928(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 2920(%rsp)        # 8-byte Spill
	movq	%rbp, 2912(%rsp)        # 8-byte Spill
	movq	%r13, 2904(%rsp)        # 8-byte Spill
	movq	%r15, 2896(%rsp)        # 8-byte Spill
	movq	%r14, 2888(%rsp)        # 8-byte Spill
	movq	%rbx, 2880(%rsp)        # 8-byte Spill
	movq	%r10, 2872(%rsp)        # 8-byte Spill
	movq	%r11, 2864(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	3164(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_alloc:nfft <- [RSP+2972]
	#DEBUG_VALUE: kiss_fft_alloc:inverse_fft <- [RSP+3164]
	#DEBUG_VALUE: kiss_fft_alloc:mem <- [RSP+2952]
	#DEBUG_VALUE: kiss_fft_alloc:lenmem <- [RSP+2944]
	.loc	2 350 0                 # kiss_fft.c:350:0
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %esi        # 4-byte Reload
	addl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2860(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2860(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2848(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2848(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	3088(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rax        # 8-byte Reload
	addq	$280, %rax              # imm = 0x118
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp306:
	#DEBUG_VALUE: kiss_fft_alloc:memneeded <- [RSP+2832]
	.loc	2 353 0                 # kiss_fft.c:353:0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2831(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2831(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2831(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_1
	jmp	.LBB3_2
.Ltmp307:
.LBB3_1:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str8670, %r8
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	malloc, %r9
	leaq	.L.str15677, %r10
	movabsq	$354, %r11              # imm = 0x162
	leaq	.L.str662, %rbx
	leaq	.L.str12674, %r14
	leaq	.L.str14676, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 354 0                 # kiss_fft.c:354:0
.Ltmp308:
	movq	%rdi, 2816(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2808(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2800(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 2792(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 2784(%rsp)         # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 2776(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movq	%r10, 2760(%rsp)        # 8-byte Spill
	movl	%r13d, 2756(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2800(%rsp), %r9         # 8-byte Reload
	movq	2808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	2800(%rsp), %r9         # 8-byte Reload
	movq	2808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18680, %r8
	leaq	.L.str4666, %rsi
	movabsq	$355, %rdi              # imm = 0x163
	leaq	.L.str662, %r9
	leaq	.L.str12674, %r10
	leaq	.L.str17679, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str16678, %r12
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str14676, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$354, %rax              # imm = 0x162
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 2720(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, 2712(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movq	2744(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2696(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	movq	2736(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2680(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2672(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 2668(%rsp)       # 4-byte Spill
	movq	%r14, 2656(%rsp)        # 8-byte Spill
	movl	%ebp, 2652(%rsp)        # 4-byte Spill
	movq	%r15, 2640(%rsp)        # 8-byte Spill
	movq	%r12, 2632(%rsp)        # 8-byte Spill
	movq	%rbx, 2624(%rsp)        # 8-byte Spill
	movq	%r10, 2616(%rsp)        # 8-byte Spill
	movq	%r11, 2608(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2616(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rax        # 8-byte Reload
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp309:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2600]
	.loc	2 355 0                 # kiss_fft.c:355:0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2616(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2696(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	jmp	.LBB3_6
.Ltmp310:
.LBB3_2:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str19681, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str23685, %r8
	movabsq	$3, %r9
	leaq	.L.str22684, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str662, %rbx
	leaq	.L.str13675, %r14
	leaq	.L.str21683, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	leaq	.L.str20682, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 356 0                 # kiss_fft.c:356:0
.Ltmp311:
	movq	%rdi, 2552(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2544(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2536(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2528(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2496(%rsp)        # 8-byte Spill
	movl	%ebp, 2492(%rsp)        # 4-byte Spill
	movl	%r12d, 2488(%rsp)       # 4-byte Spill
	movq	%r13, 2480(%rsp)        # 8-byte Spill
	movq	%r14, 2472(%rsp)        # 8-byte Spill
	movq	%rbx, 2464(%rsp)        # 8-byte Spill
	movq	%r10, 2456(%rsp)        # 8-byte Spill
	movq	%r11, 2448(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2447(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2448(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movl	2492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2447(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2447(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2432(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#3:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str25687, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str27689, %r8
	movabsq	$3, %r9
	leaq	.L.str22684, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str662, %rbx
	leaq	.L.str23685, %r14
	leaq	.L.str26688, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str10672, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rdi, 2376(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2368(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2360(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2352(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2336(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2328(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2320(%rsp)        # 8-byte Spill
	movl	%ebp, 2316(%rsp)        # 4-byte Spill
	movl	%r12d, 2312(%rsp)       # 4-byte Spill
	movq	%r13, 2304(%rsp)        # 8-byte Spill
	movq	%r14, 2296(%rsp)        # 8-byte Spill
	movq	%rbx, 2288(%rsp)        # 8-byte Spill
	movq	%r10, 2280(%rsp)        # 8-byte Spill
	movq	%r11, 2272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2264(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2272(%rsp), %rdi        # 8-byte Reload
	movq	2288(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2263(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2272(%rsp), %rdi        # 8-byte Reload
	movq	2288(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2263(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2263(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2432(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#4:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str22684, %r8
	leaq	.L.str4666, %rdx
	movabsq	$357, %rsi              # imm = 0x165
	leaq	.L.str662, %rdi
	leaq	.L.str27689, %r9
	leaq	.L.str29691, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str20682, %r12
	leaq	.L.str28690, %r13
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	.loc	2 357 0                 # kiss_fft.c:357:0
	movq	%rdi, 2240(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2224(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2216(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2208(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2232(%rsp), %r13        # 8-byte Reload
	movq	%r8, 2200(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 2192(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2188(%rsp)        # 4-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movq	%r12, 2168(%rsp)        # 8-byte Spill
	movq	%r14, 2160(%rsp)        # 8-byte Spill
	movl	%ebx, 2156(%rsp)        # 4-byte Spill
	movq	%r10, 2144(%rsp)        # 8-byte Spill
	movq	%r11, 2136(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2248(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rax        # 8-byte Reload
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp312:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2128]
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2192(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movl	2156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2248(%rsp), %rdi        # 8-byte Reload
	movq	2208(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2432(%rsp)        # 8-byte Spill
.Ltmp313:
.LBB3_5:
	movq	2432(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18680, %r8
	leaq	.L.str4666, %rsi
	movabsq	$-1, %rdi
	leaq	.L.str662, %r9
	leaq	.L.str22684, %r10
	leaq	.L.str32694, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$64, %r15
	leaq	.L.str8670, %r12
	leaq	.L.str10672, %r13
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	movabsq	$358, %rax              # imm = 0x166
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str31693, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str30692, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str27689, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str20682, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str23685, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str13675, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 358 0                 # kiss_fft.c:358:0
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%rsi, 2016(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2008(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1984(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1976(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1972(%rsp)       # 4-byte Spill
	movq	%r15, 1960(%rsp)        # 8-byte Spill
	movl	%ebp, 1956(%rsp)        # 4-byte Spill
	movq	%r12, 1944(%rsp)        # 8-byte Spill
	movq	%r13, 1936(%rsp)        # 8-byte Spill
	movq	%rbx, 1928(%rsp)        # 8-byte Spill
	movq	%r10, 1920(%rsp)        # 8-byte Spill
	movq	%r11, 1912(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movl	1956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1928(%rsp), %r8         # 8-byte Reload
	movl	1956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2592(%rsp)        # 8-byte Spill
.Ltmp314:
.LBB3_6:
	movq	2592(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str34696, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str37699, %r9
	movabsq	$3, %r10
	leaq	.L.str36698, %r11
	movabsq	$360, %rbx              # imm = 0x168
	leaq	.L.str662, %r14
	leaq	.L.str18680, %r15
	leaq	.L.str35697, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str33695, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str12674, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str30692, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str22684, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 360 0                 # kiss_fft.c:360:0
.Ltmp315:
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1800(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1792(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1880(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1776(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1768(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1760(%rsp)        # 8-byte Spill
	movq	%r12, 1752(%rsp)        # 8-byte Spill
	movl	%ebp, 1748(%rsp)        # 4-byte Spill
	movl	%r13d, 1744(%rsp)       # 4-byte Spill
	movq	%r14, 1736(%rsp)        # 8-byte Spill
	movq	%rbx, 1728(%rsp)        # 8-byte Spill
	movq	%r10, 1720(%rsp)        # 8-byte Spill
	movq	%r11, 1712(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1748(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1711(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	1748(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1711(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1711(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_13
# BB#7:
	movabsq	$1, %rax
	leaq	.L.str43705, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str46708, %r8
	movabsq	$3, %r9
	leaq	.L.str45707, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str662, %rbx
	leaq	.L.str37699, %r14
	leaq	.L.str44706, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str5667, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str42704, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$363, %rax              # imm = 0x16B
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str41703, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str33695, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$362, %rax              # imm = 0x16A
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str39701, %rax
	.loc	2 362 0                 # kiss_fft.c:362:0
.Ltmp316:
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movq	1584(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1520(%rsp)        # 8-byte Spill
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	movl	%r12d, 1512(%rsp)       # 4-byte Spill
	movq	%r13, 1504(%rsp)        # 8-byte Spill
	movq	%r14, 1496(%rsp)        # 8-byte Spill
	movq	%rbx, 1488(%rsp)        # 8-byte Spill
	movq	%r10, 1480(%rsp)        # 8-byte Spill
	movq	%r11, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1584(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax)
	.loc	2 363 0                 # kiss_fft.c:363:0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movl	3164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 4(%rax)
.Ltmp317:
	#DEBUG_VALUE: i <- 0
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1463(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1463(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1463(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_8
	jmp	.LBB3_12
.LBB3_8:                                # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str49711, %r8
	leaq	.L.str4666, %rdx
	movabsq	$365, %rdi              # imm = 0x16D
	leaq	.L.str662, %rsi
	leaq	.L.str45707, %r9
	leaq	.L.str48710, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str47709, %r12
	.loc	2 367 0                 # kiss_fft.c:367:0
.Ltmp318:
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str662, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movl	$.L.str45707, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1440(%rsp)        # 8-byte Spill
	movl	$.L.str47709, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1432(%rsp)        # 8-byte Spill
	movl	$367, %esi              # imm = 0x16F
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1424(%rsp)        # 8-byte Spill
	movl	$39, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1416(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1400(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1396(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	1440(%rsp), %r13        # 8-byte Reload
	movq	%rdx, 1384(%rsp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1368(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1396(%rsp), %r13d       # 4-byte Reload
	movq	%r9, 1360(%rsp)         # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, 1352(%rsp)        # 8-byte Spill
	movl	%ebp, 1348(%rsp)        # 4-byte Spill
	movq	%r15, 1336(%rsp)        # 8-byte Spill
	movq	%r12, 1328(%rsp)        # 8-byte Spill
	movl	%ebx, 1324(%rsp)        # 4-byte Spill
	movq	%r10, 1312(%rsp)        # 8-byte Spill
	movq	%r11, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str5667, %ebx
	movl	%ebx, %r8d
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	1396(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %r9d
	movq	%rax, %rdi
	movq	%rax, %rcx
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	2972(%rsp), %ebx        # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp319:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1296(%rsp)       # 8-byte Spill
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1384(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1288(%rsp)        # 8-byte Spill
.LBB3_9:                                # =>This Inner Loop Header: Depth=1
	movq	1288(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str58720, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str60722, %r9
	movabsq	$3, %r10
	leaq	.L.str52714, %r11
	movabsq	$368, %rbx              # imm = 0x170
	leaq	.L.str662, %r14
	leaq	.L.str49711, %r15
	leaq	.L.str59721, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str57719, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str55717, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$367, %rax              # imm = 0x16F
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI3_0, %xmm0
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 366 0                 # kiss_fft.c:366:0
.Ltmp320:
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str662, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1152(%rsp)        # 8-byte Spill
	movl	$.L.str49711, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1144(%rsp)        # 8-byte Spill
	movl	$.L.str50712, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1128(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1108(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1144(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1096(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1108(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1072(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	%r12, 1056(%rsp)        # 8-byte Spill
	movl	%ebp, 1052(%rsp)        # 4-byte Spill
	movl	%r13d, 1048(%rsp)       # 4-byte Spill
	movq	%r15, 1040(%rsp)        # 8-byte Spill
	movq	%r14, 1032(%rsp)        # 8-byte Spill
	movq	%r10, 1024(%rsp)        # 8-byte Spill
	movq	%r11, 1016(%rsp)        # 8-byte Spill
	movq	%rbx, 1008(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str52714, (%rcx)
	movl	$.L.str51713, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	1108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, 1000(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, 992(%rsp)         # 8-byte Spill
	movq	1000(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45707, (%rcx)
	movl	$.L.str3665, %eax
	movl	%eax, %r8d
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45707, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp321:
	#DEBUG_VALUE: pi <- 3.141593e+00
	.loc	2 367 0                 # kiss_fft.c:367:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str53715, %eax
	movl	%eax, %ecx
	movl	$367, %eax              # imm = 0x16F
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 968(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movl	1108(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str4666, (%rsi)
	movl	$32, %ebp
	movl	%ebp, %esi
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	%rsi, 952(%rsp)         # 8-byte Spill
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	movl	%eax, 940(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54716, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movl	1108(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	940(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 928(%rsp)        # 8-byte Spill
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 920(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	920(%rsp), %xmm0        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	920(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 912(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp322:
	#DEBUG_VALUE: phase <- [RSP+912]
	.loc	2 368 0                 # kiss_fft.c:368:0
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 908(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	908(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	908(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 907(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	907(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	907(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	jne	.LBB3_11
.Ltmp323:
# BB#10:                                #   in Loop: Header=BB3_9 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str52714, %r8
	leaq	.L.str4666, %rdx
	movabsq	$369, %rsi              # imm = 0x171
	leaq	.L.str662, %rdi
	leaq	.L.str60722, %r9
	leaq	.L.str62724, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str61723, %r12
	movabsq	$-1, %r13
	vmovsd	.LCPI3_1, %xmm0
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 369 0                 # kiss_fft.c:369:0
	movq	%rdi, 864(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 848(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%r8, 824(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 816(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 808(%rsp)         # 8-byte Spill
	movq	%r14, 800(%rsp)         # 8-byte Spill
	movq	%r12, 792(%rsp)         # 8-byte Spill
	movq	%r13, 784(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 776(%rsp)        # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r10, 760(%rsp)         # 8-byte Spill
	movq	%r11, 752(%rsp)         # 8-byte Spill
	movl	%ebx, 748(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	vmovsd	776(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 736(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp324:
	#DEBUG_VALUE: phase <- [RSP+736]
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	736(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
.Ltmp325:
.LBB3_11:                               #   in Loop: Header=BB3_9 Depth=1
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str73735, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str49711, %r8
	movabsq	$3, %r9
	leaq	.L.str46708, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str662, %rbx
	leaq	.L.str52714, %r14
	leaq	.L.str74736, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str72734, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str5667, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str51713, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str50712, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str68730, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str70732, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$370, %rax              # imm = 0x172
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str71733, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str33695, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str63725, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	sin, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str69731, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$102, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str64726, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str66728, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str67729, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	cos, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str65727, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str60722, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str61723, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 370 0                 # kiss_fft.c:370:0
.Ltmp326:
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 448(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	568(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%r8, 416(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 408(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 400(%rsp)        # 8-byte Spill
	movq	%r15, 392(%rsp)         # 8-byte Spill
	movl	%ebp, 388(%rsp)         # 4-byte Spill
	movl	%r12d, 384(%rsp)        # 4-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%rbx, 360(%rsp)         # 8-byte Spill
	movq	%r10, 352(%rsp)         # 8-byte Spill
	movq	%r11, 344(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	callq	cos
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 336(%rsp)        # 8-byte Spill
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 328(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rax         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	callq	sin
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 320(%rsp)        # 8-byte Spill
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	312(%rsp), %rax         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp327:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 304(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	2972(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 299(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	jne	.LBB3_12
	jmp	.LBB3_9
.Ltmp328:
.LBB3_12:                               # %._crit_edge
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str75737, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4666, %r8
	movabsq	$32, %r9
	leaq	.L.str5667, %r10
	movabsq	$3, %r11
	leaq	kf_factor, %rbx
	leaq	.L.str77739, %r14
	movabsq	$373, %r15              # imm = 0x175
	leaq	.L.str662, %r12
	leaq	.L.str46708, %r13
	leaq	.L.str76738, %rbp
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 280(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 276(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str33695, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	.loc	2 373 0                 # kiss_fft.c:373:0
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 220(%rsp)         # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	276(%rsp), %eax         # 4-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 168(%rsp)         # 8-byte Spill
	movq	%r12, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	movq	%r10, 120(%rsp)         # 8-byte Spill
	movq	%r11, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movl	276(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %edi        # 4-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	kf_factor
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str36698, %r8
	leaq	.L.str4666, %rsi
	movabsq	$374, %rdi              # imm = 0x176
	leaq	.L.str662, %r9
	leaq	.L.str46708, %r10
	leaq	.L.str78740, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	.loc	2 374 0                 # kiss_fft.c:374:0
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 72(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	96(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp329:
.LBB3_13:
	movabsq	$1, %rax
	movabsq	$64, %rsi
	leaq	.L.str33695, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %rcx
	movabsq	$375, %rdi              # imm = 0x177
	leaq	.L.str662, %rdx
	leaq	.L.str36698, %r10
	leaq	.L.str79741, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 375 0                 # kiss_fft.c:375:0
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$3176, %rsp             # imm = 0xC68
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp330:
.Ltmp331:
	.size	kiss_fft_alloc, .Ltmp331-kiss_fft_alloc
.Lfunc_end3:
	.cfi_endproc

	.globl	kiss_fft_stride
	.align	16, 0x90
	.type	kiss_fft_stride,@function
kiss_fft_stride:                        # @kiss_fft_stride
	.cfi_startproc
.Lfunc_begin4:
	.loc	2 380 0                 # kiss_fft.c:380:0
# BB#0:
	pushq	%rbp
.Ltmp339:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp340:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp341:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp342:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp343:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp344:
	.cfi_def_cfa_offset 56
	subq	$376, %rsp              # imm = 0x178
.Ltmp345:
	.cfi_def_cfa_offset 432
.Ltmp346:
	.cfi_offset %rbx, -56
.Ltmp347:
	.cfi_offset %r12, -48
.Ltmp348:
	.cfi_offset %r13, -40
.Ltmp349:
	.cfi_offset %r14, -32
.Ltmp350:
	.cfi_offset %r15, -24
.Ltmp351:
	.cfi_offset %rbp, -16
	leaq	360(%rsp), %rax
	leaq	368(%rsp), %r8
	movabsq	$1, %r9
	movabsq	$6, %r10
	movabsq	$64, %r11
	leaq	.L.str115777, %rbx
	movabsq	$0, %r14
	leaq	.L.str4666, %r15
	movabsq	$5, %r12
	leaq	.L.str7669, %r13
	movabsq	$4, %rbp
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str118780, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str112774, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str114776, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$391, %rax              # imm = 0x187
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str110772, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str116778, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str113775, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str111773, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$26, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rsi
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movq	%r9, %rcx
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r14, %r9
	movq	%r15, (%rsp)
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	.loc	2 379 0 prologue_end    # kiss_fft.c:379:0
.Ltmp352:
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_stride:st <- [RSP+144]
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+136]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, 368(%rsp)
.Ltmp353:
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+104]
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+120]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rax, 360(%rsp)
.Ltmp354:
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+352]
	#DEBUG_VALUE: kiss_fft_stride:in_stride <- [RSP+236]
	.loc	2 391 0                 # kiss_fft.c:391:0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movl	236(%rsp), %ecx         # 4-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	kf_work
	movabsq	$392, %rdi              # imm = 0x188
	leaq	.L.str110772, %rsi
	leaq	.L.str1663, %rdx
	leaq	.L.str119781, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 392 0                 # kiss_fft.c:392:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$376, %rsp              # imm = 0x178
.Ltmp355:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp356:
.Ltmp357:
	.size	kiss_fft_stride, .Ltmp357-kiss_fft_stride
.Lfunc_end4:
	.cfi_endproc

	.globl	kiss_fft
	.align	16, 0x90
	.type	kiss_fft,@function
kiss_fft:                               # @kiss_fft
	.cfi_startproc
.Lfunc_begin5:
	.loc	2 395 0                 # kiss_fft.c:395:0
# BB#0:
	pushq	%rbp
.Ltmp365:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp366:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp367:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp368:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp369:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp370:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp371:
	.cfi_def_cfa_offset 288
.Ltmp372:
	.cfi_offset %rbx, -56
.Ltmp373:
	.cfi_offset %r12, -48
.Ltmp374:
	.cfi_offset %r13, -40
.Ltmp375:
	.cfi_offset %r14, -32
.Ltmp376:
	.cfi_offset %r15, -24
.Ltmp377:
	.cfi_offset %rbp, -16
	movabsq	$4, %rax
	movabsq	$32, %rcx
	movabsq	$1, %r8
	movabsq	$0, %r9
	leaq	.L.str3665, %r10
	leaq	.L.str4666, %r11
	movabsq	$3, %rbx
	movabsq	$64, %r14
	leaq	.L.str114776, %r15
	movabsq	$2, %r12
	leaq	.L.str112774, %r13
	leaq	.L.str176838, %rbp
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	kiss_fft_stride, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str110772, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$396, %rax              # imm = 0x18C
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str174836, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str175837, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	2 394 0 prologue_end    # kiss_fft.c:394:0
.Ltmp378:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movq	%r14, %rsi
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rbp, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	%r11, (%rsp)
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r12, 64(%rsp)          # 8-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r10, 32(%rsp)          # 8-byte Spill
	movq	%r11, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft:cfg <- [RSP+136]
	#DEBUG_VALUE: kiss_fft:fin <- [RSP+160]
	#DEBUG_VALUE: kiss_fft:fout <- [RSP+112]
	.loc	2 396 0                 # kiss_fft.c:396:0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	156(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ecx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	callq	kiss_fft_stride
.Ltmp379:
	movabsq	$397, %rdi              # imm = 0x18D
	leaq	.L.str174836, %rsi
	leaq	.L.str1663, %rdx
	leaq	.L.str83745, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 397 0                 # kiss_fft.c:397:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp380:
.Ltmp381:
	.size	kiss_fft, .Ltmp381-kiss_fft
.Lfunc_end5:
	.cfi_endproc

	.globl	kiss_fft_cleanup
	.align	16, 0x90
	.type	kiss_fft_cleanup,@function
kiss_fft_cleanup:                       # @kiss_fft_cleanup
	.cfi_startproc
.Lfunc_begin6:
	.loc	2 401 0                 # kiss_fft.c:401:0
# BB#0:
	subq	$24, %rsp
.Ltmp383:
	.cfi_def_cfa_offset 32
	movabsq	$403, %rdi              # imm = 0x193
	leaq	.L.str177839, %rsi
	leaq	.L.str1663, %rdx
	leaq	.L.str178840, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 403 0 prologue_end    # kiss_fft.c:403:0
.Ltmp384:
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$24, %rsp
	ret
.Ltmp385:
.Ltmp386:
	.size	kiss_fft_cleanup, .Ltmp386-kiss_fft_cleanup
.Lfunc_end6:
	.cfi_endproc

	.globl	kiss_fft_next_fast_size
	.align	16, 0x90
	.type	kiss_fft_next_fast_size,@function
kiss_fft_next_fast_size:                # @kiss_fft_next_fast_size
	.cfi_startproc
.Lfunc_begin7:
	.loc	2 406 0                 # kiss_fft.c:406:0
# BB#0:
	pushq	%rbp
.Ltmp394:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp395:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp396:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp397:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp398:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp399:
	.cfi_def_cfa_offset 56
	subq	$1832, %rsp             # imm = 0x728
.Ltmp400:
	.cfi_def_cfa_offset 1888
.Ltmp401:
	.cfi_offset %rbx, -56
.Ltmp402:
	.cfi_offset %r12, -48
.Ltmp403:
	.cfi_offset %r13, -40
.Ltmp404:
	.cfi_offset %r14, -32
.Ltmp405:
	.cfi_offset %r15, -24
.Ltmp406:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str181843, %r8
	leaq	.L.str4666, %rdx
	movabsq	$407, %rsi              # imm = 0x197
	leaq	.L.str179841, %r9
	leaq	.L.str1663, %r10
	leaq	.L.str180842, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$24601, %r15            # imm = 0x6019
	movabsq	$32, %r12
	leaq	.L.str80742, %r13
	.loc	2 405 0 prologue_end    # kiss_fft.c:405:0
.Ltmp407:
	movq	%rsi, 1824(%rsp)        # 8-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movl	%edi, 1820(%rsp)        # 4-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 1808(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	1808(%rsp), %r15        # 8-byte Reload
	movq	%rdx, 1800(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 1784(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	1792(%rsp), %r12        # 8-byte Reload
	movq	%r9, 1776(%rsp)         # 8-byte Spill
	movq	%r12, %r9
	movq	1800(%rsp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movl	%r14d, 1772(%rsp)       # 4-byte Spill
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movl	%ebp, 1756(%rsp)        # 4-byte Spill
	movq	%r11, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+1820]
	.loc	2 407 0                 # kiss_fft.c:407:0
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1728(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1756(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1792(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1792(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
.Ltmp408:
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_2 Depth 2
                                        #     Child Loop BB7_4 Depth 2
                                        #     Child Loop BB7_6 Depth 2
	movl	1724(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str7669, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str184846, %r9
	movabsq	$3, %r10
	leaq	.L.str92754, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str179841, %r14
	leaq	.L.str181843, %r15
	leaq	.L.str183845, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str182844, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str80742, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str34696, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str86748, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 408 0                 # kiss_fft.c:408:0
.Ltmp409:
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1600(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1592(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1584(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1576(%rsp)         # 8-byte Spill
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1568(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1564(%rsp)        # 4-byte Spill
	movq	%r15, 1552(%rsp)        # 8-byte Spill
	movq	%r12, 1544(%rsp)        # 8-byte Spill
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movl	%r13d, 1536(%rsp)       # 4-byte Spill
	movq	%r14, 1528(%rsp)        # 8-byte Spill
	movq	%rbx, 1520(%rsp)        # 8-byte Spill
	movq	%r10, 1512(%rsp)        # 8-byte Spill
	movq	%r11, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp410:
	#DEBUG_VALUE: m <- [RSP+1564]
	.loc	2 409 0                 # kiss_fft.c:409:0
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1500(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1499(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
	jmp	.LBB7_3
.Ltmp411:
.LBB7_2:                                # %.lr.ph
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str123785, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str184846, %r9
	movabsq	$3, %r10
	leaq	.L.str92754, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str179841, %r14
	leaq	.L.str186848, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rcx
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 1456(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rcx
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movl	%eax, 1436(%rsp)        # 4-byte Spill
	movl	$2, %eax
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str185847, %rcx
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str182844, %rcx
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str181843, %rcx
	movq	%rcx, 1392(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1368(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1360(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1332(%rsp)        # 4-byte Spill
	movq	%r15, 1320(%rsp)        # 8-byte Spill
	movl	%ebp, 1316(%rsp)        # 4-byte Spill
	movl	%r12d, 1312(%rsp)       # 4-byte Spill
	movq	%r13, 1304(%rsp)        # 8-byte Spill
	movq	%r14, 1296(%rsp)        # 8-byte Spill
	movq	%rbx, 1288(%rsp)        # 8-byte Spill
	movq	%r10, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1332(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1268(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp412:
	#DEBUG_VALUE: m <- [RSP+1268]
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1264(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1263(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1268(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
.Ltmp413:
.LBB7_3:                                # %.loopexit
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str16678, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str190852, %r9
	movabsq	$3, %r10
	leaq	.L.str189851, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str179841, %r14
	leaq	.L.str184846, %r15
	leaq	.L.str188850, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str14676, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 1212(%rsp)        # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str187849, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str181843, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str182844, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str92754, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 410 0                 # kiss_fft.c:410:0
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1128(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1092(%rsp)        # 4-byte Spill
	movq	%r15, 1080(%rsp)        # 8-byte Spill
	movq	%r12, 1072(%rsp)        # 8-byte Spill
	movl	%ebp, 1068(%rsp)        # 4-byte Spill
	movl	%r13d, 1064(%rsp)       # 4-byte Spill
	movq	%r14, 1056(%rsp)        # 8-byte Spill
	movq	%rbx, 1048(%rsp)        # 8-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1092(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1028(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1027(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1212(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
	jmp	.LBB7_5
.LBB7_4:                                # %.lr.ph4
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str103765, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str190852, %r9
	movabsq	$3, %r10
	leaq	.L.str189851, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str179841, %r14
	leaq	.L.str192854, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str19681, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 980(%rsp)         # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str102764, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	.L.str191853, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str187849, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	leaq	.L.str184846, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 896(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 872(%rsp)          # 8-byte Spill
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	%r9, 864(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movq	%r15, 848(%rsp)         # 8-byte Spill
	movl	%ebp, 844(%rsp)         # 4-byte Spill
	movl	%r12d, 840(%rsp)        # 4-byte Spill
	movq	%r13, 832(%rsp)         # 8-byte Spill
	movq	%r14, 824(%rsp)         # 8-byte Spill
	movq	%rbx, 816(%rsp)         # 8-byte Spill
	movq	%r10, 808(%rsp)         # 8-byte Spill
	movq	%r11, 800(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 796(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp414:
	#DEBUG_VALUE: m <- [RSP+796]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 792(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 791(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	796(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
.Ltmp415:
.LBB7_5:                                # %.loopexit2
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str25687, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str86748, %r9
	movabsq	$3, %r10
	leaq	.L.str195857, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str179841, %r14
	leaq	.L.str190852, %r15
	leaq	.L.str194856, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str24686, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 740(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str193855, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str184846, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str187849, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str102764, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str189851, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 411 0                 # kiss_fft.c:411:0
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 648(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 640(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 632(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 624(%rsp)          # 8-byte Spill
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	%r9, 616(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 612(%rsp)         # 4-byte Spill
	movq	%r15, 600(%rsp)         # 8-byte Spill
	movq	%r12, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r13d, 584(%rsp)        # 4-byte Spill
	movq	%r14, 576(%rsp)         # 8-byte Spill
	movq	%rbx, 568(%rsp)         # 8-byte Spill
	movq	%r10, 560(%rsp)         # 8-byte Spill
	movq	%r11, 552(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	cltd
	movl	612(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 548(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 547(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	740(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
	jmp	.LBB7_7
.LBB7_6:                                # %.lr.ph7
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str108770, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str86748, %r9
	movabsq	$3, %r10
	leaq	.L.str195857, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str179841, %r14
	leaq	.L.str197859, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rcx
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 500(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str105767, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	leaq	.L.str196858, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	leaq	.L.str193855, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str190852, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 408(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 372(%rsp)         # 4-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp416:
	#DEBUG_VALUE: m <- [RSP+308]
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 304(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 303(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
.Ltmp417:
.LBB7_7:                                # %._crit_edge
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str130792, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str181843, %r9
	movabsq	$3, %r10
	leaq	.L.str37699, %r11
	movabsq	$412, %rbx              # imm = 0x19C
	leaq	.L.str179841, %r14
	leaq	.L.str86748, %r15
	leaq	.L.str199861, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str34696, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str182844, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$414, %rcx              # imm = 0x19E
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str198860, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str190852, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str193855, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str105767, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str195857, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 412 0                 # kiss_fft.c:412:0
.Ltmp418:
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 144(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 124(%rsp)         # 4-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	movl	%r13d, 96(%rsp)         # 4-byte Spill
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	setl	%al
.Ltmp419:
	.loc	2 414 0                 # kiss_fft.c:414:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 63(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	240(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 56(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp420:
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+56]
	.loc	2 412 0                 # kiss_fft.c:412:0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movl	56(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
	jne	.LBB7_8
	jmp	.LBB7_1
.Ltmp421:
.LBB7_8:
	movabsq	$1, %rax
	movabsq	$32, %rsi
	leaq	.L.str182844, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %rcx
	movabsq	$416, %rdi              # imm = 0x1A0
	leaq	.L.str179841, %rdx
	leaq	.L.str37699, %r10
	leaq	.L.str39701, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 416 0                 # kiss_fft.c:416:0
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movl	1564(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	addq	$1832, %rsp             # imm = 0x728
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp422:
.Ltmp423:
	.size	kiss_fft_next_fast_size, .Ltmp423-kiss_fft_next_fast_size
.Lfunc_end7:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_factor,@function
kf_factor:                              # @kf_factor
	.cfi_startproc
.Lfunc_begin8:
	.loc	2 318 0                 # kiss_fft.c:318:0
# BB#0:
	pushq	%rbp
.Ltmp431:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp432:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp433:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp434:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp435:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp436:
	.cfi_def_cfa_offset 56
	subq	$1608, %rsp             # imm = 0x648
.Ltmp437:
	.cfi_def_cfa_offset 1664
.Ltmp438:
	.cfi_offset %rbx, -56
.Ltmp439:
	.cfi_offset %r12, -48
.Ltmp440:
	.cfi_offset %r13, -40
.Ltmp441:
	.cfi_offset %r14, -32
.Ltmp442:
	.cfi_offset %r15, -24
.Ltmp443:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: kf_factor:facbuf <- RSI
	#DEBUG_VALUE: kf_factor:n <- EDI
	movl	$4, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str84746, %r8
	leaq	.L.str4666, %r9
	movabsq	$324, %r10              # imm = 0x144
	leaq	.L.str77739, %r11
	leaq	.L.str1663, %rbx
	leaq	.L.str83745, %r14
	movabsq	$2, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	leaq	floor, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str82744, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	movabsq	$321, %rcx              # imm = 0x141
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str81743, %rcx
	.loc	2 317 0 prologue_end    # kiss_fft.c:317:0
.Ltmp444:
	movl	%eax, 1524(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str80742, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1504(%rsp)        # 8-byte Spill
.Ltmp445:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+1504]
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%edi, 1460(%rsp)        # 4-byte Spill
.Ltmp446:
	#DEBUG_VALUE: kf_factor:n <- [RSP+1460]
	movq	%rax, %rdi
	movq	1488(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1456(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1424(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1420(%rsp)       # 4-byte Spill
	movq	%r13, 1408(%rsp)        # 8-byte Spill
	movq	%r15, 1400(%rsp)        # 8-byte Spill
	movl	%ebp, 1396(%rsp)        # 4-byte Spill
	movq	%r14, 1384(%rsp)        # 8-byte Spill
	movq	%rbx, 1376(%rsp)        # 8-byte Spill
	movq	%r10, 1368(%rsp)        # 8-byte Spill
	movq	%r11, 1360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp447:
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str87749, %ebp
	movl	%ebp, %r8d
	movl	$64, %ebp
	movl	%ebp, %esi
	movq	1496(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
.Ltmp448:
	#DEBUG_VALUE: kf_factor:p <- 4
	.loc	2 321 0                 # kiss_fft.c:321:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str77739, %ebp
	movl	%ebp, %esi
	movl	$.L.str1663, %ebp
	movl	%ebp, %edx
	movl	$.L.str2664, %ebp
	movl	%ebp, %ecx
	movl	$321, %ebp              # imm = 0x141
	movl	%ebp, %edi
	movl	$39, %ebp
	movl	%ebp, %r8d
	movl	1456(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	1460(%rsp), %ebp        # 4-byte Reload
	vcvtsi2sdl	%ebp, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1344(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1568(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1344(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
                                        # implicit-def: XMM0
	vmovsd	1344(%rsp), %xmm1       # 8-byte Reload
	vroundsd	$1, %xmm1, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1336(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp449:
	#DEBUG_VALUE: kf_factor:floor_sqrt <- [RSP+1336]
	.loc	2 324 0                 # kiss_fft.c:324:0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	1524(%rsp), %ebp        # 4-byte Reload
	movl	1460(%rsp), %r12d       # 4-byte Reload
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r12d, 1320(%rsp)       # 4-byte Spill
.Ltmp450:
.LBB8_1:                                # %.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_2 Depth 2
	movl	1320(%rsp), %eax        # 4-byte Reload
	movl	1324(%rsp), %ecx        # 4-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movabsq	$1, %rsi
	leaq	.L.str9671, %rdi
	movabsq	$0, %r8
	leaq	.L.str4666, %r9
	movabsq	$2, %r10
	leaq	.L.str92754, %r11
	movabsq	$3, %rbx
	leaq	.L.str86748, %r14
	movabsq	$325, %r15              # imm = 0x145
	leaq	.L.str77739, %r12
	leaq	.L.str84746, %r13
	leaq	.L.str91753, %rbp
	movl	%eax, 1316(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1312(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 1304(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 1296(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rdx
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rdx
	movq	%rdx, 1272(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str90752, %rdx
	movq	%rdx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str88750, %rdx
	movq	%rdx, 1248(%rsp)        # 8-byte Spill
	movabsq	$18, %rdx
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rdx
	movq	%rdx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str80742, %rdx
	movq	%rdx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str25687, %rdx
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 1200(%rsp)        # 8-byte Spill
	movabsq	$4, %rdx
	movq	%rdx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str89751, %rdx
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str85747, %rdx
	movq	%rdx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str87749, %rdx
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str28690, %rdx
	.loc	2 325 0                 # kiss_fft.c:325:0
.Ltmp451:
	movq	%rdx, 1152(%rsp)        # 8-byte Spill
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 1144(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 1128(%rsp)         # 8-byte Spill
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 1124(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	movl	1312(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1104(%rsp)        # 8-byte Spill
	movq	%r12, 1096(%rsp)        # 8-byte Spill
	movq	%r13, 1088(%rsp)        # 8-byte Spill
	movq	%rbp, 1080(%rsp)        # 8-byte Spill
	movq	%r14, 1072(%rsp)        # 8-byte Spill
	movq	%rbx, 1064(%rsp)        # 8-byte Spill
	movq	%r10, 1056(%rsp)        # 8-byte Spill
	movq	%r11, 1048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1460(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1124(%rsp), %esi        # 4-byte Reload
	idivl	%esi
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1044(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1043(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
.LBB8_2:                                # %.lr.ph
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1036(%rsp), %eax        # 4-byte Reload
	movl	$2, %ecx
	.loc	2 326 0                 # kiss_fft.c:326:0
.Ltmp452:
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str77739, %esi
	movl	%esi, %edx
	movl	$.L.str92754, %esi
	movl	%esi, %edi
	movl	$.L.str93755, %esi
	movl	%esi, %r8d
	movl	$48, %esi
	movl	%esi, %r9d
	movq	$-1, %r10
	xorl	%esi, %esi
	movq	%rdi, 1024(%rsp)        # 8-byte Spill
	movq	%r10, %rdi
	movl	%esi, 1020(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1024(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 1004(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	%r8, 992(%rsp)          # 8-byte Spill
	movq	%r9, %r8
	movl	1020(%rsp), %r9d        # 4-byte Reload
	movl	%eax, 988(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str84746, (%rcx)
	movl	$.L.str88750, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	1020(%rsp), %eax        # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, 976(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 968(%rsp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	968(%rsp), %r10         # 8-byte Reload
	movq	%rdx, 960(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	976(%rsp), %r11         # 8-byte Reload
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str95757, (%rcx)
	movl	$.L.str94756, %eax
	movl	%eax, %r8d
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str95757, %eax
	movl	%eax, %r8d
	movl	988(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str95757, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	976(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	992(%rsp), %r10         # 8-byte Reload
	movq	%r8, 936(%rsp)          # 8-byte Spill
	movq	%r10, %r8
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str96758, %eax
	movl	%eax, %ecx
	movl	$326, %eax              # imm = 0x146
	movl	%eax, %edi
	movl	$3, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 928(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	1020(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movl	$.L.str97759, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movl	$.L.str3665, %eax
	movl	%eax, %ecx
	movl	$5, %eax
	movl	%eax, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movl	$4, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movl	$.L.str98760, %eax
	movl	%eax, %r8d
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$4, %eax
	movl	$2, %ebx
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%ebx, 904(%rsp)         # 4-byte Spill
	je	.LBB8_5
	jmp	.LBB8_8
.LBB8_8:                                # %.lr.ph
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 900(%rsp)         # 4-byte Spill
	jne	.LBB8_4
	jmp	.LBB8_3
.LBB8_3:                                #   in Loop: Header=BB8_2 Depth=2
	movl	$3, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str95757, %r8
	leaq	.L.str4666, %rsi
	movabsq	$328, %rdi              # imm = 0x148
	leaq	.L.str77739, %r9
	leaq	.L.str97759, %r10
	leaq	.L.str99761, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
.Ltmp453:
	#DEBUG_VALUE: kf_factor:p <- 3
	.loc	2 328 0                 # kiss_fft.c:328:0
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movl	%r14d, 856(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	888(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	860(%rsp), %eax         # 4-byte Reload
	movl	%eax, 904(%rsp)         # 4-byte Spill
	jmp	.LBB8_5
.LBB8_4:                                #   in Loop: Header=BB8_2 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str95757, %r8
	leaq	.L.str4666, %rdx
	movabsq	$329, %rsi              # imm = 0x149
	leaq	.L.str77739, %rdi
	leaq	.L.str98760, %r9
	leaq	.L.str100762, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str16678, %r12
	leaq	.L.str93755, %r13
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 329 0                 # kiss_fft.c:329:0
	movq	%rdi, 832(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movq	832(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 776(%rsp)         # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r13, 744(%rsp)         # 8-byte Spill
	movl	%ebx, 740(%rsp)         # 4-byte Spill
	movq	%r10, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	addl	$2, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 716(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp454:
	#DEBUG_VALUE: kf_factor:p <- [RSP+716]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movl	740(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	716(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, 904(%rsp)         # 4-byte Spill
.Ltmp455:
.LBB8_5:                                # %.backedge
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	904(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str24686, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str92754, %r9
	movabsq	$3, %r10
	leaq	.L.str86748, %r11
	movabsq	$325, %rbx              # imm = 0x145
	leaq	.L.str77739, %r14
	leaq	.L.str95757, %r15
	leaq	.L.str104766, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str103765, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str90752, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	leaq	.L.str94756, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	leaq	.L.str19681, %rcx
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	leaq	.L.str101763, %rcx
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movabsq	$331, %rcx              # imm = 0x14B
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	leaq	.L.str102764, %rcx
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	leaq	.L.str7669, %rcx
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movabsq	$47, %rcx
	.loc	2 331 0                 # kiss_fft.c:331:0
.Ltmp456:
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str77739, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, 572(%rsp)         # 4-byte Spill
	movl	$.L.str95757, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$.L.str101763, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 544(%rsp)         # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 536(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 524(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 512(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	552(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	524(%rsp), %eax         # 4-byte Reload
	movq	%r9, 488(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movq	%r15, 480(%rsp)         # 8-byte Spill
	movl	%r13d, 476(%rsp)        # 4-byte Spill
	movq	%r12, 464(%rsp)         # 8-byte Spill
	movl	%ebp, 460(%rsp)         # 4-byte Spill
	movq	%r14, 448(%rsp)         # 8-byte Spill
	movq	%rbx, 440(%rsp)         # 8-byte Spill
	movq	%r10, 432(%rsp)         # 8-byte Spill
	movq	%r11, 424(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str92754, (%rcx)
	movl	$.L.str3665, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movl	%eax, %edx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$2, %eax
	movl	%eax, %edi
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r8d
	movl	$1, %r9d
	movl	%r9d, %r10d
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	416(%rsp), %r11         # 8-byte Reload
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %rbx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r10, %r9
	movq	%r10, 376(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str97759, (%rcx)
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str98760, (%rcx)
	movl	$.L.str16678, %eax
	movl	%eax, %r8d
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	572(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	%rsp, %rdx
	movq	$.L.str98760, (%rdx)
	movl	$19134, %ebp            # imm = 0x4ABE
	movl	%ebp, %edi
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str102764, %eax
	movl	%eax, %ecx
	movl	$331, %eax              # imm = 0x14B
	movl	%eax, %edi
	movl	$39, %eax
	movl	%eax, %r8d
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movl	524(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4666, (%rcx)
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	572(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 360(%rsp)        # 8-byte Spill
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	2 332 0                 # kiss_fft.c:332:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 359(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
.Ltmp457:
	#DEBUG_VALUE: kf_factor:p <- [RSP+1316]
	.loc	2 331 0                 # kiss_fft.c:331:0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	572(%rsp), %r13d        # 4-byte Reload
	cmovel	%r13d, %ebp
.Ltmp458:
	.loc	2 325 0                 # kiss_fft.c:325:0
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 352(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	352(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	352(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 348(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 347(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	352(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
	jmp	.LBB8_2
.Ltmp459:
.LBB8_6:                                # %._crit_edge
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	1036(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str108770, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str18680, %r9
	movabsq	$3, %r10
	leaq	.L.str84746, %r11
	movabsq	$337, %rbx              # imm = 0x151
	leaq	.L.str77739, %r14
	leaq	.L.str86748, %r15
	leaq	.L.str109771, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	leaq	.L.str25687, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	leaq	.L.str105767, %rcx
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$336, %rcx              # imm = 0x150
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str107769, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	leaq	.L.str85747, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str89751, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$335, %rcx              # imm = 0x14F
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str106768, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str90752, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$334, %rcx              # imm = 0x14E
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str88750, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	.L.str94756, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str95757, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 334 0                 # kiss_fft.c:334:0
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	%r15, 88(%rsp)          # 8-byte Spill
	movq	%r12, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r13d, 72(%rsp)         # 4-byte Spill
	movq	%r14, 64(%rsp)          # 8-byte Spill
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movq	%r11, 40(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	100(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 36(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp460:
	#DEBUG_VALUE: kf_factor:n <- [RSP+36]
	.loc	2 335 0                 # kiss_fft.c:335:0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp461:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+24]
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rcx)
	.loc	2 336 0                 # kiss_fft.c:336:0
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp462:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+16]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, 4(%rcx)
	.loc	2 337 0                 # kiss_fft.c:337:0
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	100(%rsp), %ebp         # 4-byte Reload
	movl	36(%rsp), %r13d         # 4-byte Reload
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r13d, 1320(%rsp)       # 4-byte Spill
	jne	.LBB8_1
.Ltmp463:
# BB#7:
	movabsq	$338, %rdi              # imm = 0x152
	leaq	.L.str77739, %rsi
	leaq	.L.str18680, %rdx
	leaq	.L.str35697, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 338 0                 # kiss_fft.c:338:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$1608, %rsp             # imm = 0x648
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp464:
.Ltmp465:
	.size	kf_factor, .Ltmp465-kf_factor
.Lfunc_end8:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_work,@function
kf_work:                                # @kf_work
	.cfi_startproc
.Lfunc_begin9:
	.loc	2 252 0                 # kiss_fft.c:252:0
# BB#0:
	pushq	%rbp
.Ltmp473:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp474:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp475:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp476:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp477:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp478:
	.cfi_def_cfa_offset 56
	subq	$3256, %rsp             # imm = 0xCB8
.Ltmp479:
	.cfi_def_cfa_offset 3312
.Ltmp480:
	.cfi_offset %rbx, -56
.Ltmp481:
	.cfi_offset %r12, -48
.Ltmp482:
	.cfi_offset %r13, -40
.Ltmp483:
	.cfi_offset %r14, -32
.Ltmp484:
	.cfi_offset %r15, -24
.Ltmp485:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str19681, %r10
	movabsq	$0, %r11
	leaq	.L.str4666, %rbx
	movabsq	$2, %r14
	leaq	.L.str126788, %r15
	movabsq	$3, %r12
	leaq	.L.str125787, %r13
	movabsq	$283, %rbp              # imm = 0x11B
	movq	%rax, 3248(%rsp)        # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 3240(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 3232(%rsp)        # 8-byte Spill
	leaq	.L.str124786, %rax
	movl	%ecx, 3228(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3224(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3216(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3208(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3176(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	movabsq	$257, %rax              # imm = 0x101
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str14676, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$256, %rax              # imm = 0x100
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str122784, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$255, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str121783, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$254, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$253, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str118780, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	.loc	2 245 0 prologue_end    # kiss_fft.c:245:0
.Ltmp486:
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2960(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2952(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 2948(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3016(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2928(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 2920(%rsp)        # 8-byte Spill
	movq	%rbx, 2912(%rsp)        # 8-byte Spill
	movq	%r14, 2904(%rsp)        # 8-byte Spill
	movq	%r15, 2896(%rsp)        # 8-byte Spill
	movq	%r12, 2888(%rsp)        # 8-byte Spill
	movq	%rbp, 2880(%rsp)        # 8-byte Spill
	movq	%r10, 2872(%rsp)        # 8-byte Spill
	movq	%r11, 2864(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kf_work:Fout <- [RSP+2968]
	#DEBUG_VALUE: kf_work:f <- [RSP+2960]
	#DEBUG_VALUE: kf_work:fstride <- [RSP+2952]
	#DEBUG_VALUE: kf_work:in_stride <- [RSP+3228]
	#DEBUG_VALUE: kf_work:factors <- [RSP+2936]
	#DEBUG_VALUE: kf_work:st <- [RSP+2928]
	.loc	2 253 0                 # kiss_fft.c:253:0
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2856(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp487:
	#DEBUG_VALUE: kf_work:Fout_beg <- [RSP+2856]
	.loc	2 254 0                 # kiss_fft.c:254:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2848(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp488:
	#DEBUG_VALUE: kf_work:f_beg <- [RSP+2848]
	.loc	2 255 0                 # kiss_fft.c:255:0
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp489:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2840]
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2836(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp490:
	#DEBUG_VALUE: kf_work:p <- [RSP+2836]
	.loc	2 256 0                 # kiss_fft.c:256:0
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp491:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2824]
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2820(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp492:
	#DEBUG_VALUE: kf_work:m <- [RSP+2820]
	.loc	2 257 0                 # kiss_fft.c:257:0
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2836(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	2836(%rsp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2816(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2816(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2816(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3160(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2808(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	2856(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2800(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp493:
	#DEBUG_VALUE: kf_work:Fout_end <- [RSP+2800]
	.loc	2 283 0                 # kiss_fft.c:283:0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2864(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2864(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_2
.Ltmp494:
# BB#1:                                 # %.preheader1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str129791, %r8
	leaq	.L.str4666, %rdx
	movabsq	$294, %rsi              # imm = 0x126
	leaq	.L.str117779, %rdi
	leaq	.L.str126788, %r9
	leaq	.L.str128790, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str28690, %r12
	movabsq	$32, %r13
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	movabsq	$296, %rax              # imm = 0x128
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	leaq	.L.str25687, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$295, %rax              # imm = 0x127
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str118780, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp495:
	movq	%rdi, 2688(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movq	2688(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2672(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2664(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2760(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2648(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2640(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2632(%rsp)        # 8-byte Spill
	movl	%ebp, 2628(%rsp)        # 4-byte Spill
	movq	%r15, 2616(%rsp)        # 8-byte Spill
	movq	%r12, 2608(%rsp)        # 8-byte Spill
	movq	%r13, 2600(%rsp)        # 8-byte Spill
	movl	%ebx, 2596(%rsp)        # 4-byte Spill
	movq	%r10, 2584(%rsp)        # 8-byte Spill
	movq	%r11, 2576(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2836(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2552(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2752(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_4
.Ltmp496:
.LBB9_2:                                # %.preheader
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str132794, %r8
	leaq	.L.str4666, %rdx
	movabsq	$285, %rdi              # imm = 0x11D
	leaq	.L.str117779, %rsi
	leaq	.L.str125787, %r9
	leaq	.L.str131793, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str130792, %r12
	leaq	.L.str108770, %r13
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	leaq	.L.str118780, %rax
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	2 286 0                 # kiss_fft.c:286:0
.Ltmp497:
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	movq	2512(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2472(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2464(%rsp)        # 8-byte Spill
	movq	%rdx, 2456(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2448(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2480(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2440(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2432(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2424(%rsp)        # 8-byte Spill
	movl	%ebp, 2420(%rsp)        # 4-byte Spill
	movq	%r15, 2408(%rsp)        # 8-byte Spill
	movq	%r13, 2400(%rsp)        # 8-byte Spill
	movq	%r12, 2392(%rsp)        # 8-byte Spill
	movl	%ebx, 2388(%rsp)        # 4-byte Spill
	movq	%r10, 2376(%rsp)        # 8-byte Spill
	movq	%r11, 2368(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	3228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2496(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2504(%rsp), %r8         # 8-byte Reload
	movl	2388(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	2360(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2360(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 285 0                 # kiss_fft.c:285:0
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2388(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.LBB9_3:                                # =>This Inner Loop Header: Depth=1
	movabsq	$1, %rax
	leaq	.L.str55717, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str132794, %r8
	movabsq	$3, %r9
	leaq	.L.str140802, %r10
	movabsq	$287, %r11              # imm = 0x11F
	leaq	.L.str117779, %rbx
	leaq	.L.str139801, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str138800, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str53715, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str136798, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str121783, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str137799, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str135797, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	movabsq	$285, %rax              # imm = 0x11D
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str134796, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movq	2136(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2080(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2072(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2056(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2048(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2044(%rsp)        # 4-byte Spill
	movl	%r15d, 2040(%rsp)       # 4-byte Spill
	movq	%r12, 2032(%rsp)        # 8-byte Spill
	movq	%r13, 2024(%rsp)        # 8-byte Spill
	movq	%r14, 2016(%rsp)        # 8-byte Spill
	movq	%rbx, 2008(%rsp)        # 8-byte Spill
	movq	%r10, 2000(%rsp)        # 8-byte Spill
	movq	%r11, 1992(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1984(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1976(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2176(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	.loc	2 286 0                 # kiss_fft.c:286:0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1952(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	1952(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 287 0                 # kiss_fft.c:287:0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1936(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1936(%rsp), %rax        # 8-byte Reload
	addq	$16, %rax
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	2800(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	2072(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2072(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_3
.Ltmp498:
.LBB9_4:                                # =>This Inner Loop Header: Depth=1
	movabsq	$6, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str115777, %r8
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$5, %r9
	leaq	.L.str9671, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	leaq	.L.str118780, %r14
	movabsq	$3, %r15
	leaq	.L.str24686, %r12
	movabsq	$2, %r13
	leaq	.L.str121783, %rbp
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$294, %rax              # imm = 0x126
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str129791, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str141803, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1848(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1844(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp499:
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1880(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1820(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1792(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1844(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1784(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1776(%rsp)        # 8-byte Spill
	movq	%r15, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%r12, 1752(%rsp)        # 8-byte Spill
	movq	%r13, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	movq	%r11, 1720(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	1888(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movl	3228(%rsp), %ecx        # 4-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	callq	kf_work
	movabsq	$1, %rdx
	leaq	.L.str145807, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4666, %r8
	movabsq	$2, %r9
	leaq	.L.str129791, %r10
	movabsq	$3, %r11
	leaq	.L.str140802, %rbx
	movabsq	$296, %r14              # imm = 0x128
	leaq	.L.str117779, %r15
	leaq	.L.str146808, %rcx
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str61723, %rcx
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str102764, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str144806, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str143805, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str28690, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str58720, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str121783, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$295, %rcx              # imm = 0x127
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str142804, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str57719, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str105767, %rcx
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1576(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1568(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1560(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1552(%rsp)         # 8-byte Spill
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1544(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movq	%r12, 1528(%rsp)        # 8-byte Spill
	movq	%r13, 1520(%rsp)        # 8-byte Spill
	movl	%eax, 1516(%rsp)        # 4-byte Spill
	movq	%r15, 1504(%rsp)        # 8-byte Spill
	movq	%r10, 1496(%rsp)        # 8-byte Spill
	movq	%r11, 1488(%rsp)        # 8-byte Spill
	movq	%rbx, 1480(%rsp)        # 8-byte Spill
	movq	%r14, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2544(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1464(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2536(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1448(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1440(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1439(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_4
.Ltmp500:
.LBB9_5:                                # %.loopexit
	.loc	2 299 0                 # kiss_fft.c:299:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str117779, %ecx
	movl	%ecx, %eax
	movl	$.L.str140802, %ecx
	movl	%ecx, %edx
	movl	$.L.str147809, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	$299, %esi              # imm = 0x12B
	movl	%esi, %edi
	movl	$28, %esi
	movl	%esi, %r8d
	xorl	%esi, %esi
	movl	%esi, 1432(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	%r8, 1416(%rsp)         # 8-byte Spill
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str120782, %r9d
	movl	%r9d, %r8d
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movq	%rax, %rdi
	movq	%rsi, 1400(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	2968(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1392(%rsp), %r11        # 8-byte Reload
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str2664, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 300 0                 # kiss_fft.c:300:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str148810, %ebx
	movl	%ebx, %ecx
	movl	$300, %ebx              # imm = 0x12C
	movl	%ebx, %edi
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str121783, %r9d
	movl	%r9d, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str6668, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2848(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 303 0                 # kiss_fft.c:303:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str149811, %ebx
	movl	%ebx, %ecx
	movl	$303, %ebx              # imm = 0x12F
	movl	%ebx, %edi
	movl	$3, %ebx
	movl	%ebx, %edx
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str150812, %r9d
	movl	%r9d, %r8d
	movl	$10, %r9d
	movl	%r9d, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str3665, %ebx
	movl	%ebx, %eax
	movl	$9, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %ecx
	movl	$5, %ebx
	movl	%ebx, %edx
	movq	%rcx, %rsi
	movq	%rdx, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str36698, %ebx
	movl	%ebx, %r8d
	movl	$8, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$7, %ebx
	movl	%ebx, %edi
	movl	$4, %ebx
	movl	%ebx, %eax
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str151813, %ebx
	movl	%ebx, %r8d
	movl	$6, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str152814, %ebx
	movl	%ebx, %r8d
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str153815, %ebx
	movl	%ebx, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rax
	movq	$.L.str4666, (%rax)
	movl	$.L.str8670, %ebp
	movl	%ebp, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	addl	$-2, %ebx
	movl	%ebx, %eax
	subl	$3, %ebx
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebx, 1324(%rsp)        # 4-byte Spill
	ja	.LBB9_10
# BB#12:                                # %.loopexit
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	.LJTI9_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB9_6:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str123785, %r8
	movabsq	$0, %rcx
	leaq	.L.str4666, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str115777, %r11
	movabsq	$2, %rbx
	leaq	.L.str127789, %r14
	leaq	.L.str66728, %r15
	movabsq	$5, %r12
	leaq	kf_bfly2, %r13
	leaq	.L.str155817, %rbp
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$304, %rax              # imm = 0x130
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str152814, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str154816, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1272(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1268(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 304 0                 # kiss_fft.c:304:0
.Ltmp501:
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1296(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1220(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1268(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1176(%rsp)        # 8-byte Spill
	movq	%r13, 1168(%rsp)        # 8-byte Spill
	movq	%r14, 1160(%rsp)        # 8-byte Spill
	movq	%r15, 1152(%rsp)        # 8-byte Spill
	movq	%r12, 1144(%rsp)        # 8-byte Spill
	movq	%rbx, 1136(%rsp)        # 8-byte Spill
	movq	%r10, 1128(%rsp)        # 8-byte Spill
	movq	%r11, 1120(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1268(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly2
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157819, %r8
	leaq	.L.str4666, %rdi
	movabsq	$304, %r9               # imm = 0x130
	leaq	.L.str117779, %r10
	leaq	.L.str152814, %r11
	leaq	.L.str156818, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 1104(%rsp)        # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 1096(%rsp)        # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1076(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_7:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str75737, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %r8
	movabsq	$3, %r9
	leaq	.L.str115777, %r10
	movabsq	$2, %r11
	leaq	.L.str127789, %rbx
	leaq	.L.str70732, %r14
	movabsq	$5, %r15
	leaq	kf_bfly3, %r12
	leaq	.L.str159821, %r13
	movabsq	$305, %rbp              # imm = 0x131
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str151813, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str158820, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1032(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1028(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 305 0                 # kiss_fft.c:305:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movq	1056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 956(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	1048(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1028(%rsp), %eax        # 4-byte Reload
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 912(%rsp)         # 8-byte Spill
	movq	%r15, 904(%rsp)         # 8-byte Spill
	movq	%r12, 896(%rsp)         # 8-byte Spill
	movq	%r13, 888(%rsp)         # 8-byte Spill
	movq	%r14, 880(%rsp)         # 8-byte Spill
	movq	%rbx, 872(%rsp)         # 8-byte Spill
	movq	%r10, 864(%rsp)         # 8-byte Spill
	movq	%r11, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly3
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str157819, %r8
	leaq	.L.str4666, %rsi
	movabsq	$305, %rdi              # imm = 0x131
	leaq	.L.str117779, %r9
	leaq	.L.str151813, %r10
	leaq	.L.str160822, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 824(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 808(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 804(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_8:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str162824, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %r8
	movabsq	$3, %r9
	leaq	.L.str115777, %r10
	movabsq	$2, %r11
	leaq	.L.str127789, %rbx
	leaq	.L.str161823, %r14
	movabsq	$5, %r15
	leaq	kf_bfly4, %r12
	leaq	.L.str163825, %r13
	movabsq	$306, %rbp              # imm = 0x132
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str36698, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str79741, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 760(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 756(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 306 0                 # kiss_fft.c:306:0
	movq	%rdi, 696(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movl	%esi, 684(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	776(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	%r8, 656(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	756(%rsp), %eax         # 4-byte Reload
	movq	%r9, 648(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 640(%rsp)         # 8-byte Spill
	movq	%r15, 632(%rsp)         # 8-byte Spill
	movq	%r12, 624(%rsp)         # 8-byte Spill
	movq	%r13, 616(%rsp)         # 8-byte Spill
	movq	%r14, 608(%rsp)         # 8-byte Spill
	movq	%rbx, 600(%rsp)         # 8-byte Spill
	movq	%r10, 592(%rsp)         # 8-byte Spill
	movq	%r11, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 576(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly4
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str157819, %r8
	leaq	.L.str4666, %rsi
	movabsq	$306, %rdi              # imm = 0x132
	leaq	.L.str117779, %r9
	leaq	.L.str36698, %r10
	leaq	.L.str164826, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 532(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	552(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	552(%rsp), %r9          # 8-byte Reload
	movq	560(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_9:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str123785, %r8
	movabsq	$0, %rcx
	leaq	.L.str4666, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str115777, %r11
	movabsq	$2, %rbx
	leaq	.L.str127789, %r14
	leaq	.L.str165827, %r15
	movabsq	$5, %r12
	leaq	kf_bfly5, %r13
	leaq	.L.str167829, %rbp
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movabsq	$307, %rax              # imm = 0x133
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str150812, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str166828, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 307 0                 # kiss_fft.c:307:0
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	504(%rsp), %rax         # 8-byte Reload
	movl	%esi, 428(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	496(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 400(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 392(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 384(%rsp)         # 8-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movq	%r12, 352(%rsp)         # 8-byte Spill
	movq	%rbx, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	480(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly5
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157819, %r8
	leaq	.L.str4666, %rdi
	movabsq	$307, %r9               # imm = 0x133
	leaq	.L.str117779, %r10
	leaq	.L.str150812, %r11
	leaq	.L.str168830, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 312(%rsp)         # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 304(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 288(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 284(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	296(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_10:
	movabsq	$5, %rdi
	movabsq	$32, %rax
	movabsq	$1, %rcx
	leaq	.L.str8670, %r8
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$4, %r9
	leaq	.L.str123785, %r10
	movabsq	$3, %r11
	movabsq	$64, %rbx
	leaq	.L.str115777, %r14
	movabsq	$2, %r15
	leaq	.L.str127789, %r12
	leaq	.L.str169831, %r13
	movabsq	$6, %rbp
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	kf_bfly_generic, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str171833, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$308, %rax              # imm = 0x134
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str117779, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str153815, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	.L.str170832, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 212(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 308 0                 # kiss_fft.c:308:0
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	%esi, 164(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	212(%rsp), %eax         # 4-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 120(%rsp)         # 8-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r12, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	212(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2836(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	movl	2836(%rsp), %r8d        # 4-byte Reload
	callq	kf_bfly_generic
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157819, %r8
	leaq	.L.str4666, %rdi
	movabsq	$308, %r9               # imm = 0x134
	leaq	.L.str117779, %r10
	leaq	.L.str153815, %r11
	leaq	.L.str172834, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp502:
.LBB9_11:
	movabsq	$310, %rdi              # imm = 0x136
	leaq	.L.str117779, %rsi
	leaq	.L.str157819, %rdx
	leaq	.L.str173835, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 310 0                 # kiss_fft.c:310:0
	movl	$1, (%rsp)
	movl	%eax, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3256, %rsp             # imm = 0xCB8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp503:
.Ltmp504:
	.size	kf_work, .Ltmp504-kf_work
.Lfunc_end9:
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI9_0:
	.quad	.LBB9_6
	.quad	.LBB9_7
	.quad	.LBB9_8
	.quad	.LBB9_9

	.text
	.align	16, 0x90
	.type	kf_bfly_generic,@function
kf_bfly_generic:                        # @kf_bfly_generic
	.cfi_startproc
.Lfunc_begin10:
	.loc	2 211 0                 # kiss_fft.c:211:0
# BB#0:
	pushq	%rbp
.Ltmp512:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp513:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp514:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp515:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp516:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp517:
	.cfi_def_cfa_offset 56
	subq	$3448, %rsp             # imm = 0xD78
.Ltmp518:
	.cfi_def_cfa_offset 3504
.Ltmp519:
	.cfi_offset %rbx, -56
.Ltmp520:
	.cfi_offset %r12, -48
.Ltmp521:
	.cfi_offset %r13, -40
.Ltmp522:
	.cfi_offset %r14, -32
.Ltmp523:
	.cfi_offset %r15, -24
.Ltmp524:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$64, %r9
	leaq	.L.str8670, %r10
	movabsq	$0, %r11
	leaq	.L.str4666, %rbx
	movabsq	$2, %r14
	leaq	malloc, %r15
	leaq	.L.str15677, %r12
	movabsq	$217, %r13
	leaq	.L.str171833, %rbp
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 3420(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3416(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	leaq	.L.str3941056, %rax
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	movabsq	$215, %rax
	movq	%rax, 3320(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3280(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 3272(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 3264(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	.loc	2 205 0 prologue_end    # kiss_fft.c:205:0
.Ltmp525:
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3280(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3240(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3232(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3440(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3228(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movl	%r8d, 3224(%rsp)        # 4-byte Spill
	movq	%rax, %r8
	movq	%r9, 3216(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 3208(%rsp)        # 8-byte Spill
	movq	%r14, 3200(%rsp)        # 8-byte Spill
	movq	%r15, 3192(%rsp)        # 8-byte Spill
	movq	%r12, 3184(%rsp)        # 8-byte Spill
	movq	%rbp, 3176(%rsp)        # 8-byte Spill
	movq	%rbx, 3168(%rsp)        # 8-byte Spill
	movq	%r10, 3160(%rsp)        # 8-byte Spill
	movq	%r11, 3152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3420(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3272(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly_generic:Fout <- [RSP+3248]
	#DEBUG_VALUE: kf_bfly_generic:fstride <- [RSP+3240]
	#DEBUG_VALUE: kf_bfly_generic:st <- [RSP+3232]
	#DEBUG_VALUE: kf_bfly_generic:m <- [RSP+3420]
	#DEBUG_VALUE: kf_bfly_generic:p <- [RSP+3224]
	.loc	2 215 0                 # kiss_fft.c:215:0
	movq	3320(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3296(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3152(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3152(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3320(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3336(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 3148(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp526:
	#DEBUG_VALUE: kf_bfly_generic:Norig <- [RSP+3148]
	.loc	2 217 0                 # kiss_fft.c:217:0
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3160(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3384(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3128(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3128(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp527:
	movabsq	$1, %rcx
	leaq	.L.str14676, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r8
	leaq	.L.str3961058, %r9
	movabsq	$3, %r10
	leaq	.L.str3951057, %r11
	movabsq	$219, %rbx
	leaq	.L.str171833, %r14
	leaq	.L.str1663, %r15
	leaq	.L.str119781, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$217, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	movq	3112(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3032(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3024(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3120(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3016(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 3008(%rsp)        # 8-byte Spill
	movq	3056(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3000(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	3024(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2992(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 2984(%rsp)        # 8-byte Spill
	movq	%r12, 2976(%rsp)        # 8-byte Spill
	movl	%ebp, 2972(%rsp)        # 4-byte Spill
	movl	%r13d, 2968(%rsp)       # 4-byte Spill
	movq	%r14, 2960(%rsp)        # 8-byte Spill
	movq	%rbx, 2952(%rsp)        # 8-byte Spill
	movq	%r10, 2944(%rsp)        # 8-byte Spill
	movq	%r11, 2936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3120(%rsp), %rax        # 8-byte Reload
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp528:
	#DEBUG_VALUE: kf_bfly_generic:scratch <- [RSP+2928]
	#DEBUG_VALUE: kf_bfly_generic:u <- 0
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_1
	jmp	.LBB10_10
.Ltmp529:
.LBB10_1:                               # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str3981060, %r8
	leaq	.L.str4666, %rdx
	movabsq	$219, %rdi
	leaq	.L.str171833, %rsi
	leaq	.L.str3951057, %r9
	leaq	.L.str3971059, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str24686, %r12
	movabsq	$32, %r13
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	leaq	.L.str3941056, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	movabsq	$231, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	movabsq	$228, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	movabsq	$221, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp530:
	movq	%rdi, 2808(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2800(%rsp)        # 8-byte Spill
	movq	%rdx, 2792(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2816(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2784(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2776(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2768(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2760(%rsp)        # 8-byte Spill
	movl	%ebp, 2756(%rsp)        # 4-byte Spill
	movq	%r14, 2744(%rsp)        # 8-byte Spill
	movq	%r12, 2736(%rsp)        # 8-byte Spill
	movq	%r15, 2728(%rsp)        # 8-byte Spill
	movl	%ebx, 2724(%rsp)        # 4-byte Spill
	movq	%r10, 2712(%rsp)        # 8-byte Spill
	movq	%r11, 2704(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp531:
	.loc	2 228 0                 # kiss_fft.c:228:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2703(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
	.loc	2 231 0                 # kiss_fft.c:231:0
.Ltmp532:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2702(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$1, %ebx
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2701(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
.Ltmp533:
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2808(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2912(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
.LBB10_2:                               # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
                                        #     Child Loop BB10_5 Depth 2
                                        #       Child Loop BB10_7 Depth 3
	movq	2672(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16678, %r8
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str184846, %r9
	movabsq	$3, %r10
	leaq	.L.str92754, %r11
	movabsq	$221, %rbx
	leaq	.L.str171833, %r14
	leaq	.L.str3981060, %r15
	leaq	.L.str4021064, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str3991061, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str3951057, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str4001062, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str4011063, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp534:
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2584(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2576(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2568(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	2640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2552(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2544(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2536(%rsp)        # 8-byte Spill
	movq	%r12, 2528(%rsp)        # 8-byte Spill
	movq	%r14, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r13d, 2512(%rsp)       # 4-byte Spill
	movq	%rbx, 2504(%rsp)        # 8-byte Spill
	movq	%r10, 2496(%rsp)        # 8-byte Spill
	movq	%r11, 2488(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2568(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	2568(%rsp), %r9         # 8-byte Reload
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2584(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2496(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2703(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2703(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	movq	%rdx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB10_3
	jmp	.LBB10_4
.LBB10_3:                               # %.lr.ph
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2472(%rsp), %rax        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str73735, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4666, %r8
	movabsq	$2, %r9
	leaq	.L.str92754, %r10
	movabsq	$3, %r11
	leaq	.L.str184846, %rbx
	movabsq	$221, %r14
	leaq	.L.str171833, %r15
	leaq	.L.str186848, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str72734, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str3941056, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str4041066, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str4061068, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str4051067, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str4031065, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str108770, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str135797, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$222, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str96758, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str25687, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str3991061, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str3981060, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 222 0                 # kiss_fft.c:222:0
.Ltmp535:
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2184(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2176(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2168(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2360(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2152(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2144(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2136(%rsp)        # 8-byte Spill
	movq	%r12, 2128(%rsp)        # 8-byte Spill
	movl	%ebp, 2124(%rsp)        # 4-byte Spill
	movl	%r13d, 2120(%rsp)       # 4-byte Spill
	movq	%r14, 2112(%rsp)        # 8-byte Spill
	movq	%rbx, 2104(%rsp)        # 8-byte Spill
	movq	%r10, 2096(%rsp)        # 8-byte Spill
	movq	%r11, 2088(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2160(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	2928(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2080(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2464(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3248(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2328(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2336(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2368(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
.Ltmp536:
	.loc	2 221 0                 # kiss_fft.c:221:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rax        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2424(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	3224(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	movq	%rdx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB10_4
	jmp	.LBB10_3
.Ltmp537:
.LBB10_4:                               # %.loopexit
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str102764, %r8
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4011063, %r9
	movabsq	$3, %r10
	leaq	.L.str4071069, %r11
	movabsq	$228, %rbx
	leaq	.L.str171833, %r14
	leaq	.L.str184846, %r15
	leaq	.L.str188850, %r12
	movl	$1, %ebp
	.loc	2 228 0                 # kiss_fft.c:228:0
.Ltmp538:
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 2016(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2008(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 2000(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	2024(%rsp), %rbx        # 8-byte Reload
	movq	%r8, 1992(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 1984(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1980(%rsp)        # 4-byte Spill
	movq	%r10, 1968(%rsp)        # 8-byte Spill
	movq	%r11, 1960(%rsp)        # 8-byte Spill
	movl	%ebp, 1956(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2702(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %edx
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2702(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movl	1980(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movl	%eax, 1940(%rsp)        # 4-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_9
.LBB10_5:                               # %.lr.ph8
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_7 Depth 3
	movl	1940(%rsp), %eax        # 4-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str19681, %r8
	movabsq	$0, %rsi
	leaq	.L.str4666, %rdi
	movabsq	$2, %r9
	leaq	.L.str4101072, %r10
	movabsq	$3, %r11
	leaq	.L.str4141076, %rbx
	movabsq	$231, %r14
	leaq	.L.str171833, %r15
	leaq	.L.str4071069, %r12
	leaq	.L.str4131075, %r13
	movl	$0, %ebp
	movl	%eax, 1936(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1928(%rsp)        # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 1912(%rsp)        # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1896(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 1888(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1880(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rcx
	movq	%rcx, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str34696, %rcx
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	movabsq	$6, %rcx
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str135797, %rcx
	movq	%rcx, 1840(%rsp)        # 8-byte Spill
	movabsq	$230, %rcx
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str4121074, %rcx
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	movabsq	$104, %rcx
	movq	%rcx, 1816(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str130792, %rcx
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movabsq	$44, %rcx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rcx
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str4081070, %rcx
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str4111073, %rcx
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str222884, %rcx
	movq	%rcx, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str184846, %rcx
	movq	%rcx, 1744(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1736(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str4091071, %rcx
	movq	%rcx, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str3991061, %rcx
	.loc	2 229 0                 # kiss_fft.c:229:0
.Ltmp539:
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1704(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1696(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1688(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1680(%rsp)         # 8-byte Spill
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1672(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1668(%rsp)        # 4-byte Spill
	movq	%r15, 1656(%rsp)        # 8-byte Spill
	movq	%r12, 1648(%rsp)        # 8-byte Spill
	movq	%r14, 1640(%rsp)        # 8-byte Spill
	movq	%r13, 1632(%rsp)        # 8-byte Spill
	movl	%ebp, 1628(%rsp)        # 4-byte Spill
	movq	%rbx, 1616(%rsp)        # 8-byte Spill
	movq	%r10, 1608(%rsp)        # 8-byte Spill
	movq	%r11, 1600(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp540:
	#DEBUG_VALUE: twidx <- 0
	.loc	2 230 0                 # kiss_fft.c:230:0
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3248(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1592(%rsp)        # 8-byte Spill
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1888(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, (%rsi)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsi)
.Ltmp541:
	#DEBUG_VALUE: kf_bfly_generic:q <- 1
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2701(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2701(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_6
	jmp	.LBB10_8
.LBB10_6:                               # %.lr.ph5
                                        #   in Loop: Header=BB10_5 Depth=2
	movabsq	$1, %rax
	movl	$0, %ecx
	movabsq	$0, %rdx
	leaq	.L.str4161078, %r8
	leaq	.L.str4666, %rsi
	movabsq	$231, %rdi
	leaq	.L.str171833, %r9
	leaq	.L.str4141076, %r10
	leaq	.L.str4151077, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str40702, %r12
	leaq	.L.str120782, %r13
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str4081070, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$235, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$232, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp542:
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1472(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1464(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1452(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1440(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1452(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1432(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1424(%rsp)        # 8-byte Spill
	movq	%r15, 1416(%rsp)        # 8-byte Spill
	movl	%ebp, 1412(%rsp)        # 4-byte Spill
	movq	%r12, 1400(%rsp)        # 8-byte Spill
	movq	%r13, 1392(%rsp)        # 8-byte Spill
	movq	%rbx, 1384(%rsp)        # 8-byte Spill
	movq	%r10, 1376(%rsp)        # 8-byte Spill
	movq	%r11, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	.loc	2 235 0                 # kiss_fft.c:235:0
.Ltmp543:
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3248(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
.Ltmp544:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1456(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movl	1452(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	movl	%eax, 1340(%rsp)        # 4-byte Spill
.LBB10_7:                               #   Parent Loop BB10_2 Depth=1
                                        #     Parent Loop BB10_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	1340(%rsp), %eax        # 4-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str4241086, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4666, %r8
	movabsq	$2, %r9
	leaq	.L.str4161078, %r10
	movabsq	$3, %r11
	leaq	.L.str4101072, %rbx
	movabsq	$231, %r14
	leaq	.L.str171833, %r15
	leaq	.L.str4251087, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1320(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str4231085, %rcx
	movq	%rcx, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str3941056, %rcx
	movq	%rcx, 1296(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str4181080, %rcx
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str4171079, %rcx
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rcx
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str221883, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	movabsq	$235, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str4221084, %rcx
	movq	%rcx, 1208(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str169831, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str218880, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str219881, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str4211083, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str165827, %rcx
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str217879, %rcx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str162824, %rcx
	movq	%rcx, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str161823, %rcx
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movabsq	$234, %rcx
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str61723, %rcx
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str66728, %rcx
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str57719, %rcx
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str70732, %rcx
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str145807, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str75737, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str68730, %rcx
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rcx
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str58720, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str64726, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	leaq	.L.str123785, %rcx
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	leaq	.L.str143805, %rcx
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str4201082, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	.L.str56718, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str53715, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str55717, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	movabsq	$233, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	leaq	.L.str54716, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	leaq	.L.str6668, %rcx
	movq	%rcx, 896(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	leaq	.L.str136798, %rcx
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movabsq	$232, %rcx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	leaq	.L.str47709, %rcx
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	leaq	.L.str133795, %rcx
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	leaq	.L.str4191081, %rcx
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	movabsq	$34, %rcx
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	leaq	.L.str4141076, %rcx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp545:
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 808(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 800(%rsp)         # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 792(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 784(%rsp)          # 8-byte Spill
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	%r9, 776(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 772(%rsp)         # 4-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movl	%ebp, 748(%rsp)         # 4-byte Spill
	movl	%r13d, 744(%rsp)        # 4-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	696(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 692(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp546:
	#DEBUG_VALUE: twidx <- [RSP+692]
	.loc	2 233 0                 # kiss_fft.c:233:0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3148(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	3148(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 691(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3148(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	691(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	691(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	748(%rsp), %ebp         # 4-byte Reload
	movl	3148(%rsp), %r13d       # 4-byte Reload
	cmovel	%r13d, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 684(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	684(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	684(%rsp), %ebp         # 4-byte Reload
	subl	%ebp, %eax
.Ltmp547:
	.loc	2 234 0                 # kiss_fft.c:234:0
	movl	%eax, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 680(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2928(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	672(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 664(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	680(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	680(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	656(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	648(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 640(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	vmovsd	640(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2928(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 616(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	656(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 600(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	600(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	vmovsd	600(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	592(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 584(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	600(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	vmovsd	600(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	vmovsd	616(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	576(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	568(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	568(%rsp), %xmm0        # 8-byte Reload
	vmovsd	576(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp548:
	.loc	2 235 0                 # kiss_fft.c:235:0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 560(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 552(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	584(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	vmovsd	584(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1592(%rsp), %rcx        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1352(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 536(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	560(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	536(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	536(%rsp), %xmm0        # 8-byte Reload
	vmovsd	560(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1352(%rsp), %rcx        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp549:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	3224(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 515(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	680(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	movl	%ebp, 1340(%rsp)        # 4-byte Spill
	jne	.LBB10_8
	jmp	.LBB10_7
.Ltmp550:
.LBB10_8:                               # %._crit_edge
                                        #   in Loop: Header=BB10_5 Depth=2
	movabsq	$1, %rax
	leaq	.L.str4261088, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4071069, %r8
	movabsq	$3, %r9
	leaq	.L.str4011063, %r10
	movabsq	$228, %r11
	leaq	.L.str171833, %rbx
	leaq	.L.str4101072, %r14
	leaq	.L.str4271089, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str222884, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str3941056, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str4091071, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str4081070, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str4111073, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	.loc	2 228 0                 # kiss_fft.c:228:0
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp551:
	#DEBUG_VALUE: kf_bfly_generic:q1 <- [RSP+308]
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 296(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	3224(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 295(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	296(%rsp), %rcx         # 8-byte Reload
	movl	308(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movl	%ebp, 1940(%rsp)        # 4-byte Spill
	jne	.LBB10_9
	jmp	.LBB10_5
.Ltmp552:
.LBB10_9:                               # %._crit_edge9
                                        #   in Loop: Header=BB10_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str4291091, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3981060, %r8
	movabsq	$3, %r9
	leaq	.L.str3961058, %r10
	movabsq	$219, %r11
	leaq	.L.str171833, %rbx
	leaq	.L.str4011063, %r14
	leaq	.L.str4301092, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	.L.str4281090, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str4001062, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str3991061, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	%rdi, 200(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 160(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movl	%r12d, 136(%rsp)        # 4-byte Spill
	movq	%r13, 128(%rsp)         # 8-byte Spill
	movq	%r14, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movq	%r11, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 84(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	3420(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 83(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	jne	.LBB10_10
	jmp	.LBB10_2
.Ltmp553:
.LBB10_10:                              # %._crit_edge11
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str9671, %r8
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	free, %r9
	leaq	.L.str4321094, %r10
	movabsq	$240, %r11
	leaq	.L.str171833, %rbx
	leaq	.L.str3961058, %r14
	leaq	.L.str4311093, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 240 0                 # kiss_fft.c:240:0
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movl	%r13d, 12(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3120(%rsp), %rdi        # 8-byte Reload
	callq	free
	movabsq	$241, %rdi
	leaq	.L.str171833, %rsi
	leaq	.L.str3961058, %rdx
	leaq	.L.str4331095, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %ebp
	.loc	2 241 0                 # kiss_fft.c:241:0
	movl	$1, (%rsp)
	movl	%ebp, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3448, %rsp             # imm = 0xD78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp554:
.Ltmp555:
	.size	kf_bfly_generic, .Ltmp555-kf_bfly_generic
.Lfunc_end10:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI11_0:
	.quad	-9223372036854775808    # double -0
	.text
	.align	16, 0x90
	.type	kf_bfly5,@function
kf_bfly5:                               # @kf_bfly5
	.cfi_startproc
.Lfunc_begin11:
	.loc	2 142 0                 # kiss_fft.c:142:0
# BB#0:
	pushq	%rbp
.Ltmp563:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp564:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp565:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp566:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp567:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp568:
	.cfi_def_cfa_offset 56
	subq	$3976, %rsp             # imm = 0xF88
.Ltmp569:
	.cfi_def_cfa_offset 4032
.Ltmp570:
	.cfi_offset %rbx, -56
.Ltmp571:
	.cfi_offset %r12, -48
.Ltmp572:
	.cfi_offset %r13, -40
.Ltmp573:
	.cfi_offset %r14, -32
.Ltmp574:
	.cfi_offset %r15, -24
.Ltmp575:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str25687, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %r10
	movabsq	$2, %r11
	leaq	.L.str46708, %rbx
	movabsq	$3, %r14
	leaq	.L.str45707, %r15
	movabsq	$161, %r12
	leaq	.L.str167829, %r13
	leaq	.L.str1663, %rbp
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str124786, %rax
	movl	%ecx, 3964(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3960(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	movabsq	$152, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3832(%rsp)        # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 3824(%rsp)        # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	leaq	.L.str14676, %rax
	movq	%rax, 3800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3792(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	.loc	2 137 0 prologue_end    # kiss_fft.c:137:0
.Ltmp576:
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	movq	3712(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3904(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3688(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3696(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3680(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3968(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3676(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3704(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3664(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3656(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 3648(%rsp)        # 8-byte Spill
	movq	%r15, 3640(%rsp)        # 8-byte Spill
	movq	%r12, 3632(%rsp)        # 8-byte Spill
	movq	%rbp, 3624(%rsp)        # 8-byte Spill
	movq	%r14, 3616(%rsp)        # 8-byte Spill
	movq	%rbx, 3608(%rsp)        # 8-byte Spill
	movq	%r10, 3600(%rsp)        # 8-byte Spill
	movq	%r11, 3592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3964(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly5:Fout <- [RSP+3696]
	#DEBUG_VALUE: kf_bfly5:fstride <- [RSP+3688]
	#DEBUG_VALUE: kf_bfly5:st <- [RSP+3680]
	#DEBUG_VALUE: kf_bfly5:m <- [RSP+3964]
	.loc	2 150 0                 # kiss_fft.c:150:0
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3964(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3744(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3728(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3576(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3576(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3568(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3568(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3560(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3760(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3576(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3576(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3552(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 152 0                 # kiss_fft.c:152:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3544(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3800(%rsp), %rcx        # 8-byte Reload
	movq	3776(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3688(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3848(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	3536(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3528(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3520(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3520(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3512(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3528(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3896(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3504(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3504(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 154 0                 # kiss_fft.c:154:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3496(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3896(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp577:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+3696]
	#DEBUG_VALUE: kf_bfly5:Fout1 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout2 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout3 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout4 <- undef
	#DEBUG_VALUE: kf_bfly5:u <- 0
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3664(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3495(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3656(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3640(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3656(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3495(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3495(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_1
	jmp	.LBB11_3
.Ltmp578:
.LBB11_1:                               # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str296958, %r8
	leaq	.L.str4666, %rdx
	movabsq	$161, %rdi
	leaq	.L.str167829, %rsi
	leaq	.L.str45707, %r9
	leaq	.L.str48710, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str136798, %r12
	leaq	.L.str120782, %r13
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movabsq	$155, %rax
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 3416(%rsp)        # 8-byte Spill
	movabsq	$156, %rax
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str34696, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movabsq	$158, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	leaq	.L.str108770, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 3320(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	%rax, 3280(%rsp)        # 8-byte Spill
	movq	3360(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3272(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3264(%rsp)        # 8-byte Spill
	movq	%rdx, 3256(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 3224(%rsp)        # 8-byte Spill
	movl	%ebp, 3220(%rsp)        # 4-byte Spill
	movq	%r15, 3208(%rsp)        # 8-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r12, 3192(%rsp)        # 8-byte Spill
	movl	%ebx, 3188(%rsp)        # 4-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	shll	$2, %ebx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 3164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	imull	$3, %ebx, %ebp
	.loc	2 156 0                 # kiss_fft.c:156:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 3160(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	shll	$1, %ebx
	.loc	2 158 0                 # kiss_fft.c:158:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 3156(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3360(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3164(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3164(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3160(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3156(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3156(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3360(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3144(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3144(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3120(%rsp)        # 8-byte Spill
.Ltmp579:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+3120]
	movq	%rax, %rcx
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3112(%rsp)        # 8-byte Spill
.Ltmp580:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+3112]
	movq	%rax, %rcx
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3128(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3128(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 155 0                 # kiss_fft.c:155:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
.Ltmp581:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+3104]
	movq	%rax, %rcx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3584(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp582:
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3096(%rsp)        # 8-byte Spill
.Ltmp583:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+3096]
	movq	%rax, %rcx
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp584:
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3272(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3168(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3480(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3480(%rsp), %rax        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	%rdx, 3072(%rsp)        # 8-byte Spill
	movq	%rsi, 3064(%rsp)        # 8-byte Spill
	movq	%rdi, 3056(%rsp)        # 8-byte Spill
	movq	%r8, 3048(%rsp)         # 8-byte Spill
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
	movq	3048(%rsp), %rax        # 8-byte Reload
	movq	3056(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movabsq	$1, %r9
	leaq	.L.str73735, %r10
	movabsq	$0, %r11
	leaq	.L.str4666, %rbx
	movabsq	$2, %r14
	leaq	.L.str296958, %r15
	movabsq	$3, %r12
	leaq	.L.str46708, %r13
	movabsq	$161, %rbp
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str167829, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str3931055, %rax
	movq	%rsi, 3024(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 3020(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str72734, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str51713, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str50712, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str306968, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	leaq	.L.str305967, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movabsq	$199, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	leaq	.L.str304966, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	leaq	.L.str303965, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	leaq	.L.str302964, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str301963, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	leaq	.L.str300962, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	leaq	.L.str299961, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	leaq	.L.str298960, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	leaq	.L.str297959, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str3911053, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	leaq	.L.str282944, %rax
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	leaq	.L.str3921054, %rax
	movq	%rax, 2792(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	leaq	.L.str3781040, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	leaq	.L.str3841046, %rax
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	leaq	.L.str3891051, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	leaq	.L.str269931, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str3901052, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str3741036, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str3811043, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str3871049, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str244906, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$196, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str3881050, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str3851047, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str231893, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str3861048, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str3821044, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str3831045, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$194, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str3391001, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str335997, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str3801042, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str3791041, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$193, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str3401002, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str336998, %rax
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	leaq	.L.str3771039, %rax
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	leaq	.L.str3761038, %rax
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	movabsq	$192, %rax
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	leaq	.L.str3381000, %rax
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	leaq	.L.str61723, %rax
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	leaq	.L.str3751037, %rax
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	leaq	.L.str334996, %rax
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	leaq	.L.str3731035, %rax
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str3721034, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$191, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	leaq	.L.str337999, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str58720, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str3711033, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str333995, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str3691031, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str324986, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$189, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str3701032, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str3551017, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str3621024, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str3671029, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str315977, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str3681030, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str3581020, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str3511013, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str3651027, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str218880, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$188, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str3661028, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str3631025, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str68730, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str3641026, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str3601022, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str3611023, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$186, %rax
	vmovsd	.LCPI11_0, %xmm0
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str3591021, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str3571019, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str3561018, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movabsq	$185, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str3541016, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str3531015, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str3521014, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str3501012, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str3491011, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	movabsq	$182, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str3481010, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str3461008, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str143805, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	movabsq	$180, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str3471009, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str3451007, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str3441006, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str3421004, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str57719, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$179, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str3431005, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str3411003, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str253915, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str311973, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$177, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str263925, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str258920, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$176, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str226888, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str332994, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$175, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str222884, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str329991, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movabsq	$174, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str331993, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str330992, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str322984, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str325987, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str316978, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str327989, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str323985, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str328990, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str326988, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str320982, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str314976, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str321983, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str319981, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str318980, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str317979, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str313975, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str312974, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str136798, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$10, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str292954, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str256918, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$171, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str280942, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str284946, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str307969, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str288950, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str309971, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str310972, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str286948, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str276938, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str268930, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str278940, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str274936, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str308970, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	movabsq	$12884901888, %rax      # imm = 0x300000000
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str266928, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str265927, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str255917, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str257919, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str241903, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str216878, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str232894, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str246908, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str243905, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str262924, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str215877, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str238900, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str229891, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str240902, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str237899, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str235897, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str234896, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str228890, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str227889, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str224886, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str223885, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	movabsq	$169, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str161823, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str165827, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str70732, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str169831, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str162824, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str221883, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str219881, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str75737, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str66728, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str217879, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str64726, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str145807, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str55717, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str45707, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str47709, %rax
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp585:
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3032(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1220(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	2936(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3020(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 1176(%rsp)        # 8-byte Spill
	movq	%r13, 1168(%rsp)        # 8-byte Spill
	movq	%rbp, 1160(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1152(%rsp)       # 8-byte Spill
	movq	%r15, 1144(%rsp)        # 8-byte Spill
	movq	%r14, 1136(%rsp)        # 8-byte Spill
	movq	%r10, 1128(%rsp)        # 8-byte Spill
	movq	%r11, 1120(%rsp)        # 8-byte Spill
	movq	%rbx, 1112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rcx        # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1080(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1072(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	.loc	2 169 0                 # kiss_fft.c:169:0
.Ltmp586:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rcx        # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1040(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1040(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1032(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	1024(%rsp), %rdx        # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 992(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	992(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 984(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	1024(%rsp), %rdx        # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	976(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	976(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 968(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	vmovsd	968(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 960(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	960(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 952(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	968(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 944(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	984(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	944(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	vmovsd	944(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp587:
	.loc	2 170 0                 # kiss_fft.c:170:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 904(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 892(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	892(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	892(%rsp), %eax         # 4-byte Reload
	shll	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 888(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	888(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	888(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	872(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 856(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	856(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 848(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 832(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	872(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	824(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	vmovsd	816(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	808(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	848(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	848(%rsp), %xmm0        # 8-byte Reload
	vmovsd	808(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	816(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 792(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	vmovsd	832(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 784(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	792(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	vmovsd	792(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp588:
	.loc	2 171 0                 # kiss_fft.c:171:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 776(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 752(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	752(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	752(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 744(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movabsq	$12884901888, %rcx      # imm = 0x300000000
	movq	1192(%rsp), %rdx        # 8-byte Reload
	imulq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	736(%rsp), %rcx         # 8-byte Reload
	sarq	$32, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	720(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	712(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 704(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	vmovsd	704(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 688(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	688(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 680(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	720(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	672(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 664(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	656(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmovsd	680(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	640(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp589:
	.loc	2 172 0                 # kiss_fft.c:172:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 624(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 600(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 592(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 588(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	588(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	588(%rsp), %eax         # 4-byte Reload
	shll	$2, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 584(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	584(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	584(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	568(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 560(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	560(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 552(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	vmovsd	552(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 536(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 528(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	568(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 512(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	512(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	vmovsd	512(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	504(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	vmovsd	504(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	512(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	vmovsd	512(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	vmovsd	528(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	488(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	vmovsd	488(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp590:
	.loc	2 174 0                 # kiss_fft.c:174:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp591:
	.loc	2 175 0                 # kiss_fft.c:175:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 456(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 448(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp592:
	.loc	2 176 0                 # kiss_fft.c:176:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	648(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 432(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	624(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp593:
	.loc	2 177 0                 # kiss_fft.c:177:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 424(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	648(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 416(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	624(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp594:
	.loc	2 179 0                 # kiss_fft.c:179:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 408(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 400(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	400(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rcx        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 180 0                 # kiss_fft.c:180:0
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 376(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	384(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	384(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 182 0                 # kiss_fft.c:182:0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	360(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 183 0                 # kiss_fft.c:183:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	424(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 312(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 185 0                 # kiss_fft.c:185:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	440(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 296(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 288(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	296(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	vmovsd	296(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 186 0                 # kiss_fft.c:186:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	448(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	448(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1152(%rsp), %xmm0       # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	vmovq	%xmm0, %rcx
	movabsq	$-9223372036854775808, %rdx # imm = 0x8000000000000000
	xorq	%rdx, %rcx
	vmovq	%rcx, %xmm1
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	vmovsd	256(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 188 0                 # kiss_fft.c:188:0
.Ltmp595:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	280(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rcx        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	992(%rsp), %rcx         # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp596:
	.loc	2 189 0                 # kiss_fft.c:189:0
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp597:
	.loc	2 191 0                 # kiss_fft.c:191:0
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	208(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 192(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	vmovsd	200(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 192 0                 # kiss_fft.c:192:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	vmovsd	176(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	424(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 193 0                 # kiss_fft.c:193:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	440(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	144(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 194 0                 # kiss_fft.c:194:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	448(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	448(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 196 0                 # kiss_fft.c:196:0
.Ltmp598:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 96(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	904(%rsp), %rcx         # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 88(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp599:
	.loc	2 197 0                 # kiss_fft.c:197:0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	752(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	752(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	vmovsd	104(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 72(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2792(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp600:
	.loc	2 199 0                 # kiss_fft.c:199:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1224(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp601:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+64]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp602:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+56]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp603:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+48]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1200(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp604:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+40]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3040(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp605:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+32]
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3964(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	3964(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movq	%rdx, 3080(%rsp)        # 8-byte Spill
	movq	%rsi, 3072(%rsp)        # 8-byte Spill
	movq	%rdi, 3064(%rsp)        # 8-byte Spill
	movq	%r8, 3056(%rsp)         # 8-byte Spill
	movq	%r9, 3048(%rsp)         # 8-byte Spill
	jne	.LBB11_3
	jmp	.LBB11_2
.Ltmp606:
.LBB11_3:                               # %._crit_edge
	movabsq	$201, %rdi
	leaq	.L.str167829, %rsi
	leaq	.L.str46708, %rdx
	leaq	.L.str76738, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 201 0                 # kiss_fft.c:201:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3976, %rsp             # imm = 0xF88
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp607:
.Ltmp608:
	.size	kf_bfly5, .Ltmp608-kf_bfly5
.Lfunc_end11:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly4,@function
kf_bfly4:                               # @kf_bfly4
	.cfi_startproc
.Lfunc_begin12:
	.loc	2 50 0                  # kiss_fft.c:50:0
# BB#0:
	pushq	%rbp
.Ltmp616:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp617:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp618:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp619:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp620:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp621:
	.cfi_def_cfa_offset 56
	subq	$2936, %rsp             # imm = 0xB78
.Ltmp622:
	.cfi_def_cfa_offset 2992
.Ltmp623:
	.cfi_offset %rbx, -56
.Ltmp624:
	.cfi_offset %r12, -48
.Ltmp625:
	.cfi_offset %r13, -40
.Ltmp626:
	.cfi_offset %r14, -32
.Ltmp627:
	.cfi_offset %r15, -24
.Ltmp628:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str251913, %r9
	leaq	.L.str4666, %r10
	movabsq	$60, %r11
	leaq	.L.str163825, %rbx
	leaq	.L.str1663, %r14
	leaq	.L.str250912, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str14676, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$77, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2792(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	movabsq	$58, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$55, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movabsq	$54, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	.loc	2 45 0 prologue_end     # kiss_fft.c:45:0
.Ltmp629:
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2680(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2672(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2680(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2664(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2688(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2648(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2648(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2640(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 2636(%rsp)        # 4-byte Spill
	movq	%r15, 2624(%rsp)        # 8-byte Spill
	movq	%r12, 2616(%rsp)        # 8-byte Spill
	movl	%r13d, 2612(%rsp)       # 4-byte Spill
	movq	%r14, 2600(%rsp)        # 8-byte Spill
	movq	%rbx, 2592(%rsp)        # 8-byte Spill
	movq	%r10, 2584(%rsp)        # 8-byte Spill
	movq	%r11, 2576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+2680]
	#DEBUG_VALUE: kf_bfly4:fstride <- [RSP+2672]
	#DEBUG_VALUE: kf_bfly4:st <- [RSP+2664]
	#DEBUG_VALUE: kf_bfly4:m <- [RSP+2656]
.Ltmp630:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+2656]
	.loc	2 54 0                  # kiss_fft.c:54:0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp631:
	#DEBUG_VALUE: kf_bfly4:m2 <- [RSP+2568]
	.loc	2 55 0                  # kiss_fft.c:55:0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp632:
	#DEBUG_VALUE: kf_bfly4:m3 <- [RSP+2560]
	.loc	2 58 0                  # kiss_fft.c:58:0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2760(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp633:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+2552]
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+2552]
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+2552]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2776(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	.loc	2 77 0                  # kiss_fft.c:77:0
.Ltmp634:
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2536(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2524(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2524(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2524(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	sete	%al
.Ltmp635:
	.loc	2 60 0                  # kiss_fft.c:60:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2523(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %rdx        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2512(%rsp)        # 8-byte Spill
	movq	%rdx, 2504(%rsp)        # 8-byte Spill
	movq	%rsi, 2496(%rsp)        # 8-byte Spill
	movq	%rdi, 2488(%rsp)        # 8-byte Spill
	movq	%r8, 2480(%rsp)         # 8-byte Spill
.Ltmp636:
.LBB12_1:                               # =>This Inner Loop Header: Depth=1
	movq	2480(%rsp), %rax        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rsi        # 8-byte Reload
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movabsq	$1, %r8
	leaq	.L.str16678, %r9
	movabsq	$0, %r10
	leaq	.L.str4666, %r11
	movabsq	$2, %rbx
	leaq	.L.str273935, %r14
	movabsq	$3, %r15
	leaq	.L.str272934, %r12
	movabsq	$77, %r13
	leaq	.L.str163825, %rbp
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str251913, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	leaq	.L.str271933, %rax
	movq	%rsi, 2456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str269931, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str232894, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	movabsq	$75, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str270932, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str243905, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str268930, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str266928, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str228890, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str267929, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str241903, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str265927, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str253915, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str252914, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str255917, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str213875, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str257919, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str204866, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$72, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	leaq	.L.str263925, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str57719, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movabsq	$71, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str264926, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str262924, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str246908, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str136798, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str261923, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str215877, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str216878, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str227889, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$70, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str244906, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str223885, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	movabsq	$69, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str240902, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$68, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str260922, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str70732, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str238900, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str237899, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str259921, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str64726, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str229891, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str235897, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str234896, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movabsq	$67, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str182844, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str231893, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str226888, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str224886, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$65, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str162824, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str219881, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str217879, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str221883, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str218880, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str222884, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str169831, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str165827, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str161823, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str75737, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str68730, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str66728, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str55717, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str58720, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str53715, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str61723, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str145807, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str143805, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str25687, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str108770, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str34696, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str258920, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str254916, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str214876, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str256918, %rax
	.loc	2 63 0                  # kiss_fft.c:63:0
.Ltmp637:
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1536(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1532(%rsp)        # 4-byte Spill
	movq	%rbp, %rsi
	movq	2464(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1520(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1568(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1504(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	2452(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1496(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1488(%rsp)        # 8-byte Spill
	movq	%r12, 1480(%rsp)        # 8-byte Spill
	movq	%r13, 1472(%rsp)        # 8-byte Spill
	movq	%rbp, 1464(%rsp)        # 8-byte Spill
	movq	%r14, 1456(%rsp)        # 8-byte Spill
	movq	%rbx, 1448(%rsp)        # 8-byte Spill
	movq	%r10, 1440(%rsp)        # 8-byte Spill
	movq	%r11, 1432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2656(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1416(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1408(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1408(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2656(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1392(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1384(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1368(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1368(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1360(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1400(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1360(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1368(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1344(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1384(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1336(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1344(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1344(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp638:
	.loc	2 64 0                  # kiss_fft.c:64:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1328(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2568(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1320(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1312(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1304(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1304(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2568(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1288(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1280(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1264(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1264(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1264(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1256(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1256(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1248(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1264(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1264(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1240(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1280(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1232(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1240(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1232(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1232(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1240(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp639:
	.loc	2 65 0                  # kiss_fft.c:65:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1224(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2560(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1208(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1200(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1200(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2560(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1176(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1160(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1160(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1160(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1152(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1192(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1192(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1152(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1160(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1160(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1136(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1176(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1128(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1136(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1128(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1128(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1136(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp640:
	.loc	2 67 0                  # kiss_fft.c:67:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1120(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1112(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1104(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1088(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1224(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp641:
	.loc	2 68 0                  # kiss_fft.c:68:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1080(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1072(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1064(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp642:
	.loc	2 69 0                  # kiss_fft.c:69:0
	movq	2064(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1144(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1144(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2064(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1120(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1120(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp643:
	.loc	2 70 0                  # kiss_fft.c:70:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1040(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1144(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1144(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1120(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1120(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp644:
	.loc	2 71 0                  # kiss_fft.c:71:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1016(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1048(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1000(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1288(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp645:
	.loc	2 72 0                  # kiss_fft.c:72:0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1512(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 984(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp646:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+984]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2544(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2456(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 976(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp647:
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+976]
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2536(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1536(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 968(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp648:
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+968]
	.loc	2 75 0                  # kiss_fft.c:75:0
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 960(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	960(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 952(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 944(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	944(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	vmovsd	944(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp649:
	.loc	2 77 0                  # kiss_fft.c:77:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2523(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2523(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB12_3
.Ltmp650:
# BB#2:                                 #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str254916, %r8
	leaq	.L.str4666, %rdx
	movabsq	$82, %rdi
	leaq	.L.str163825, %rsi
	leaq	.L.str273935, %r9
	leaq	.L.str281943, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str280942, %r12
	leaq	.L.str235897, %r13
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str244906, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str278940, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str75737, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$80, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str279941, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str231893, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str216878, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str276938, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movabsq	$79, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str277939, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str274936, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$78, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str275937, %rax
	.loc	2 78 0                  # kiss_fft.c:78:0
.Ltmp651:
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 768(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 760(%rsp)         # 8-byte Spill
	movq	%rdx, 752(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	800(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%r8, 736(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 728(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 720(%rsp)         # 8-byte Spill
	movl	%ebp, 716(%rsp)         # 4-byte Spill
	movq	%r15, 704(%rsp)         # 8-byte Spill
	movq	%r13, 696(%rsp)         # 8-byte Spill
	movq	%r12, 688(%rsp)         # 8-byte Spill
	movl	%ebx, 684(%rsp)         # 4-byte Spill
	movq	%r10, 672(%rsp)         # 8-byte Spill
	movq	%r11, 664(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1424(%rsp), %rax        # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 79 0                  # kiss_fft.c:79:0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1392(%rsp), %rax        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 80 0                  # kiss_fft.c:80:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rax        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 81 0                  # kiss_fft.c:81:0
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 82 0                  # kiss_fft.c:82:0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 624(%rsp)        # 8-byte Spill
	jmp	.LBB12_4
.Ltmp652:
.LBB12_3:                               #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str254916, %r8
	leaq	.L.str4666, %rdx
	movabsq	$-1, %rdi
	leaq	.L.str163825, %rsi
	leaq	.L.str272934, %r9
	leaq	.L.str289951, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str288950, %r12
	leaq	.L.str235897, %r13
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str244906, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str286948, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str75737, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$85, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str287949, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str231893, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str216878, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str284946, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$84, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str285947, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str282944, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$83, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str283945, %rax
	.loc	2 83 0                  # kiss_fft.c:83:0
.Ltmp653:
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 456(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movq	%rdx, 440(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%r8, 424(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 416(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 408(%rsp)         # 8-byte Spill
	movl	%ebp, 404(%rsp)         # 4-byte Spill
	movq	%r15, 392(%rsp)         # 8-byte Spill
	movq	%r13, 384(%rsp)         # 8-byte Spill
	movq	%r12, 376(%rsp)         # 8-byte Spill
	movl	%ebx, 372(%rsp)         # 4-byte Spill
	movq	%r10, 360(%rsp)         # 8-byte Spill
	movq	%r11, 352(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1424(%rsp), %rax        # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 84 0                  # kiss_fft.c:84:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1392(%rsp), %rax        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 85 0                  # kiss_fft.c:85:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rax        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 86 0                  # kiss_fft.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 624(%rsp)        # 8-byte Spill
.Ltmp654:
.LBB12_4:                               #   in Loop: Header=BB12_1 Depth=1
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str292954, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4666, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251913, %r8
	movabsq	$3, %r9
	leaq	.L.str294956, %r10
	movabsq	$89, %r11
	leaq	.L.str163825, %rbx
	leaq	.L.str254916, %r14
	leaq	.L.str293955, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 312(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str256918, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str214876, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str258920, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str182844, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$88, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str290952, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str165827, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str291953, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str272934, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str288950, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str280942, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str273935, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 81 0                  # kiss_fft.c:81:0
.Ltmp655:
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movq	264(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rax        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp656:
	.loc	2 88 0                  # kiss_fft.c:88:0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rax        # 8-byte Reload
	addq	$16, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp657:
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+24]
	.loc	2 89 0                  # kiss_fft.c:89:0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp658:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+16]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %rdx         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%rcx, 2512(%rsp)        # 8-byte Spill
	movq	%rdx, 2504(%rsp)        # 8-byte Spill
	movq	%rsi, 2496(%rsp)        # 8-byte Spill
	movq	%rdi, 2488(%rsp)        # 8-byte Spill
	movq	%r8, 2480(%rsp)         # 8-byte Spill
	jne	.LBB12_5
	jmp	.LBB12_1
.Ltmp659:
.LBB12_5:
	movabsq	$90, %rdi
	leaq	.L.str163825, %rsi
	leaq	.L.str294956, %rdx
	leaq	.L.str295957, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 90 0                  # kiss_fft.c:90:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$2936, %rsp             # imm = 0xB78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp660:
.Ltmp661:
	.size	kf_bfly4, .Ltmp661-kf_bfly4
.Lfunc_end12:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.align	16, 0x90
	.type	kf_bfly3,@function
kf_bfly3:                               # @kf_bfly3
	.cfi_startproc
.Lfunc_begin13:
	.loc	2 98 0                  # kiss_fft.c:98:0
# BB#0:
	pushq	%rbp
.Ltmp669:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp670:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp671:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp672:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp673:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp674:
	.cfi_def_cfa_offset 56
	subq	$1864, %rsp             # imm = 0x748
.Ltmp675:
	.cfi_def_cfa_offset 1920
.Ltmp676:
	.cfi_offset %rbx, -56
.Ltmp677:
	.cfi_offset %r12, -48
.Ltmp678:
	.cfi_offset %r13, -40
.Ltmp679:
	.cfi_offset %r14, -32
.Ltmp680:
	.cfi_offset %r15, -24
.Ltmp681:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str212874, %r9
	leaq	.L.str4666, %r10
	movabsq	$108, %r11
	leaq	.L.str159821, %rbx
	leaq	.L.str1663, %r14
	leaq	.L.str211873, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movabsq	$106, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$100, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	.loc	2 93 0 prologue_end     # kiss_fft.c:93:0
.Ltmp682:
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movq	1656(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1640(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1624(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1608(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1608(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1600(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r15, 1584(%rsp)        # 8-byte Spill
	movq	%r12, 1576(%rsp)        # 8-byte Spill
	movl	%r13d, 1572(%rsp)       # 4-byte Spill
	movq	%r14, 1560(%rsp)        # 8-byte Spill
	movq	%rbx, 1552(%rsp)        # 8-byte Spill
	movq	%r10, 1544(%rsp)        # 8-byte Spill
	movq	%r11, 1536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+1640]
	#DEBUG_VALUE: kf_bfly3:fstride <- [RSP+1632]
	#DEBUG_VALUE: kf_bfly3:st <- [RSP+1624]
	#DEBUG_VALUE: kf_bfly3:m <- [RSP+1616]
.Ltmp683:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+1616]
	.loc	2 100 0                 # kiss_fft.c:100:0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp684:
	#DEBUG_VALUE: kf_bfly3:m2 <- [RSP+1528]
	.loc	2 104 0                 # kiss_fft.c:104:0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rax        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1520(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 106 0                 # kiss_fft.c:106:0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1504(%rsp)       # 8-byte Spill
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp685:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+1496]
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+1496]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
.Ltmp686:
	.loc	2 108 0                 # kiss_fft.c:108:0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
.Ltmp687:
.LBB13_1:                               # =>This Inner Loop Header: Depth=1
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str246908, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %r10
	movabsq	$2, %r11
	leaq	.L.str212874, %rbx
	movabsq	$3, %r14
	leaq	.L.str248910, %r15
	movabsq	$133, %r12
	leaq	.L.str159821, %r13
	leaq	.L.str247909, %rbp
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1444(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str215877, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str214876, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str216878, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str182844, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$132, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str244906, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str25687, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$130, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str245907, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str226888, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str243905, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str241903, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$129, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str242904, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str240902, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str227889, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str238900, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str55717, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$127, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str239901, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str237899, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str235897, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$126, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str236898, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str234896, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str232894, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str221883, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$124, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str233895, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str70732, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str231893, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str229891, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str218880, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str230892, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str228890, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str68730, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str8670, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str217879, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$122, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str75737, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str224886, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str225887, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str222884, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str223885, %rax
	vmovsd	.LCPI13_0, %xmm0
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str169831, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$119, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str220882, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str165827, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str219881, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str162824, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str213875, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str161823, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str204866, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$116, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str66728, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$115, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str34696, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str61723, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$114, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str64726, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str145807, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	movabsq	$112, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str53715, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str58720, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str143805, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str57719, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str136798, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movabsq	$111, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str108770, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str9671, %rax
	.loc	2 111 0                 # kiss_fft.c:111:0
.Ltmp688:
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movq	1376(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 568(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 564(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	896(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1444(%rsp), %eax        # 4-byte Reload
	movq	%r9, 528(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 520(%rsp)         # 8-byte Spill
	movq	%r13, 512(%rsp)         # 8-byte Spill
	movq	%rbp, 504(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 496(%rsp)        # 8-byte Spill
	movq	%r15, 488(%rsp)         # 8-byte Spill
	movq	%r14, 480(%rsp)         # 8-byte Spill
	movq	%r10, 472(%rsp)         # 8-byte Spill
	movq	%r11, 464(%rsp)         # 8-byte Spill
	movq	%rbx, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 448(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 440(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 432(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 424(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 408(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 392(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	vmovsd	392(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	384(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	vmovsd	384(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	vmovsd	392(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	368(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp689:
	.loc	2 112 0                 # kiss_fft.c:112:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 336(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 328(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 304(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 288(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	288(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	280(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	288(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	vmovsd	304(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	264(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp690:
	.loc	2 114 0                 # kiss_fft.c:114:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	272(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp691:
	.loc	2 115 0                 # kiss_fft.c:115:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	272(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp692:
	.loc	2 116 0                 # kiss_fft.c:116:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	552(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp693:
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+208]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1448(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp694:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+200]
	.loc	2 119 0                 # kiss_fft.c:119:0
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 120 0                 # kiss_fft.c:120:0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 160(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 122 0                 # kiss_fft.c:122:0
.Ltmp695:
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	224(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
.Ltmp696:
	.loc	2 124 0                 # kiss_fft.c:124:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 120(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 104(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	104(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 96(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp697:
	.loc	2 126 0                 # kiss_fft.c:126:0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	88(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	344(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 127 0                 # kiss_fft.c:127:0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	136(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 64(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 129 0                 # kiss_fft.c:129:0
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 48(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 130 0                 # kiss_fft.c:130:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	40(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 132 0                 # kiss_fft.c:132:0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp698:
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+24]
	.loc	2 133 0                 # kiss_fft.c:133:0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	544(%rsp), %rcx         # 8-byte Reload
	addq	$-1, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp699:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+16]
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rdx, 1472(%rsp)        # 8-byte Spill
	movq	%rsi, 1464(%rsp)        # 8-byte Spill
	movq	%rdi, 1456(%rsp)        # 8-byte Spill
	jne	.LBB13_2
	jmp	.LBB13_1
.Ltmp700:
.LBB13_2:
	movabsq	$134, %rdi
	leaq	.L.str159821, %rsi
	leaq	.L.str248910, %rdx
	leaq	.L.str249911, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 134 0                 # kiss_fft.c:134:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$1864, %rsp             # imm = 0x748
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp701:
.Ltmp702:
	.size	kf_bfly3, .Ltmp702-kf_bfly3
.Lfunc_end13:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly2,@function
kf_bfly2:                               # @kf_bfly2
	.cfi_startproc
.Lfunc_begin14:
	.loc	2 27 0                  # kiss_fft.c:27:0
# BB#0:
	pushq	%rbp
.Ltmp710:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp711:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp712:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp713:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp714:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp715:
	.cfi_def_cfa_offset 56
	subq	$1160, %rsp             # imm = 0x488
.Ltmp716:
	.cfi_def_cfa_offset 1216
.Ltmp717:
	.cfi_offset %rbx, -56
.Ltmp718:
	.cfi_offset %r12, -48
.Ltmp719:
	.cfi_offset %r13, -40
.Ltmp720:
	.cfi_offset %r14, -32
.Ltmp721:
	.cfi_offset %r15, -24
.Ltmp722:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str202864, %r9
	leaq	.L.str4666, %r10
	movabsq	$32, %r11
	leaq	.L.str155817, %rbx
	leaq	.L.str1663, %r14
	leaq	.L.str201863, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str7669, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str6668, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$31, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str115777, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str127789, %rax
	.loc	2 22 0 prologue_end     # kiss_fft.c:22:0
.Ltmp723:
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1008(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1000(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 996(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%r8, 984(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%r9, 976(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 972(%rsp)         # 4-byte Spill
	movq	%r15, 960(%rsp)         # 8-byte Spill
	movq	%r12, 952(%rsp)         # 8-byte Spill
	movl	%r13d, 948(%rsp)        # 4-byte Spill
	movq	%r14, 936(%rsp)         # 8-byte Spill
	movq	%rbx, 928(%rsp)         # 8-byte Spill
	movq	%r10, 920(%rsp)         # 8-byte Spill
	movq	%r11, 912(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	996(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+1016]
	#DEBUG_VALUE: kf_bfly2:fstride <- [RSP+1008]
	#DEBUG_VALUE: kf_bfly2:st <- [RSP+1000]
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+996]
	.loc	2 29 0                  # kiss_fft.c:29:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1000(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 904(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp724:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+904]
	.loc	2 31 0                  # kiss_fft.c:31:0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	996(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 896(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	896(%rsp), %rax         # 8-byte Reload
	shlq	$4, %rax
	movq	1016(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp725:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+888]
	.loc	2 32 0                  # kiss_fft.c:32:0
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rax         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movl	996(%rsp), %ebp         # 4-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movl	%ebp, 868(%rsp)         # 4-byte Spill
	movq	%rdx, 856(%rsp)         # 8-byte Spill
.Ltmp726:
.LBB14_1:                               # =>This Inner Loop Header: Depth=1
	movq	856(%rsp), %rax         # 8-byte Reload
	movl	868(%rsp), %ecx         # 4-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str145807, %r8
	movabsq	$0, %r9
	leaq	.L.str4666, %r10
	movabsq	$2, %r11
	leaq	.L.str202864, %rbx
	movabsq	$3, %r14
	leaq	.L.str152814, %r15
	movabsq	$41, %r12
	leaq	.L.str155817, %r13
	leaq	.L.str210872, %rbp
	movl	%ecx, 852(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 848(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str61723, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str3665, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str205867, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 784(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str143805, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str182844, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str58720, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str203865, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$39, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str57719, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str47709, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$38, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str209871, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str34696, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str56718, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str55717, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str38700, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str208870, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str28690, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str54716, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str53715, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str19681, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str207869, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str136798, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str43705, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str9671, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str206868, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str40702, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str133795, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str204866, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str127789, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$36, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str130792, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str108770, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str16678, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str103765, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str123785, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str25687, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str102764, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str105767, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str24686, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str14676, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str1663, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str120782, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str200862, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str2664, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str7669, %rax
	.loc	2 35 0                  # kiss_fft.c:35:0
.Ltmp727:
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	720(%rsp), %rax         # 8-byte Reload
	movl	%ecx, 308(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	360(%rsp), %rax         # 8-byte Reload
	movq	%r8, 296(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	848(%rsp), %eax         # 4-byte Reload
	movq	%r9, 288(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 280(%rsp)         # 8-byte Spill
	movq	%r12, 272(%rsp)         # 8-byte Spill
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%rbp, 256(%rsp)         # 8-byte Spill
	movq	%r14, 248(%rsp)         # 8-byte Spill
	movq	%rbx, 240(%rsp)         # 8-byte Spill
	movq	%r10, 232(%rsp)         # 8-byte Spill
	movq	%r11, 224(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 216(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 208(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	208(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 184(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	160(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	144(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp728:
	.loc	2 36 0                  # kiss_fft.c:36:0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1008(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	312(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp729:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+120]
	.loc	2 37 0                  # kiss_fft.c:37:0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp730:
	.loc	2 38 0                  # kiss_fft.c:38:0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	vmovsd	72(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 64(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	56(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 48(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp731:
	.loc	2 39 0                  # kiss_fft.c:39:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp732:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+40]
	.loc	2 40 0                  # kiss_fft.c:40:0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp733:
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+32]
	.loc	2 41 0                  # kiss_fft.c:41:0
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 28(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp734:
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+28]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 27(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 868(%rsp)         # 4-byte Spill
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%rsi, 856(%rsp)         # 8-byte Spill
	jne	.LBB14_2
	jmp	.LBB14_1
.Ltmp735:
.LBB14_2:
	movabsq	$42, %rdi
	leaq	.L.str155817, %rsi
	leaq	.L.str152814, %rdx
	leaq	.L.str154816, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 42 0                  # kiss_fft.c:42:0
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$1160, %rsp             # imm = 0x488
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp736:
.Ltmp737:
	.size	kf_bfly2, .Ltmp737-kf_bfly2
.Lfunc_end14:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI15_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI15_1:
	.quad	4616189618054758400     # double 4
.LCPI15_2:
	.quad	4607182418800017408     # double 1
.LCPI15_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	pythag
	.align	16, 0x90
	.type	pythag,@function
pythag:                                 # @pythag
	.cfi_startproc
.Lfunc_begin15:
	.loc	5 70 0                  # eispack.c:70:0
# BB#0:
	pushq	%rbp
.Ltmp745:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp746:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp747:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp748:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp749:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp750:
	.cfi_def_cfa_offset 56
	subq	$1464, %rsp             # imm = 0x5B8
.Ltmp751:
	.cfi_def_cfa_offset 1520
.Ltmp752:
	.cfi_offset %rbx, -56
.Ltmp753:
	.cfi_offset %r12, -48
.Ltmp754:
	.cfi_offset %r13, -40
.Ltmp755:
	.cfi_offset %r14, -32
.Ltmp756:
	.cfi_offset %r15, -24
.Ltmp757:
	.cfi_offset %rbp, -16
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str91109, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	leaq	.L.str51105, %r9
	movabsq	$3, %r10
	leaq	r8_max, %r11
	leaq	.L.str121112, %rbx
	movabsq	$77, %r14
	leaq	.L.str31103, %r15
	leaq	.L.str41104, %r12
	leaq	.L.str111111, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str101110, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	5 11 0 prologue_end     # eispack.c:11:0
.Ltmp758:
	movq	%rdi, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 1376(%rsp)       # 8-byte Spill
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	vmovsd	%xmm1, 1328(%rsp)       # 8-byte Spill
	movq	%r12, 1320(%rsp)        # 8-byte Spill
	movq	%r14, 1312(%rsp)        # 8-byte Spill
	movq	%r15, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbp, 1288(%rsp)        # 8-byte Spill
	movq	%rbx, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	movq	%r10, 1264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	#DEBUG_VALUE: pythag:a <- [RSP+1376]
	#DEBUG_VALUE: pythag:b <- [RSP+1328]
	.loc	5 77 0                  # eispack.c:77:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1376(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI15_0(%rip), %xmm0
	vmovsd	1376(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1256(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI15_0(%rip), %xmm0
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1248(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_max
.Ltmp759:
	movabsq	$1, %rax
	leaq	.L.str131113, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str171117, %r8
	movabsq	$3, %r9
	leaq	.L.str161116, %r10
	movabsq	$79, %r11
	leaq	.L.str31103, %rbx
	leaq	.L.str41104, %r14
	leaq	.L.str151115, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str111111, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rdi, 1208(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 1184(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1148(%rsp)       # 4-byte Spill
	movq	%r15, 1136(%rsp)        # 8-byte Spill
	movl	%ebp, 1132(%rsp)        # 4-byte Spill
	movq	%r13, 1120(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1112(%rsp)       # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp760:
	#DEBUG_VALUE: pythag:p <- [RSP+1184]
	.loc	5 79 0                  # eispack.c:79:0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1079(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_1
	jmp	.LBB15_3
.Ltmp761:
.LBB15_1:
	movabsq	$2, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str91109, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %r8
	leaq	.L.str51105, %r9
	movabsq	$3, %r10
	leaq	r8_min, %r11
	leaq	.L.str191119, %rbx
	movabsq	$81, %r14
	leaq	.L.str31103, %r15
	leaq	.L.str161116, %r12
	leaq	.L.str181118, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1056(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 81 0                  # eispack.c:81:0
.Ltmp762:
	movq	%rdi, 1040(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movl	%esi, 1036(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1024(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 1008(%rsp)         # 8-byte Spill
	movq	%rbp, %r8
	movl	1052(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 1000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 992(%rsp)         # 8-byte Spill
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movq	%r10, 976(%rsp)         # 8-byte Spill
	movq	%rbx, 968(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	1056(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_min
	movabsq	$1, %rax
	leaq	.L.str231123, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251125, %r8
	movabsq	$3, %r9
	leaq	.L.str171117, %r10
	movabsq	$88, %r11
	leaq	.L.str31103, %rbx
	leaq	.L.str161116, %r14
	leaq	.L.str241124, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	vmovsd	.LCPI15_1, %xmm1
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str221122, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str211121, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str201120, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$82, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str181118, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str111111, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 780(%rsp)        # 4-byte Spill
	movq	%r15, 768(%rsp)         # 8-byte Spill
	movl	%ebp, 764(%rsp)         # 4-byte Spill
	movq	%r13, 752(%rsp)         # 8-byte Spill
	vmovsd	%xmm1, 744(%rsp)        # 8-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 704(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp763:
	#DEBUG_VALUE: pythag:r <- [RSP+704]
	.loc	5 82 0                  # eispack.c:82:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp764:
	#DEBUG_VALUE: pythag:r <- [RSP+696]
	.loc	5 86 0                  # eispack.c:86:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp765:
	#DEBUG_VALUE: pythag:t <- [RSP+688]
	.loc	5 88 0                  # eispack.c:88:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movb	%cl, 687(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vmovsd	696(%rsp), %xmm2        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm3       # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_3
.Ltmp766:
.LBB15_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmovsd	672(%rsp), %xmm2        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str371137, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251125, %r8
	movabsq	$3, %r9
	leaq	.L.str171117, %r10
	movabsq	$88, %r11
	leaq	.L.str31103, %rbx
	leaq	.L.str381138, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$4, %r13
	vmovsd	.LCPI15_1, %xmm3
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str271127, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str311131, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str301130, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$96, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str351135, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str321132, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str341134, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str291129, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str281128, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$95, %rax
	vmovsd	.LCPI15_2, %xmm4
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str331133, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$94, %rax
	vmovsd	.LCPI15_3, %xmm5
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str261126, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$93, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str211121, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str161116, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str111111, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str221122, %rax
	.loc	5 93 0                  # eispack.c:93:0
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 360(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 336(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 328(%rsp)        # 8-byte Spill
	vmovsd	%xmm5, 320(%rsp)        # 8-byte Spill
	movq	%r12, 312(%rsp)         # 8-byte Spill
	movl	%r15d, 308(%rsp)        # 4-byte Spill
	movq	%r10, 296(%rsp)         # 8-byte Spill
	movq	%r11, 288(%rsp)         # 8-byte Spill
	movq	%rbx, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movl	%ebp, 268(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp767:
	#DEBUG_VALUE: pythag:s <- [RSP+256]
	.loc	5 94 0                  # eispack.c:94:0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp768:
	#DEBUG_VALUE: pythag:u <- [RSP+240]
	.loc	5 95 0                  # eispack.c:95:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp769:
	#DEBUG_VALUE: pythag:p <- [RSP+232]
	.loc	5 96 0                  # eispack.c:96:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp770:
	#DEBUG_VALUE: pythag:r <- [RSP+208]
	.loc	5 86 0                  # eispack.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp771:
	#DEBUG_VALUE: pythag:t <- [RSP+352]
	.loc	5 88 0                  # eispack.c:88:0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movb	%cl, 199(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	272(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	232(%rsp), %xmm1        # 8-byte Reload
	vmovsd	208(%rsp), %xmm2        # 8-byte Reload
	vmovsd	232(%rsp), %xmm3        # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_3
	jmp	.LBB15_2
.Ltmp772:
.LBB15_3:                               # %.loopexit
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str391139, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %r9
	movabsq	$99, %rdi
	leaq	.L.str31103, %r8
	leaq	.L.str171117, %r10
	leaq	.L.str401140, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str41104, %r15
	leaq	.L.str111111, %r12
	movabsq	$2, %r13
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str161116, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str291129, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str251125, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 99 0                  # eispack.c:99:0
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 80(%rsp)         # 8-byte Spill
	movq	%r14, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movl	%ebx, 52(%rsp)          # 4-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	52(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	addq	$1464, %rsp             # imm = 0x5B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp773:
.Ltmp774:
	.size	pythag, .Ltmp774-pythag
.Lfunc_end15:
	.cfi_endproc

	.globl	r8_max
	.align	16, 0x90
	.type	r8_max,@function
r8_max:                                 # @r8_max
	.cfi_startproc
.Lfunc_begin16:
	.loc	5 169 0                 # eispack.c:169:0
# BB#0:
	pushq	%rbp
.Ltmp782:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp783:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp784:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp785:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp786:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp787:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp788:
	.cfi_def_cfa_offset 288
.Ltmp789:
	.cfi_offset %rbx, -56
.Ltmp790:
	.cfi_offset %r12, -48
.Ltmp791:
	.cfi_offset %r13, -40
.Ltmp792:
	.cfi_offset %r14, -32
.Ltmp793:
	.cfi_offset %r15, -24
.Ltmp794:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_max:y <- XMM1
	#DEBUG_VALUE: r8_max:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str431143, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$180, %r8
	leaq	.L.str121112, %r9
	leaq	.L.str41104, %r10
	leaq	.L.str441144, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 143 0 prologue_end    # eispack.c:143:0
.Ltmp795:
	movl	$.L.str411141, %r15d
	movl	%r15d, %r12d
	movl	$.L.str71107, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp796:
	#DEBUG_VALUE: r8_max:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp797:
	#DEBUG_VALUE: r8_max:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp798:
	movl	$.L.str421142, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	5 172 0                 # eispack.c:172:0
.Ltmp799:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str121112, %ebx
	movl	%ebx, %eax
	movl	$.L.str41104, %ebx
	movl	%ebx, %ecx
	movl	$.L.str51105, %ebx
	movl	%ebx, %edx
	movl	$172, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp800:
	.loc	5 143 0                 # eispack.c:143:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 172 0                 # eispack.c:172:0
.Ltmp801:
	seta	%al
	.loc	5 175 0                 # eispack.c:175:0
.Ltmp802:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str431143, %ebx
	movl	%ebx, %ecx
	movl	$175, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vmaxsd	%xmm1, %xmm0, %xmm2
.Ltmp803:
	.loc	5 180 0                 # eispack.c:180:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp804:
.Ltmp805:
	.size	r8_max, .Ltmp805-r8_max
.Lfunc_end16:
	.cfi_endproc

	.globl	r8_min
	.align	16, 0x90
	.type	r8_min,@function
r8_min:                                 # @r8_min
	.cfi_startproc
.Lfunc_begin17:
	.loc	5 210 0                 # eispack.c:210:0
# BB#0:
	pushq	%rbp
.Ltmp813:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp814:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp815:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp816:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp817:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp818:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp819:
	.cfi_def_cfa_offset 288
.Ltmp820:
	.cfi_offset %rbx, -56
.Ltmp821:
	.cfi_offset %r12, -48
.Ltmp822:
	.cfi_offset %r13, -40
.Ltmp823:
	.cfi_offset %r14, -32
.Ltmp824:
	.cfi_offset %r15, -24
.Ltmp825:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_min:y <- XMM1
	#DEBUG_VALUE: r8_min:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str451145, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$221, %r8
	leaq	.L.str191119, %r9
	leaq	.L.str41104, %r10
	leaq	.L.str441144, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 184 0 prologue_end    # eispack.c:184:0
.Ltmp826:
	movl	$.L.str411141, %r15d
	movl	%r15d, %r12d
	movl	$.L.str71107, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp827:
	#DEBUG_VALUE: r8_min:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp828:
	#DEBUG_VALUE: r8_min:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp829:
	movl	$.L.str421142, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	5 213 0                 # eispack.c:213:0
.Ltmp830:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str191119, %ebx
	movl	%ebx, %eax
	movl	$.L.str41104, %ebx
	movl	%ebx, %ecx
	movl	$.L.str51105, %ebx
	movl	%ebx, %edx
	movl	$213, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp831:
	.loc	5 184 0                 # eispack.c:184:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 213 0                 # eispack.c:213:0
.Ltmp832:
	seta	%al
	.loc	5 216 0                 # eispack.c:216:0
.Ltmp833:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str451145, %ebx
	movl	%ebx, %ecx
	movl	$216, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vminsd	%xmm1, %xmm0, %xmm2
.Ltmp834:
	.loc	5 221 0                 # eispack.c:221:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp835:
.Ltmp836:
	.size	r8_min, .Ltmp836-r8_min
.Lfunc_end17:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI18_0:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
	.text
	.globl	r8_epsilon
	.align	16, 0x90
	.type	r8_epsilon,@function
r8_epsilon:                             # @r8_epsilon
	.cfi_startproc
.Lfunc_begin18:
	.loc	5 135 0                 # eispack.c:135:0
# BB#0:
	pushq	%rbp
.Ltmp840:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp841:
	.cfi_def_cfa_offset 24
	subq	$72, %rsp
.Ltmp842:
	.cfi_def_cfa_offset 96
.Ltmp843:
	.cfi_offset %rbx, -24
.Ltmp844:
	.cfi_offset %rbp, -16
	vmovsd	.LCPI18_0, %xmm0
	movabsq	$1, %rax
	movabsq	$64, %rsi
	movabsq	$0, %rcx
	leaq	.L.str141114, %rdx
	leaq	.L.str71107, %r9
	movabsq	$138, %rdi
	leaq	.L.str461146, %r8
	leaq	.L.str41104, %r10
	leaq	.L.str471147, %r11
	movl	$0, %ebx
	movl	$1, %ebp
.Ltmp845:
	#DEBUG_VALUE: r8_epsilon:value <- 2.220446e-16
	.loc	5 138 0 prologue_end    # eispack.c:138:0
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%rax, %r8
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 32(%rsp)         # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp846:
.Ltmp847:
	.size	r8_epsilon, .Ltmp847-r8_epsilon
.Lfunc_end18:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI19_0:
	.quad	-4616189618054758400    # double -1
.LCPI19_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	r8_sign
	.align	16, 0x90
	.type	r8_sign,@function
r8_sign:                                # @r8_sign
	.cfi_startproc
.Lfunc_begin19:
	.loc	5 251 0                 # eispack.c:251:0
# BB#0:
	pushq	%rbp
.Ltmp855:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp856:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp857:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp858:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp859:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp860:
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
.Ltmp861:
	.cfi_def_cfa_offset 304
.Ltmp862:
	.cfi_offset %rbx, -56
.Ltmp863:
	.cfi_offset %r12, -48
.Ltmp864:
	.cfi_offset %r13, -40
.Ltmp865:
	.cfi_offset %r14, -32
.Ltmp866:
	.cfi_offset %r15, -24
.Ltmp867:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_sign:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str491149, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$262, %r8               # imm = 0x106
	leaq	.L.str481148, %r9
	leaq	.L.str41104, %r10
	leaq	.L.str471147, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 225 0 prologue_end    # eispack.c:225:0
.Ltmp868:
	movl	$.L.str411141, %r15d
	movl	%r15d, %r12d
	movl	$.L.str71107, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	232(%rsp), %r15         # 8-byte Reload
	movl	%esi, 204(%rsp)         # 4-byte Spill
	movq	%r15, %rsi
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
.Ltmp869:
	#DEBUG_VALUE: r8_sign:x <- [RSP+192]
	movq	224(%rsp), %r15         # 8-byte Reload
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 168(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 160(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movl	%ebx, 116(%rsp)         # 4-byte Spill
	movq	%r11, 104(%rsp)         # 8-byte Spill
	movq	%r10, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp870:
	.loc	5 254 0                 # eispack.c:254:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str481148, %ebx
	movl	%ebx, %eax
	movl	$.L.str41104, %ebx
	movl	%ebx, %ecx
	movl	$.L.str51105, %ebx
	movl	%ebx, %edx
	movl	$254, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	204(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str141114, %r9d
	movl	%r9d, %eax
	movl	$2, %r9d
	movl	%r9d, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, %rdi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 64(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	%rax, 48(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	192(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	5 257 0                 # eispack.c:257:0
.Ltmp871:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	vmovsd	.LCPI19_0(%rip), %xmm2
	vmovsd	.LCPI19_1(%rip), %xmm3
	vmovaps	%xmm2, %xmm4
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 24(%rsp)         # 8-byte Spill
	vmovsd	%xmm4, 16(%rsp)         # 8-byte Spill
	ja	.LBB19_2
# BB#1:
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 16(%rsp)         # 8-byte Spill
.LBB19_2:
	vmovsd	16(%rsp), %xmm0         # 8-byte Reload
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm0, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str491149, %eax
	movl	%eax, %ecx
	movl	$257, %eax              # imm = 0x101
	movl	%eax, %edi
	movl	$50, %eax
	movl	%eax, %r8d
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movl	204(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp872:
	.loc	5 262 0                 # eispack.c:262:0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp873:
.Ltmp874:
	.size	r8_sign, .Ltmp874-r8_sign
.Lfunc_end19:
	.cfi_endproc

	.globl	rs
	.align	16, 0x90
	.type	rs,@function
rs:                                     # @rs
	.cfi_startproc
.Lfunc_begin20:
	.loc	5 331 0                 # eispack.c:331:0
# BB#0:
	pushq	%rbp
.Ltmp878:
	.cfi_def_cfa_offset 16
.Ltmp879:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp880:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1528, %rsp             # imm = 0x5F8
.Ltmp881:
	.cfi_offset %rbx, -56
.Ltmp882:
	.cfi_offset %r12, -48
.Ltmp883:
	.cfi_offset %r13, -40
.Ltmp884:
	.cfi_offset %r14, -32
.Ltmp885:
	.cfi_offset %r15, -24
	movb	%cl, %al
	#DEBUG_VALUE: rs:matz <- AL
	#DEBUG_VALUE: rs:z <- R8
	#DEBUG_VALUE: rs:w <- RDX
	#DEBUG_VALUE: rs:a <- RSI
	#DEBUG_VALUE: rs:n <- EDI
	movl	$0, %ecx
	movabsq	$1, %r9
	leaq	.L.str551155, %r10
	movabsq	$0, %r11
	leaq	.L.str71107, %rbx
	movabsq	$2, %r14
	leaq	.L.str541154, %r15
	movabsq	$3, %r12
	leaq	.L.str531153, %r13
	movb	%al, -41(%rbp)          # 1-byte Spill
.Ltmp886:
	#DEBUG_VALUE: rs:matz <- [RBP+-41]
	movabsq	$340, %rax              # imm = 0x154
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str501150, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str41104, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	.L.str521152, %rax
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str111111, %rax
	.loc	5 267 0 prologue_end    # eispack.c:267:0
.Ltmp887:
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	subq	$16, %rsp
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str71107, (%rax)
	movl	$.L.str511151, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -128(%rbp)        # 8-byte Spill
.Ltmp888:
	#DEBUG_VALUE: rs:a <- [RBP+-128]
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -136(%rbp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	%edi, -172(%rbp)        # 4-byte Spill
.Ltmp889:
	#DEBUG_VALUE: rs:n <- [RBP+-172]
	movq	%rax, %rdi
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	%esi, -176(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -184(%rbp)        # 8-byte Spill
.Ltmp890:
	#DEBUG_VALUE: rs:w <- [RBP+-184]
	movq	%rcx, %rdx
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%r8, -200(%rbp)         # 8-byte Spill
.Ltmp891:
	#DEBUG_VALUE: rs:z <- [RBP+-200]
	movq	%rax, %r8
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%r9, -208(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r14, -216(%rbp)        # 8-byte Spill
	movq	%rbx, -224(%rbp)        # 8-byte Spill
	movq	%r15, -232(%rbp)        # 8-byte Spill
	movq	%r12, -240(%rbp)        # 8-byte Spill
	movq	%r13, -248(%rbp)        # 8-byte Spill
	movq	%r11, -256(%rbp)        # 8-byte Spill
	movq	%r10, -264(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str71107, (%rax)
	movl	$.L.str81108, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str71107, (%rax)
	movl	$.L.str581158, %esi
	movl	%esi, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	movzbl	%al, %eax
	movl	%eax, %ecx
	andq	$1, %rcx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movl	$.L.str551155, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$.L.str691169, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	5 334 0                 # eispack.c:334:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str501150, %eax
	movl	%eax, %ecx
	movl	$.L.str41104, %eax
	movl	%eax, %edx
	movl	$.L.str51105, %eax
	movl	%eax, %esi
	movl	$334, %eax              # imm = 0x14E
	movl	%eax, %edi
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rsi, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	-288(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str91109, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-192(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %r8         # 8-byte Reload
	movq	%rsi, -336(%rbp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	-336(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	5 335 0                 # eispack.c:335:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str111111, %eax
	movl	%eax, %ecx
	movl	$335, %eax              # imm = 0x14F
	movl	%eax, %edi
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-344(%rbp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-120(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp892:
	#DEBUG_VALUE: rs:fv2 <- [RBP+-352]
	#DEBUG_VALUE: rs:ierr <- 0
	.loc	5 340 0                 # eispack.c:340:0
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movl	-76(%rbp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-248(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-232(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-208(%rbp), %rsi        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB20_3
.Ltmp893:
# BB#1:
	movabsq	$5, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str601160, %r8
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$4, %r9
	leaq	.L.str591159, %r10
	movabsq	$3, %r11
	leaq	.L.str581158, %rbx
	movabsq	$2, %r14
	leaq	.L.str81108, %r15
	movabsq	$32, %r12
	leaq	.L.str511151, %r13
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	leaq	tred1, %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	leaq	.L.str571157, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	movabsq	$344, %rax              # imm = 0x158
	movq	%rax, -400(%rbp)        # 8-byte Spill
	leaq	.L.str501150, %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	leaq	.L.str541154, %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	leaq	.L.str561156, %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -436(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 344 0                 # eispack.c:344:0
.Ltmp894:
	subq	$16, %rsp
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-408(%rbp), %rax        # 8-byte Reload
	movl	%esi, -460(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%r8, -488(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-436(%rbp), %eax        # 4-byte Reload
	movq	%r9, -496(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -504(%rbp)        # 8-byte Spill
	movq	%r14, -512(%rbp)        # 8-byte Spill
	movq	%rbx, -520(%rbp)        # 8-byte Spill
	movq	%r15, -528(%rbp)        # 8-byte Spill
	movq	%r12, -536(%rbp)        # 8-byte Spill
	movq	%r11, -544(%rbp)        # 8-byte Spill
	movq	%r10, -552(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	-536(%rbp), %rsi        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-504(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-512(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-528(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-544(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-520(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-496(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-352(%rbp), %r8         # 8-byte Reload
	callq	tred1
	movabsq	$3, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str601160, %r8
	movabsq	$0, %rsi
	leaq	.L.str71107, %r9
	movabsq	$2, %r10
	leaq	.L.str581158, %r11
	movabsq	$32, %rbx
	leaq	.L.str511151, %r14
	movabsq	$4, %r15
	leaq	tqlrat, %r12
	leaq	.L.str621162, %r13
	movabsq	$346, %rax              # imm = 0x15A
	movq	%rax, -560(%rbp)        # 8-byte Spill
	leaq	.L.str501150, %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	leaq	.L.str541154, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	leaq	.L.str611161, %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -592(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -596(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 346 0                 # eispack.c:346:0
	subq	$16, %rsp
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-568(%rbp), %rax        # 8-byte Reload
	movl	%esi, -620(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%r8, -648(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-596(%rbp), %eax        # 4-byte Reload
	movq	%r9, -656(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, -664(%rbp)        # 8-byte Spill
	movq	%r12, -672(%rbp)        # 8-byte Spill
	movq	%r14, -680(%rbp)        # 8-byte Spill
	movq	%r13, -688(%rbp)        # 8-byte Spill
	movq	%rbx, -696(%rbp)        # 8-byte Spill
	movq	%r10, -704(%rbp)        # 8-byte Spill
	movq	%r11, -712(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-664(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-696(%rbp), %rsi        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-680(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-712(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-616(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	callq	tqlrat
	movl	$0, %edi
	movabsq	$1, %rcx
	leaq	.L.str181118, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str641164, %r10
	movabsq	$3, %r11
	leaq	.L.str531153, %rbx
	movabsq	$348, %r14              # imm = 0x15C
	leaq	.L.str501150, %r15
	leaq	.L.str541154, %r12
	leaq	.L.str631163, %r13
	movl	%eax, -716(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	leaq	.L.str611161, %rcx
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, -764(%rbp)        # 4-byte Spill
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -776(%rbp)        # 8-byte Spill
	movq	-736(%rbp), %rax        # 8-byte Reload
	movl	%edi, -780(%rbp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rsi, -792(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%r8, -816(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%r9, -824(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, -832(%rbp)        # 8-byte Spill
	movq	%r14, -840(%rbp)        # 8-byte Spill
	movq	%r15, -848(%rbp)        # 8-byte Spill
	movq	%r12, -856(%rbp)        # 8-byte Spill
	movq	%rbx, -864(%rbp)        # 8-byte Spill
	movq	%r11, -872(%rbp)        # 8-byte Spill
	movq	%r10, -880(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp895:
	#DEBUG_VALUE: rs:ierr <- [RBP+-716]
	.loc	5 348 0                 # eispack.c:348:0
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-800(%rbp), %rcx        # 8-byte Reload
	movq	-808(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-792(%rbp), %rcx        # 8-byte Reload
	movq	-760(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-736(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -881(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-832(%rbp), %rcx        # 8-byte Reload
	movq	-824(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-880(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB20_3
.Ltmp896:
# BB#2:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str1100, %rdx
	movabsq	$0, %rsi
	leaq	.L.str141114, %r8
	leaq	.L.str71107, %rdi
	movabsq	$2, %r9
	leaq	printf, %r10
	leaq	.L.str651165, %r11
	movabsq	$352, %rbx              # imm = 0x160
	leaq	.L.str501150, %r14
	leaq	.L.str641164, %r15
	leaq	.L.str211121, %r12
	movabsq	$49, %r13
	movq	%rsi, -896(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -900(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 352 0                 # eispack.c:352:0
.Ltmp897:
	subq	$16, %rsp
	movq	%rdi, -912(%rbp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, -916(%rbp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, -944(%rbp)         # 8-byte Spill
	movq	%r13, %r8
	movl	-900(%rbp), %r14d       # 4-byte Reload
	movq	%r9, -952(%rbp)         # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movq	%rax, -960(%rbp)        # 8-byte Spill
	movq	%r11, -968(%rbp)        # 8-byte Spill
	movq	%r10, -976(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-952(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-928(%rbp), %rdx        # 8-byte Reload
	movq	-896(%rbp), %rcx        # 8-byte Reload
	movq	-944(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str1100, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movb	%r14b, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str11101, %rsi
	movabsq	$0, %rdi
	leaq	.L.str141114, %r8
	leaq	.L.str71107, %r9
	movabsq	$2, %r10
	leaq	printf, %r11
	leaq	.L.str651165, %rbx
	movabsq	$353, %r15              # imm = 0x161
	leaq	.L.str501150, %r12
	leaq	.L.str641164, %r13
	leaq	.L.str221122, %r14
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -988(%rbp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -992(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1008(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	leaq	.L.str211121, %rcx
	.loc	5 353 0                 # eispack.c:353:0
	movl	%eax, -1020(%rbp)       # 4-byte Spill
	movl	-988(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	movq	-1008(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1040(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1072(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1080(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r14, -1088(%rbp)       # 8-byte Spill
	movq	%r15, -1096(%rbp)       # 8-byte Spill
	movq	%r12, -1104(%rbp)       # 8-byte Spill
	movq	%r13, -1112(%rbp)       # 8-byte Spill
	movq	%rbx, -1120(%rbp)       # 8-byte Spill
	movq	%r11, -1128(%rbp)       # 8-byte Spill
	movq	%r10, -1136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	-1104(%rbp), %rsi       # 8-byte Reload
	movq	-1112(%rbp), %rdx       # 8-byte Reload
	movq	-1088(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movl	-992(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1136(%rbp), %rdi       # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1120(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1048(%rbp), %rdx       # 8-byte Reload
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	movq	-1072(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str11101, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str21102, %rdi
	movabsq	$0, %r8
	leaq	.L.str141114, %r9
	leaq	.L.str71107, %r10
	movabsq	$2, %r11
	leaq	printf, %rbx
	leaq	.L.str651165, %r14
	movabsq	$354, %r15              # imm = 0x162
	leaq	.L.str501150, %rsi
	leaq	.L.str641164, %r12
	leaq	.L.str231123, %r13
	movq	%rcx, -1144(%rbp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -1148(%rbp)       # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -1152(%rbp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1160(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1168(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1176(%rbp)       # 8-byte Spill
	leaq	.L.str221122, %rcx
	.loc	5 354 0                 # eispack.c:354:0
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	movl	-1148(%rbp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1192(%rbp)       # 8-byte Spill
	movq	-1168(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1176(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1208(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1192(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1144(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1232(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1232(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1240(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r13, -1248(%rbp)       # 8-byte Spill
	movq	%r15, -1256(%rbp)       # 8-byte Spill
	movq	%r12, -1264(%rbp)       # 8-byte Spill
	movq	%r14, -1272(%rbp)       # 8-byte Spill
	movq	%rbx, -1280(%rbp)       # 8-byte Spill
	movq	%r10, -1288(%rbp)       # 8-byte Spill
	movq	%r11, -1296(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1256(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1264(%rbp), %rdx       # 8-byte Reload
	movq	-1248(%rbp), %rcx       # 8-byte Reload
	movq	-1160(%rbp), %r8        # 8-byte Reload
	movl	-1152(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1296(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1280(%rbp), %rdx       # 8-byte Reload
	movq	-1144(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str21102, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str531153, %r8
	leaq	.L.str71107, %rdi
	movabsq	$355, %r9               # imm = 0x163
	leaq	.L.str501150, %rsi
	leaq	.L.str641164, %r10
	leaq	.L.str661166, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rcx, -1304(%rbp)       # 8-byte Spill
	leaq	.L.str231123, %rcx
	.loc	5 355 0                 # eispack.c:355:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rdi, -1312(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, -1320(%rbp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1304(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1336(%rbp), %r12       # 8-byte Reload
	movq	%r8, -1344(%rbp)        # 8-byte Spill
	movq	%r12, %r8
	movq	-1328(%rbp), %r13       # 8-byte Reload
	movq	%r9, -1352(%rbp)        # 8-byte Spill
	movq	%r13, %r9
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r15d, -1356(%rbp)      # 4-byte Spill
	movq	%r11, -1368(%rbp)       # 8-byte Spill
	movq	%rbx, -1376(%rbp)       # 8-byte Spill
	movl	%r14d, -1380(%rbp)      # 4-byte Spill
	movq	%r10, -1392(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1352(%rbp), %rdi       # 8-byte Reload
	movq	-1320(%rbp), %rsi       # 8-byte Reload
	movq	-1392(%rbp), %rdx       # 8-byte Reload
	movq	-1368(%rbp), %rcx       # 8-byte Reload
	movq	-1376(%rbp), %r8        # 8-byte Reload
	movl	-1380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1304(%rbp), %rdi       # 8-byte Reload
	movq	-1328(%rbp), %rsi       # 8-byte Reload
	movq	-1328(%rbp), %rdx       # 8-byte Reload
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1328(%rbp), %r9        # 8-byte Reload
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, -356(%rbp)       # 4-byte Spill
.Ltmp898:
.LBB20_3:
	movl	-356(%rbp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str671167, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$363, %r9               # imm = 0x16B
	leaq	.L.str501150, %r10
	leaq	.L.str531153, %r11
	leaq	.L.str681168, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	leaq	.L.str641164, %r13
	movq	%rcx, -1400(%rbp)       # 8-byte Spill
	leaq	.L.str611161, %rcx
	movq	%rcx, -1408(%rbp)       # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, -1416(%rbp)       # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, -1424(%rbp)       # 8-byte Spill
	leaq	.L.str41104, %rcx
	movq	%rcx, -1432(%rbp)       # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, -1440(%rbp)       # 8-byte Spill
	leaq	.L.str541154, %rcx
	movq	%rcx, -1448(%rbp)       # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, -1456(%rbp)       # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 363 0                 # eispack.c:363:0
	subq	$16, %rsp
	movq	%rcx, -1464(%rbp)       # 8-byte Spill
	movq	-1456(%rbp), %rcx       # 8-byte Reload
	movq	%rdi, -1472(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1480(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -1496(%rbp)        # 8-byte Spill
	movq	-1464(%rbp), %r8        # 8-byte Reload
	movq	%r9, -1504(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	movl	%r14d, -1512(%rbp)      # 4-byte Spill
	movl	%r15d, -1516(%rbp)      # 4-byte Spill
	movq	%r12, -1528(%rbp)       # 8-byte Spill
	movq	%r13, -1536(%rbp)       # 8-byte Spill
	movq	%rbx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, -1552(%rbp)       # 8-byte Spill
	movq	%r10, -1560(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1440(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1416(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1504(%rbp), %rdi       # 8-byte Reload
	movq	-1560(%rbp), %rsi       # 8-byte Reload
	movq	-1552(%rbp), %rdx       # 8-byte Reload
	movq	-1544(%rbp), %rcx       # 8-byte Reload
	movq	-1400(%rbp), %r8        # 8-byte Reload
	movl	-1512(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp899:
.Ltmp900:
	.size	rs, .Ltmp900-rs
.Lfunc_end20:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI21_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI21_1:
	.quad	-9223372036854775808    # double -0
	.text
	.globl	tred1
	.align	16, 0x90
	.type	tred1,@function
tred1:                                  # @tred1
	.cfi_startproc
.Lfunc_begin21:
	.loc	5 767 0                 # eispack.c:767:0
# BB#0:
	pushq	%rbp
.Ltmp908:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp909:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp910:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp911:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp912:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp913:
	.cfi_def_cfa_offset 56
	subq	$11128, %rsp            # imm = 0x2B78
.Ltmp914:
	.cfi_def_cfa_offset 11184
.Ltmp915:
	.cfi_offset %rbx, -56
.Ltmp916:
	.cfi_offset %r12, -48
.Ltmp917:
	.cfi_offset %r13, -40
.Ltmp918:
	.cfi_offset %r14, -32
.Ltmp919:
	.cfi_offset %r15, -24
.Ltmp920:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str51105, %r9
	movabsq	$0, %r10
	leaq	.L.str71107, %r11
	movabsq	$2, %rbx
	leaq	.L.str721172, %r14
	movabsq	$3, %r15
	leaq	.L.str711171, %r12
	movabsq	$778, %r13              # imm = 0x30A
	leaq	.L.str571157, %rbp
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str41104, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str701170, %rax
	movq	%rsi, 11104(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11100(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11032(%rsp)       # 8-byte Spill
	leaq	.L.str1601260, %rax
	movq	%rax, 11024(%rsp)       # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 11016(%rsp)       # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 11008(%rsp)       # 8-byte Spill
	leaq	.L.str81108, %rax
	.loc	5 699 0 prologue_end    # eispack.c:699:0
.Ltmp921:
	movl	%esi, 11004(%rsp)       # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 10992(%rsp)       # 8-byte Spill
	movq	11040(%rsp), %rax       # 8-byte Reload
	movl	%edi, 10988(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	11072(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10976(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10968(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11120(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10960(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11064(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10952(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10944(%rsp)        # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%r15, 10936(%rsp)       # 8-byte Spill
	movq	%r12, 10928(%rsp)       # 8-byte Spill
	movq	%rbp, 10920(%rsp)       # 8-byte Spill
	movq	%r13, 10912(%rsp)       # 8-byte Spill
	movq	%r14, 10904(%rsp)       # 8-byte Spill
	movq	%rbx, 10896(%rsp)       # 8-byte Spill
	movq	%r10, 10888(%rsp)       # 8-byte Spill
	movq	%r11, 10880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10992(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11008(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11016(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11024(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tred1:n <- [RSP+10988]
	#DEBUG_VALUE: tred1:a <- [RSP+11104]
	#DEBUG_VALUE: tred1:d <- [RSP+10968]
	#DEBUG_VALUE: tred1:e <- [RSP+10960]
	#DEBUG_VALUE: tred1:e2 <- [RSP+10952]
.Ltmp922:
	#DEBUG_VALUE: tred1:j <- 0
	.loc	5 778 0                 # eispack.c:778:0
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	10944(%rsp), %rcx       # 8-byte Reload
	movq	11048(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	10888(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11064(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11080(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10879(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	11088(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10928(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10904(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_1
	jmp	.LBB21_36
.Ltmp923:
.LBB21_1:                               # %.lr.ph58
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str741174, %r8
	leaq	.L.str71107, %rdx
	movabsq	$778, %rdi              # imm = 0x30A
	leaq	.L.str571157, %rsi
	leaq	.L.str711171, %r9
	leaq	.L.str731173, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str91109, %r12
	leaq	.L.str511151, %r13
	movq	%rax, 10864(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10856(%rsp)       # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 10848(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10840(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 780 0                 # eispack.c:780:0
.Ltmp924:
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10824(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10816(%rsp)       # 8-byte Spill
	movq	%rdx, 10808(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10800(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10832(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10792(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10784(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10776(%rsp)       # 8-byte Spill
	movl	%ebp, 10772(%rsp)       # 4-byte Spill
	movq	%r15, 10760(%rsp)       # 8-byte Spill
	movq	%r13, 10752(%rsp)       # 8-byte Spill
	movq	%r12, 10744(%rsp)       # 8-byte Spill
	movl	%ebx, 10740(%rsp)       # 4-byte Spill
	movq	%r10, 10728(%rsp)       # 8-byte Spill
	movq	%r11, 10720(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10720(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	10864(%rsp), %rcx       # 8-byte Reload
	movq	10848(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10752(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp925:
	.loc	5 778 0                 # eispack.c:778:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10776(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10744(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10716(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10816(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10728(%rsp), %rcx       # 8-byte Reload
	movq	10720(%rsp), %r8        # 8-byte Reload
	movl	10740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10864(%rsp), %rsi       # 8-byte Reload
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10792(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	jmp	.LBB21_4
.Ltmp926:
.LBB21_2:                               # %.preheader53
	movabsq	$1, %rax
	leaq	.L.str111111, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721172, %r8
	movabsq	$3, %r9
	leaq	.L.str771177, %r10
	movabsq	$783, %r11              # imm = 0x30F
	leaq	.L.str571157, %rbx
	leaq	.L.str751175, %r14
	leaq	.L.str761176, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 783 0                 # eispack.c:783:0
.Ltmp927:
	movq	%rdi, 10664(%rsp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 10656(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 10648(%rsp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 10640(%rsp)       # 8-byte Spill
	movq	%r8, 10632(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10624(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10616(%rsp)       # 8-byte Spill
	movq	%r15, 10608(%rsp)       # 8-byte Spill
	movl	%ebp, 10604(%rsp)       # 4-byte Spill
	movl	%r12d, 10600(%rsp)      # 4-byte Spill
	movq	%r13, 10592(%rsp)       # 8-byte Spill
	movq	%rbx, 10584(%rsp)       # 8-byte Spill
	movq	%r11, 10576(%rsp)       # 8-byte Spill
	movq	%r10, 10568(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10648(%rsp), %rcx       # 8-byte Reload
	movq	10672(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10680(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10567(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10584(%rsp), %rsi       # 8-byte Reload
	movq	10616(%rsp), %rdx       # 8-byte Reload
	movq	10608(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10624(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10568(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10632(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_3
	jmp	.LBB21_36
.LBB21_3:                               # %.lr.ph55
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str791179, %r8
	leaq	.L.str71107, %rdx
	movabsq	$783, %rdi              # imm = 0x30F
	leaq	.L.str571157, %rsi
	leaq	.L.str771177, %r9
	leaq	.L.str781178, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str131113, %r12
	leaq	.L.str511151, %r13
	movq	%rax, 10552(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10544(%rsp)       # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 10536(%rsp)       # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 10528(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 785 0                 # eispack.c:785:0
.Ltmp928:
	movq	%rax, 10520(%rsp)       # 8-byte Spill
	movq	10528(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10512(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10504(%rsp)       # 8-byte Spill
	movq	%rdx, 10496(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10488(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10520(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10480(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10472(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10464(%rsp)       # 8-byte Spill
	movl	%ebp, 10460(%rsp)       # 4-byte Spill
	movq	%r15, 10448(%rsp)       # 8-byte Spill
	movq	%r13, 10440(%rsp)       # 8-byte Spill
	movq	%r12, 10432(%rsp)       # 8-byte Spill
	movl	%ebx, 10428(%rsp)       # 4-byte Spill
	movq	%r10, 10416(%rsp)       # 8-byte Spill
	movq	%r11, 10408(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10408(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10544(%rsp), %rdx       # 8-byte Reload
	movq	10552(%rsp), %rcx       # 8-byte Reload
	movq	10536(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp929:
	.loc	5 783 0                 # eispack.c:783:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10464(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10432(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10404(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10512(%rsp), %rdi       # 8-byte Reload
	movq	10504(%rsp), %rsi       # 8-byte Reload
	movq	10472(%rsp), %rdx       # 8-byte Reload
	movq	10416(%rsp), %rcx       # 8-byte Reload
	movq	10408(%rsp), %r8        # 8-byte Reload
	movl	10428(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10480(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10552(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	jmp	.LBB21_7
.Ltmp930:
.LBB21_4:                               # =>This Inner Loop Header: Depth=1
	movq	10704(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str851185, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str741174, %r9
	movabsq	$3, %r10
	leaq	.L.str751175, %r11
	movabsq	$778, %rbx              # imm = 0x30A
	leaq	.L.str571157, %r14
	leaq	.L.str861186, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str841184, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	leaq	.L.str811181, %rax
	movq	%rax, 10336(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 10328(%rsp)       # 8-byte Spill
	leaq	.L.str801180, %rax
	movq	%rax, 10320(%rsp)       # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 10312(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10304(%rsp)       # 8-byte Spill
	leaq	.L.str261126, %rax
	movq	%rax, 10296(%rsp)       # 8-byte Spill
	leaq	.L.str321132, %rax
	movq	%rax, 10288(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10280(%rsp)       # 8-byte Spill
	leaq	.L.str831183, %rax
	movq	%rax, 10272(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 10264(%rsp)       # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 10256(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 10248(%rsp)       # 8-byte Spill
	leaq	.L.str231123, %rax
	movq	%rax, 10240(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 10232(%rsp)       # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 10224(%rsp)       # 8-byte Spill
	leaq	.L.str221122, %rax
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str211121, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 10200(%rsp)       # 8-byte Spill
	leaq	.L.str91109, %rax
	movq	%rax, 10192(%rsp)       # 8-byte Spill
	leaq	.L.str201120, %rax
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	leaq	.L.str181118, %rax
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str711171, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 780 0                 # eispack.c:780:0
.Ltmp931:
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	movq	10152(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10136(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10128(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 10120(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	10320(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10112(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10144(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10104(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10096(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10088(%rsp)       # 8-byte Spill
	movl	%ebp, 10084(%rsp)       # 4-byte Spill
	movl	%r12d, 10080(%rsp)      # 4-byte Spill
	movq	%r13, 10072(%rsp)       # 8-byte Spill
	movq	%r14, 10064(%rsp)       # 8-byte Spill
	movq	%rbx, 10056(%rsp)       # 8-byte Spill
	movq	%r10, 10048(%rsp)       # 8-byte Spill
	movq	%r11, 10040(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10096(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10176(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 10036(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10184(%rsp), %rcx       # 8-byte Reload
	movq	10168(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10032(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10208(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10032(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10192(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	10032(%rsp), %r12d      # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10028(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10216(%rsp), %rcx       # 8-byte Reload
	movq	10200(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10028(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10028(%rsp), %ebp       # 4-byte Reload
	movslq	%ebp, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10240(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10016(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10224(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10016(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10008(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10232(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10008(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	10016(%rsp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, 10000(%rsp)      # 8-byte Spill
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10288(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10256(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10384(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 9992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10272(%rsp), %rcx       # 8-byte Reload
	movq	10264(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9992(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	10384(%rsp), %rcx       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp932:
	.loc	5 778 0                 # eispack.c:778:0
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10336(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	addq	$1, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10368(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9984(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9980(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10120(%rsp), %rcx       # 8-byte Reload
	movq	10352(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9979(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10088(%rsp), %rcx       # 8-byte Reload
	movq	10104(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10048(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10040(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10704(%rsp)       # 8-byte Spill
	jne	.LBB21_2
	jmp	.LBB21_4
.Ltmp933:
.LBB21_5:                               # %.preheader47
	movabsq	$1, %rax
	leaq	.L.str331133, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721172, %r8
	movabsq	$3, %r9
	leaq	.L.str891189, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str571157, %rbx
	leaq	.L.str871187, %r14
	leaq	.L.str881188, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 788 0                 # eispack.c:788:0
.Ltmp934:
	movq	%rdi, 9936(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9928(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9920(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9912(%rsp)        # 8-byte Spill
	movq	%r8, 9904(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9896(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9888(%rsp)        # 8-byte Spill
	movq	%r15, 9880(%rsp)        # 8-byte Spill
	movl	%ebp, 9876(%rsp)        # 4-byte Spill
	movl	%r12d, 9872(%rsp)       # 4-byte Spill
	movq	%r13, 9864(%rsp)        # 8-byte Spill
	movq	%rbx, 9856(%rsp)        # 8-byte Spill
	movq	%r11, 9848(%rsp)        # 8-byte Spill
	movq	%r10, 9840(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9944(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9952(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9864(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9839(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9848(%rsp), %rdi        # 8-byte Reload
	movq	9856(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9880(%rsp), %rcx        # 8-byte Reload
	movq	9936(%rsp), %r8         # 8-byte Reload
	movl	9876(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9896(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9840(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9904(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_6
	jmp	.LBB21_36
.LBB21_6:                               # %.lr.ph51
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str911191, %r8
	leaq	.L.str71107, %rdx
	movabsq	$788, %rdi              # imm = 0x314
	leaq	.L.str571157, %rsi
	leaq	.L.str891189, %r9
	leaq	.L.str901190, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str341134, %r12
	movabsq	$32, %r13
	movq	%rax, 9824(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 9816(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9808(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9800(%rsp)        # 8-byte Spill
	movq	9808(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9792(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9784(%rsp)        # 8-byte Spill
	movq	%rdx, 9776(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 9768(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	9800(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9760(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9752(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9744(%rsp)        # 8-byte Spill
	movl	%ebp, 9740(%rsp)        # 4-byte Spill
	movq	%r15, 9728(%rsp)        # 8-byte Spill
	movq	%r13, 9720(%rsp)        # 8-byte Spill
	movq	%r12, 9712(%rsp)        # 8-byte Spill
	movl	%ebx, 9708(%rsp)        # 4-byte Spill
	movq	%r10, 9696(%rsp)        # 8-byte Spill
	movq	%r11, 9688(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9816(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	movq	9744(%rsp), %rdi        # 8-byte Reload
	movq	9728(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9712(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9680(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9792(%rsp), %rdi        # 8-byte Reload
	movq	9784(%rsp), %rsi        # 8-byte Reload
	movq	9752(%rsp), %rdx        # 8-byte Reload
	movq	9696(%rsp), %rcx        # 8-byte Reload
	movq	9688(%rsp), %r8         # 8-byte Reload
	movl	9708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9768(%rsp), %rsi        # 8-byte Reload
	movq	9768(%rsp), %rdx        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9680(%rsp), %rax        # 8-byte Reload
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movq	%rax, 9672(%rsp)        # 8-byte Spill
	movl	%ebx, 9668(%rsp)        # 4-byte Spill
	movl	%ebp, 9664(%rsp)        # 4-byte Spill
	jmp	.LBB21_8
.Ltmp935:
.LBB21_7:                               # =>This Inner Loop Header: Depth=1
	movq	10392(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1011201, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str791179, %r9
	movabsq	$3, %r10
	leaq	.L.str871187, %r11
	movabsq	$783, %rbx              # imm = 0x30F
	leaq	.L.str571157, %r14
	leaq	.L.str1021202, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9656(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9648(%rsp)        # 8-byte Spill
	leaq	.L.str1001200, %rax
	movq	%rax, 9640(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 9632(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 9624(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 9616(%rsp)        # 8-byte Spill
	leaq	.L.str931193, %rax
	movq	%rax, 9608(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 9600(%rsp)        # 8-byte Spill
	leaq	.L.str921192, %rax
	movq	%rax, 9592(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 9584(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 9576(%rsp)        # 8-byte Spill
	leaq	.L.str951195, %rax
	movq	%rax, 9568(%rsp)        # 8-byte Spill
	leaq	.L.str981198, %rax
	movq	%rax, 9560(%rsp)        # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 9552(%rsp)        # 8-byte Spill
	leaq	.L.str991199, %rax
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	leaq	.L.str971197, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str961196, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str131113, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str941194, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9464(%rsp)        # 8-byte Spill
	leaq	.L.str371137, %rax
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	leaq	.L.str271127, %rax
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str311131, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str351135, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str771177, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 785 0                 # eispack.c:785:0
.Ltmp936:
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	movq	9408(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9384(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 9376(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	9592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9368(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9400(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 9344(%rsp)        # 8-byte Spill
	movl	%ebp, 9340(%rsp)        # 4-byte Spill
	movl	%r12d, 9336(%rsp)       # 4-byte Spill
	movq	%r13, 9328(%rsp)        # 8-byte Spill
	movq	%r14, 9320(%rsp)        # 8-byte Spill
	movq	%rbx, 9312(%rsp)        # 8-byte Spill
	movq	%r10, 9304(%rsp)        # 8-byte Spill
	movq	%r11, 9296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9432(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9292(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9480(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9288(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9440(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9448(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9284(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	9284(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9280(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9456(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9280(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9280(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9472(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9272(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9272(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9464(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9264(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9272(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 9256(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9504(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9288(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9488(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	9288(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9252(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9520(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9560(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9240(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9544(%rsp), %rcx        # 8-byte Reload
	movq	9536(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9232(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9240(%rsp), %rcx        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp937:
	.loc	5 783 0                 # eispack.c:783:0
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9608(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9224(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9224(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	9624(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9219(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	9360(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9296(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9352(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9224(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10392(%rsp)       # 8-byte Spill
	jne	.LBB21_5
	jmp	.LBB21_7
.Ltmp938:
.LBB21_8:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_9 Depth 2
                                        #     Child Loop BB21_13 Depth 2
                                        #     Child Loop BB21_16 Depth 2
                                        #     Child Loop BB21_18 Depth 2
                                        #     Child Loop BB21_20 Depth 2
                                        #     Child Loop BB21_22 Depth 2
                                        #       Child Loop BB21_24 Depth 3
                                        #     Child Loop BB21_27 Depth 2
                                        #     Child Loop BB21_29 Depth 2
                                        #     Child Loop BB21_31 Depth 2
                                        #       Child Loop BB21_32 Depth 3
                                        #     Child Loop BB21_35 Depth 2
	movl	9664(%rsp), %eax        # 4-byte Reload
	movl	9668(%rsp), %ecx        # 4-byte Reload
	movq	9672(%rsp), %rdx        # 8-byte Reload
	movabsq	$0, %rsi
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdi
	leaq	.L.str1111211, %r8
	leaq	.L.str71107, %r9
	movabsq	$2, %r10
	leaq	.L.str1141214, %r11
	movabsq	$3, %rbx
	leaq	.L.str1131213, %r14
	movabsq	$796, %r15              # imm = 0x31C
	leaq	.L.str571157, %r12
	leaq	.L.str911191, %r13
	leaq	.L.str1121212, %rbp
	movl	%eax, 9212(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 9208(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 9200(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 9192(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 9184(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rdx
	movq	%rdx, 9176(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rdx
	movq	%rdx, 9168(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 9160(%rsp)        # 8-byte Spill
	leaq	.L.str1081208, %rdx
	movq	%rdx, 9152(%rsp)        # 8-byte Spill
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	%rdx, 9144(%rsp)        # 8-byte Spill
	movabsq	$790, %rdx              # imm = 0x316
	movq	%rdx, 9136(%rsp)        # 8-byte Spill
	movabsq	$8, %rdx
	movq	%rdx, 9128(%rsp)        # 8-byte Spill
	leaq	.L.str1091209, %rdx
	movq	%rdx, 9120(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rdx, 9112(%rsp)        # 8-byte Spill
	movabsq	$788, %rdx              # imm = 0x314
	movq	%rdx, 9104(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rdx
	movq	%rdx, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str1031203, %rdx
	movq	%rdx, 9080(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rdx
	movq	%rdx, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str1061206, %rdx
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	leaq	.L.str891189, %rdx
	movq	%rdx, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rdx
	movq	%rdx, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str1051205, %rdx
	movq	%rdx, 9032(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rdx
	.loc	5 788 0                 # eispack.c:788:0
.Ltmp939:
	movq	%rdx, 9016(%rsp)        # 8-byte Spill
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 9008(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 9000(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 8992(%rsp)         # 8-byte Spill
	movq	9080(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 8988(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	%eax, 8984(%rsp)        # 4-byte Spill
	movl	9208(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8976(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8968(%rsp)        # 8-byte Spill
	movq	%r12, 8960(%rsp)        # 8-byte Spill
	movq	%r13, 8952(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8944(%rsp)       # 8-byte Spill
	movq	%rbp, 8936(%rsp)        # 8-byte Spill
	movq	%r14, 8928(%rsp)        # 8-byte Spill
	movq	%rbx, 8920(%rsp)        # 8-byte Spill
	movq	%r10, 8912(%rsp)        # 8-byte Spill
	movq	%r11, 8904(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9016(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9152(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9064(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8900(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9088(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9200(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9008(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9120(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	.loc	5 790 0                 # eispack.c:790:0
.Ltmp940:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8884(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9136(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9176(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8880(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp941:
	#DEBUG_VALUE: tred1:l <- [RSP+8880]
	#DEBUG_VALUE: tred1:h <- 0.000000e+00
	#DEBUG_VALUE: tred1:scale <- 0.000000e+00
	#DEBUG_VALUE: tred1:k <- 0
	.loc	5 796 0                 # eispack.c:796:0
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	9160(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8879(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8920(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9000(%rsp), %rcx        # 8-byte Reload
	vmovsd	8944(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB21_14
.Ltmp942:
.LBB21_9:                               # %.lr.ph
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	8856(%rsp), %xmm0       # 8-byte Reload
	movq	8864(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231223, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str1141214, %r9
	movabsq	$3, %r10
	leaq	.L.str1251225, %r11
	movabsq	$796, %rbx              # imm = 0x31C
	leaq	.L.str571157, %r14
	leaq	.L.str1241224, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8840(%rsp)        # 8-byte Spill
	leaq	.L.str1221222, %rax
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str1161216, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	leaq	.L.str1151215, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8768(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 8760(%rsp)        # 8-byte Spill
	leaq	.L.str1171217, %rax
	movq	%rax, 8752(%rsp)        # 8-byte Spill
	leaq	.L.str1211221, %rax
	movq	%rax, 8744(%rsp)        # 8-byte Spill
	movabsq	$798, %rax              # imm = 0x31E
	movq	%rax, 8736(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 8728(%rsp)        # 8-byte Spill
	leaq	.L.str1201220, %rax
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rax
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str1191219, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str911191, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 798 0                 # eispack.c:798:0
.Ltmp943:
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	8648(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8632(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8624(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8616(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8784(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8600(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8592(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8584(%rsp)       # 8-byte Spill
	movl	%ebp, 8580(%rsp)        # 4-byte Spill
	movl	%r12d, 8576(%rsp)       # 4-byte Spill
	movq	%r13, 8568(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 8560(%rsp)       # 8-byte Spill
	movq	%r15, 8552(%rsp)        # 8-byte Spill
	movq	%r14, 8544(%rsp)        # 8-byte Spill
	movq	%r10, 8536(%rsp)        # 8-byte Spill
	movq	%r11, 8528(%rsp)        # 8-byte Spill
	movq	%rbx, 8520(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8648(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8560(%rsp), %xmm0       # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8656(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8760(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8664(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8848(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8848(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8504(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8696(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8704(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8504(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI21_0(%rip), %xmm0
	vmovsd	8504(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8496(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8728(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8496(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 8488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp944:
	#DEBUG_VALUE: tred1:scale <- [RSP+8488]
	.loc	5 796 0                 # eispack.c:796:0
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8800(%rsp), %rcx        # 8-byte Reload
	movq	8768(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8848(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8476(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8816(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8475(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8552(%rsp), %rcx        # 8-byte Reload
	movq	8600(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8592(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8480(%rsp), %rcx        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB21_10
	jmp	.LBB21_9
.Ltmp945:
.LBB21_10:                              # %._crit_edge
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str1261226, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1301230, %r8
	movabsq	$3, %r9
	leaq	.L.str1291229, %r10
	movabsq	$801, %r11              # imm = 0x321
	leaq	.L.str571157, %rbx
	leaq	.L.str1251225, %r14
	leaq	.L.str1281228, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8464(%rsp)        # 8-byte Spill
	leaq	.L.str1271227, %rax
	movq	%rax, 8456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 8440(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 8432(%rsp)        # 8-byte Spill
	movabsq	$803, %rax              # imm = 0x323
	movq	%rax, 8424(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8416(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8408(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 8400(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	.loc	5 801 0                 # eispack.c:801:0
.Ltmp946:
	movq	%rdi, 8392(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8384(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8376(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8368(%rsp)        # 8-byte Spill
	movq	%r8, 8360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8344(%rsp)        # 8-byte Spill
	movl	%ebp, 8340(%rsp)        # 4-byte Spill
	movl	%r12d, 8336(%rsp)       # 4-byte Spill
	movq	%r13, 8328(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8320(%rsp)       # 8-byte Spill
	movq	%r14, 8312(%rsp)        # 8-byte Spill
	movq	%rbx, 8304(%rsp)        # 8-byte Spill
	movq	%r10, 8296(%rsp)        # 8-byte Spill
	movq	%r11, 8288(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8320(%rsp), %xmm0       # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8432(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	8464(%rsp), %rdx        # 8-byte Reload
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8320(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	.loc	5 803 0                 # eispack.c:803:0
.Ltmp947:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %r8         # 8-byte Reload
	movb	%cl, 8287(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8456(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	8432(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8440(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
.Ltmp948:
	.loc	5 801 0                 # eispack.c:801:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8456(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8286(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8288(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	8392(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8296(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_11
	jmp	.LBB21_12
.LBB21_11:                              # %.preheader43
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1271227, %r8
	leaq	.L.str71107, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1321232, %rdi
	movabsq	$3, %r9
	leaq	.L.str1131213, %r10
	movabsq	$803, %r11              # imm = 0x323
	leaq	.L.str571157, %rbx
	leaq	.L.str1291229, %r14
	leaq	.L.str1311231, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	5 803 0                 # eispack.c:803:0
.Ltmp949:
	movq	%rdi, 8272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8248(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8264(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8240(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	movq	%r10, 8216(%rsp)        # 8-byte Spill
	movl	%r12d, 8212(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8232(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8216(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8248(%rsp), %rdi        # 8-byte Reload
	movq	8248(%rsp), %rsi        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8240(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8224(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	jne	.LBB21_14
	jmp	.LBB21_13
.Ltmp950:
.LBB21_12:                              # %.preheader
                                        #   in Loop: Header=BB21_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1271227, %r8
	leaq	.L.str71107, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1351235, %rdi
	movabsq	$3, %r9
	leaq	.L.str1341234, %r10
	movabsq	$815, %r11              # imm = 0x32F
	leaq	.L.str571157, %rbx
	leaq	.L.str1301230, %r14
	leaq	.L.str1331233, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	5 815 0                 # eispack.c:815:0
.Ltmp951:
	movq	%rdi, 8192(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8184(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8176(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8168(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8160(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8144(%rsp)       # 8-byte Spill
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	movq	%r10, 8128(%rsp)        # 8-byte Spill
	movl	%r12d, 8124(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8152(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8192(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8168(%rsp), %rdi        # 8-byte Reload
	movq	8168(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8160(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8136(%rsp), %rax        # 8-byte Reload
	vmovsd	8144(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
	jmp	.LBB21_16
.Ltmp952:
.LBB21_13:                              # %.lr.ph45
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8200(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1541254, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str1321232, %r9
	movabsq	$3, %r10
	leaq	.L.str1131213, %r11
	movabsq	$803, %rbx              # imm = 0x323
	leaq	.L.str571157, %r14
	leaq	.L.str1551255, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	leaq	.L.str1531253, %rax
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	leaq	.L.str1371237, %rax
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	leaq	.L.str1361236, %rax
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str1491249, %rax
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	movabsq	$807, %rax              # imm = 0x327
	movq	%rax, 8000(%rsp)        # 8-byte Spill
	leaq	.L.str1521252, %rax
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str1501250, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str1421242, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	movabsq	$806, %rax              # imm = 0x326
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str1511251, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	leaq	.L.str1481248, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str1471247, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str1391239, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str1461246, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str1431243, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str1441244, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	movabsq	$805, %rax              # imm = 0x325
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str1451245, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str1411241, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str1401240, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str1381238, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str1291229, %rax
	movq	%rax, 7784(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7776(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 805 0                 # eispack.c:805:0
.Ltmp953:
	movq	%rax, 7768(%rsp)        # 8-byte Spill
	movq	7776(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7760(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7752(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 7744(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7768(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7728(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7720(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 7716(%rsp)        # 4-byte Spill
	movl	%r12d, 7712(%rsp)       # 4-byte Spill
	movq	%r13, 7704(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7696(%rsp)       # 8-byte Spill
	movq	%r15, 7688(%rsp)        # 8-byte Spill
	movq	%r14, 7680(%rsp)        # 8-byte Spill
	movq	%r10, 7672(%rsp)        # 8-byte Spill
	movq	%r11, 7664(%rsp)        # 8-byte Spill
	movq	%rbx, 7656(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7652(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7896(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7800(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7648(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7832(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7644(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7644(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7632(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7624(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7616(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7840(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 806 0                 # eispack.c:806:0
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7604(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7912(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7604(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	7604(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7600(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7928(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7600(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7600(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8008(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7592(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7592(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7576(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 807 0                 # eispack.c:807:0
	movq	8000(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	8024(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp954:
	.loc	5 803 0                 # eispack.c:803:0
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8048(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8080(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7568(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7568(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7564(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7744(%rsp), %rcx        # 8-byte Reload
	movq	8064(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8072(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7563(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7672(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	7568(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8200(%rsp)        # 8-byte Spill
	jne	.LBB21_14
	jmp	.LBB21_13
.Ltmp955:
.LBB21_14:                              # %._crit_edge46
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1051205, %r8
	leaq	.L.str71107, %rdx
	movabsq	$812, %rdi              # imm = 0x32C
	leaq	.L.str571157, %rsi
	leaq	.L.str1131213, %r9
	leaq	.L.str1621262, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str141114, %r15
	leaq	.L.str1591259, %r12
	movabsq	$811, %r13              # imm = 0x32B
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str1611261, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	leaq	.L.str1561256, %rax
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	movabsq	$810, %rax              # imm = 0x32A
	movq	%rax, 7488(%rsp)        # 8-byte Spill
	leaq	.L.str1581258, %rax
	movq	%rax, 7480(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	.loc	5 810 0                 # eispack.c:810:0
	movq	%rax, 7472(%rsp)        # 8-byte Spill
	movq	7488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7464(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7456(%rsp)        # 8-byte Spill
	movq	%rdx, 7448(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7424(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 7416(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7408(%rsp)       # 8-byte Spill
	movq	%r15, 7400(%rsp)        # 8-byte Spill
	movq	%r13, 7392(%rsp)        # 8-byte Spill
	movq	%r12, 7384(%rsp)        # 8-byte Spill
	movl	%ebp, 7380(%rsp)        # 4-byte Spill
	movq	%r10, 7368(%rsp)        # 8-byte Spill
	movq	%r11, 7360(%rsp)        # 8-byte Spill
	movl	%ebx, 7356(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7472(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7480(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 811 0                 # eispack.c:811:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7520(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7544(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 812 0                 # eispack.c:812:0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7360(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7440(%rsp), %rsi        # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7432(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp956:
.LBB21_15:                              # %.backedge
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str1641264, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721172, %r8
	movabsq	$3, %r9
	leaq	.L.str911191, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str571157, %rbx
	leaq	.L.str1051205, %r14
	leaq	.L.str1651265, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7320(%rsp)        # 8-byte Spill
	leaq	.L.str1631263, %rax
	movq	%rax, 7312(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 7304(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7296(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7288(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 7280(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	5 788 0                 # eispack.c:788:0
	movq	%rdi, 7272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 7264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 7256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 7248(%rsp)        # 8-byte Spill
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7248(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7216(%rsp)        # 8-byte Spill
	movl	%ebp, 7212(%rsp)        # 4-byte Spill
	movl	%r12d, 7208(%rsp)       # 4-byte Spill
	movq	%r13, 7200(%rsp)        # 8-byte Spill
	movq	%r14, 7192(%rsp)        # 8-byte Spill
	movq	%rbx, 7184(%rsp)        # 8-byte Spill
	movq	%r10, 7176(%rsp)        # 8-byte Spill
	movq	%r11, 7168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7288(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7280(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7163(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7216(%rsp), %rcx        # 8-byte Reload
	movq	7272(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7232(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movl	8900(%rsp), %ebp        # 4-byte Reload
	movl	8884(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movl	%ebp, 9668(%rsp)        # 4-byte Spill
	movl	%r12d, 9664(%rsp)       # 4-byte Spill
	jne	.LBB21_8
	jmp	.LBB21_36
.LBB21_16:                              # %.lr.ph4
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8112(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1731273, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str1351235, %r9
	movabsq	$3, %r10
	leaq	.L.str1751275, %r11
	movabsq	$815, %rbx              # imm = 0x32F
	leaq	.L.str571157, %r14
	leaq	.L.str1741274, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str1721272, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str1671267, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str1661266, %rax
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 7080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str1701270, %rax
	movq	%rax, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str1681268, %rax
	movq	%rax, 7056(%rsp)        # 8-byte Spill
	movabsq	$817, %rax              # imm = 0x331
	movq	%rax, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str1711271, %rax
	movq	%rax, 7040(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str1691269, %rax
	movq	%rax, 7024(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 7016(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 7008(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7000(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 6992(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6984(%rsp)        # 8-byte Spill
	leaq	.L.str1301230, %rax
	movq	%rax, 6976(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6968(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 817 0                 # eispack.c:817:0
.Ltmp957:
	movq	%rax, 6960(%rsp)        # 8-byte Spill
	movq	6968(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6952(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6944(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6936(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6928(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6960(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6920(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6912(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6904(%rsp)        # 8-byte Spill
	movl	%ebp, 6900(%rsp)        # 4-byte Spill
	movl	%r12d, 6896(%rsp)       # 4-byte Spill
	movq	%r13, 6888(%rsp)        # 8-byte Spill
	movq	%r14, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r10, 6864(%rsp)        # 8-byte Spill
	movq	%r11, 6856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7056(%rsp), %rcx        # 8-byte Reload
	movq	6984(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7152(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	7000(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6840(%rsp)       # 8-byte Spill
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	7008(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7016(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7040(%rsp), %rcx        # 8-byte Reload
	movq	7032(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp958:
	.loc	5 815 0                 # eispack.c:815:0
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7072(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7152(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6819(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6904(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6864(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6856(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8112(%rsp)        # 8-byte Spill
	jne	.LBB21_17
	jmp	.LBB21_16
.Ltmp959:
.LBB21_17:                              # %.loopexit
                                        #   in Loop: Header=BB21_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1761276, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1781278, %r8
	movabsq	$3, %r9
	leaq	.L.str1341234, %r10
	movabsq	$820, %r11              # imm = 0x334
	leaq	.L.str571157, %rbx
	leaq	.L.str1751275, %r14
	leaq	.L.str1771277, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6808(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6800(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 6792(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 6784(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 820 0                 # eispack.c:820:0
.Ltmp960:
	movq	%rdi, 6776(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6768(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6760(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6752(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6736(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6728(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6720(%rsp)       # 8-byte Spill
	movq	%r15, 6712(%rsp)        # 8-byte Spill
	movl	%ebp, 6708(%rsp)        # 4-byte Spill
	movl	%r12d, 6704(%rsp)       # 4-byte Spill
	movq	%r13, 6696(%rsp)        # 8-byte Spill
	movq	%r14, 6688(%rsp)        # 8-byte Spill
	movq	%rbx, 6680(%rsp)        # 8-byte Spill
	movq	%r10, 6672(%rsp)        # 8-byte Spill
	movq	%r11, 6664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6808(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6792(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	6696(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6663(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6664(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6688(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movl	6708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6808(%rsp), %rcx        # 8-byte Reload
	vmovsd	6720(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6720(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
.LBB21_18:                              # %.lr.ph7
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	6640(%rsp), %xmm0       # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1871287, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str1781278, %r9
	movabsq	$3, %r10
	leaq	.L.str1341234, %r11
	movabsq	$820, %rbx              # imm = 0x334
	leaq	.L.str571157, %r14
	leaq	.L.str1881288, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6632(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str1861286, %rax
	movq	%rax, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 6608(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6600(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str1801280, %rax
	movq	%rax, 6584(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 6576(%rsp)        # 8-byte Spill
	leaq	.L.str1791279, %rax
	movq	%rax, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 6560(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 6552(%rsp)        # 8-byte Spill
	leaq	.L.str1821282, %rax
	movq	%rax, 6544(%rsp)        # 8-byte Spill
	leaq	.L.str1811281, %rax
	movq	%rax, 6536(%rsp)        # 8-byte Spill
	leaq	.L.str1851285, %rax
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	movabsq	$822, %rax              # imm = 0x336
	movq	%rax, 6520(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str1841284, %rax
	movq	%rax, 6504(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str1831283, %rax
	movq	%rax, 6488(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 6472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str1751275, %rax
	movq	%rax, 6456(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6448(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 822 0                 # eispack.c:822:0
.Ltmp961:
	movq	%rax, 6440(%rsp)        # 8-byte Spill
	movq	6448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6432(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6424(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6416(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	6568(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6440(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6400(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6392(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6384(%rsp)       # 8-byte Spill
	movl	%ebp, 6380(%rsp)        # 4-byte Spill
	movl	%r12d, 6376(%rsp)       # 4-byte Spill
	movq	%r13, 6368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 6360(%rsp)       # 8-byte Spill
	movq	%r15, 6352(%rsp)        # 8-byte Spill
	movq	%r14, 6344(%rsp)        # 8-byte Spill
	movq	%r10, 6336(%rsp)        # 8-byte Spill
	movq	%r11, 6328(%rsp)        # 8-byte Spill
	movq	%rbx, 6320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6440(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6360(%rsp), %xmm0       # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rcx        # 8-byte Reload
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	6456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6480(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6304(%rsp)       # 8-byte Spill
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 6296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6296(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6296(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6288(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp962:
	#DEBUG_VALUE: tred1:h <- [RSP+6288]
	.loc	5 820 0                 # eispack.c:820:0
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6584(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6632(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6280(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6275(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6352(%rsp), %rcx        # 8-byte Reload
	movq	6400(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6336(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6280(%rsp), %rcx        # 8-byte Reload
	vmovsd	6288(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6288(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
	jmp	.LBB21_18
.Ltmp963:
.LBB21_19:                              # %._crit_edge8
                                        #   in Loop: Header=BB21_8 Depth=1
	vmovsd	8104(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str1961296, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	r8_sign, %r9
	leaq	.L.str481148, %r10
	movabsq	$827, %r11              # imm = 0x33B
	leaq	.L.str571157, %rbx
	leaq	.L.str1341234, %r14
	leaq	.L.str1991299, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 6264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6256(%rsp)        # 8-byte Spill
	leaq	.L.str1971297, %rax
	movq	%rax, 6248(%rsp)        # 8-byte Spill
	leaq	.L.str1891289, %rax
	movq	%rax, 6240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str1981298, %rax
	movq	%rax, 6224(%rsp)        # 8-byte Spill
	leaq	.L.str1951295, %rax
	movq	%rax, 6216(%rsp)        # 8-byte Spill
	movabsq	$826, %rax              # imm = 0x33A
	movq	%rax, 6208(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 6192(%rsp)        # 8-byte Spill
	leaq	.L.str1941294, %rax
	movq	%rax, 6184(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6176(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 6160(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str1911291, %rax
	movq	%rax, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str1921292, %rax
	movq	%rax, 6136(%rsp)        # 8-byte Spill
	movabsq	$825, %rax              # imm = 0x339
	movq	%rax, 6128(%rsp)        # 8-byte Spill
	leaq	.L.str1931293, %rax
	movq	%rax, 6120(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rax
	movq	%rax, 6104(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 6096(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str1901290, %rax
	movq	%rax, 6080(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str1751275, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str1821282, %rax
	movq	%rax, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str1781278, %rax
	movq	%rax, 6040(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str1301230, %rax
	movq	%rax, 6024(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6016(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 825 0                 # eispack.c:825:0
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	movq	6016(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5992(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5984(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	6240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5968(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5960(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 5952(%rsp)       # 8-byte Spill
	movq	%r12, 5944(%rsp)        # 8-byte Spill
	movl	%ebp, 5940(%rsp)        # 4-byte Spill
	movl	%r13d, 5936(%rsp)       # 4-byte Spill
	vmovsd	%xmm1, 5928(%rsp)       # 8-byte Spill
	movq	%r15, 5920(%rsp)        # 8-byte Spill
	movq	%r14, 5912(%rsp)        # 8-byte Spill
	movq	%r10, 5904(%rsp)        # 8-byte Spill
	movq	%r11, 5896(%rsp)        # 8-byte Spill
	movq	%rbx, 5888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	6264(%rsp), %r9         # 8-byte Reload
	movq	6040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5880(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5880(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5872(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5864(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6120(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 826 0                 # eispack.c:826:0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6184(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6216(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5856(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5840(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp964:
	#DEBUG_VALUE: tred1:f <- [RSP+5840]
	.loc	5 827 0                 # eispack.c:827:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	6232(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6224(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp965:
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5832(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5920(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5960(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2091309, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1051205, %r8
	movabsq	$3, %r9
	leaq	.L.str2111311, %r10
	movabsq	$832, %r11              # imm = 0x340
	leaq	.L.str571157, %rbx
	leaq	.L.str1341234, %r14
	leaq	.L.str2101310, %r15
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5816(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 5808(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 5792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5776(%rsp)        # 8-byte Spill
	leaq	.L.str2071307, %rax
	movq	%rax, 5768(%rsp)        # 8-byte Spill
	leaq	.L.str1951295, %rax
	movq	%rax, 5760(%rsp)        # 8-byte Spill
	movabsq	$830, %rax              # imm = 0x33E
	movq	%rax, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str2081308, %rax
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str1961296, %rax
	movq	%rax, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str2001300, %rax
	movq	%rax, 5720(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str2061306, %rax
	movq	%rax, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str1891289, %rax
	movq	%rax, 5696(%rsp)        # 8-byte Spill
	leaq	.L.str2051305, %rax
	movq	%rax, 5688(%rsp)        # 8-byte Spill
	movabsq	$829, %rax              # imm = 0x33D
	movq	%rax, 5680(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str2011301, %rax
	movq	%rax, 5664(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str2021302, %rax
	movq	%rax, 5648(%rsp)        # 8-byte Spill
	leaq	.L.str2031303, %rax
	movq	%rax, 5640(%rsp)        # 8-byte Spill
	movabsq	$828, %rax              # imm = 0x33C
	movq	%rax, 5632(%rsp)        # 8-byte Spill
	leaq	.L.str2041304, %rax
	movq	%rax, 5624(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 5616(%rsp)        # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 5608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5600(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	vmovsd	.LCPI21_1, %xmm1
	movq	%rax, 5592(%rsp)        # 8-byte Spill
	movabsq	$827, %rax              # imm = 0x33B
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	leaq	.L.str1971297, %rax
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	leaq	.L.str1991299, %rax
	movq	%rdi, 5568(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	movq	5776(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5552(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 5544(%rsp)       # 8-byte Spill
	movq	%rdx, 5536(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	5560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5512(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r13d, 5508(%rsp)       # 4-byte Spill
	movq	%r15, 5496(%rsp)        # 8-byte Spill
	movl	%ebp, 5492(%rsp)        # 4-byte Spill
	movq	%r12, 5480(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5472(%rsp)       # 8-byte Spill
	movq	%r14, 5464(%rsp)        # 8-byte Spill
	movq	%rbx, 5456(%rsp)        # 8-byte Spill
	movq	%r10, 5448(%rsp)        # 8-byte Spill
	movq	%r11, 5440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5544(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5560(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5544(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5432(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5472(%rsp), %xmm0       # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5792(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm1
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 5424(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp966:
	#DEBUG_VALUE: tred1:g <- [RSP+5424]
	.loc	5 828 0                 # eispack.c:828:0
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5592(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5600(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5408(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 829 0                 # eispack.c:829:0
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5400(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5400(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5392(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp967:
	#DEBUG_VALUE: tred1:h <- [RSP+5392]
	.loc	5 830 0                 # eispack.c:830:0
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5432(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5384(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5760(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 832 0                 # eispack.c:832:0
.Ltmp968:
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5536(%rsp), %rcx        # 8-byte Reload
	movq	5784(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	5792(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5808(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$-1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5383(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5568(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5512(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5448(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB21_20
	jmp	.LBB21_15
.Ltmp969:
.LBB21_20:                              # %.lr.ph13
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	5368(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2171317, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str2111311, %r9
	movabsq	$3, %r10
	leaq	.L.str2191319, %r11
	movabsq	$837, %rbx              # imm = 0x345
	leaq	.L.str571157, %r14
	leaq	.L.str2181318, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str2161316, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str2131313, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str2121312, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str2141314, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$839, %rax              # imm = 0x347
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str2151315, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str1341234, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 839 0                 # eispack.c:839:0
.Ltmp970:
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movq	5216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5192(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5184(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	5296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5208(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5160(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 5156(%rsp)        # 4-byte Spill
	movl	%r12d, 5152(%rsp)       # 4-byte Spill
	movq	%r13, 5144(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5136(%rsp)       # 8-byte Spill
	movq	%r15, 5128(%rsp)        # 8-byte Spill
	movq	%r14, 5120(%rsp)        # 8-byte Spill
	movq	%r10, 5112(%rsp)        # 8-byte Spill
	movq	%r11, 5104(%rsp)        # 8-byte Spill
	movq	%rbx, 5096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5272(%rsp), %rcx        # 8-byte Reload
	movq	5232(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5240(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5360(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5256(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5088(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5200(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	5360(%rsp), %rcx        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp971:
	.loc	5 837 0                 # eispack.c:837:0
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5360(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5080(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5080(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5076(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5184(%rsp), %rcx        # 8-byte Reload
	movq	5328(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5336(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5075(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5128(%rsp), %rcx        # 8-byte Reload
	movq	5168(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5104(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5080(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB21_21
	jmp	.LBB21_20
.Ltmp972:
.LBB21_21:                              # %.loopexit11
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2201320, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2221322, %r8
	movabsq	$3, %r9
	leaq	.L.str1051205, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str571157, %rbx
	leaq	.L.str2191319, %r14
	leaq	.L.str2211321, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5056(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 5048(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 5040(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 842 0                 # eispack.c:842:0
.Ltmp973:
	movq	%rdi, 5032(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 5024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 5008(%rsp)        # 8-byte Spill
	movq	5016(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4992(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4984(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4976(%rsp)        # 8-byte Spill
	movl	%ebp, 4972(%rsp)        # 4-byte Spill
	movl	%r12d, 4968(%rsp)       # 4-byte Spill
	movq	%r13, 4960(%rsp)        # 8-byte Spill
	movq	%r14, 4952(%rsp)        # 8-byte Spill
	movq	%rbx, 4944(%rsp)        # 8-byte Spill
	movq	%r10, 4936(%rsp)        # 8-byte Spill
	movq	%r11, 4928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5048(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4928(%rsp), %rdi        # 8-byte Reload
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	4952(%rsp), %rdx        # 8-byte Reload
	movq	4976(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movl	4972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4984(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4936(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4992(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.LBB21_22:                              # %.lr.ph22
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_24 Depth 3
	movq	4904(%rsp), %rax        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str2421342, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str2251325, %r10
	movabsq	$3, %r11
	leaq	.L.str2441344, %rbx
	movabsq	$847, %r14              # imm = 0x34F
	leaq	.L.str571157, %r15
	leaq	.L.str2221322, %r12
	leaq	.L.str2431343, %r13
	movl	$0, %ebp
	movq	%rsi, 4896(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4888(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4880(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4872(%rsp)        # 8-byte Spill
	leaq	.L.str2411341, %rax
	movq	%rax, 4864(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 4856(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4840(%rsp)        # 8-byte Spill
	leaq	.L.str2231323, %rax
	movq	%rax, 4832(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str2241324, %rax
	movq	%rax, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 4808(%rsp)        # 8-byte Spill
	movabsq	$842, %rax              # imm = 0x34A
	movq	%rax, 4800(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str2401340, %rax
	movq	%rax, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str2311331, %rax
	movq	%rax, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str2391339, %rax
	movq	%rax, 4768(%rsp)        # 8-byte Spill
	movabsq	$845, %rax              # imm = 0x34D
	movq	%rax, 4760(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str2291329, %rax
	movq	%rax, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str2381338, %rax
	movq	%rax, 4736(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str2371337, %rax
	movq	%rax, 4720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str2361336, %rax
	movq	%rax, 4696(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str2351335, %rax
	movq	%rax, 4680(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str2331333, %rax
	movq	%rax, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str2341334, %rax
	movq	%rax, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str2321332, %rax
	movq	%rax, 4648(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 4640(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 4632(%rsp)        # 8-byte Spill
	leaq	.L.str2301330, %rax
	movq	%rax, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str2281328, %rax
	movq	%rax, 4608(%rsp)        # 8-byte Spill
	movabsq	$844, %rax              # imm = 0x34C
	movq	%rax, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str2261326, %rax
	movq	%rax, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str2271327, %rax
	movq	%rax, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str2191319, %rax
	movq	%rax, 4568(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4560(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 844 0                 # eispack.c:844:0
.Ltmp974:
	movq	%rax, 4552(%rsp)        # 8-byte Spill
	movq	4560(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 4540(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 4528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	4832(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4552(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4496(%rsp)        # 8-byte Spill
	movq	%r12, 4488(%rsp)        # 8-byte Spill
	movq	%r13, 4480(%rsp)        # 8-byte Spill
	movl	%ebp, 4476(%rsp)        # 4-byte Spill
	movq	%r14, 4464(%rsp)        # 8-byte Spill
	movq	%rbx, 4456(%rsp)        # 8-byte Spill
	movq	%r10, 4448(%rsp)        # 8-byte Spill
	movq	%r11, 4440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4560(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4584(%rsp), %rcx        # 8-byte Reload
	movq	4552(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4576(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4584(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4608(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4432(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4432(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4424(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp975:
	#DEBUG_VALUE: tred1:f <- [RSP+4424]
	.loc	5 845 0                 # eispack.c:845:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4624(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4408(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4404(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %esi       # 4-byte Reload
	imull	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4400(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4396(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4396(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	4396(%rsp), %esi        # 4-byte Reload
	addl	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4392(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4392(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4392(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4704(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4384(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4376(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4368(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4728(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4368(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4360(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4360(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp976:
	#DEBUG_VALUE: tred1:g <- [RSP+4352]
	.loc	5 842 0                 # eispack.c:842:0
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	.loc	5 847 0                 # eispack.c:847:0
.Ltmp977:
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4340(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4896(%rsp), %rcx        # 8-byte Reload
	movq	4848(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4856(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4339(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	movq	4504(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4440(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 4328(%rsp)       # 8-byte Spill
	jne	.LBB21_23
	jmp	.LBB21_25
.Ltmp978:
.LBB21_23:                              # %.lr.ph17
                                        #   in Loop: Header=BB21_22 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str2471347, %r8
	leaq	.L.str71107, %rdx
	movabsq	$847, %rsi              # imm = 0x34F
	leaq	.L.str571157, %rdi
	leaq	.L.str2441344, %r9
	leaq	.L.str2461346, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str2451345, %r12
	movabsq	$32, %r13
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str2331333, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rdi, 4304(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movq	4304(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 4288(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 4280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 4272(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4256(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 4248(%rsp)        # 8-byte Spill
	movl	%ebp, 4244(%rsp)        # 4-byte Spill
	movq	%r15, 4232(%rsp)        # 8-byte Spill
	movq	%r12, 4224(%rsp)        # 8-byte Spill
	movq	%r13, 4216(%rsp)        # 8-byte Spill
	movl	%ebx, 4212(%rsp)        # 4-byte Spill
	movq	%r10, 4200(%rsp)        # 8-byte Spill
	movq	%r11, 4192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	4400(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4216(%rsp), %rsi        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4288(%rsp), %rdi        # 8-byte Reload
	movq	4304(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4200(%rsp), %rcx        # 8-byte Reload
	movq	4192(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4272(%rsp), %rdx        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
.LBB21_24:                              #   Parent Loop BB21_8 Depth=1
                                        #     Parent Loop BB21_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	4168(%rsp), %xmm0       # 8-byte Reload
	movq	4176(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2641364, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str2471347, %r9
	movabsq	$3, %r10
	leaq	.L.str2251325, %r11
	movabsq	$847, %rbx              # imm = 0x34F
	leaq	.L.str571157, %r14
	leaq	.L.str2651365, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	leaq	.L.str2631363, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str2491349, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str2481348, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str2611361, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str2581358, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movabsq	$850, %rax              # imm = 0x352
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str2621362, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	.L.str2601360, %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str2591359, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str2291329, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	leaq	.L.str2541354, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str2511351, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str2501350, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str2571357, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$849, %rax              # imm = 0x351
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str2561356, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str2551355, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	leaq	.L.str2531353, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str2521352, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str2451345, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	leaq	.L.str2401340, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str2441344, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	leaq	.L.str2261326, %rax
	.loc	5 849 0                 # eispack.c:849:0
.Ltmp979:
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movq	3856(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3824(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 3816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3808(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3800(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3792(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3784(%rsp)       # 8-byte Spill
	movq	%r15, 3776(%rsp)        # 8-byte Spill
	movl	%ebp, 3772(%rsp)        # 4-byte Spill
	movl	%r12d, 3768(%rsp)       # 4-byte Spill
	movq	%r13, 3760(%rsp)        # 8-byte Spill
	movq	%r14, 3752(%rsp)        # 8-byte Spill
	movq	%rbx, 3744(%rsp)        # 8-byte Spill
	movq	%r10, 3736(%rsp)        # 8-byte Spill
	movq	%r11, 3728(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3840(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4184(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3880(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	movq	4184(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3720(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3896(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3720(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3712(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	3720(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3704(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3688(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3688(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3688(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3680(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3680(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3680(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3672(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp980:
	#DEBUG_VALUE: tred1:g <- [RSP+3672]
	.loc	5 850 0                 # eispack.c:850:0
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4064(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3976(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3664(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3656(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4008(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3704(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3656(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3640(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4048(%rsp), %rcx        # 8-byte Reload
	movq	4040(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp981:
	.loc	5 847 0                 # eispack.c:847:0
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3628(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	4128(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4136(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3627(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3776(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3736(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3632(%rsp), %rcx        # 8-byte Reload
	vmovsd	3672(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3672(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 4328(%rsp)       # 8-byte Spill
	jne	.LBB21_25
	jmp	.LBB21_24
.Ltmp982:
.LBB21_25:                              # %._crit_edge18
                                        #   in Loop: Header=BB21_22 Depth=2
	vmovsd	4328(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str2691369, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2221322, %r8
	movabsq	$3, %r9
	leaq	.L.str2711371, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str571157, %rbx
	leaq	.L.str2251325, %r14
	leaq	.L.str2701370, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	leaq	.L.str2681368, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str2241324, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	leaq	.L.str2271327, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	leaq	.L.str2261326, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	leaq	.L.str2661366, %rax
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	leaq	.L.str2301330, %rax
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$852, %rax              # imm = 0x354
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	leaq	.L.str2671367, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str2401340, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str2511351, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str2471347, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 852 0                 # eispack.c:852:0
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movq	3456(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3440(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3432(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3424(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	3520(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3448(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3408(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3400(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	%r15, 3384(%rsp)        # 8-byte Spill
	movl	%ebp, 3380(%rsp)        # 4-byte Spill
	movl	%r12d, 3376(%rsp)       # 4-byte Spill
	movq	%r13, 3368(%rsp)        # 8-byte Spill
	movq	%r14, 3360(%rsp)        # 8-byte Spill
	movq	%rbx, 3352(%rsp)        # 8-byte Spill
	movq	%r10, 3344(%rsp)        # 8-byte Spill
	movq	%r11, 3336(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4416(%rsp), %rax        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp983:
	.loc	5 842 0                 # eispack.c:842:0
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3600(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4344(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3324(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3323(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB21_26
	jmp	.LBB21_22
.Ltmp984:
.LBB21_26:                              # %.loopexit20
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rcx
	leaq	.L.str2721372, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2741374, %r8
	movabsq	$3, %r9
	leaq	.L.str1051205, %r10
	movabsq	$858, %r11              # imm = 0x35A
	leaq	.L.str571157, %rbx
	leaq	.L.str2711371, %r14
	leaq	.L.str2731373, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 858 0                 # eispack.c:858:0
.Ltmp985:
	movq	%rdi, 3280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 3272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3224(%rsp)       # 8-byte Spill
	movq	%r15, 3216(%rsp)        # 8-byte Spill
	movl	%ebp, 3212(%rsp)        # 4-byte Spill
	movl	%r12d, 3208(%rsp)       # 4-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r14, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3167(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3312(%rsp), %rcx        # 8-byte Reload
	vmovsd	3224(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB21_15
.LBB21_27:                              # %.lr.ph25
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3152(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2871387, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str2741374, %r9
	movabsq	$3, %r10
	leaq	.L.str2891389, %r11
	movabsq	$858, %rbx              # imm = 0x35A
	leaq	.L.str571157, %r14
	leaq	.L.str2881388, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str2861386, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str2761376, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str2751375, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str2781378, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str2771377, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str2851385, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$861, %rax              # imm = 0x35D
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	leaq	.L.str2811381, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str2841384, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str2831383, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str2791379, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$860, %rax              # imm = 0x35C
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str2821382, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str2801380, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str2061306, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str2711371, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 860 0                 # eispack.c:860:0
.Ltmp986:
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2864(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2856(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2848(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2816(%rsp)       # 8-byte Spill
	movl	%ebp, 2812(%rsp)        # 4-byte Spill
	movl	%r12d, 2808(%rsp)       # 4-byte Spill
	movq	%r13, 2800(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 2792(%rsp)       # 8-byte Spill
	movq	%r15, 2784(%rsp)        # 8-byte Spill
	movq	%r14, 2776(%rsp)        # 8-byte Spill
	movq	%r10, 2768(%rsp)        # 8-byte Spill
	movq	%r11, 2760(%rsp)        # 8-byte Spill
	movq	%rbx, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2824(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2736(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5392(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2728(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 861 0                 # eispack.c:861:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2720(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2712(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2712(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2712(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2704(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2704(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2704(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2696(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp987:
	#DEBUG_VALUE: tred1:f <- [RSP+2696]
	.loc	5 858 0                 # eispack.c:858:0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2684(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2683(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2688(%rsp), %rcx        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB21_28
	jmp	.LBB21_27
.Ltmp988:
.LBB21_28:                              # %._crit_edge26
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2921392, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2941394, %r8
	movabsq	$3, %r9
	leaq	.L.str1051205, %r10
	movabsq	$868, %r11              # imm = 0x364
	leaq	.L.str571157, %rbx
	leaq	.L.str2891389, %r14
	leaq	.L.str2931393, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str2911391, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str2781378, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str2901390, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$864, %rax              # imm = 0x360
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str2061306, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	.loc	5 864 0                 # eispack.c:864:0
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r12d, 2512(%rsp)       # 4-byte Spill
	movq	%r13, 2504(%rsp)        # 8-byte Spill
	movq	%r14, 2496(%rsp)        # 8-byte Spill
	movq	%rbx, 2488(%rsp)        # 8-byte Spill
	movq	%r10, 2480(%rsp)        # 8-byte Spill
	movq	%r11, 2472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	vaddsd	%xmm0, %xmm0, %xmm1
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 2464(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2600(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2456(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp989:
	#DEBUG_VALUE: tred1:h <- [RSP+2456]
	#DEBUG_VALUE: tred1:j <- 0
	.loc	5 868 0                 # eispack.c:868:0
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2455(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.Ltmp990:
.LBB21_29:                              # %.lr.ph31
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2440(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3051405, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str2941394, %r9
	movabsq	$3, %r10
	leaq	.L.str3071407, %r11
	movabsq	$868, %rbx              # imm = 0x364
	leaq	.L.str571157, %r14
	leaq	.L.str3061406, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str3041404, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str2961396, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str2951395, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str3021402, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str2971397, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$870, %rax              # imm = 0x366
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str3031403, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str2981398, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str3011401, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str2911391, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str3001400, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str2991399, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str2891389, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 870 0                 # eispack.c:870:0
.Ltmp991:
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2184(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2176(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2144(%rsp)        # 8-byte Spill
	movl	%ebp, 2140(%rsp)        # 4-byte Spill
	movl	%r12d, 2136(%rsp)       # 4-byte Spill
	movq	%r13, 2128(%rsp)        # 8-byte Spill
	movq	%r14, 2120(%rsp)        # 8-byte Spill
	movq	%rbx, 2112(%rsp)        # 8-byte Spill
	movq	%r10, 2104(%rsp)        # 8-byte Spill
	movq	%r11, 2096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2080(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2064(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2064(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2056(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2056(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp992:
	.loc	5 868 0                 # eispack.c:868:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2104(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB21_30
	jmp	.LBB21_29
.Ltmp993:
.LBB21_30:                              # %.loopexit28
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str3081408, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3101410, %r8
	movabsq	$3, %r9
	leaq	.L.str1051205, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str571157, %rbx
	leaq	.L.str3071407, %r14
	leaq	.L.str3091409, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 875 0                 # eispack.c:875:0
.Ltmp994:
	movq	%rdi, 1992(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 1984(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1976(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1952(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1944(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1936(%rsp)        # 8-byte Spill
	movl	%ebp, 1932(%rsp)        # 4-byte Spill
	movl	%r12d, 1928(%rsp)       # 4-byte Spill
	movq	%r13, 1920(%rsp)        # 8-byte Spill
	movq	%r14, 1912(%rsp)        # 8-byte Spill
	movq	%rbx, 1904(%rsp)        # 8-byte Spill
	movq	%r10, 1896(%rsp)        # 8-byte Spill
	movq	%r11, 1888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1887(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.LBB21_31:                              # %.lr.ph34
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_32 Depth 3
	movq	1872(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str3221422, %r8
	leaq	.L.str71107, %rsi
	movabsq	$879, %rdi              # imm = 0x36F
	leaq	.L.str571157, %r9
	leaq	.L.str3101410, %r10
	leaq	.L.str3211421, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str3201420, %r13
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str3191419, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str3181418, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str3111411, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str3171417, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str3161416, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$878, %rax              # imm = 0x36E
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str3151415, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str3141414, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$877, %rax              # imm = 0x36D
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str3131413, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str3121412, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str3071407, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 877 0                 # eispack.c:877:0
.Ltmp995:
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1656(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1648(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1624(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1612(%rsp)       # 4-byte Spill
	movq	%r15, 1600(%rsp)        # 8-byte Spill
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r12, 1584(%rsp)        # 8-byte Spill
	movq	%r13, 1576(%rsp)        # 8-byte Spill
	movq	%rbx, 1568(%rsp)        # 8-byte Spill
	movq	%r10, 1560(%rsp)        # 8-byte Spill
	movq	%r11, 1552(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1536(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp996:
	#DEBUG_VALUE: tred1:f <- [RSP+1536]
	.loc	5 878 0                 # eispack.c:878:0
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1520(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp997:
	#DEBUG_VALUE: tred1:g <- [RSP+1520]
	.loc	5 881 0                 # eispack.c:881:0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r14d      # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp998:
	.loc	5 879 0                 # eispack.c:879:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1512(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1512(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1512(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1496(%rsp)        # 8-byte Spill
.Ltmp999:
.LBB21_32:                              #   Parent Loop BB21_8 Depth=1
                                        #     Parent Loop BB21_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	1496(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3381438, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str3221422, %r9
	movabsq	$3, %r10
	leaq	.L.str3131413, %r11
	movabsq	$879, %rbx              # imm = 0x36F
	leaq	.L.str571157, %r14
	leaq	.L.str3391439, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str3371437, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str3241424, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str3231423, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str3351435, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str3261426, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str3361436, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str3311431, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str3341434, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str3171417, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str3331433, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str3321432, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str3271427, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str3301430, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str3151415, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str3291429, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3281428, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str3251425, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str3201420, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str3111411, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str3101410, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 881 0                 # eispack.c:881:0
.Ltmp1000:
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1144(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1136(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1128(%rsp)        # 8-byte Spill
	movl	%ebp, 1124(%rsp)        # 4-byte Spill
	movl	%r12d, 1120(%rsp)       # 4-byte Spill
	movq	%r13, 1112(%rsp)        # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1056(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1040(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1001:
	.loc	5 879 0                 # eispack.c:879:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 980(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 979(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	jne	.LBB21_33
	jmp	.LBB21_32
.Ltmp1002:
.LBB21_33:                              # %._crit_edge35
                                        #   in Loop: Header=BB21_31 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3411441, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3101410, %r8
	movabsq	$3, %r9
	leaq	.L.str3431443, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str571157, %rbx
	leaq	.L.str3131413, %r14
	leaq	.L.str3421442, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str3401440, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str3121412, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str3111411, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 875 0                 # eispack.c:875:0
	movq	%rdi, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 880(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%r8, 848(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 840(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 832(%rsp)         # 8-byte Spill
	movl	%ebp, 828(%rsp)         # 4-byte Spill
	movl	%r12d, 824(%rsp)        # 4-byte Spill
	movq	%r13, 816(%rsp)         # 8-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%rbx, 800(%rsp)         # 8-byte Spill
	movq	%r10, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 771(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB21_34
	jmp	.LBB21_31
.Ltmp1003:
.LBB21_34:                              # %.preheader39
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str3441444, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3461446, %r8
	movabsq	$3, %r9
	leaq	.L.str1051205, %r10
	movabsq	$886, %r11              # imm = 0x376
	leaq	.L.str571157, %rbx
	leaq	.L.str3431443, %r14
	leaq	.L.str3451445, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 886 0                 # eispack.c:886:0
.Ltmp1004:
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%r8, 688(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 680(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 672(%rsp)         # 8-byte Spill
	movl	%ebp, 668(%rsp)         # 4-byte Spill
	movl	%r12d, 664(%rsp)        # 4-byte Spill
	movq	%r13, 656(%rsp)         # 8-byte Spill
	movq	%r14, 648(%rsp)         # 8-byte Spill
	movq	%rbx, 640(%rsp)         # 8-byte Spill
	movq	%r10, 632(%rsp)         # 8-byte Spill
	movq	%r11, 624(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	656(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 623(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB21_15
.LBB21_35:                              # %.lr.ph42
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3671467, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str3461446, %r9
	movabsq	$3, %r10
	leaq	.L.str1051205, %r11
	movabsq	$886, %rbx              # imm = 0x376
	leaq	.L.str571157, %r14
	leaq	.L.str3681468, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str3661466, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str1071207, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str3481448, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str3471447, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str3641464, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str3611461, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$891, %rax              # imm = 0x37B
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str3651465, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str3501450, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str3621462, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str3551455, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$890, %rax              # imm = 0x37A
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str3631463, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str3601460, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str3591459, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str3521452, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str3581458, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str1041204, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str3561456, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str3491449, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$889, %rax              # imm = 0x379
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str3571457, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str3541454, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str3531453, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str3511451, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$888, %rax              # imm = 0x378
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str3431443, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 888 0                 # eispack.c:888:0
.Ltmp1005:
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%r8, 192(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 184(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movl	%ebp, 172(%rsp)         # 4-byte Spill
	movl	%r12d, 168(%rsp)        # 4-byte Spill
	movq	%r13, 160(%rsp)         # 8-byte Spill
	movq	%r14, 152(%rsp)         # 8-byte Spill
	movq	%rbx, 144(%rsp)         # 8-byte Spill
	movq	%r10, 136(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1006:
	#DEBUG_VALUE: tred1:f <- [RSP+112]
	.loc	5 889 0                 # eispack.c:889:0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 108(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 104(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 890 0                 # eispack.c:890:0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	68(%rsp), %r12d         # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 64(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	64(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	64(%rsp), %ebp          # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	56(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 891 0                 # eispack.c:891:0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1007:
	.loc	5 886 0                 # eispack.c:886:0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB21_15
	jmp	.LBB21_35
.Ltmp1008:
.LBB21_36:                              # %._crit_edge52
	movabsq	$894, %rdi              # imm = 0x37E
	leaq	.L.str571157, %rsi
	leaq	.L.str721172, %rdx
	leaq	.L.str3691469, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	5 894 0                 # eispack.c:894:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$11128, %rsp            # imm = 0x2B78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1009:
.Ltmp1010:
	.size	tred1, .Ltmp1010-tred1
.Lfunc_end21:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI22_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI22_1:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
.LCPI22_2:
	.quad	4607182418800017408     # double 1
.LCPI22_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	tqlrat
	.align	16, 0x90
	.type	tqlrat,@function
tqlrat:                                 # @tqlrat
	.cfi_startproc
.Lfunc_begin22:
	.loc	5 433 0                 # eispack.c:433:0
# BB#0:
	pushq	%rbp
.Ltmp1018:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp1019:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp1020:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp1021:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp1022:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp1023:
	.cfi_def_cfa_offset 56
	subq	$9336, %rsp             # imm = 0x2478
.Ltmp1024:
	.cfi_def_cfa_offset 9392
.Ltmp1025:
	.cfi_offset %rbx, -56
.Ltmp1026:
	.cfi_offset %r12, -48
.Ltmp1027:
	.cfi_offset %r13, -40
.Ltmp1028:
	.cfi_offset %r14, -32
.Ltmp1029:
	.cfi_offset %r15, -24
.Ltmp1030:
	.cfi_offset %rbp, -16
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str51105, %r8
	movabsq	$0, %r9
	leaq	.L.str71107, %r10
	movabsq	$2, %r11
	leaq	.L.str3711471, %rbx
	movabsq	$3, %r14
	leaq	.L.str3701470, %r15
	movabsq	$454, %r12              # imm = 0x1C6
	leaq	.L.str621162, %r13
	leaq	.L.str41104, %rbp
	movq	%rcx, 9328(%rsp)        # 8-byte Spill
	leaq	.L.str701170, %rcx
	movl	%eax, 9324(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 9312(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 9304(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 9296(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rcx
	movq	%rcx, 9288(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 9280(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 9272(%rsp)        # 8-byte Spill
	movabsq	$24601, %rcx            # imm = 0x6019
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 9256(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rcx
	movq	%rcx, 9248(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rcx
	.loc	5 366 0 prologue_end    # eispack.c:366:0
.Ltmp1031:
	movl	%eax, 9244(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 9232(%rsp)        # 8-byte Spill
	movq	9264(%rsp), %rax        # 8-byte Reload
	movl	%edi, 9228(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 9216(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	9232(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9288(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9184(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 9176(%rsp)        # 8-byte Spill
	movq	%r12, 9168(%rsp)        # 8-byte Spill
	movq	%rbp, 9160(%rsp)        # 8-byte Spill
	movq	%r15, 9152(%rsp)        # 8-byte Spill
	movq	%r14, 9144(%rsp)        # 8-byte Spill
	movq	%rbx, 9136(%rsp)        # 8-byte Spill
	movq	%r10, 9128(%rsp)        # 8-byte Spill
	movq	%r11, 9120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9200(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9248(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tqlrat:n <- [RSP+9228]
	#DEBUG_VALUE: tqlrat:d <- [RSP+9216]
	#DEBUG_VALUE: tqlrat:e2 <- [RSP+9208]
.Ltmp1032:
	#DEBUG_VALUE: tqlrat:b <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:c <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:ierr <- 0
	.loc	5 454 0                 # eispack.c:454:0
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9192(%rsp), %rcx        # 8-byte Reload
	movq	9272(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rdx        # 8-byte Reload
	movq	9184(%rsp), %rcx        # 8-byte Reload
	movq	9280(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9288(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9119(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9144(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9136(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	9324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_28
.Ltmp1033:
# BB#1:                                 # %.preheader34
	movabsq	$1, %rax
	leaq	.L.str91109, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3741474, %r8
	movabsq	$3, %r9
	leaq	.L.str3731473, %r10
	movabsq	$459, %r11              # imm = 0x1CB
	leaq	.L.str621162, %rbx
	leaq	.L.str3711471, %r14
	leaq	.L.str3721472, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9104(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 459 0                 # eispack.c:459:0
.Ltmp1034:
	movq	%rdi, 9072(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9064(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9048(%rsp)        # 8-byte Spill
	movq	%r8, 9040(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9032(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9024(%rsp)        # 8-byte Spill
	movq	%r15, 9016(%rsp)        # 8-byte Spill
	movl	%ebp, 9012(%rsp)        # 4-byte Spill
	movl	%r12d, 9008(%rsp)       # 4-byte Spill
	movq	%r13, 9000(%rsp)        # 8-byte Spill
	movq	%rbx, 8992(%rsp)        # 8-byte Spill
	movq	%r11, 8984(%rsp)        # 8-byte Spill
	movq	%r10, 8976(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	$1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9000(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8975(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8984(%rsp), %rdi        # 8-byte Reload
	movq	8992(%rsp), %rsi        # 8-byte Reload
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	9072(%rsp), %r8         # 8-byte Reload
	movl	9012(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9032(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	8976(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB22_3
.Ltmp1035:
# BB#2:                                 # %._crit_edge37.thread
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str3701470, %r8
	leaq	.L.str71107, %rsi
	movabsq	$468, %rdi              # imm = 0x1D4
	leaq	.L.str621162, %r9
	leaq	.L.str3741474, %r10
	leaq	.L.str3761476, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str141114, %r15
	leaq	.L.str611161, %r12
	movabsq	$466, %r13              # imm = 0x1D2
	movq	%rcx, 8952(%rsp)        # 8-byte Spill
	leaq	.L.str3751475, %rcx
	movq	%rcx, 8944(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 8936(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 8928(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rcx
	movq	%rcx, 8920(%rsp)        # 8-byte Spill
	leaq	.L.str131113, %rcx
	movq	%rcx, 8912(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 8904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 8896(%rsp)        # 8-byte Spill
	leaq	.L.str111111, %rcx
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 8880(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rcx
	movq	%rcx, 8872(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
.Ltmp1036:
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	5 466 0                 # eispack.c:466:0
	movq	%rdi, 8856(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 8848(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 8840(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 8832(%rsp)        # 8-byte Spill
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 8824(%rsp)         # 8-byte Spill
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	%r9, 8816(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 8812(%rsp)        # 4-byte Spill
	movq	%r14, 8800(%rsp)        # 8-byte Spill
	movq	%r15, 8792(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8784(%rsp)       # 8-byte Spill
	movq	%r12, 8776(%rsp)        # 8-byte Spill
	movq	%r13, 8768(%rsp)        # 8-byte Spill
	movl	%ebp, 8764(%rsp)        # 4-byte Spill
	movq	%r10, 8752(%rsp)        # 8-byte Spill
	movq	%r11, 8744(%rsp)        # 8-byte Spill
	movq	%rbx, 8736(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8864(%rsp), %rdx        # 8-byte Reload
	movq	8840(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8872(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8732(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8912(%rsp), %rcx        # 8-byte Reload
	movq	8880(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8732(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8732(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8952(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8920(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8720(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8712(%rsp)        # 8-byte Spill
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	8936(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8792(%rsp), %rcx        # 8-byte Reload
	movq	8840(%rsp), %r8         # 8-byte Reload
	movq	8848(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp1037:
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	5 468 0                 # eispack.c:468:0
	movq	8856(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8736(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB22_28
.Ltmp1038:
.LBB22_3:                               # %.lr.ph36
                                        # =>This Inner Loop Header: Depth=1
	movq	8960(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1731273, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str3731473, %r9
	movabsq	$3, %r10
	leaq	.L.str3791479, %r11
	movabsq	$459, %rbx              # imm = 0x1CB
	leaq	.L.str621162, %r14
	leaq	.L.str3781478, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str1721272, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str1161216, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	leaq	.L.str1151215, %rax
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	leaq	.L.str201120, %rax
	movq	%rax, 8616(%rsp)        # 8-byte Spill
	leaq	.L.str221122, %rax
	movq	%rax, 8608(%rsp)        # 8-byte Spill
	movabsq	$461, %rax              # imm = 0x1CD
	movq	%rax, 8600(%rsp)        # 8-byte Spill
	leaq	.L.str3771477, %rax
	movq	%rax, 8592(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8584(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rax
	movq	%rax, 8576(%rsp)        # 8-byte Spill
	leaq	.L.str211121, %rax
	movq	%rax, 8568(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8560(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8552(%rsp)        # 8-byte Spill
	leaq	.L.str181118, %rax
	movq	%rax, 8544(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	leaq	.L.str3711471, %rax
	movq	%rax, 8528(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 461 0                 # eispack.c:461:0
.Ltmp1039:
	movq	%rax, 8520(%rsp)        # 8-byte Spill
	movq	8552(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8496(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8488(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8520(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8480(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8472(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8464(%rsp)        # 8-byte Spill
	movl	%ebp, 8460(%rsp)        # 4-byte Spill
	movl	%r12d, 8456(%rsp)       # 4-byte Spill
	movq	%r13, 8448(%rsp)        # 8-byte Spill
	movq	%r14, 8440(%rsp)        # 8-byte Spill
	movq	%rbx, 8432(%rsp)        # 8-byte Spill
	movq	%r10, 8424(%rsp)        # 8-byte Spill
	movq	%r11, 8416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8544(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8704(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8536(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8408(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8400(%rsp)       # 8-byte Spill
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8568(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8552(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8392(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8592(%rsp), %rcx        # 8-byte Reload
	movq	8584(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, -8(%rax,%rcx,8)
.Ltmp1040:
	.loc	5 459 0                 # eispack.c:459:0
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8656(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8648(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8376(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8496(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8480(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8472(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB22_4
	jmp	.LBB22_3
.Ltmp1041:
.LBB22_4:                               # %._crit_edge37
	movabsq	$0, %rax
	movl	$1, %ecx
	movabsq	$1, %rdx
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %esi
	leaq	.L.str331133, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str3701470, %r10
	movabsq	$3, %r11
	leaq	.L.str3821482, %rbx
	movabsq	$468, %r14              # imm = 0x1D4
	leaq	.L.str621162, %r15
	leaq	.L.str3791479, %r12
	leaq	.L.str3811481, %r13
	movabsq	$19134, %rbp            # imm = 0x4ABE
	movq	%rax, 8360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8352(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 8344(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 8336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8320(%rsp)        # 8-byte Spill
	leaq	.L.str321132, %rax
	movq	%rax, 8312(%rsp)        # 8-byte Spill
	movabsq	$466, %rax              # imm = 0x1D2
	movq	%rax, 8304(%rsp)        # 8-byte Spill
	leaq	.L.str3801480, %rax
	movq	%rax, 8296(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8288(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rax
	movq	%rax, 8280(%rsp)        # 8-byte Spill
	leaq	.L.str261126, %rax
	movq	%rax, 8272(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	leaq	.L.str231123, %rax
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	5 466 0                 # eispack.c:466:0
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	movq	8304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 8220(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 8208(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	8256(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8204(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	8232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	8220(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8176(%rsp)        # 8-byte Spill
	movq	%r12, 8168(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8160(%rsp)       # 8-byte Spill
	movq	%r13, 8152(%rsp)        # 8-byte Spill
	movq	%rbp, 8144(%rsp)        # 8-byte Spill
	movq	%r14, 8136(%rsp)        # 8-byte Spill
	movq	%rbx, 8128(%rsp)        # 8-byte Spill
	movq	%r10, 8120(%rsp)        # 8-byte Spill
	movq	%r11, 8112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8240(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8272(%rsp), %rcx        # 8-byte Reload
	movq	8248(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8108(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8088(%rsp)        # 8-byte Spill
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	8288(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8088(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	5 468 0                 # eispack.c:468:0
.Ltmp1042:
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8224(%rsp), %rcx        # 8-byte Reload
	movq	8328(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8087(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8152(%rsp), %rcx        # 8-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8112(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8120(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movl	8204(%rsp), %eax        # 4-byte Reload
	movq	8208(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8160(%rsp), %xmm1       # 8-byte Reload
	movl	8220(%rsp), %esi        # 4-byte Reload
	vmovsd	8160(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8160(%rsp), %xmm3       # 8-byte Reload
	movl	8220(%rsp), %edi        # 4-byte Reload
	movl	%eax, 8080(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	movl	%esi, 8044(%rsp)        # 4-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%edi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_5
	jmp	.LBB22_28
.LBB22_5:                               # %.lr.ph33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_9 Depth 2
                                        #     Child Loop BB22_12 Depth 2
                                        #       Child Loop BB22_15 Depth 3
                                        #       Child Loop BB22_17 Depth 3
                                        #     Child Loop BB22_22 Depth 2
	vmovsd	8024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8032(%rsp), %xmm1       # 8-byte Reload
	movl	8044(%rsp), %eax        # 4-byte Reload
	vmovsd	8048(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8056(%rsp), %xmm3       # 8-byte Reload
	movq	8064(%rsp), %rcx        # 8-byte Reload
	movl	8080(%rsp), %edx        # 4-byte Reload
	movq	8072(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str941194, %r8
	movabsq	$0, %r9
	leaq	.L.str71107, %r10
	movabsq	$2, %r11
	leaq	.L.str4001500, %rbx
	movabsq	$3, %r14
	leaq	.L.str251125, %r15
	movabsq	$473, %r12              # imm = 0x1D9
	leaq	.L.str621162, %r13
	leaq	.L.str3821482, %rbp
	movq	%rcx, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str3991499, %rcx
	movl	%eax, 8012(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 8008(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 8000(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 7992(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str3901490, %rcx
	movq	%rcx, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str371137, %rcx
	movq	%rcx, 7968(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str351135, %rcx
	movq	%rcx, 7952(%rsp)        # 8-byte Spill
	leaq	.L.str271127, %rcx
	movq	%rcx, 7944(%rsp)        # 8-byte Spill
	movabsq	$471, %rcx              # imm = 0x1D7
	movq	%rcx, 7936(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str311131, %rcx
	movq	%rcx, 7920(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str1981298, %rcx
	movq	%rcx, 7904(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rcx
	movq	%rcx, 7888(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rcx
	movq	%rcx, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str3831483, %rcx
	movq	%rcx, 7864(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str291129, %rcx
	movq	%rcx, 7848(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rcx
	movq	%rcx, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rcx
	movq	%rcx, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rcx
	movq	%rcx, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str3971497, %rcx
	movq	%rcx, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str3851485, %rcx
	movq	%rcx, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str3981498, %rcx
	vxorps	%xmm4, %xmm4, %xmm4
	movq	%rcx, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 7784(%rsp)        # 8-byte Spill
	leaq	.L.str3791479, %rcx
	movq	%rcx, 7776(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 7768(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 7760(%rsp)        # 8-byte Spill
	leaq	.L.str3951495, %rcx
	movq	%rcx, 7752(%rsp)        # 8-byte Spill
	leaq	.L.str3961496, %rcx
	movq	%rcx, 7744(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	leaq	.L.str3941494, %rcx
	movq	%rcx, 7728(%rsp)        # 8-byte Spill
	leaq	.L.str3181418, %rcx
	movq	%rcx, 7720(%rsp)        # 8-byte Spill
	leaq	.L.str3921492, %rcx
	movq	%rcx, 7712(%rsp)        # 8-byte Spill
	leaq	.L.str3931493, %rcx
	movq	%rcx, 7704(%rsp)        # 8-byte Spill
	leaq	.L.str3911491, %rcx
	movq	%rcx, 7696(%rsp)        # 8-byte Spill
	leaq	.L.str3881488, %rcx
	movq	%rcx, 7688(%rsp)        # 8-byte Spill
	leaq	.L.str3891489, %rcx
	movq	%rcx, 7680(%rsp)        # 8-byte Spill
	leaq	.L.str3861486, %rcx
	movq	%rcx, 7672(%rsp)        # 8-byte Spill
	leaq	.L.str3871487, %rcx
	movq	%rcx, 7664(%rsp)        # 8-byte Spill
	leaq	.L.str3841484, %rcx
	.loc	5 470 0                 # eispack.c:470:0
.Ltmp1043:
	movq	%rcx, 7656(%rsp)        # 8-byte Spill
	movq	7768(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 7648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movq	%r13, %rsi
	movl	%edx, 7636(%rsp)        # 4-byte Spill
	movq	%rbp, %rdx
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 7624(%rsp)         # 8-byte Spill
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	%eax, 7620(%rsp)        # 4-byte Spill
	movl	8008(%rsp), %eax        # 4-byte Reload
	movq	%r9, 7608(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7600(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7592(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7584(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 7576(%rsp)       # 8-byte Spill
	movq	%r12, 7568(%rsp)        # 8-byte Spill
	movq	%r13, 7560(%rsp)        # 8-byte Spill
	movq	%rbp, 7552(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 7544(%rsp)       # 8-byte Spill
	movq	%r15, 7536(%rsp)        # 8-byte Spill
	movq	%r14, 7528(%rsp)        # 8-byte Spill
	movq	%r10, 7520(%rsp)        # 8-byte Spill
	movq	%r11, 7512(%rsp)        # 8-byte Spill
	movq	%rbx, 7504(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7656(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7672(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7672(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7680(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7688(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7696(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7704(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7584(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7728(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1044:
	#DEBUG_VALUE: tqlrat:j <- 0
	.loc	5 471 0                 # eispack.c:471:0
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7496(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7488(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7840(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7488(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	7488(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7480(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7872(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7472(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7464(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7912(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7464(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7464(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7456(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7456(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7448(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1045:
	#DEBUG_VALUE: tqlrat:h <- [RSP+7448]
	.loc	5 473 0                 # eispack.c:473:0
	movq	7568(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7624(%rsp), %rcx        # 8-byte Reload
	movq	7960(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7447(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7568(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	8000(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7447(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7447(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7584(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7432(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7416(%rsp)       # 8-byte Spill
	jne	.LBB22_7
.Ltmp1046:
# BB#6:                                 #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str251125, %r8
	leaq	.L.str71107, %rdx
	movabsq	$478, %rdi              # imm = 0x1DE
	leaq	.L.str621162, %rsi
	leaq	.L.str4001500, %r9
	leaq	.L.str4011501, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str981198, %r12
	leaq	.L.str971197, %r13
	movq	%rax, 7408(%rsp)        # 8-byte Spill
	movabsq	$477, %rax              # imm = 0x1DD
	movq	%rax, 7400(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	vmovsd	.LCPI22_1, %xmm0
	movq	%rax, 7392(%rsp)        # 8-byte Spill
	leaq	.L.str961196, %rax
	movq	%rax, 7384(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 7376(%rsp)        # 8-byte Spill
	movabsq	$476, %rax              # imm = 0x1DC
	movq	%rax, 7368(%rsp)        # 8-byte Spill
	leaq	.L.str371137, %rax
	movq	%rax, 7360(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 7352(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rax
	movq	%rax, 7344(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
.Ltmp1047:
	#DEBUG_VALUE: tqlrat:t <- [RSP+7448]
	.loc	5 476 0                 # eispack.c:476:0
	movq	%rax, 7336(%rsp)        # 8-byte Spill
	movq	7368(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7328(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7320(%rsp)        # 8-byte Spill
	movq	%rdx, 7312(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7384(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7304(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7336(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7296(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7288(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7280(%rsp)        # 8-byte Spill
	movq	%r14, 7272(%rsp)        # 8-byte Spill
	movq	%r12, 7264(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7256(%rsp)       # 8-byte Spill
	movq	%r13, 7248(%rsp)        # 8-byte Spill
	movl	%ebp, 7244(%rsp)        # 4-byte Spill
	movq	%r10, 7232(%rsp)        # 8-byte Spill
	movq	%r11, 7224(%rsp)        # 8-byte Spill
	movl	%ebx, 7220(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7352(%rsp), %rdx        # 8-byte Reload
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	7344(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7360(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	7448(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7208(%rsp)       # 8-byte Spill
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7368(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7392(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7256(%rsp), %xmm0       # 8-byte Reload
	movq	7304(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7208(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7256(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7200(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1048:
	#DEBUG_VALUE: tqlrat:b <- [RSP+7200]
	.loc	5 477 0                 # eispack.c:477:0
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7264(%rsp), %rcx        # 8-byte Reload
	movq	7392(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7264(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 7192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1049:
	#DEBUG_VALUE: tqlrat:c <- [RSP+7192]
	.loc	5 478 0                 # eispack.c:478:0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7232(%rsp), %rcx        # 8-byte Reload
	movq	7224(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7304(%rsp), %rsi        # 8-byte Reload
	movq	7304(%rsp), %rdx        # 8-byte Reload
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7200(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7448(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7432(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7416(%rsp)       # 8-byte Spill
.Ltmp1050:
.LBB22_7:                               # %.lr.ph
                                        #   in Loop: Header=BB22_5 Depth=1
	vmovsd	7416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7424(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7432(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str4031503, %r8
	leaq	.L.str71107, %rdx
	movabsq	$482, %rdi              # imm = 0x1E2
	leaq	.L.str621162, %rsi
	leaq	.L.str251125, %r9
	leaq	.L.str4021502, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str3911491, %r12
	leaq	.L.str4001500, %r13
	movq	%rax, 7184(%rsp)        # 8-byte Spill
	leaq	.L.str371137, %rax
	movq	%rax, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str3901490, %rax
	movq	%rax, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str3821482, %rax
	movq	%rax, 7160(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str3931493, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str971197, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str3921492, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	leaq	.L.str3981498, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str981198, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str3971497, %rax
	.loc	5 482 0                 # eispack.c:482:0
.Ltmp1051:
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7088(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7080(%rsp)        # 8-byte Spill
	movq	%rdx, 7072(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7112(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7144(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7056(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7048(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7040(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7032(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7024(%rsp)       # 8-byte Spill
	movq	%r14, 7016(%rsp)        # 8-byte Spill
	movl	%ebp, 7012(%rsp)        # 4-byte Spill
	movq	%r15, 7000(%rsp)        # 8-byte Spill
	movq	%r13, 6992(%rsp)        # 8-byte Spill
	movq	%r12, 6984(%rsp)        # 8-byte Spill
	movl	%ebx, 6980(%rsp)        # 4-byte Spill
	movq	%r10, 6968(%rsp)        # 8-byte Spill
	movq	%r11, 6960(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	7112(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7152(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7144(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7152(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	6984(%rsp), %rcx        # 8-byte Reload
	movq	7144(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7168(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7040(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	6984(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1052:
	#DEBUG_VALUE: tqlrat:m <- [RSP+8012]
	movq	7088(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	6968(%rsp), %rcx        # 8-byte Reload
	movq	6960(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7064(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	7064(%rsp), %r9         # 8-byte Reload
	movq	7072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 6952(%rsp)        # 8-byte Spill
	movl	%ebx, 6948(%rsp)        # 4-byte Spill
	jmp	.LBB22_9
.Ltmp1053:
.LBB22_8:                               #   in Loop: Header=BB22_9 Depth=2
	movabsq	$1, %rax
	leaq	.L.str1111211, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4071507, %r8
	movabsq	$3, %r9
	leaq	.L.str4031503, %r10
	movabsq	$482, %r11              # imm = 0x1E2
	leaq	.L.str621162, %rbx
	leaq	.L.str4041504, %r14
	leaq	.L.str4061506, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6936(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6928(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 6920(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 6912(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6904(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6896(%rsp)        # 8-byte Spill
	leaq	.L.str4051505, %rax
	movq	%rax, 6888(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rdi, 6880(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6872(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6864(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6856(%rsp)        # 8-byte Spill
	movq	6920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6856(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6840(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6832(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6824(%rsp)        # 8-byte Spill
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	movl	%r12d, 6816(%rsp)       # 4-byte Spill
	movq	%r13, 6808(%rsp)        # 8-byte Spill
	movq	%r14, 6800(%rsp)        # 8-byte Spill
	movq	%rbx, 6792(%rsp)        # 8-byte Spill
	movq	%r10, 6784(%rsp)        # 8-byte Spill
	movq	%r11, 6776(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6896(%rsp), %rsi        # 8-byte Reload
	movq	6768(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6888(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6768(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6808(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6764(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6792(%rsp), %rsi        # 8-byte Reload
	movq	6800(%rsp), %rdx        # 8-byte Reload
	movq	6848(%rsp), %rcx        # 8-byte Reload
	movq	6904(%rsp), %r8         # 8-byte Reload
	movl	6820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6880(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6764(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6764(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6808(%rsp), %rdi        # 8-byte Reload
	movq	6936(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6848(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6763(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6792(%rsp), %rsi        # 8-byte Reload
	movq	6800(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6880(%rsp), %r8         # 8-byte Reload
	movl	6820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6832(%rsp), %rdi        # 8-byte Reload
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	6864(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6880(%rsp), %rdi        # 8-byte Reload
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	6864(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6763(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6936(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6848(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6763(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6768(%rsp), %rcx        # 8-byte Reload
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	6756(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 6952(%rsp)        # 8-byte Spill
	movl	%ebp, 6948(%rsp)        # 4-byte Spill
	movl	%r12d, 6752(%rsp)       # 4-byte Spill
	jne	.LBB22_9
	jmp	.LBB22_10
.LBB22_9:                               #   Parent Loop BB22_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	6948(%rsp), %eax        # 4-byte Reload
	movq	6952(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str1181218, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str4071507, %r10
	movabsq	$3, %r11
	leaq	.L.str4041504, %rbx
	movabsq	$484, %r14              # imm = 0x1E4
	leaq	.L.str621162, %r15
	leaq	.L.str4031503, %r12
	leaq	.L.str4101510, %r13
	movl	$0, %ebp
	movl	%eax, 6748(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 6736(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6728(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6720(%rsp)        # 8-byte Spill
	leaq	.L.str1261226, %rcx
	movq	%rcx, 6712(%rsp)        # 8-byte Spill
	leaq	.L.str4091509, %rcx
	movq	%rcx, 6704(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 6696(%rsp)        # 8-byte Spill
	movabsq	$482, %rcx              # imm = 0x1E2
	movq	%rcx, 6688(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6680(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6672(%rsp)        # 8-byte Spill
	leaq	.L.str4051505, %rcx
	movq	%rcx, 6664(%rsp)        # 8-byte Spill
	leaq	.L.str4081508, %rcx
	movq	%rcx, 6656(%rsp)        # 8-byte Spill
	leaq	.L.str1211221, %rcx
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	leaq	.L.str3981498, %rcx
	movq	%rcx, 6640(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 6632(%rsp)        # 8-byte Spill
	leaq	.L.str1201220, %rcx
	movq	%rcx, 6624(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str1601260, %rcx
	movq	%rcx, 6608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6600(%rsp)        # 8-byte Spill
	leaq	.L.str251125, %rcx
	movq	%rcx, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str3941494, %rcx
	movq	%rcx, 6584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6576(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str3831483, %rcx
	.loc	5 484 0                 # eispack.c:484:0
.Ltmp1054:
	movq	%rcx, 6560(%rsp)        # 8-byte Spill
	movq	6576(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6552(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6544(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 6536(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6528(%rsp)         # 8-byte Spill
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6520(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6516(%rsp)        # 4-byte Spill
	movq	%r15, 6504(%rsp)        # 8-byte Spill
	movq	%r12, 6496(%rsp)        # 8-byte Spill
	movq	%r13, 6488(%rsp)        # 8-byte Spill
	movl	%ebp, 6484(%rsp)        # 4-byte Spill
	movq	%r14, 6472(%rsp)        # 8-byte Spill
	movq	%rbx, 6464(%rsp)        # 8-byte Spill
	movq	%r10, 6456(%rsp)        # 8-byte Spill
	movq	%r11, 6448(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6664(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6576(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6712(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6624(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6736(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6440(%rsp)        # 8-byte Spill
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6440(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6432(%rsp)       # 8-byte Spill
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6632(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	6432(%rsp), %xmm0       # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6432(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp1055:
	.loc	5 482 0                 # eispack.c:482:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6431(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	6680(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6552(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6736(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6768(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6664(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6680(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6552(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6712(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6756(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1056:
	#DEBUG_VALUE: tqlrat:m <- [RSP+6756]
	.loc	5 484 0                 # eispack.c:484:0
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6520(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6552(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6552(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6456(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6431(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6431(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6752(%rsp)        # 4-byte Spill
	jne	.LBB22_8
.Ltmp1057:
.LBB22_10:                              # %split2
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	6752(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1381238, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str1301230, %r9
	movabsq	$3, %r10
	leaq	.L.str4131513, %r11
	movabsq	$490, %rbx              # imm = 0x1EA
	leaq	.L.str621162, %r14
	leaq	.L.str4071507, %r15
	leaq	.L.str4121512, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 6416(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6400(%rsp)        # 8-byte Spill
	leaq	.L.str4111511, %rcx
	movq	%rcx, 6392(%rsp)        # 8-byte Spill
	leaq	.L.str1271227, %rcx
	movq	%rcx, 6384(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6376(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6368(%rsp)        # 8-byte Spill
	leaq	.L.str3831483, %rcx
	movq	%rcx, 6360(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6352(%rsp)        # 8-byte Spill
	leaq	.L.str4031503, %rcx
	movq	%rcx, 6344(%rsp)        # 8-byte Spill
	leaq	.L.str4091509, %rcx
	movq	%rcx, 6336(%rsp)        # 8-byte Spill
	leaq	.L.str1261226, %rcx
	movq	%rcx, 6328(%rsp)        # 8-byte Spill
	leaq	.L.str4041504, %rcx
	movq	%rcx, 6320(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 490 0                 # eispack.c:490:0
.Ltmp1058:
	movq	%rcx, 6304(%rsp)        # 8-byte Spill
	movq	6312(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6296(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6288(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6280(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	6392(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6272(%rsp)         # 8-byte Spill
	movq	6304(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6264(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6260(%rsp)        # 4-byte Spill
	movq	%r15, 6248(%rsp)        # 8-byte Spill
	movq	%r12, 6240(%rsp)        # 8-byte Spill
	movl	%ebp, 6236(%rsp)        # 4-byte Spill
	movl	%r13d, 6232(%rsp)       # 4-byte Spill
	movq	%r14, 6224(%rsp)        # 8-byte Spill
	movq	%rbx, 6216(%rsp)        # 8-byte Spill
	movq	%r10, 6208(%rsp)        # 8-byte Spill
	movq	%r11, 6200(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6416(%rsp), %r9         # 8-byte Reload
	movq	6320(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6336(%rsp), %r8         # 8-byte Reload
	movq	6416(%rsp), %r9         # 8-byte Reload
	movq	6344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6384(%rsp), %rcx        # 8-byte Reload
	movq	6352(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6368(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6360(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6196(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6280(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6196(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	6196(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6416(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6280(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6195(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6288(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6288(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6195(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6416(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6280(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6195(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
# BB#11:                                # %.preheader
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4141514, %r8
	leaq	.L.str71107, %rsi
	movabsq	$494, %rdi              # imm = 0x1EE
	leaq	.L.str621162, %r9
	leaq	.L.str1301230, %r10
	leaq	.L.str1331233, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1491249, %r12
	leaq	.L.str4111511, %r13
	movq	%rcx, 6176(%rsp)        # 8-byte Spill
	leaq	.L.str3861486, %rcx
	movq	%rcx, 6168(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6160(%rsp)        # 8-byte Spill
	leaq	.L.str1481248, %rcx
	movq	%rcx, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str1471247, %rcx
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 6136(%rsp)        # 8-byte Spill
	movabsq	$529, %rcx              # imm = 0x211
	movq	%rcx, 6128(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6120(%rsp)        # 8-byte Spill
	leaq	.L.str1461246, %rcx
	movq	%rcx, 6112(%rsp)        # 8-byte Spill
	movabsq	$527, %rcx              # imm = 0x20F
	movq	%rcx, 6104(%rsp)        # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 6096(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str3831483, %rcx
	movq	%rcx, 6080(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str1441244, %rcx
	movq	%rcx, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rcx
	movq	%rcx, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str1431243, %rcx
	movq	%rcx, 6048(%rsp)        # 8-byte Spill
	movabsq	$519, %rcx              # imm = 0x207
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6032(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	leaq	.L.str1421242, %rcx
	movq	%rcx, 6016(%rsp)        # 8-byte Spill
	leaq	.L.str1411241, %rcx
	movq	%rcx, 6008(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rcx
	movq	%rcx, 6000(%rsp)        # 8-byte Spill
	movabsq	$511, %rcx              # imm = 0x1FF
	movq	%rcx, 5992(%rsp)        # 8-byte Spill
	leaq	.L.str1391239, %rcx
	movq	%rcx, 5984(%rsp)        # 8-byte Spill
	leaq	.L.str1401240, %rcx
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movabsq	$507, %rcx              # imm = 0x1FB
	movq	%rcx, 5968(%rsp)        # 8-byte Spill
	movabsq	$504, %rcx              # imm = 0x1F8
	.loc	5 504 0                 # eispack.c:504:0
.Ltmp1059:
	movq	%rdi, 5960(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5952(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 5944(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5936(%rsp)         # 8-byte Spill
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5928(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5924(%rsp)        # 4-byte Spill
	movq	%r13, 5912(%rsp)        # 8-byte Spill
	movq	%r14, 5904(%rsp)        # 8-byte Spill
	movl	%ebp, 5900(%rsp)        # 4-byte Spill
	movq	%r15, 5888(%rsp)        # 8-byte Spill
	movq	%r12, 5880(%rsp)        # 8-byte Spill
	movq	%rbx, 5872(%rsp)        # 8-byte Spill
	movq	%r10, 5864(%rsp)        # 8-byte Spill
	movq	%r11, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rdx        # 8-byte Reload
	movq	5944(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6080(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	.loc	5 507 0                 # eispack.c:507:0
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6176(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5976(%rsp), %rcx        # 8-byte Reload
	movq	6032(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5848(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 511 0                 # eispack.c:511:0
.Ltmp1060:
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5840(%rsp)        # 8-byte Spill
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5992(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6008(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5836(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5992(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6016(%rsp), %rcx        # 8-byte Reload
	movq	6120(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5836(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5836(%rsp), %eax        # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
.Ltmp1061:
	.loc	5 519 0                 # eispack.c:519:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6176(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6016(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5835(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6040(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6048(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6260(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rcx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6176(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5824(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6040(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6064(%rsp), %rcx        # 8-byte Reload
	movq	6032(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5824(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 527 0                 # eispack.c:527:0
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5816(%rsp)        # 8-byte Spill
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6104(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6112(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6080(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5812(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6104(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5812(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	5812(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	.loc	5 529 0                 # eispack.c:529:0
.Ltmp1062:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5808(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6120(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rdx        # 8-byte Reload
	movq	5944(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5808(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5808(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
.Ltmp1063:
	.loc	5 494 0                 # eispack.c:494:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6176(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5807(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5880(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	7636(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5880(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5800(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	movq	5872(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5944(%rsp), %rsi        # 8-byte Reload
	movq	5944(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5936(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movl	5924(%rsp), %eax        # 4-byte Reload
	vmovsd	%xmm0, 5792(%rsp)       # 8-byte Spill
	movl	%eax, 5788(%rsp)        # 4-byte Spill
.LBB22_12:                              #   Parent Loop BB22_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_15 Depth 3
                                        #       Child Loop BB22_17 Depth 3
	movl	5788(%rsp), %eax        # 4-byte Reload
	vmovsd	5792(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1561256, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str4201520, %r9
	movabsq	$3, %r10
	leaq	.L.str4191519, %r11
	movabsq	$494, %rbx              # imm = 0x1EE
	leaq	.L.str621162, %r14
	leaq	.L.str4141514, %r15
	leaq	.L.str4181518, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 5776(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 5768(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 5760(%rsp)        # 8-byte Spill
	leaq	.L.str4171517, %rcx
	movq	%rcx, 5752(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 5744(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 5736(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str4161516, %rcx
	movq	%rcx, 5720(%rsp)        # 8-byte Spill
	leaq	.L.str1681268, %rcx
	movq	%rcx, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str1301230, %rcx
	movq	%rcx, 5704(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 5696(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 5688(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 5680(%rsp)        # 8-byte Spill
	leaq	.L.str4151515, %rcx
	movq	%rcx, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str2021302, %rcx
	movq	%rcx, 5664(%rsp)        # 8-byte Spill
	leaq	.L.str3951495, %rcx
	movq	%rcx, 5656(%rsp)        # 8-byte Spill
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 5648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5640(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5632(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	5672(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5624(%rsp)         # 8-byte Spill
	movq	5688(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5612(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 5600(%rsp)       # 8-byte Spill
	movq	%r15, 5592(%rsp)        # 8-byte Spill
	movq	%r12, 5584(%rsp)        # 8-byte Spill
	movl	%ebp, 5580(%rsp)        # 4-byte Spill
	movl	%r13d, 5576(%rsp)       # 4-byte Spill
	movq	%r14, 5568(%rsp)        # 8-byte Spill
	movq	%rbx, 5560(%rsp)        # 8-byte Spill
	movq	%r10, 5552(%rsp)        # 8-byte Spill
	movq	%r11, 5544(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5664(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	movq	5776(%rsp), %rdx        # 8-byte Reload
	movq	5672(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5720(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5696(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5752(%rsp), %rcx        # 8-byte Reload
	movq	5688(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5752(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5560(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5744(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5752(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	cmpl	$29, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5543(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5560(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5584(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5640(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5544(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5640(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5543(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5543(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_13
	jmp	.LBB22_14
.LBB22_13:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3701470, %r8
	leaq	.L.str71107, %rdx
	movabsq	$497, %rdi              # imm = 0x1F1
	leaq	.L.str621162, %rsi
	leaq	.L.str4191519, %r9
	leaq	.L.str4211521, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1631263, %r12
	leaq	.L.str3941494, %r13
	movq	%rax, 5528(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	movabsq	$496, %rax              # imm = 0x1F0
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 496 0                 # eispack.c:496:0
.Ltmp1064:
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	movq	5512(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5496(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5488(%rsp)        # 8-byte Spill
	movq	%rdx, 5480(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 5472(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	5504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5464(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5456(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 5448(%rsp)        # 8-byte Spill
	movl	%ebp, 5444(%rsp)        # 4-byte Spill
	movq	%r15, 5432(%rsp)        # 8-byte Spill
	movq	%r13, 5424(%rsp)        # 8-byte Spill
	movq	%r12, 5416(%rsp)        # 8-byte Spill
	movl	%ebx, 5412(%rsp)        # 4-byte Spill
	movq	%r10, 5400(%rsp)        # 8-byte Spill
	movq	%r11, 5392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5392(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5472(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5424(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5448(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5416(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 5388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1065:
	#DEBUG_VALUE: tqlrat:ierr <- [RSP+5388]
	.loc	5 497 0                 # eispack.c:497:0
	movq	5496(%rsp), %rdi        # 8-byte Reload
	movq	5488(%rsp), %rsi        # 8-byte Reload
	movq	5456(%rsp), %rdx        # 8-byte Reload
	movq	5400(%rsp), %rcx        # 8-byte Reload
	movq	5392(%rsp), %r8         # 8-byte Reload
	movl	5412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5472(%rsp), %rsi        # 8-byte Reload
	movq	5472(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5464(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5388(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB22_28
.Ltmp1066:
.LBB22_14:                              #   in Loop: Header=BB22_12 Depth=2
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	vmovsd	.LCPI22_2, %xmm0
	movabsq	$0, %rsi
	leaq	.L.str141114, %rdi
	leaq	.L.str71107, %r8
	leaq	.L.str1821282, %r9
	movabsq	$3, %r10
	leaq	pythag, %r11
	leaq	.L.str31103, %rbx
	movabsq	$508, %r14              # imm = 0x1FC
	leaq	.L.str621162, %r15
	leaq	.L.str4201520, %r12
	leaq	.L.str1901290, %r13
	movabsq	$49, %rbp
	movq	%rsi, 5376(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5372(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str1841284, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str1851285, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$507, %rax              # imm = 0x1FB
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI22_3, %xmm1
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str1701270, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str1831283, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str1761276, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str1401240, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$506, %rax              # imm = 0x1FA
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str1691269, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str1981298, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$505, %rax              # imm = 0x1F9
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	leaq	.L.str1681268, %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str4171517, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	movabsq	$500, %rax              # imm = 0x1F4
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 500 0                 # eispack.c:500:0
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5160(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 5156(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 5144(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	5192(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5136(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5128(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	5372(%rsp), %eax        # 4-byte Reload
	movq	%r9, 5120(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 5112(%rsp)        # 8-byte Spill
	movq	%r13, 5104(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5096(%rsp)       # 8-byte Spill
	movq	%rbp, 5088(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5080(%rsp)       # 8-byte Spill
	movq	%r15, 5072(%rsp)        # 8-byte Spill
	movq	%r14, 5064(%rsp)        # 8-byte Spill
	movq	%r10, 5056(%rsp)        # 8-byte Spill
	movq	%r11, 5048(%rsp)        # 8-byte Spill
	movq	%rbx, 5040(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5376(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1067:
	#DEBUG_VALUE: tqlrat:j <- [RSP+5036]
	.loc	5 505 0                 # eispack.c:505:0
	movq	5216(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5208(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5024(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5216(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5088(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5232(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5224(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5024(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5024(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp1068:
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5016(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1069:
	#DEBUG_VALUE: tqlrat:s <- [RSP+5016]
	.loc	5 506 0                 # eispack.c:506:0
	movq	5248(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7496(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5008(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1070:
	#DEBUG_VALUE: tqlrat:g <- [RSP+5008]
	.loc	5 507 0                 # eispack.c:507:0
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5840(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5000(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5008(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4992(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5080(%rsp), %xmm0       # 8-byte Reload
	movq	5376(%rsp), %rdx        # 8-byte Reload
	movq	5160(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5080(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4984(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5320(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4984(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4976(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1071:
	#DEBUG_VALUE: tqlrat:p <- [RSP+4976]
	.loc	5 508 0                 # eispack.c:508:0
	movq	5064(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5104(%rsp), %rcx        # 8-byte Reload
	movq	5088(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5056(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5048(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5096(%rsp), %xmm0       # 8-byte Reload
	movq	5376(%rsp), %rdx        # 8-byte Reload
	movq	5160(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_2(%rip), %xmm1
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	callq	pythag
.Ltmp1072:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1821282, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	r8_sign, %r10
	leaq	.L.str481148, %r11
	movabsq	$509, %rbx              # imm = 0x1FD
	leaq	.L.str621162, %r14
	leaq	.L.str4201520, %r15
	leaq	.L.str1921292, %r12
	movabsq	$49, %r13
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rcx, 4968(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 4960(%rsp)        # 8-byte Spill
	leaq	.L.str1911291, %rcx
	movq	%rcx, 4952(%rsp)        # 8-byte Spill
	leaq	.L.str1901290, %rcx
	movq	%rcx, 4944(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 4936(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rcx
	movq	%rcx, 4928(%rsp)        # 8-byte Spill
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 4920(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	vmovsd	%xmm0, 4904(%rsp)       # 8-byte Spill
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4896(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4888(%rsp)         # 8-byte Spill
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4880(%rsp)         # 8-byte Spill
	movq	4888(%rsp), %r9         # 8-byte Reload
	movq	%r13, 4872(%rsp)        # 8-byte Spill
	movq	%r15, 4864(%rsp)        # 8-byte Spill
	movq	%r12, 4856(%rsp)        # 8-byte Spill
	movl	%eax, 4852(%rsp)        # 4-byte Spill
	movl	%ebp, 4848(%rsp)        # 4-byte Spill
	movq	%r14, 4840(%rsp)        # 8-byte Spill
	movq	%rbx, 4832(%rsp)        # 8-byte Spill
	movq	%r10, 4824(%rsp)        # 8-byte Spill
	movq	%r11, 4816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1073:
	#DEBUG_VALUE: tqlrat:r <- [RSP+4904]
	.loc	5 509 0                 # eispack.c:509:0
	movq	4832(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	4872(%rsp), %r8         # 8-byte Reload
	movl	4852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	movq	4936(%rsp), %rdx        # 8-byte Reload
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	4928(%rsp), %r8         # 8-byte Reload
	movq	4920(%rsp), %r9         # 8-byte Reload
	movq	4888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4968(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	4904(%rsp), %xmm0       # 8-byte Reload
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	4904(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4808(%rsp)       # 8-byte Spill
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4832(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	4872(%rsp), %r8         # 8-byte Reload
	movl	4852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	movq	4824(%rsp), %rdx        # 8-byte Reload
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4920(%rsp), %r9         # 8-byte Reload
	movq	4888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4968(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
.Ltmp1074:
	movabsq	$1, %rcx
	leaq	.L.str1421242, %r8
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4251525, %r9
	movabsq	$3, %r10
	leaq	.L.str4241524, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str621162, %r14
	leaq	.L.str4201520, %r15
	leaq	.L.str4231523, %r12
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 4800(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str1971297, %rcx
	movq	%rcx, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str1761276, %rcx
	movq	%rcx, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str1961296, %rcx
	movq	%rcx, 4768(%rsp)        # 8-byte Spill
	movabsq	$510, %rcx              # imm = 0x1FE
	movq	%rcx, 4760(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rcx
	movq	%rcx, 4744(%rsp)        # 8-byte Spill
	movabsq	$509, %rcx              # imm = 0x1FD
	movq	%rcx, 4736(%rsp)        # 8-byte Spill
	leaq	.L.str4221522, %rcx
	movq	%rcx, 4728(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 4720(%rsp)        # 8-byte Spill
	leaq	.L.str1701270, %rcx
	movq	%rcx, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str1951295, %rcx
	movq	%rcx, 4704(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 4696(%rsp)        # 8-byte Spill
	leaq	.L.str1821282, %rcx
	movq	%rcx, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str1941294, %rcx
	movq	%rcx, 4680(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str1911291, %rcx
	movq	%rcx, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str1921292, %rcx
	movq	%rcx, 4656(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rdi, 4648(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rcx, 4640(%rsp)        # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 4632(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 4624(%rsp)       # 8-byte Spill
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4616(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4608(%rsp)         # 8-byte Spill
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4600(%rsp)         # 8-byte Spill
	movq	4632(%rsp), %r9         # 8-byte Reload
	movl	%eax, 4596(%rsp)        # 4-byte Spill
	movq	%r15, 4584(%rsp)        # 8-byte Spill
	movq	%r14, 4576(%rsp)        # 8-byte Spill
	movq	%r12, 4568(%rsp)        # 8-byte Spill
	movl	%ebp, 4564(%rsp)        # 4-byte Spill
	movq	%r13, 4552(%rsp)        # 8-byte Spill
	movq	%rbx, 4544(%rsp)        # 8-byte Spill
	movq	%r10, 4536(%rsp)        # 8-byte Spill
	movq	%r11, 4528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4624(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4808(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4808(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4624(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4520(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4520(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4688(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4520(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4512(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4512(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4712(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4512(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4728(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4744(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7496(%rsp), %rcx        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	5 510 0                 # eispack.c:510:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4504(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4496(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1075:
	#DEBUG_VALUE: tqlrat:h <- [RSP+4496]
	.loc	5 511 0                 # eispack.c:511:0
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4568(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4536(%rsp), %rdi        # 8-byte Reload
	movq	4616(%rsp), %rsi        # 8-byte Reload
	movq	4616(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4528(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4616(%rsp), %rsi        # 8-byte Reload
	movq	4616(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5835(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4800(%rsp), %rsi        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5835(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4488(%rsp)        # 8-byte Spill
	jne	.LBB22_15
	jmp	.LBB22_16
.Ltmp1076:
.LBB22_15:                              # %.lr.ph5
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4488(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231223, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str4241524, %r9
	movabsq	$3, %r10
	leaq	.L.str4251525, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str621162, %r14
	leaq	.L.str4291529, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4480(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4472(%rsp)        # 8-byte Spill
	leaq	.L.str1221222, %rax
	movq	%rax, 4464(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 4456(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4448(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4440(%rsp)        # 8-byte Spill
	leaq	.L.str4271527, %rax
	movq	%rax, 4432(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4424(%rsp)        # 8-byte Spill
	leaq	.L.str4261526, %rax
	movq	%rax, 4416(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 4408(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4400(%rsp)        # 8-byte Spill
	leaq	.L.str2011301, %rax
	movq	%rax, 4392(%rsp)        # 8-byte Spill
	leaq	.L.str1991299, %rax
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	movabsq	$513, %rax              # imm = 0x201
	movq	%rax, 4376(%rsp)        # 8-byte Spill
	leaq	.L.str4281528, %rax
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	leaq	.L.str2001300, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	leaq	.L.str1971297, %rax
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 4336(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	leaq	.L.str3881488, %rax
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	leaq	.L.str4201520, %rax
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4288(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 513 0                 # eispack.c:513:0
.Ltmp1077:
	movq	%rax, 4280(%rsp)        # 8-byte Spill
	movq	4288(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4272(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 4264(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 4256(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4416(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4224(%rsp)        # 8-byte Spill
	movl	%ebp, 4220(%rsp)        # 4-byte Spill
	movl	%r12d, 4216(%rsp)       # 4-byte Spill
	movq	%r13, 4208(%rsp)        # 8-byte Spill
	movq	%r14, 4200(%rsp)        # 8-byte Spill
	movq	%rbx, 4192(%rsp)        # 8-byte Spill
	movq	%r10, 4184(%rsp)        # 8-byte Spill
	movq	%r11, 4176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4304(%rsp), %r8         # 8-byte Reload
	movq	4248(%rsp), %r9         # 8-byte Reload
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4248(%rsp), %r9         # 8-byte Reload
	movq	4232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4320(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4480(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4328(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4168(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4160(%rsp)       # 8-byte Spill
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4336(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4160(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4368(%rsp), %rcx        # 8-byte Reload
	movq	4360(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4168(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1078:
	.loc	5 511 0                 # eispack.c:511:0
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4432(%rsp), %rcx        # 8-byte Reload
	movq	4400(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4264(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4480(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4144(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4464(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4256(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4140(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4464(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4140(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4248(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4139(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4224(%rsp), %rcx        # 8-byte Reload
	movq	4240(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4264(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4176(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4264(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4232(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4139(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4248(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4139(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4488(%rsp)        # 8-byte Spill
	jne	.LBB22_16
	jmp	.LBB22_15
.Ltmp1079:
.LBB22_16:                              # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rax
	leaq	.L.str1481248, %r8
	movabsq	$0, %rcx
	leaq	.L.str71107, %rdx
	movabsq	$2, %rsi
	leaq	.L.str4331533, %rdi
	movabsq	$3, %r9
	leaq	.L.str4321532, %r10
	movabsq	$529, %r11              # imm = 0x211
	leaq	.L.str621162, %rbx
	leaq	.L.str4251525, %r14
	leaq	.L.str4311531, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str4301530, %rax
	.loc	5 515 0                 # eispack.c:515:0
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str621162, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 4104(%rsp)        # 8-byte Spill
	movl	$.L.str4251525, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4096(%rsp)        # 8-byte Spill
	movl	$.L.str2021302, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4088(%rsp)        # 8-byte Spill
	movl	$515, %esi              # imm = 0x203
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4080(%rsp)        # 8-byte Spill
	movl	$9, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4072(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movq	4080(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4056(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4064(%rsp), %rax        # 8-byte Reload
	movl	%esi, 4052(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4040(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4032(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4072(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4024(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	4052(%rsp), %eax        # 4-byte Reload
	movq	%r9, 4016(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 4008(%rsp)       # 8-byte Spill
	movq	%r13, 4000(%rsp)        # 8-byte Spill
	movq	%r14, 3992(%rsp)        # 8-byte Spill
	movq	%r15, 3984(%rsp)        # 8-byte Spill
	movl	%ebp, 3980(%rsp)        # 4-byte Spill
	movl	%r12d, 3976(%rsp)       # 4-byte Spill
	movq	%rbx, 3968(%rsp)        # 8-byte Spill
	movq	%r10, 3960(%rsp)        # 8-byte Spill
	movq	%r11, 3952(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str1971297, %eax
	movl	%eax, %ecx
	movl	$.L.str71107, %eax
	movl	%eax, %edx
	movl	$2, %eax
	movl	%eax, %esi
	movl	$64, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %r8d
	movl	4052(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movq	%rdi, 3944(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	3944(%rsp), %r11        # 8-byte Reload
	movq	%rsi, 3936(%rsp)        # 8-byte Spill
	movq	%r11, %rsi
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	%rdx, 3928(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%r8, 3920(%rsp)         # 8-byte Spill
	movq	%r10, %r8
	movq	3928(%rsp), %r9         # 8-byte Reload
	movq	%r10, 3912(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movl	$.L.str4151515, %eax
	movl	%eax, %ecx
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3904(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3896(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1080:
	#DEBUG_VALUE: tqlrat:f <- [RSP+3896]
	.loc	5 519 0                 # eispack.c:519:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2031303, %eax
	movl	%eax, %ecx
	movl	$519, %eax              # imm = 0x207
	movl	%eax, %edi
	movl	$27, %eax
	movl	%eax, %r8d
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3888(%rsp)        # 8-byte Spill
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1081:
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$.L.str1441244, %eax
	movl	%eax, %r8d
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	movq	5816(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	5816(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3904(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3880(%rsp)       # 8-byte Spill
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1082:
	#DEBUG_VALUE: tqlrat:g <- [RSP+3880]
	.loc	5 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2051305, %eax
	movl	%eax, %ecx
	movl	$520, %eax              # imm = 0x208
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3872(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3864(%rsp)        # 8-byte Spill
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1083:
	movl	$.L.str141114, %eax
	movl	%eax, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3856(%rsp)       # 8-byte Spill
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3856(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3880(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	5 522 0                 # eispack.c:522:0
.Ltmp1084:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str71107, (%rsi)
	movq	3904(%rsp), %rdi        # 8-byte Reload
	movq	3920(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3848(%rsp)        # 8-byte Spill
	movq	3920(%rsp), %r8         # 8-byte Reload
	movb	%cl, 3847(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp1085:
	.loc	5 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4301530, %ebp
	movl	%ebp, %ecx
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	3872(%rsp), %rdi        # 8-byte Reload
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str3931493, %ebp
	movl	%ebp, %ecx
.Ltmp1086:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7032]
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1087:
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3920(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	3847(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3832(%rsp)       # 8-byte Spill
	jne	.LBB22_30
# BB#29:                                # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3832(%rsp)       # 8-byte Spill
.LBB22_30:                              # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3832(%rsp), %xmm0       # 8-byte Reload
.Ltmp1088:
	.loc	5 525 0                 # eispack.c:525:0
	movq	4000(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
	movq	4128(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4032(%rsp), %r8         # 8-byte Reload
	movq	4040(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1089:
	#DEBUG_VALUE: tqlrat:h <- [RSP+3824]
	#DEBUG_VALUE: tqlrat:s <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:mml <- [RSP+5808]
	#DEBUG_VALUE: tqlrat:ii <- 1
	.loc	5 529 0                 # eispack.c:529:0
	movq	3952(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3992(%rsp), %rdx        # 8-byte Reload
	movq	3984(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4016(%rsp), %rdi        # 8-byte Reload
	movq	4032(%rsp), %rsi        # 8-byte Reload
	movq	4032(%rsp), %rdx        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4104(%rsp), %rdi        # 8-byte Reload
	movq	4032(%rsp), %rsi        # 8-byte Reload
	movq	4032(%rsp), %rdx        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	4056(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5807(%rsp), %r10b       # 1-byte Reload
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movl	%r11d, %edx
	movq	4128(%rsp), %rdi        # 8-byte Reload
	movq	4128(%rsp), %rsi        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	4024(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5807(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movq	4128(%rsp), %rax        # 8-byte Reload
	vmovsd	4008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3824(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3824(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3808(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3792(%rsp)       # 8-byte Spill
	jne	.LBB22_18
.Ltmp1090:
.LBB22_17:                              # %.lr.ph12
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	3792(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3808(%rsp), %xmm2       # 8-byte Reload
	movq	3816(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str4441544, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str4331533, %r9
	movabsq	$3, %r10
	leaq	.L.str4321532, %r11
	movabsq	$529, %rbx              # imm = 0x211
	leaq	.L.str621162, %r14
	leaq	.L.str4451545, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	leaq	.L.str4431543, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str1491249, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	leaq	.L.str4351535, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	leaq	.L.str4341534, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	leaq	.L.str2551355, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str2541354, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str2291329, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	movabsq	$542, %rax              # imm = 0x21E
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	leaq	.L.str2091309, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	leaq	.L.str4391539, %rax
	movq	%rax, 3648(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	5 531 0                 # eispack.c:531:0
.Ltmp1091:
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str621162, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 3632(%rsp)        # 8-byte Spill
	movl	$.L.str4331533, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3624(%rsp)        # 8-byte Spill
	movl	$.L.str4341534, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3616(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 3600(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 3592(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3580(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3624(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3568(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3616(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3560(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3552(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3580(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3544(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 3536(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3528(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3520(%rsp)       # 8-byte Spill
	movq	%r13, 3512(%rsp)        # 8-byte Spill
	movq	%r15, 3504(%rsp)        # 8-byte Spill
	movl	%ebp, 3500(%rsp)        # 4-byte Spill
	movl	%r12d, 3496(%rsp)       # 4-byte Spill
	movq	%r14, 3488(%rsp)        # 8-byte Spill
	movq	%rbx, 3480(%rsp)        # 8-byte Spill
	movq	%r10, 3472(%rsp)        # 8-byte Spill
	movq	%r11, 3464(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251525, (%rcx)
	movl	$.L.str141114, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edx
	movl	$64, %eax
	movl	%eax, %esi
	movl	3580(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edi
	movl	$1, %r9d
	movl	%r9d, %r8d
	movq	%rdi, 3456(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 3448(%rsp)        # 8-byte Spill
	movq	%rdx, 3440(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3456(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3432(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3432(%rsp), %r11        # 8-byte Reload
	movq	%r8, 3424(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str4251525, %eax
	movl	%eax, %r9d
	movq	%rsp, %rcx
	movq	$.L.str4331533, (%rcx)
	movl	$.L.str4351535, %eax
	movl	%eax, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r10        # 8-byte Reload
	movq	%r9, 3416(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331533, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3408(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4361536, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str4331533, (%rcx)
	movl	$.L.str2351335, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3384(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4371537, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3376(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251525, (%rcx)
	movl	$.L.str4301530, %eax
	movl	%eax, %ecx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3368(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331533, (%rcx)
	movl	$.L.str2551355, %eax
	movl	%eax, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4381538, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251525, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331533, (%rcx)
	movl	$.L.str4391539, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3352(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2061306, %eax
	movl	%eax, %ecx
	movl	$531, %eax              # imm = 0x213
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3344(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3336(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str71107, %eax
	movl	%eax, %ecx
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %eax
	movl	%eax, %ebp
	movl	%ebp, %esi
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movl	$32, %ebp
	movl	%ebp, %edi
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	%rdi, 3328(%rsp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	3328(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 3320(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3312(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3308(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2071307, %eax
	movl	%eax, %ecx
	movl	$10, %eax
	movl	%eax, %r8d
	movq	3344(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3296(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$.L.str4111511, %ebp
	movl	%ebp, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	3308(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3288(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1092:
	#DEBUG_VALUE: tqlrat:i <- [RSP+3284]
	.loc	5 532 0                 # eispack.c:532:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2091309, %eax
	movl	%eax, %ecx
	movl	$532, %eax              # imm = 0x214
	movl	%eax, %edi
	movl	$13, %eax
	movl	%eax, %edx
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3272(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3264(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1093:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3528(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3264(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3256(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1094:
	#DEBUG_VALUE: tqlrat:p <- [RSP+3256]
	.loc	5 533 0                 # eispack.c:533:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2141314, %eax
	movl	%eax, %ecx
	movl	$533, %eax              # imm = 0x215
	movl	%eax, %edx
	movl	$35, %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3248(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3232(%rsp)        # 8-byte Spill
	movq	3248(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1095:
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3284(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3224(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2201320, %eax
	movl	%eax, %ecx
	movl	$29, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3216(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3208(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$.L.str1601260, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3200(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3192(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2281328, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3184(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3176(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3168(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2291329, %eax
	movl	%eax, %ecx
	movl	$9, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3160(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3168(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3264(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3168(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1096:
	#DEBUG_VALUE: tqlrat:r <- [RSP+3144]
	.loc	5 534 0                 # eispack.c:534:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2301330, %eax
	movl	%eax, %ecx
	movl	$534, %eax              # imm = 0x216
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3136(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3128(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1097:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3120(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2311331, %eax
	movl	%eax, %ecx
	movl	$8, %eax
	movl	%eax, %r8d
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3112(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3284(%rsp), %eax        # 4-byte Reload
	incl	%eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3100(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2321332, %eax
	movl	%eax, %ecx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movq	3248(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3104(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3100(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str71107, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2331333, %eax
	movl	%eax, %ecx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3072(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3064(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4401540, %eax
	movl	%eax, %ecx
	movl	$28, %eax
	movl	%eax, %edx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3056(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3120(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	vmovsd	3120(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	5 535 0                 # eispack.c:535:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str2341334, %eax
	movl	%eax, %esi
	movl	$535, %eax              # imm = 0x217
	movl	%eax, %edi
	movq	%rdi, 3048(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3040(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3032(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$16, %eax
	movl	%eax, %ecx
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3024(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3032(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1098:
	#DEBUG_VALUE: tqlrat:s <- [RSP+3016]
	.loc	5 536 0                 # eispack.c:536:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2361336, %eax
	movl	%eax, %ecx
	movl	$536, %eax              # imm = 0x218
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3008(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3000(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1099:
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movl	$.L.str821182, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2992(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2984(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2371337, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2976(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2968(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2381338, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2960(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2968(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2968(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2952(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2391339, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2944(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2952(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2944(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2936(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2401340, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2928(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2936(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2944(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2936(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2920(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2411341, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2912(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str71107, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2904(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4411541, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2920(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	vmovsd	2920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	5 537 0                 # eispack.c:537:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str2421342, %eax
	movl	%eax, %esi
	movl	$537, %eax              # imm = 0x219
	movl	%eax, %edi
	movq	%rdi, 2896(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2880(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2451345, %eax
	movl	%eax, %ecx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2872(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2864(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4421542, %eax
	movl	%eax, %ecx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2856(%rsp)        # 8-byte Spill
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2864(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2864(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3536(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2848(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2521352, %eax
	movl	%eax, %ecx
	movl	$11, %eax
	movl	%eax, %r8d
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2848(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2880(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2880(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2848(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1100:
	#DEBUG_VALUE: tqlrat:g <- [RSP+2832]
	.loc	5 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2531353, %eax
	movl	%eax, %ecx
	movl	$538, %eax              # imm = 0x21A
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 2824(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2816(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1101:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1102:
	.loc	5 537 0                 # eispack.c:537:0
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3392(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 538 0                 # eispack.c:538:0
.Ltmp1103:
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	5 540 0                 # eispack.c:540:0
.Ltmp1104:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str71107, (%rsi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2808(%rsp)        # 8-byte Spill
	movq	3424(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2807(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp1105:
	.loc	5 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str3931493, %ebp
	movl	%ebp, %ecx
.Ltmp1106:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7032]
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1107:
	movq	%rsp, %rcx
	movq	$.L.str71107, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	2807(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2792(%rsp)       # 8-byte Spill
	jne	.LBB22_32
# BB#31:                                # %.lr.ph12
                                        #   in Loop: Header=BB22_17 Depth=3
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2792(%rsp)       # 8-byte Spill
.LBB22_32:                              # %.lr.ph12
                                        #   in Loop: Header=BB22_17 Depth=3
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
.Ltmp1108:
	.loc	5 542 0                 # eispack.c:542:0
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3672(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3640(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	2784(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2784(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2776(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3672(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2768(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1109:
	#DEBUG_VALUE: tqlrat:h <- [RSP+2768]
	.loc	5 529 0                 # eispack.c:529:0
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3704(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3712(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3784(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3736(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	2760(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3736(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2760(%rsp), %rax        # 8-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3768(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, 2756(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3568(%rsp), %rcx        # 8-byte Reload
	movq	3752(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5800(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %r11d
	movl	%r11d, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2756(%rsp), %r11d       # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3768(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2756(%rsp), %r11d       # 4-byte Reload
	movl	5800(%rsp), %ebx        # 4-byte Reload
	cmpl	%ebx, %r11d
	sete	%bpl
	movb	%bpl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r15d
	movl	%r15d, %edx
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bpl, 2755(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2755(%rsp), %bpl        # 1-byte Reload
	andb	$1, %bpl
	movzbl	%bpl, %r11d
	movl	%r11d, %edx
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2755(%rsp), %bpl        # 1-byte Reload
	testb	$1, %bpl
	movq	2760(%rsp), %rax        # 8-byte Reload
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2768(%rsp), %xmm1       # 8-byte Reload
	vmovsd	2784(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3808(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3792(%rsp)       # 8-byte Spill
	jne	.LBB22_18
	jmp	.LBB22_17
.Ltmp1110:
.LBB22_18:                              # %._crit_edge13
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3792(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3808(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str2571357, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4511551, %r8
	movabsq	$3, %r9
	leaq	.L.str4131513, %r10
	movabsq	$549, %r11              # imm = 0x225
	leaq	.L.str621162, %rbx
	leaq	.L.str4321532, %r14
	leaq	.L.str4501550, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str1891289, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$545, %rax              # imm = 0x221
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str4491549, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str2561356, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	movabsq	$544, %rax              # imm = 0x220
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str4481548, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str4471547, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str4461546, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str4251525, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str4301530, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str4391539, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str4331533, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	leaq	.L.str2551355, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str2351335, %rax
	.loc	5 544 0                 # eispack.c:544:0
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2552(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2544(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2536(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2504(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 2496(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 2488(%rsp)       # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	movl	%r12d, 2480(%rsp)       # 4-byte Spill
	movq	%r13, 2472(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 2464(%rsp)       # 8-byte Spill
	movq	%r15, 2456(%rsp)        # 8-byte Spill
	movq	%r14, 2448(%rsp)        # 8-byte Spill
	movq	%r10, 2440(%rsp)        # 8-byte Spill
	movq	%r11, 2432(%rsp)        # 8-byte Spill
	movq	%rbx, 2424(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2488(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 545 0                 # eispack.c:545:0
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7496(%rsp), %rax        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 549 0                 # eispack.c:549:0
.Ltmp1111:
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2456(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2536(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2536(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
.Ltmp1112:
# BB#19:                                #   in Loop: Header=BB22_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str2721372, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4131513, %r8
	movabsq	$3, %r9
	leaq	.L.str4161516, %r10
	movabsq	$554, %r11              # imm = 0x22A
	leaq	.L.str621162, %rbx
	leaq	.L.str4511551, %r14
	leaq	.L.str4521552, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str2591359, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str2611361, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str2601360, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str61106, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str3981498, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str1891289, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str2581358, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	5 554 0                 # eispack.c:554:0
.Ltmp1113:
	movq	%rdi, 2288(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2280(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2272(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movq	2304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2248(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2240(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2232(%rsp)        # 8-byte Spill
	movl	%ebp, 2228(%rsp)        # 4-byte Spill
	movl	%r12d, 2224(%rsp)       # 4-byte Spill
	movq	%r13, 2216(%rsp)        # 8-byte Spill
	movq	%r14, 2208(%rsp)        # 8-byte Spill
	movq	%rbx, 2200(%rsp)        # 8-byte Spill
	movq	%r10, 2192(%rsp)        # 8-byte Spill
	movq	%r11, 2184(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2176(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2176(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	2176(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2168(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2496(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2160(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2160(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	2160(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2152(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2151(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2272(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2272(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2151(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2151(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_20
	jmp	.LBB22_21
.Ltmp1114:
.LBB22_20:                              #   in Loop: Header=BB22_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str2811381, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4141514, %r8
	movabsq	$3, %r9
	leaq	.L.str4131513, %r10
	movabsq	$561, %r11              # imm = 0x231
	leaq	.L.str621162, %rbx
	leaq	.L.str4161516, %r14
	leaq	.L.str4541554, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str2801380, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$559, %rax              # imm = 0x22F
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str4531553, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str1891289, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str2581358, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	5 559 0                 # eispack.c:559:0
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2040(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2032(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2024(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2008(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1996(%rsp)        # 4-byte Spill
	movl	%r12d, 1992(%rsp)       # 4-byte Spill
	movq	%r13, 1984(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1976(%rsp)       # 8-byte Spill
	movq	%r15, 1968(%rsp)        # 8-byte Spill
	movq	%r14, 1960(%rsp)        # 8-byte Spill
	movq	%r10, 1952(%rsp)        # 8-byte Spill
	movq	%r11, 1944(%rsp)        # 8-byte Spill
	movq	%rbx, 1936(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	2176(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2176(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1928(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 561 0                 # eispack.c:561:0
.Ltmp1115:
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1976(%rsp), %xmm0       # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1976(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1927(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	movl	5036(%rsp), %ebp        # 4-byte Reload
	vmovsd	3896(%rsp), %xmm1       # 8-byte Reload
	vmovsd	%xmm0, 5792(%rsp)       # 8-byte Spill
	movl	%ebp, 5788(%rsp)        # 4-byte Spill
	vmovsd	%xmm1, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
	jmp	.LBB22_12
.Ltmp1116:
.LBB22_21:                              # %.lr.ph23
                                        #   in Loop: Header=BB22_5 Depth=1
	vmovsd	6184(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str4561556, %r8
	leaq	.L.str71107, %rdx
	movabsq	$572, %rdi              # imm = 0x23C
	leaq	.L.str621162, %rsi
	leaq	.L.str4131513, %r9
	leaq	.L.str4551555, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str2841384, %r12
	leaq	.L.str3961496, %r13
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str2831383, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$568, %rax              # imm = 0x238
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str4071507, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str3951495, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str2021302, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str4161516, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str4321532, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str4511551, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 568 0                 # eispack.c:568:0
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1784(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1776(%rsp)        # 8-byte Spill
	movq	%rdx, 1768(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1752(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1744(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1736(%rsp)       # 8-byte Spill
	movq	%r14, 1728(%rsp)        # 8-byte Spill
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
	movq	%r15, 1712(%rsp)        # 8-byte Spill
	movq	%r13, 1704(%rsp)        # 8-byte Spill
	movq	%r12, 1696(%rsp)        # 8-byte Spill
	movl	%ebx, 1692(%rsp)        # 4-byte Spill
	movq	%r10, 1680(%rsp)        # 8-byte Spill
	movq	%r11, 1672(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7496(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1664(%rsp)       # 8-byte Spill
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1664(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1664(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1656(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1117:
	#DEBUG_VALUE: tqlrat:p <- [RSP+1656]
	#DEBUG_VALUE: tqlrat:i <- [RSP+8012]
	.loc	5 572 0                 # eispack.c:572:0
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1760(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movl	%ebx, 1644(%rsp)        # 4-byte Spill
.Ltmp1118:
.LBB22_22:                              #   Parent Loop BB22_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1644(%rsp), %eax        # 4-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str2901390, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str4631563, %r10
	movabsq	$3, %r11
	leaq	.L.str4621562, %rbx
	movabsq	$574, %r14              # imm = 0x23E
	leaq	.L.str621162, %r15
	leaq	.L.str4561556, %r12
	leaq	.L.str4611561, %r13
	movl	$0, %ebp
	movl	%eax, 1640(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str2781378, %rcx
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str4571557, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str4601560, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str4131513, %rcx
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str3941494, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str3151415, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str4591559, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str3831483, %rcx
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str4581558, %rcx
	.loc	5 574 0                 # eispack.c:574:0
.Ltmp1119:
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1488(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1472(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1464(%rsp)         # 8-byte Spill
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1456(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1452(%rsp)        # 4-byte Spill
	movq	%r15, 1440(%rsp)        # 8-byte Spill
	movq	%r12, 1432(%rsp)        # 8-byte Spill
	movq	%r13, 1424(%rsp)        # 8-byte Spill
	movl	%ebp, 1420(%rsp)        # 4-byte Spill
	movq	%r14, 1408(%rsp)        # 8-byte Spill
	movq	%rbx, 1400(%rsp)        # 8-byte Spill
	movq	%r10, 1392(%rsp)        # 8-byte Spill
	movq	%r11, 1384(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1380(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1380(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1379(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1379(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1379(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_23
	jmp	.LBB22_24
.LBB22_23:                              #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3851485, %r8
	leaq	.L.str71107, %rdx
	movabsq	$577, %rdi              # imm = 0x241
	leaq	.L.str621162, %rsi
	leaq	.L.str4621562, %r9
	leaq	.L.str4651565, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str2841384, %r15
	leaq	.L.str2971397, %r12
	movabsq	$576, %r13              # imm = 0x240
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str4641564, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str2921392, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str4601560, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	5 576 0                 # eispack.c:576:0
.Ltmp1120:
	movq	%rdi, 1296(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 1288(%rsp)        # 8-byte Spill
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1256(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1248(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1240(%rsp)        # 8-byte Spill
	movl	%ebp, 1236(%rsp)        # 4-byte Spill
	movq	%r15, 1224(%rsp)        # 8-byte Spill
	movq	%r13, 1216(%rsp)        # 8-byte Spill
	movq	%r12, 1208(%rsp)        # 8-byte Spill
	movl	%ebx, 1204(%rsp)        # 4-byte Spill
	movq	%r10, 1192(%rsp)        # 8-byte Spill
	movq	%r11, 1184(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	1640(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1176(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 577 0                 # eispack.c:577:0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB22_27
.Ltmp1121:
.LBB22_24:                              #   in Loop: Header=BB22_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3011401, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4671567, %r8
	movabsq	$3, %r9
	leaq	.L.str4591559, %r10
	movabsq	$579, %r11              # imm = 0x243
	leaq	.L.str621162, %rbx
	leaq	.L.str4631563, %r14
	leaq	.L.str4661566, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str3021402, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str821182, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str4571557, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str3001400, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str2841384, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str2991399, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str4581558, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$572, %rax              # imm = 0x23C
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 572 0                 # eispack.c:572:0
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movq	1040(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1024(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1016(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1064(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%r8, 992(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 984(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 976(%rsp)         # 8-byte Spill
	movl	%ebp, 972(%rsp)         # 4-byte Spill
	movl	%r12d, 968(%rsp)        # 4-byte Spill
	movq	%r13, 960(%rsp)         # 8-byte Spill
	movq	%r14, 952(%rsp)         # 8-byte Spill
	movq	%rbx, 944(%rsp)         # 8-byte Spill
	movq	%r10, 936(%rsp)         # 8-byte Spill
	movq	%r11, 928(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	.loc	5 579 0                 # eispack.c:579:0
.Ltmp1122:
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 920(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	vmovsd	-8(%rax,%rcx,8), %xmm0
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 904(%rsp)        # 8-byte Spill
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	904(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp1123:
	.loc	5 584 0                 # eispack.c:584:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 903(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 579 0                 # eispack.c:579:0
.Ltmp1124:
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 888(%rsp)         # 8-byte Spill
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	903(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	903(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_26
# BB#25:                                #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3851485, %r8
	leaq	.L.str71107, %rdx
	movabsq	$582, %rdi              # imm = 0x246
	leaq	.L.str621162, %rsi
	leaq	.L.str4671567, %r9
	leaq	.L.str4691569, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str2841384, %r15
	leaq	.L.str3021402, %r12
	movabsq	$581, %r13              # imm = 0x245
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str4681568, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	5 581 0                 # eispack.c:581:0
.Ltmp1125:
	movq	%rdi, 864(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 856(%rsp)         # 8-byte Spill
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	872(%rsp), %r13         # 8-byte Reload
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 832(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 824(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 820(%rsp)         # 4-byte Spill
	movl	%ebx, 816(%rsp)         # 4-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%r12, 800(%rsp)         # 8-byte Spill
	movq	%r15, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	movq	%r10, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	movq	848(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	848(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rax         # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 582 0                 # eispack.c:582:0
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	816(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	movq	848(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB22_27
.Ltmp1126:
.LBB22_26:                              #   in Loop: Header=BB22_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3171417, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3851485, %r8
	movabsq	$3, %r9
	leaq	.L.str4561556, %r10
	movabsq	$572, %r11              # imm = 0x23C
	leaq	.L.str621162, %rbx
	leaq	.L.str4591559, %r14
	leaq	.L.str4711571, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str3161416, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str4571557, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str3001400, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str3021402, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str4701570, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str3151415, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str4601560, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$579, %rax              # imm = 0x243
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 579 0                 # eispack.c:579:0
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 616(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 608(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	632(%rsp), %rax         # 8-byte Reload
	movq	%r8, 592(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 584(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 576(%rsp)         # 8-byte Spill
	movl	%ebp, 572(%rsp)         # 4-byte Spill
	movl	%r12d, 568(%rsp)        # 4-byte Spill
	movq	%r13, 560(%rsp)         # 8-byte Spill
	movq	%r14, 552(%rsp)         # 8-byte Spill
	movq	%rbx, 544(%rsp)         # 8-byte Spill
	movq	%r10, 536(%rsp)         # 8-byte Spill
	movq	%r11, 528(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebp        # 4-byte Reload
	addl	$4294967295, %ebp       # imm = 0xFFFFFFFF
.Ltmp1127:
	.loc	5 584 0                 # eispack.c:584:0
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 524(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rax         # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp1128:
	#DEBUG_VALUE: tqlrat:i <- [RSP+524]
	.loc	5 572 0                 # eispack.c:572:0
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 520(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	520(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	520(%rsp), %ebp         # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 519(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	608(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	608(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	519(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	519(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	524(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movl	%ebp, 1644(%rsp)        # 4-byte Spill
	jne	.LBB22_22
.Ltmp1129:
.LBB22_27:                              # %.loopexit17
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str3201420, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str3701470, %r9
	movabsq	$3, %r10
	leaq	.L.str3821482, %r11
	movabsq	$468, %rbx              # imm = 0x1D4
	leaq	.L.str621162, %r14
	leaq	.L.str3851485, %r15
	leaq	.L.str4721572, %r12
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	leaq	.L.str3871487, %rcx
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str3861486, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	leaq	.L.str3891489, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str3881488, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	leaq	.L.str3191419, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	leaq	.L.str511151, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	leaq	.L.str3841484, %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	leaq	.L.str3181418, %rcx
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	leaq	.L.str3941494, %rcx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	leaq	.L.str3831483, %rcx
	.loc	5 468 0                 # eispack.c:468:0
	movq	%rdi, 368(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 360(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 352(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 336(%rsp)          # 8-byte Spill
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	%r9, 328(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 324(%rsp)         # 4-byte Spill
	movq	%r15, 312(%rsp)         # 8-byte Spill
	movq	%r12, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1130:
	#DEBUG_VALUE: tqlrat:l <- [RSP+244]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 240(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	240(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	240(%rsp), %eax         # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 239(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8016(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 220(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	239(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	239(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movl	220(%rsp), %ebp         # 4-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	vmovsd	7040(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7032(%rsp), %xmm1       # 8-byte Reload
	movl	244(%rsp), %eax         # 4-byte Reload
	vmovsd	1736(%rsp), %xmm2       # 8-byte Reload
	vmovsd	7024(%rsp), %xmm3       # 8-byte Reload
	movl	324(%rsp), %esi         # 4-byte Reload
	movl	%eax, 8044(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movl	%ebp, 8080(%rsp)        # 4-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%esi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_5
.Ltmp1131:
.LBB22_28:                              # %.loopexit24
	movl	9112(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str671167, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$589, %r9               # imm = 0x24D
	leaq	.L.str621162, %r10
	leaq	.L.str3701470, %r11
	leaq	.L.str4731573, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str4191519, %r12
	leaq	.L.str1631263, %r13
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str41104, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	.L.str3851485, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	leaq	.L.str3741474, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	leaq	.L.str3791479, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 589 0                 # eispack.c:589:0
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 112(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 88(%rsp)           # 8-byte Spill
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	%r9, 80(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movl	%r14d, 72(%rsp)         # 4-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movq	%r13, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	176(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	44(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	addq	$9336, %rsp             # imm = 0x2478
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1132:
.Ltmp1133:
	.size	tqlrat, .Ltmp1133-tqlrat
.Lfunc_end22:
	.cfi_endproc

	.globl	trbak1
	.align	16, 0x90
	.type	trbak1,@function
trbak1:                                 # @trbak1
	.cfi_startproc
.Lfunc_begin23:
	.loc	5 654 0                 # eispack.c:654:0
# BB#0:
	pushq	%rbp
.Ltmp1141:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp1142:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp1143:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp1144:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp1145:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp1146:
	.cfi_def_cfa_offset 56
	subq	$3080, %rsp             # imm = 0xC08
.Ltmp1147:
	.cfi_def_cfa_offset 3136
.Ltmp1148:
	.cfi_offset %rbx, -56
.Ltmp1149:
	.cfi_offset %r12, -48
.Ltmp1150:
	.cfi_offset %r13, -40
.Ltmp1151:
	.cfi_offset %r14, -32
.Ltmp1152:
	.cfi_offset %r15, -24
.Ltmp1153:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str4791579, %r9
	movabsq	$0, %r10
	leaq	.L.str71107, %r11
	movabsq	$2, %rbx
	leaq	.L.str4821582, %r14
	movabsq	$3, %r15
	leaq	.L.str4811581, %r12
	movabsq	$661, %r13              # imm = 0x295
	leaq	.L.str4741574, %rbp
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str41104, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str4801580, %rax
	movl	%ecx, 3060(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3056(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str4781578, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str51105, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$23, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	movabsq	$671, %rax              # imm = 0x29F
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str4771577, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str4751575, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str4761576, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str691169, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	.loc	5 592 0 prologue_end    # eispack.c:592:0
.Ltmp1154:
	movl	%ecx, 2916(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movq	2944(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3008(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2880(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2864(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%rbp, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r13, 2840(%rsp)        # 8-byte Spill
	movq	%r12, 2832(%rsp)        # 8-byte Spill
	movq	%r14, 2824(%rsp)        # 8-byte Spill
	movq	%rbx, 2816(%rsp)        # 8-byte Spill
	movq	%r10, 2808(%rsp)        # 8-byte Spill
	movq	%r11, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: trbak1:n <- [RSP+2900]
	#DEBUG_VALUE: trbak1:a <- [RSP+2888]
	#DEBUG_VALUE: trbak1:e <- [RSP+2880]
	#DEBUG_VALUE: trbak1:m <- [RSP+3060]
	#DEBUG_VALUE: trbak1:z <- [RSP+2872]
	.loc	5 661 0                 # eispack.c:661:0
.Ltmp1155:
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2798(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	movb	2799(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
.Ltmp1156:
	.loc	5 671 0                 # eispack.c:671:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2797(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2984(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
.Ltmp1157:
	.loc	5 661 0                 # eispack.c:661:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2796(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2796(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	movb	2796(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2795(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB23_1
	jmp	.LBB23_10
.Ltmp1158:
.LBB23_1:                               # %.lr.ph15
	movabsq	$1, %rax
	movl	$1, %ecx
	movabsq	$0, %rdx
	leaq	.L.str4841584, %r8
	leaq	.L.str71107, %rsi
	movabsq	$671, %rdi              # imm = 0x29F
	leaq	.L.str4741574, %r9
	leaq	.L.str4811581, %r10
	leaq	.L.str4831583, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	.loc	5 671 0                 # eispack.c:671:0
.Ltmp1159:
	movq	%rsi, 2784(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2776(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 2772(%rsp)        # 4-byte Spill
	movq	%r11, %rcx
	movq	%r8, 2760(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2776(%rsp), %r9         # 8-byte Reload
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	2772(%rsp), %ebp        # 4-byte Reload
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
.LBB23_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
                                        #       Child Loop BB23_5 Depth 3
                                        #       Child Loop BB23_7 Depth 3
	movl	2740(%rsp), %eax        # 4-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str4911591, %rsi
	movabsq	$0, %rdi
	leaq	.L.str71107, %r8
	movabsq	$2, %r9
	leaq	.L.str4931593, %r10
	movabsq	$3, %r11
	leaq	.L.str1751275, %rbx
	movabsq	$675, %r14              # imm = 0x2A3
	leaq	.L.str4741574, %r15
	leaq	.L.str4841584, %r12
	leaq	.L.str4921592, %r13
	movl	$0, %ebp
	movl	%eax, 2736(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str4891589, %rcx
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str4901590, %rcx
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movabsq	$24, %rcx
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str4761576, %rcx
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rcx
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, 2664(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str131113, %rcx
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str111111, %rcx
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str1571257, %rcx
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str4851585, %rcx
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str4871587, %rcx
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str4811581, %rcx
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str4881588, %rcx
	movq	%rcx, 2576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str4861586, %rcx
	.loc	5 675 0                 # eispack.c:675:0
.Ltmp1160:
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 2508(%rsp)        # 4-byte Spill
	movq	%r12, 2496(%rsp)        # 8-byte Spill
	movq	%r13, 2488(%rsp)        # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 2472(%rsp)       # 8-byte Spill
	movq	%r15, 2464(%rsp)        # 8-byte Spill
	movq	%r14, 2456(%rsp)        # 8-byte Spill
	movq	%r10, 2448(%rsp)        # 8-byte Spill
	movq	%r11, 2440(%rsp)        # 8-byte Spill
	movq	%rbx, 2432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2880(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2424(%rsp)        # 8-byte Spill
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2416(%rsp)       # 8-byte Spill
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2472(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2472(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2414(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2414(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	movb	2414(%rsp), %cl         # 1-byte Reload
	orb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2413(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB23_9
.Ltmp1161:
# BB#3:                                 # %.preheader.lr.ph
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1141214, %r8
	leaq	.L.str71107, %rdx
	movabsq	$677, %rdi              # imm = 0x2A5
	leaq	.L.str4741574, %rsi
	leaq	.L.str4931593, %r9
	leaq	.L.str4941594, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str261126, %r12
	leaq	.L.str81108, %r13
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str231123, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str221122, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str201120, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str211121, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str4851585, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str181118, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str611161, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$673, %rax              # imm = 0x2A1
	.loc	5 673 0                 # eispack.c:673:0
	movq	%rdi, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2248(%rsp)        # 8-byte Spill
	movq	%rdx, 2240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movl	%ebp, 2204(%rsp)        # 4-byte Spill
	movq	%r14, 2192(%rsp)        # 8-byte Spill
	movq	%r12, 2184(%rsp)        # 8-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movl	%ebx, 2172(%rsp)        # 4-byte Spill
	movq	%r10, 2160(%rsp)        # 8-byte Spill
	movq	%r11, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	2728(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	5 684 0                 # eispack.c:684:0
.Ltmp1162:
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2144(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2136(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2132(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	2132(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2128(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2128(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2120(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
.Ltmp1163:
	.loc	5 677 0                 # eispack.c:677:0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2400(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2104(%rsp)        # 8-byte Spill
.LBB23_4:                               # %.lr.ph
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_5 Depth 3
                                        #       Child Loop BB23_7 Depth 3
	movq	2104(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str4991599, %r8
	leaq	.L.str71107, %rsi
	movabsq	$680, %rdi              # imm = 0x2A8
	leaq	.L.str4741574, %r9
	leaq	.L.str1141214, %r10
	leaq	.L.str4981598, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str341134, %r13
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str331133, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str321132, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str4951595, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str4931593, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str4961596, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str4971597, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 682 0                 # eispack.c:682:0
.Ltmp1164:
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1928(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1924(%rsp)       # 4-byte Spill
	vmovsd	%xmm0, 1912(%rsp)       # 8-byte Spill
	movq	%r15, 1904(%rsp)        # 8-byte Spill
	movl	%ebp, 1900(%rsp)        # 4-byte Spill
	movq	%r12, 1888(%rsp)        # 8-byte Spill
	movq	%r13, 1880(%rsp)        # 8-byte Spill
	movq	%rbx, 1872(%rsp)        # 8-byte Spill
	movq	%r10, 1864(%rsp)        # 8-byte Spill
	movq	%r11, 1856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1852(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r14d       # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp1165:
	.loc	5 680 0                 # eispack.c:680:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1848(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1848(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1848(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	vmovsd	1912(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
.LBB23_5:                               #   Parent Loop BB23_2 Depth=1
                                        #     Parent Loop BB23_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	1824(%rsp), %xmm0       # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231223, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str4991599, %r9
	movabsq	$3, %r10
	leaq	.L.str5031603, %r11
	movabsq	$680, %rbx              # imm = 0x2A8
	leaq	.L.str4741574, %r14
	leaq	.L.str5021602, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str1221222, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str4871587, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str1161216, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str1151215, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str5001600, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str5011601, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str951195, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str981198, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str971197, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str691169, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str961196, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str341134, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str941194, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str371137, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str271127, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str361136, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str311131, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str4851585, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str351135, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str1141214, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 682 0                 # eispack.c:682:0
.Ltmp1166:
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1504(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1488(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1472(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1464(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1456(%rsp)       # 8-byte Spill
	movl	%ebp, 1452(%rsp)        # 4-byte Spill
	movl	%r12d, 1448(%rsp)       # 4-byte Spill
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1432(%rsp)       # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%r10, 1408(%rsp)        # 8-byte Spill
	movq	%r11, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1432(%rsp), %xmm0       # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1384(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	1380(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1376(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1376(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1376(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1328(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1320(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1320(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1320(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1312(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1167:
	#DEBUG_VALUE: trbak1:s <- [RSP+1312]
	.loc	5 680 0                 # eispack.c:680:0
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1299(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
	jne	.LBB23_6
	jmp	.LBB23_5
.Ltmp1168:
.LBB23_6:                               # %.lr.ph6
                                        #   in Loop: Header=BB23_4 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str5051605, %r8
	leaq	.L.str71107, %rdx
	movabsq	$685, %rsi              # imm = 0x2AD
	leaq	.L.str4741574, %rdi
	leaq	.L.str5031603, %r9
	leaq	.L.str5041604, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str1271227, %r12
	movabsq	$32, %r13
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str1261226, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str1181218, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str4951595, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str1211221, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str1191219, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str1201220, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str111111, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str1101210, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str1111211, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str261126, %rax
	.loc	5 684 0                 # eispack.c:684:0
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1136(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1128(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1088(%rsp)        # 8-byte Spill
	movl	%ebp, 1084(%rsp)        # 4-byte Spill
	movq	%r15, 1072(%rsp)        # 8-byte Spill
	movq	%r12, 1064(%rsp)        # 8-byte Spill
	movq	%r13, 1056(%rsp)        # 8-byte Spill
	movl	%ebx, 1052(%rsp)        # 4-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1024(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2424(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1169:
	#DEBUG_VALUE: trbak1:s <- [RSP+1000]
	#DEBUG_VALUE: trbak1:k <- 0
	.loc	5 687 0                 # eispack.c:687:0
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 996(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp1170:
	.loc	5 685 0                 # eispack.c:685:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 992(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	992(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	992(%rsp), %ebx         # 4-byte Reload
	movslq	%ebx, %rax
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rax, 976(%rsp)         # 8-byte Spill
.Ltmp1171:
.LBB23_7:                               #   Parent Loop BB23_2 Depth=1
                                        #     Parent Loop BB23_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	976(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str5101610, %rdx
	movabsq	$0, %rsi
	leaq	.L.str71107, %rdi
	movabsq	$2, %r8
	leaq	.L.str5051605, %r9
	movabsq	$3, %r10
	leaq	.L.str4971597, %r11
	movabsq	$685, %rbx              # imm = 0x2AD
	leaq	.L.str4741574, %r14
	leaq	.L.str5111611, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str5091609, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str4871587, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str5071607, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str5061606, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str1561256, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str1401240, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str5081608, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str1411241, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str1501250, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str1211221, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str1491249, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str1481248, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str81108, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str1471247, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str1461246, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1431243, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str1441244, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str4851585, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str1421242, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str691169, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str1391239, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str1271227, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str5031603, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 687 0                 # eispack.c:687:0
.Ltmp1172:
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r12d, 584(%rsp)        # 4-byte Spill
	movq	%r13, 576(%rsp)         # 8-byte Spill
	movq	%r14, 568(%rsp)         # 8-byte Spill
	movq	%rbx, 560(%rsp)         # 8-byte Spill
	movq	%r10, 552(%rsp)         # 8-byte Spill
	movq	%r11, 544(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	addq	%rcx, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 520(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	508(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	508(%rsp), %r12d        # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 504(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	504(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	504(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 496(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 480(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	480(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1173:
	.loc	5 685 0                 # eispack.c:685:0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 452(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 451(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	jne	.LBB23_8
	jmp	.LBB23_7
.Ltmp1174:
.LBB23_8:                               # %._crit_edge7
                                        #   in Loop: Header=BB23_4 Depth=2
	movabsq	$1, %rax
	leaq	.L.str5131613, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1141214, %r8
	movabsq	$3, %r9
	leaq	.L.str1751275, %r10
	movabsq	$677, %r11              # imm = 0x2A5
	leaq	.L.str4741574, %rbx
	leaq	.L.str4971597, %r14
	leaq	.L.str5141614, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str5121612, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str4761576, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str4961596, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str4951595, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 677 0                 # eispack.c:677:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%r8, 320(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movl	%r12d, 296(%rsp)        # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3060(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	3060(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 243(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 2104(%rsp)        # 8-byte Spill
	jne	.LBB23_9
	jmp	.LBB23_4
.Ltmp1175:
.LBB23_9:                               # %.loopexit
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str5161616, %rcx
	movabsq	$0, %rdx
	leaq	.L.str71107, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4841584, %r8
	movabsq	$3, %r9
	leaq	.L.str4821582, %r10
	movabsq	$671, %r11              # imm = 0x29F
	leaq	.L.str4741574, %rbx
	leaq	.L.str1751275, %r14
	leaq	.L.str5171617, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str5151615, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str511151, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str4861586, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str4881588, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str4871587, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str141114, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	.L.str4851585, %rax
	.loc	5 671 0                 # eispack.c:671:0
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1176:
	#DEBUG_VALUE: trbak1:i <- [RSP+20]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	20(%rsp), %ebp          # 4-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
	jne	.LBB23_10
	jmp	.LBB23_2
.Ltmp1177:
.LBB23_10:                              # %.loopexit11
	movabsq	$694, %rdi              # imm = 0x2B6
	leaq	.L.str4741574, %rsi
	leaq	.L.str4821582, %rdx
	leaq	.L.str5181618, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	5 694 0                 # eispack.c:694:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3080, %rsp             # imm = 0xC08
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1178:
.Ltmp1179:
	.size	trbak1, .Ltmp1179-trbak1
.Lfunc_end23:
	.cfi_endproc

	.globl	trace_logger_write_labelmap
	.align	16, 0x90
	.type	trace_logger_write_labelmap,@function
trace_logger_write_labelmap:            # @trace_logger_write_labelmap
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp1181:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jne	.LBB24_2
# BB#1:
	callq	trace_logger_init
.LBB24_2:
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str1621, %eax
	movl	%eax, %esi
	movl	$26, %edx
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%esi, %edx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str11622, %edx
	movl	%edx, %esi
	movl	$25, %edx
	movl	%eax, (%rsp)            # 4-byte Spill
	addq	$24, %rsp
	jmp	gzwrite                 # TAILCALL
.Ltmp1182:
	.size	trace_logger_write_labelmap, .Ltmp1182-trace_logger_write_labelmap
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp1184:
	.cfi_def_cfa_offset 16
	movl	$.L.str21623, %eax
	movl	%eax, %edi
	movl	$.L.str31624, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB25_2
# BB#1:
	movl	$.L.str41625, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB25_2:
	movl	$512, %eax              # imm = 0x200
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	callq	calloc
	movq	%rax, current_toplevel_function
	movl	$2, current_logging_status
	movl	$trace_logger_fin, %ecx
	movl	%ecx, %edi
	callq	atexit
	movb	$1, initp
	movl	%eax, 4(%rsp)           # 4-byte Spill
	popq	%rax
	ret
.Ltmp1185:
	.size	trace_logger_init, .Ltmp1185-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp1187:
	.cfi_def_cfa_offset 16
	movq	current_toplevel_function(%rip), %rdi
	callq	free
	movq	full_trace_file(%rip), %rdi
	popq	%rax
	jmp	gzclose                 # TAILCALL
.Ltmp1188:
	.size	trace_logger_fin, .Ltmp1188-trace_logger_fin
	.cfi_endproc

	.globl	log_or_not
	.align	16, 0x90
	.type	log_or_not,@function
log_or_not:                             # @log_or_not
	.cfi_startproc
# BB#0:
	subq	$40, %rsp
.Ltmp1190:
	.cfi_def_cfa_offset 48
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movb	%al, 23(%rsp)           # 1-byte Spill
	jne	.LBB27_2
	jmp	.LBB27_1
.LBB27_1:
	movl	$1, %eax
	movl	$2, %ecx
	movb	23(%rsp), %dl           # 1-byte Reload
	testb	%dl, %dl
	cmovel	%ecx, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB27_9
.LBB27_2:
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB27_4
	jmp	.LBB27_3
.LBB27_3:
	movl	current_logging_status, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB27_9
.LBB27_4:
	movl	$1, %eax
	movl	36(%rsp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jne	.LBB27_9
# BB#5:
	movq	current_toplevel_function, %rax
	cmpb	$0, (%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB27_7
# BB#6:
	movl	$.L.str51626, %eax
	movl	%eax, %edi
	movl	$.L.str61627, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$118, %edx
	callq	__assert_fail
.LBB27_7:
	movl	$0, %eax
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	je	.LBB27_9
# BB#8:
	movl	$.L.str71628, %eax
	movl	%eax, %edi
	movl	$.L.str61627, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$123, %edx
	callq	__assert_fail
.LBB27_9:
	movl	16(%rsp), %eax          # 4-byte Reload
	addq	$40, %rsp
	ret
.Ltmp1191:
	.size	log_or_not, .Ltmp1191-log_or_not
	.cfi_endproc

	.globl	convert_bytes_to_hex
	.align	16, 0x90
	.type	convert_bytes_to_hex,@function
convert_bytes_to_hex:                   # @convert_bytes_to_hex
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp1193:
	.cfi_def_cfa_offset 64
	movabsq	$0, %rax
	movw	.L.str81629, %cx
	movw	%cx, (%rdi)
	movb	.L.str81629+2, %r8b
	movb	%r8b, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	jle	.LBB28_2
.LBB28_1:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movl	$.L.str91630, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	%rax, %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	%r8b, %al
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rcx, %rsi
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	$1, %rcx
	movl	%ecx, %eax
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	%edx, %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jne	.LBB28_1
.LBB28_2:                               # %._crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	addq	$56, %rsp
	ret
.Ltmp1194:
	.size	convert_bytes_to_hex, .Ltmp1194-convert_bytes_to_hex
	.cfi_endproc

	.globl	update_logging_status
	.align	16, 0x90
	.type	update_logging_status,@function
update_logging_status:                  # @update_logging_status
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp1196:
	.cfi_def_cfa_offset 64
	movb	%cl, %al
	movb	%dl, %r8b
	movl	current_logging_status, %ecx
	cmpl	$0, %ecx
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movb	%al, 51(%rsp)           # 1-byte Spill
	movb	%r8b, 50(%rsp)          # 1-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	jne	.LBB29_2
# BB#1:
	movl	inst_count, %esi
	movl	$.L.str101631, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	$2, current_logging_status
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jmp	.LBB29_8
.LBB29_2:
	movb	51(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	50(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movl	%ecx, %edi
	movl	52(%rsp), %edx          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	log_or_not
	movl	%eax, current_logging_status
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	setne	%r8b
	cmpl	%edx, %eax
	sete	%r9b
	orb	%r9b, %r8b
	testb	$1, %r8b
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jne	.LBB29_4
# BB#3:
	movl	inst_count, %esi
	movl	$.L.str111632, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	current_logging_status, %esi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB29_4:
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	current_toplevel_function, %rcx
	cmpb	$0, (%rcx)
	sete	%dl
	cmpl	$1, %eax
	sete	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jne	.LBB29_5
	jmp	.LBB29_6
.LBB29_5:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	strcpy
	movq	%rax, (%rsp)            # 8-byte Spill
	jmp	.LBB29_8
.LBB29_6:
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB29_8
# BB#7:
	movl	$0, %esi
	movabsq	$512, %rdx              # imm = 0x200
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	memset
.LBB29_8:
	addq	$56, %rsp
	ret
.Ltmp1197:
	.size	update_logging_status, .Ltmp1197-update_logging_status
	.cfi_endproc

	.globl	do_not_log
	.align	16, 0x90
	.type	do_not_log,@function
do_not_log:                             # @do_not_log
	.cfi_startproc
# BB#0:
	cmpl	$2, current_logging_status
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp1198:
	.size	do_not_log, .Ltmp1198-do_not_log
	.cfi_endproc

	.globl	trace_logger_log_entry
	.align	16, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp1200:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jne	.LBB31_2
# BB#1:
	callq	trace_logger_init
.LBB31_2:
	xorl	%esi, %esi
	movl	$1, %eax
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB31_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	$.L.str121633, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%cl, 11(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movb	11(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB31_4:
	addq	$24, %rsp
	ret
.Ltmp1201:
	.size	trace_logger_log_entry, .Ltmp1201-trace_logger_log_entry
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp1203:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpb	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB32_2
# BB#1:
	callq	trace_logger_init
.LBB32_2:
	movb	39(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	63(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%r8d, %esi
	movl	%ecx, %edx
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB32_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	inst_count, %eax
	movq	%rsp, %rcx
	movl	%eax, 8(%rcx)
	movl	56(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rcx)
	movl	$.L.str131634, %edx
	movl	%edx, %esi
	xorl	%edx, %edx
	movb	%dl, %r8b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movb	%r8b, 27(%rsp)          # 1-byte Spill
	movq	%r9, %r8
	movq	48(%rsp), %r9           # 8-byte Reload
	movb	27(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB32_4:
	addq	$72, %rsp
	ret
.Ltmp1204:
	.size	trace_logger_log0, .Ltmp1204-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp1206:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB33_2
# BB#1:
	movl	$.L.str141635, %eax
	movl	%eax, %edi
	movl	$.L.str61627, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$204, %edx
	callq	__assert_fail
.LBB33_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB33_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB33_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str151636, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB33_8
.LBB33_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB33_7
# BB#6:
	movl	$.L.str161637, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB33_8
.LBB33_7:
	movl	$.L.str171638, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB33_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB33_10
# BB#9:
	movl	$.L.str181639, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB33_11
.LBB33_10:
	movl	$.L.str191640, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB33_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB33_13
# BB#12:
	movl	$.L.str201641, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB33_14
.LBB33_13:
	movl	$.L.str211642, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB33_14:
	addq	$120, %rsp
	ret
.Ltmp1207:
	.size	trace_logger_log_int, .Ltmp1207-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_ptr
	.align	16, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp1209:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB34_2
# BB#1:
	movl	$.L.str141635, %eax
	movl	%eax, %edi
	movl	$.L.str61627, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_ptr, %eax
	movl	%eax, %ecx
	movl	$225, %edx
	callq	__assert_fail
.LBB34_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB34_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB34_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str221643, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB34_8
.LBB34_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB34_7
# BB#6:
	movl	$.L.str231644, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB34_8
.LBB34_7:
	movl	$.L.str241645, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB34_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB34_10
# BB#9:
	movl	$.L.str181639, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB34_11
.LBB34_10:
	movl	$.L.str191640, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB34_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB34_13
# BB#12:
	movl	$.L.str201641, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB34_14
.LBB34_13:
	movl	$.L.str211642, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB34_14:
	addq	$120, %rsp
	ret
.Ltmp1210:
	.size	trace_logger_log_ptr, .Ltmp1210-trace_logger_log_ptr
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp1212:
	.cfi_def_cfa_offset 112
	cmpb	$0, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	jne	.LBB35_2
# BB#1:
	movl	$.L.str141635, %eax
	movl	%eax, %edi
	movl	$.L.str61627, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$246, %edx
	callq	__assert_fail
.LBB35_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB35_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB35_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str251646, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB35_8
.LBB35_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB35_7
# BB#6:
	movl	$.L.str261647, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB35_8
.LBB35_7:
	movl	$.L.str271648, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB35_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB35_10
# BB#9:
	movl	$.L.str181639, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB35_11
.LBB35_10:
	movl	$.L.str191640, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB35_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB35_13
# BB#12:
	movl	$.L.str201641, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB35_14
.LBB35_13:
	movl	$.L.str211642, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB35_14:
	addq	$104, %rsp
	ret
.Ltmp1213:
	.size	trace_logger_log_double, .Ltmp1213-trace_logger_log_double
	.cfi_endproc

	.globl	trace_logger_log_vector
	.align	16, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1216:
	.cfi_def_cfa_offset 16
.Ltmp1217:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1218:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	16(%rbp), %rax
	cmpb	$0, initp
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	jne	.LBB36_2
# BB#1:
	leaq	.L.str141635, %rdi
	leaq	.L.str61627, %rsi
	movl	$267, %edx              # imm = 0x10B
	leaq	.L__PRETTY_FUNCTION__.trace_logger_log_vector, %rcx
	callq	__assert_fail
.LBB36_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB36_15
# BB#3:
	movl	$8, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	sarl	$31, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	andq	$-16, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-52(%rbp), %r9d         # 4-byte Reload
	idivl	%r9d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%eax, %edx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	callq	convert_bytes_to_hex
	movl	-48(%rbp), %eax         # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB36_5
# BB#4:
	leaq	.L.str281649, %rsi
	movq	full_trace_file, %rdi
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB36_8
.LBB36_5:
	movq	full_trace_file, %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB36_7
# BB#6:
	leaq	.L.str291650, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB36_8
.LBB36_7:
	leaq	.L.str301651, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB36_8:
	movq	full_trace_file, %rax
	movl	-28(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	je	.LBB36_10
# BB#9:
	leaq	.L.str181639, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB36_11
.LBB36_10:
	leaq	.L.str191640, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB36_11:
	movq	full_trace_file, %rax
	movl	-12(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	je	.LBB36_13
# BB#12:
	leaq	.L.str201641, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB36_14
.LBB36_13:
	leaq	.L.str211642, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB36_14:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB36_15:
	movq	%rbp, %rsp
	popq	%rbp
	ret
.Ltmp1219:
	.size	trace_logger_log_vector, .Ltmp1219-trace_logger_log_vector
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"store_loc[%d] = %f\n"
	.size	.L.str, 20

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"\n"
	.size	.L.str1, 2

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"Test failed with %d errors."
	.size	.L.str2, 28

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"Test passed!\n"
	.size	.L.str3, 14

	.type	.L.str4,@object         # @.str4
	.section	.rodata,"a",@progbits
.L.str4:
	.asciz	"test_stores"
	.size	.L.str4, 12

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	"0:0"
	.size	.L.str5, 4

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"1"
	.size	.L.str6, 2

	.type	.L.str7,@object         # @.str7
.L.str7:
	.zero	1
	.size	.L.str7, 1

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"phi"
	.size	.L.str8, 4

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"n_channels"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"0:0-5"
	.size	.L.str10, 6

	.type	.L.str11,@object        # @.str11
	.align	16
.L.str11:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str11, 19

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"._crit_edge3:0"
	.size	.L.str12, 15

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"2"
	.size	.L.str13, 2

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"n_samples"
	.size	.L.str14, 10

	.type	.L.str15,@object        # @.str15
	.align	16
.L.str15:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str15, 21

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	".preheader:1"
	.size	.L.str16, 13

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"indvars.iv5"
	.size	.L.str17, 12

	.type	.L.str18,@object        # @.str18
	.align	16
.L.str18:
	.asciz	"indvars.iv.next6"
	.size	.L.str18, 17

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"._crit_edge:1"
	.size	.L.str19, 14

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"3"
	.size	.L.str20, 2

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"stdout"
	.size	.L.str21, 7

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	".preheader:1-0"
	.size	.L.str22, 15

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	".lr.ph:1"
	.size	.L.str23, 9

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"4"
	.size	.L.str24, 2

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"5"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"6"
	.size	.L.str26, 2

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	".lr.ph:1-0"
	.size	.L.str27, 11

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"7:2"
	.size	.L.str28, 4

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"indvars.iv"
	.size	.L.str29, 11

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"indvars.iv.next"
	.size	.L.str30, 16

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"8"
	.size	.L.str31, 2

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"14"
	.size	.L.str32, 3

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"9"
	.size	.L.str33, 2

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	"10"
	.size	.L.str34, 3

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"freq_data"
	.size	.L.str35, 10

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"11"
	.size	.L.str36, 3

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"12"
	.size	.L.str37, 3

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"13"
	.size	.L.str38, 3

	.type	.L.str39,@object        # @.str39
.L.str39:
	.asciz	"fprintf"
	.size	.L.str39, 8

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"lftr.wideiv"
	.size	.L.str40, 12

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"exitcond"
	.size	.L.str41, 9

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"7:2-0"
	.size	.L.str42, 6

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	".lcssa"
	.size	.L.str43, 7

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"15"
	.size	.L.str44, 3

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"lftr.wideiv7"
	.size	.L.str45, 13

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"exitcond8"
	.size	.L.str46, 10

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"._crit_edge:1-0"
	.size	.L.str47, 16

	.type	.L.str48,@object        # @.str48
	.align	16
.L.str48:
	.asciz	"._crit_edge3:0-0"
	.size	.L.str48, 17

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"time_data"
	.size	.L.str49, 10

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"process_data"
	.size	.L.str50, 13

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"0:0-8"
	.size	.L.str51, 6

	.type	.L.str52,@object        # @.str52
	.align	16
.L.str52:
	.asciz	".preheader108.lr.ph:0"
	.size	.L.str52, 22

	.type	.L.str53,@object        # @.str53
	.align	16
.L.str53:
	.asciz	"._crit_edge118.thread:0"
	.size	.L.str53, 24

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"7"
	.size	.L.str54, 2

	.type	.L.str55,@object        # @.str55
	.align	16
.L.str55:
	.asciz	"._crit_edge118.thread:0-5"
	.size	.L.str55, 26

	.type	.L.str56,@object        # @.str56
	.align	16
.L.str56:
	.asciz	"._crit_edge107.thread:0"
	.size	.L.str56, 24

	.type	.L.str57,@object        # @.str57
	.align	16
.L.str57:
	.asciz	".preheader108.lr.ph:0-0"
	.size	.L.str57, 24

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	".preheader108:1"
	.size	.L.str58, 16

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"indvars.iv231"
	.size	.L.str59, 14

	.type	.L.str60,@object        # @.str60
	.align	16
.L.str60:
	.asciz	"indvars.iv.next232"
	.size	.L.str60, 19

	.type	.L.str61,@object        # @.str61
	.align	16
.L.str61:
	.asciz	"._crit_edge116:1"
	.size	.L.str61, 17

	.type	.L.str62,@object        # @.str62
	.align	16
.L.str62:
	.asciz	".preheader108:1-0"
	.size	.L.str62, 18

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	".lr.ph111:1"
	.size	.L.str63, 12

	.type	.L.str64,@object        # @.str64
	.align	16
.L.str64:
	.asciz	"._crit_edge112:1"
	.size	.L.str64, 17

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	".lr.ph111:1-0"
	.size	.L.str65, 14

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"14:2"
	.size	.L.str66, 5

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"indvars.iv223"
	.size	.L.str67, 14

	.type	.L.str68,@object        # @.str68
	.align	16
.L.str68:
	.asciz	"indvars.iv.next224"
	.size	.L.str68, 19

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"16"
	.size	.L.str69, 3

	.type	.L.str70,@object        # @.str70
.L.str70:
	.asciz	"17"
	.size	.L.str70, 3

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"18"
	.size	.L.str71, 3

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"in"
	.size	.L.str72, 3

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"14:2-0"
	.size	.L.str73, 7

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	"19"
	.size	.L.str74, 3

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"14:2-1"
	.size	.L.str75, 7

	.type	.L.str76,@object        # @.str76
.L.str76:
	.asciz	"20"
	.size	.L.str76, 3

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	"out"
	.size	.L.str77, 4

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"14:2-2"
	.size	.L.str78, 7

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"21"
	.size	.L.str79, 3

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"14:2-3"
	.size	.L.str80, 7

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"lftr.wideiv225"
	.size	.L.str81, 15

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"exitcond226"
	.size	.L.str82, 12

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"14:2-4"
	.size	.L.str83, 7

	.type	.L.str84,@object        # @.str84
.L.str84:
	.asciz	"22"
	.size	.L.str84, 3

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"23"
	.size	.L.str85, 3

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"24"
	.size	.L.str86, 3

	.type	.L.str87,@object        # @.str87
	.align	16
.L.str87:
	.asciz	"._crit_edge112:1-0"
	.size	.L.str87, 19

	.type	.L.str88,@object        # @.str88
.L.str88:
	.asciz	"kiss_fft"
	.size	.L.str88, 9

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"cfg"
	.size	.L.str89, 4

	.type	.L.str90,@object        # @.str90
	.align	16
.L.str90:
	.asciz	"._crit_edge112:1-2"
	.size	.L.str90, 19

	.type	.L.str91,@object        # @.str91
.L.str91:
	.asciz	".lr.ph115:1"
	.size	.L.str91, 12

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	"25"
	.size	.L.str92, 3

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	".lr.ph115:1-0"
	.size	.L.str93, 14

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"26:2"
	.size	.L.str94, 5

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"indvars.iv227"
	.size	.L.str95, 14

	.type	.L.str96,@object        # @.str96
	.align	16
.L.str96:
	.asciz	"indvars.iv.next228"
	.size	.L.str96, 19

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"27"
	.size	.L.str97, 3

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"28"
	.size	.L.str98, 3

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"29"
	.size	.L.str99, 3

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"30"
	.size	.L.str100, 3

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"26:2-0"
	.size	.L.str101, 7

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"lftr.wideiv229"
	.size	.L.str102, 15

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"exitcond230"
	.size	.L.str103, 12

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"26:2-1"
	.size	.L.str104, 7

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"lftr.wideiv233"
	.size	.L.str105, 15

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"exitcond234"
	.size	.L.str106, 12

	.type	.L.str107,@object       # @.str107
	.align	16
.L.str107:
	.asciz	"._crit_edge116:1-0"
	.size	.L.str107, 19

	.type	.L.str108,@object       # @.str108
	.align	16
.L.str108:
	.asciz	"._crit_edge118:0"
	.size	.L.str108, 17

	.type	.L.str109,@object       # @.str109
.L.str109:
	.asciz	"31"
	.size	.L.str109, 3

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"32"
	.size	.L.str110, 3

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"33"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"34"
	.size	.L.str112, 3

	.type	.L.str113,@object       # @.str113
	.align	16
.L.str113:
	.asciz	"._crit_edge118:0-5"
	.size	.L.str113, 19

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	".preheader104:1"
	.size	.L.str114, 16

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"indvars.iv219"
	.size	.L.str115, 14

	.type	.L.str116,@object       # @.str116
	.align	16
.L.str116:
	.asciz	"indvars.iv.next220"
	.size	.L.str116, 19

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"53:1"
	.size	.L.str117, 5

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"35"
	.size	.L.str118, 3

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"36"
	.size	.L.str119, 3

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"37"
	.size	.L.str120, 3

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"sext237"
	.size	.L.str121, 8

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"38"
	.size	.L.str122, 3

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"39"
	.size	.L.str123, 3

	.type	.L.str124,@object       # @.str124
	.align	16
.L.str124:
	.asciz	".preheader104:1-0"
	.size	.L.str124, 18

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"40:2"
	.size	.L.str125, 5

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"indvars.iv216"
	.size	.L.str126, 14

	.type	.L.str127,@object       # @.str127
	.align	16
.L.str127:
	.asciz	"indvars.iv.next217"
	.size	.L.str127, 19

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"41"
	.size	.L.str128, 3

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	"42"
	.size	.L.str129, 3

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"43"
	.size	.L.str130, 3

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"44"
	.size	.L.str131, 3

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	"45"
	.size	.L.str132, 3

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	"46"
	.size	.L.str133, 3

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"47"
	.size	.L.str134, 3

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	"48"
	.size	.L.str135, 3

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"49"
	.size	.L.str136, 3

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"sqrt"
	.size	.L.str137, 5

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"50"
	.size	.L.str138, 3

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"log10"
	.size	.L.str139, 6

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"51"
	.size	.L.str140, 3

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"52"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"fft_data"
	.size	.L.str142, 9

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"40:2-1"
	.size	.L.str143, 7

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"exitcond218"
	.size	.L.str144, 12

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"40:2-2"
	.size	.L.str145, 7

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"lftr.wideiv221"
	.size	.L.str146, 15

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"exitcond222"
	.size	.L.str147, 12

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"53:1-0"
	.size	.L.str148, 7

	.type	.L.str149,@object       # @.str149
	.align	16
.L.str149:
	.asciz	"._crit_edge107:0"
	.size	.L.str149, 17

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	".ph"
	.size	.L.str150, 4

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	".ph238"
	.size	.L.str151, 7

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"54"
	.size	.L.str152, 3

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"55"
	.size	.L.str153, 3

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	"56"
	.size	.L.str154, 3

	.type	.L.str155,@object       # @.str155
	.align	16
.L.str155:
	.asciz	"._crit_edge107.thread:0-3"
	.size	.L.str155, 26

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	".preheader95:0"
	.size	.L.str156, 15

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"57"
	.size	.L.str157, 3

	.type	.L.str158,@object       # @.str158
.L.str158:
	.asciz	"58"
	.size	.L.str158, 3

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"59"
	.size	.L.str159, 3

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"60"
	.size	.L.str160, 3

	.type	.L.str161,@object       # @.str161
	.align	16
.L.str161:
	.asciz	"._crit_edge107:0-3"
	.size	.L.str161, 19

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	".lr.ph103:1"
	.size	.L.str162, 12

	.type	.L.str163,@object       # @.str163
	.align	16
.L.str163:
	.asciz	"._crit_edge97.thread:0"
	.size	.L.str163, 23

	.type	.L.str164,@object       # @.str164
.L.str164:
	.asciz	"61"
	.size	.L.str164, 3

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	"75:1"
	.size	.L.str165, 5

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"62"
	.size	.L.str166, 3

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"63"
	.size	.L.str167, 3

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"64"
	.size	.L.str168, 3

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"65"
	.size	.L.str169, 3

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"66"
	.size	.L.str170, 3

	.type	.L.str171,@object       # @.str171
	.align	16
.L.str171:
	.asciz	".preheader95:0-0"
	.size	.L.str171, 17

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	".preheader92:1"
	.size	.L.str172, 15

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"indvars.iv212"
	.size	.L.str173, 14

	.type	.L.str174,@object       # @.str174
	.align	16
.L.str174:
	.asciz	"indvars.iv.next213"
	.size	.L.str174, 19

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"67"
	.size	.L.str175, 3

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	".lr.ph103:1-0"
	.size	.L.str176, 14

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	"sext236"
	.size	.L.str177, 8

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	"68"
	.size	.L.str178, 3

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	".lr.ph103:1-2"
	.size	.L.str179, 14

	.type	.L.str180,@object       # @.str180
.L.str180:
	.asciz	"69:2"
	.size	.L.str180, 5

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	"indvars.iv209"
	.size	.L.str181, 14

	.type	.L.str182,@object       # @.str182
	.align	16
.L.str182:
	.asciz	"indvars.iv.next210"
	.size	.L.str182, 19

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"70"
	.size	.L.str183, 3

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"74"
	.size	.L.str184, 3

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"71"
	.size	.L.str185, 3

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"72"
	.size	.L.str186, 3

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"73"
	.size	.L.str187, 3

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	"exitcond211"
	.size	.L.str188, 12

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"69:2-0"
	.size	.L.str189, 7

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"76"
	.size	.L.str190, 3

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"75:1-0"
	.size	.L.str191, 7

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"lftr.wideiv214"
	.size	.L.str192, 15

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	"exitcond215"
	.size	.L.str193, 12

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"75:1-1"
	.size	.L.str194, 7

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	"indvars.iv204"
	.size	.L.str195, 14

	.type	.L.str196,@object       # @.str196
	.align	16
.L.str196:
	.asciz	"indvars.iv.next205"
	.size	.L.str196, 19

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"87:1"
	.size	.L.str197, 5

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"77"
	.size	.L.str198, 3

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"78"
	.size	.L.str199, 3

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"sext235"
	.size	.L.str200, 8

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"79"
	.size	.L.str201, 3

	.type	.L.str202,@object       # @.str202
	.align	16
.L.str202:
	.asciz	".preheader92:1-0"
	.size	.L.str202, 17

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"80:2"
	.size	.L.str203, 5

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"indvars.iv201"
	.size	.L.str204, 14

	.type	.L.str205,@object       # @.str205
	.align	16
.L.str205:
	.asciz	"indvars.iv.next202"
	.size	.L.str205, 19

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"stddev_temp.093"
	.size	.L.str206, 16

	.type	.L.str207,@object       # @.str207
.L.str207:
	.asciz	"86"
	.size	.L.str207, 3

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"81"
	.size	.L.str208, 3

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"82"
	.size	.L.str209, 3

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"83"
	.size	.L.str210, 3

	.type	.L.str211,@object       # @.str211
.L.str211:
	.asciz	"84"
	.size	.L.str211, 3

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"85"
	.size	.L.str212, 3

	.type	.L.str213,@object       # @.str213
.L.str213:
	.asciz	"exitcond203"
	.size	.L.str213, 12

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"80:2-1"
	.size	.L.str214, 7

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	"88"
	.size	.L.str215, 3

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"89"
	.size	.L.str216, 3

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"90"
	.size	.L.str217, 3

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	"87:1-0"
	.size	.L.str218, 7

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"lftr.wideiv206"
	.size	.L.str219, 15

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"exitcond207"
	.size	.L.str220, 12

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	"87:1-1"
	.size	.L.str221, 7

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	"._crit_edge97:0"
	.size	.L.str222, 16

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	".ph239"
	.size	.L.str223, 7

	.type	.L.str224,@object       # @.str224
.L.str224:
	.asciz	".ph240"
	.size	.L.str224, 7

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	".ph242"
	.size	.L.str225, 7

	.type	.L.str226,@object       # @.str226
.L.str226:
	.asciz	"91"
	.size	.L.str226, 3

	.type	.L.str227,@object       # @.str227
	.align	16
.L.str227:
	.asciz	"._crit_edge97.thread:0-2"
	.size	.L.str227, 25

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"._crit_edge91:0"
	.size	.L.str228, 16

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"92"
	.size	.L.str229, 3

	.type	.L.str230,@object       # @.str230
.L.str230:
	.asciz	"93"
	.size	.L.str230, 3

	.type	.L.str231,@object       # @.str231
	.align	16
.L.str231:
	.asciz	"._crit_edge97:0-2"
	.size	.L.str231, 18

	.type	.L.str232,@object       # @.str232
.L.str232:
	.asciz	".preheader88:1"
	.size	.L.str232, 15

	.type	.L.str233,@object       # @.str233
	.align	16
.L.str233:
	.asciz	"._crit_edge91.thread:0"
	.size	.L.str233, 23

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"94"
	.size	.L.str234, 3

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"95"
	.size	.L.str235, 3

	.type	.L.str236,@object       # @.str236
.L.str236:
	.asciz	"96"
	.size	.L.str236, 3

	.type	.L.str237,@object       # @.str237
	.align	16
.L.str237:
	.asciz	"._crit_edge91.thread:0-2"
	.size	.L.str237, 25

	.type	.L.str238,@object       # @.str238
	.align	16
.L.str238:
	.asciz	"._crit_edge87.thread:0"
	.size	.L.str238, 23

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"indvars.iv196"
	.size	.L.str239, 14

	.type	.L.str240,@object       # @.str240
	.align	16
.L.str240:
	.asciz	"indvars.iv.next197"
	.size	.L.str240, 19

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"112:1"
	.size	.L.str241, 6

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"97"
	.size	.L.str242, 3

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"98"
	.size	.L.str243, 3

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	"99"
	.size	.L.str244, 3

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"100"
	.size	.L.str245, 4

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	"sext"
	.size	.L.str246, 5

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	"101"
	.size	.L.str247, 4

	.type	.L.str248,@object       # @.str248
	.align	16
.L.str248:
	.asciz	".preheader88:1-0"
	.size	.L.str248, 17

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	"102:2"
	.size	.L.str249, 6

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"indvars.iv193"
	.size	.L.str250, 14

	.type	.L.str251,@object       # @.str251
	.align	16
.L.str251:
	.asciz	"indvars.iv.next194"
	.size	.L.str251, 19

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"111:2"
	.size	.L.str252, 6

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"102:2-0"
	.size	.L.str253, 8

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"103:2"
	.size	.L.str254, 6

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"104"
	.size	.L.str255, 4

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"105"
	.size	.L.str256, 4

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"106"
	.size	.L.str257, 4

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"107"
	.size	.L.str258, 4

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"108"
	.size	.L.str259, 4

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"109"
	.size	.L.str260, 4

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"110"
	.size	.L.str261, 4

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"103:2-0"
	.size	.L.str262, 8

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"103:2-1"
	.size	.L.str263, 8

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"exitcond195"
	.size	.L.str264, 12

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"111:2-0"
	.size	.L.str265, 8

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"lftr.wideiv198"
	.size	.L.str266, 15

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"exitcond199"
	.size	.L.str267, 12

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"112:1-0"
	.size	.L.str268, 8

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"113"
	.size	.L.str269, 4

	.type	.L.str270,@object       # @.str270
.L.str270:
	.asciz	"114"
	.size	.L.str270, 4

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"115"
	.size	.L.str271, 4

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"116"
	.size	.L.str272, 4

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	"117"
	.size	.L.str273, 4

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	"118"
	.size	.L.str274, 4

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"119"
	.size	.L.str275, 4

	.type	.L.str276,@object       # @.str276
	.align	16
.L.str276:
	.asciz	"._crit_edge91:0-2"
	.size	.L.str276, 18

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	".lr.ph84:1"
	.size	.L.str277, 11

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"indvars.iv189"
	.size	.L.str278, 14

	.type	.L.str279,@object       # @.str279
	.align	16
.L.str279:
	.asciz	"indvars.iv.next190"
	.size	.L.str279, 19

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"._crit_edge85:1"
	.size	.L.str280, 16

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"120"
	.size	.L.str281, 4

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"121"
	.size	.L.str282, 4

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"122"
	.size	.L.str283, 4

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"123"
	.size	.L.str284, 4

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"124"
	.size	.L.str285, 4

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"125"
	.size	.L.str286, 4

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	".lr.ph84:1-0"
	.size	.L.str287, 13

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"126:2"
	.size	.L.str288, 6

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"indvars.iv185"
	.size	.L.str289, 14

	.type	.L.str290,@object       # @.str290
	.align	16
.L.str290:
	.asciz	"indvars.iv.next186"
	.size	.L.str290, 19

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"146:2"
	.size	.L.str291, 6

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"127"
	.size	.L.str292, 4

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"128"
	.size	.L.str293, 4

	.type	.L.str294,@object       # @.str294
	.align	16
.L.str294:
	.asciz	"freq_xcorr_matrix"
	.size	.L.str294, 18

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"126:2-0"
	.size	.L.str295, 8

	.type	.L.str296,@object       # @.str296
.L.str296:
	.asciz	"129"
	.size	.L.str296, 4

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	"130"
	.size	.L.str297, 4

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"131"
	.size	.L.str298, 4

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"132"
	.size	.L.str299, 4

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"133"
	.size	.L.str300, 4

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"126:2-2"
	.size	.L.str301, 8

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"134:3"
	.size	.L.str302, 6

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"indvars.iv180"
	.size	.L.str303, 14

	.type	.L.str304,@object       # @.str304
	.align	16
.L.str304:
	.asciz	"indvars.iv.next181"
	.size	.L.str304, 19

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"135"
	.size	.L.str305, 4

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	"145"
	.size	.L.str306, 4

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"136"
	.size	.L.str307, 4

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"137"
	.size	.L.str308, 4

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	"138"
	.size	.L.str309, 4

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	"139"
	.size	.L.str310, 4

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"140"
	.size	.L.str311, 4

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	"141"
	.size	.L.str312, 4

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"142"
	.size	.L.str313, 4

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"143"
	.size	.L.str314, 4

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"144"
	.size	.L.str315, 4

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"exitcond182"
	.size	.L.str316, 12

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"134:3-0"
	.size	.L.str317, 8

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"147"
	.size	.L.str318, 4

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"146:2-0"
	.size	.L.str319, 8

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"lftr.wideiv187"
	.size	.L.str320, 15

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"exitcond188"
	.size	.L.str321, 12

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"146:2-1"
	.size	.L.str322, 8

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"lftr.wideiv191"
	.size	.L.str323, 15

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	"exitcond192"
	.size	.L.str324, 12

	.type	.L.str325,@object       # @.str325
	.align	16
.L.str325:
	.asciz	"._crit_edge85:1-0"
	.size	.L.str325, 18

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"._crit_edge87:0"
	.size	.L.str326, 16

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	".ph244"
	.size	.L.str327, 7

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	".ph245"
	.size	.L.str328, 7

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	".ph246"
	.size	.L.str329, 7

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"148"
	.size	.L.str330, 4

	.type	.L.str331,@object       # @.str331
	.align	16
.L.str331:
	.asciz	"._crit_edge87.thread:0-2"
	.size	.L.str331, 25

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	".preheader73:0"
	.size	.L.str332, 15

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"149"
	.size	.L.str333, 4

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"150"
	.size	.L.str334, 4

	.type	.L.str335,@object       # @.str335
	.align	16
.L.str335:
	.asciz	"._crit_edge87:0-2"
	.size	.L.str335, 18

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	".lr.ph78:1"
	.size	.L.str336, 11

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"._crit_edge75:0"
	.size	.L.str337, 16

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"151"
	.size	.L.str338, 4

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"152"
	.size	.L.str339, 4

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"153"
	.size	.L.str340, 4

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"154"
	.size	.L.str341, 4

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	"155"
	.size	.L.str342, 4

	.type	.L.str343,@object       # @.str343
	.align	16
.L.str343:
	.asciz	".preheader73:0-0"
	.size	.L.str343, 17

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	".lr.ph71:1"
	.size	.L.str344, 11

	.type	.L.str345,@object       # @.str345
.L.str345:
	.asciz	"indvars.iv175"
	.size	.L.str345, 14

	.type	.L.str346,@object       # @.str346
	.align	16
.L.str346:
	.asciz	"indvars.iv.next176"
	.size	.L.str346, 19

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"156"
	.size	.L.str347, 4

	.type	.L.str348,@object       # @.str348
.L.str348:
	.asciz	"157"
	.size	.L.str348, 4

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"158"
	.size	.L.str349, 4

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"159"
	.size	.L.str350, 4

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	"160"
	.size	.L.str351, 4

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"161"
	.size	.L.str352, 4

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"162"
	.size	.L.str353, 4

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"163"
	.size	.L.str354, 4

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	".lr.ph78:1-0"
	.size	.L.str355, 13

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	"lftr.wideiv177"
	.size	.L.str356, 15

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"exitcond178"
	.size	.L.str357, 12

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	".lr.ph78:1-1"
	.size	.L.str358, 13

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"indvars.iv171"
	.size	.L.str359, 14

	.type	.L.str360,@object       # @.str360
	.align	16
.L.str360:
	.asciz	"indvars.iv.next172"
	.size	.L.str360, 19

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"._crit_edge72:1"
	.size	.L.str361, 16

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"164"
	.size	.L.str362, 4

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"165"
	.size	.L.str363, 4

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"166"
	.size	.L.str364, 4

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"167"
	.size	.L.str365, 4

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"168"
	.size	.L.str366, 4

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	".lr.ph71:1-0"
	.size	.L.str367, 13

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	"169:2"
	.size	.L.str368, 6

	.type	.L.str369,@object       # @.str369
.L.str369:
	.asciz	"indvars.iv167"
	.size	.L.str369, 14

	.type	.L.str370,@object       # @.str370
	.align	16
.L.str370:
	.asciz	"indvars.iv.next168"
	.size	.L.str370, 19

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	"170"
	.size	.L.str371, 4

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	"171"
	.size	.L.str372, 4

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"172"
	.size	.L.str373, 4

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	"173"
	.size	.L.str374, 4

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	"174"
	.size	.L.str375, 4

	.type	.L.str376,@object       # @.str376
.L.str376:
	.asciz	"175"
	.size	.L.str376, 4

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	"176"
	.size	.L.str377, 4

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	"177"
	.size	.L.str378, 4

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	"169:2-0"
	.size	.L.str379, 8

	.type	.L.str380,@object       # @.str380
.L.str380:
	.asciz	"lftr.wideiv169"
	.size	.L.str380, 15

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	"exitcond170"
	.size	.L.str381, 12

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	"169:2-1"
	.size	.L.str382, 8

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"lftr.wideiv173"
	.size	.L.str383, 15

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	"exitcond174"
	.size	.L.str384, 12

	.type	.L.str385,@object       # @.str385
	.align	16
.L.str385:
	.asciz	"._crit_edge72:1-0"
	.size	.L.str385, 18

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	"178"
	.size	.L.str386, 4

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	"179"
	.size	.L.str387, 4

	.type	.L.str388,@object       # @.str388
.L.str388:
	.asciz	"180"
	.size	.L.str388, 4

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"181"
	.size	.L.str389, 4

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"182"
	.size	.L.str390, 4

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"rs"
	.size	.L.str391, 3

	.type	.L.str392,@object       # @.str392
	.align	16
.L.str392:
	.asciz	"freq_eigenvalues"
	.size	.L.str392, 17

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	"183"
	.size	.L.str393, 4

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"184"
	.size	.L.str394, 4

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"185"
	.size	.L.str395, 4

	.type	.L.str396,@object       # @.str396
	.align	16
.L.str396:
	.asciz	"._crit_edge75:0-4"
	.size	.L.str396, 18

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	".lr.ph67:0"
	.size	.L.str397, 11

	.type	.L.str398,@object       # @.str398
	.align	16
.L.str398:
	.asciz	"._crit_edge49.thread250:0"
	.size	.L.str398, 26

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"186"
	.size	.L.str399, 4

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	"187"
	.size	.L.str400, 4

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	".lr.ph67:0-0"
	.size	.L.str401, 13

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"188:1"
	.size	.L.str402, 6

	.type	.L.str403,@object       # @.str403
.L.str403:
	.asciz	"indvars.iv163"
	.size	.L.str403, 14

	.type	.L.str404,@object       # @.str404
	.align	16
.L.str404:
	.asciz	"indvars.iv.next164"
	.size	.L.str404, 19

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"199:1"
	.size	.L.str405, 6

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	"189"
	.size	.L.str406, 4

	.type	.L.str407,@object       # @.str407
.L.str407:
	.asciz	"time_mean"
	.size	.L.str407, 10

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"188:1-0"
	.size	.L.str408, 8

	.type	.L.str409,@object       # @.str409
.L.str409:
	.asciz	"188:1-2"
	.size	.L.str409, 8

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	".lr.ph61:1"
	.size	.L.str410, 11

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"190"
	.size	.L.str411, 4

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"191"
	.size	.L.str412, 4

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	".promoted63"
	.size	.L.str413, 12

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	"192"
	.size	.L.str414, 4

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	".lr.ph61:1-0"
	.size	.L.str415, 13

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"193:2"
	.size	.L.str416, 6

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"indvars.iv159"
	.size	.L.str417, 14

	.type	.L.str418,@object       # @.str418
	.align	16
.L.str418:
	.asciz	"indvars.iv.next160"
	.size	.L.str418, 19

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"194"
	.size	.L.str419, 4

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"198"
	.size	.L.str420, 4

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"195"
	.size	.L.str421, 4

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"196"
	.size	.L.str422, 4

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"197"
	.size	.L.str423, 4

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"lftr.wideiv161"
	.size	.L.str424, 15

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"exitcond162"
	.size	.L.str425, 12

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"193:2-0"
	.size	.L.str426, 8

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"._crit_edge62:1"
	.size	.L.str427, 16

	.type	.L.str428,@object       # @.str428
	.align	16
.L.str428:
	.asciz	"._crit_edge62:1-0"
	.size	.L.str428, 18

	.type	.L.str429,@object       # @.str429
	.align	16
.L.str429:
	.asciz	"._crit_edge62:1-1"
	.size	.L.str429, 18

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"200"
	.size	.L.str430, 4

	.type	.L.str431,@object       # @.str431
.L.str431:
	.asciz	"201"
	.size	.L.str431, 4

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	"199:1-0"
	.size	.L.str432, 8

	.type	.L.str433,@object       # @.str433
.L.str433:
	.asciz	"lftr.wideiv165"
	.size	.L.str433, 15

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	"exitcond166"
	.size	.L.str434, 12

	.type	.L.str435,@object       # @.str435
.L.str435:
	.asciz	"199:1-1"
	.size	.L.str435, 8

	.type	.L.str436,@object       # @.str436
.L.str436:
	.asciz	"._crit_edge68:0"
	.size	.L.str436, 16

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	"202"
	.size	.L.str437, 4

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"203"
	.size	.L.str438, 4

	.type	.L.str439,@object       # @.str439
	.align	16
.L.str439:
	.asciz	"._crit_edge68:0-2"
	.size	.L.str439, 18

	.type	.L.str440,@object       # @.str440
.L.str440:
	.asciz	".lr.ph58:0"
	.size	.L.str440, 11

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	"204"
	.size	.L.str441, 4

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	"205"
	.size	.L.str442, 4

	.type	.L.str443,@object       # @.str443
.L.str443:
	.asciz	".lr.ph58:0-0"
	.size	.L.str443, 13

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	"209:1"
	.size	.L.str444, 6

	.type	.L.str445,@object       # @.str445
.L.str445:
	.asciz	".preheader47:0"
	.size	.L.str445, 15

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	"206"
	.size	.L.str446, 4

	.type	.L.str447,@object       # @.str447
	.align	16
.L.str447:
	.asciz	".preheader47:0-0"
	.size	.L.str447, 17

	.type	.L.str448,@object       # @.str448
	.align	16
.L.str448:
	.asciz	".preheader43.lr.ph:0"
	.size	.L.str448, 21

	.type	.L.str449,@object       # @.str449
	.align	16
.L.str449:
	.asciz	"._crit_edge49.thread:0"
	.size	.L.str449, 23

	.type	.L.str450,@object       # @.str450
.L.str450:
	.asciz	"207"
	.size	.L.str450, 4

	.type	.L.str451,@object       # @.str451
	.align	16
.L.str451:
	.asciz	"._crit_edge49.thread:0-2"
	.size	.L.str451, 25

	.type	.L.str452,@object       # @.str452
	.align	16
.L.str452:
	.asciz	"._crit_edge42.thread:0"
	.size	.L.str452, 23

	.type	.L.str453,@object       # @.str453
.L.str453:
	.asciz	"208"
	.size	.L.str453, 4

	.type	.L.str454,@object       # @.str454
	.align	16
.L.str454:
	.asciz	".preheader43.lr.ph:0-0"
	.size	.L.str454, 23

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	".preheader43:1"
	.size	.L.str455, 15

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	"indvars.iv154"
	.size	.L.str456, 14

	.type	.L.str457,@object       # @.str457
	.align	16
.L.str457:
	.asciz	"indvars.iv.next155"
	.size	.L.str457, 19

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"224:1"
	.size	.L.str458, 6

	.type	.L.str459,@object       # @.str459
.L.str459:
	.asciz	"210"
	.size	.L.str459, 4

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"time_stddev"
	.size	.L.str460, 12

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"209:1-0"
	.size	.L.str461, 8

	.type	.L.str462,@object       # @.str462
.L.str462:
	.asciz	"209:1-2"
	.size	.L.str462, 8

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	".lr.ph52:1"
	.size	.L.str463, 11

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"211"
	.size	.L.str464, 4

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"212"
	.size	.L.str465, 4

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"213"
	.size	.L.str466, 4

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"214"
	.size	.L.str467, 4

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	".promoted54"
	.size	.L.str468, 12

	.type	.L.str469,@object       # @.str469
.L.str469:
	.asciz	"215"
	.size	.L.str469, 4

	.type	.L.str470,@object       # @.str470
.L.str470:
	.asciz	".lr.ph52:1-0"
	.size	.L.str470, 13

	.type	.L.str471,@object       # @.str471
.L.str471:
	.asciz	"216:2"
	.size	.L.str471, 6

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"indvars.iv150"
	.size	.L.str472, 14

	.type	.L.str473,@object       # @.str473
	.align	16
.L.str473:
	.asciz	"indvars.iv.next151"
	.size	.L.str473, 19

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	"217"
	.size	.L.str474, 4

	.type	.L.str475,@object       # @.str475
.L.str475:
	.asciz	"223"
	.size	.L.str475, 4

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	"218"
	.size	.L.str476, 4

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	"219"
	.size	.L.str477, 4

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	"220"
	.size	.L.str478, 4

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	"221"
	.size	.L.str479, 4

	.type	.L.str480,@object       # @.str480
.L.str480:
	.asciz	"222"
	.size	.L.str480, 4

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"lftr.wideiv152"
	.size	.L.str481, 15

	.type	.L.str482,@object       # @.str482
.L.str482:
	.asciz	"exitcond153"
	.size	.L.str482, 12

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	"216:2-0"
	.size	.L.str483, 8

	.type	.L.str484,@object       # @.str484
.L.str484:
	.asciz	"._crit_edge53:1"
	.size	.L.str484, 16

	.type	.L.str485,@object       # @.str485
	.align	16
.L.str485:
	.asciz	"._crit_edge53:1-0"
	.size	.L.str485, 18

	.type	.L.str486,@object       # @.str486
	.align	16
.L.str486:
	.asciz	"._crit_edge53:1-1"
	.size	.L.str486, 18

	.type	.L.str487,@object       # @.str487
.L.str487:
	.asciz	"225"
	.size	.L.str487, 4

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"226"
	.size	.L.str488, 4

	.type	.L.str489,@object       # @.str489
.L.str489:
	.asciz	"227"
	.size	.L.str489, 4

	.type	.L.str490,@object       # @.str490
.L.str490:
	.asciz	"228"
	.size	.L.str490, 4

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	"229"
	.size	.L.str491, 4

	.type	.L.str492,@object       # @.str492
.L.str492:
	.asciz	"224:1-0"
	.size	.L.str492, 8

	.type	.L.str493,@object       # @.str493
.L.str493:
	.asciz	"lftr.wideiv156"
	.size	.L.str493, 15

	.type	.L.str494,@object       # @.str494
.L.str494:
	.asciz	"exitcond157"
	.size	.L.str494, 12

	.type	.L.str495,@object       # @.str495
.L.str495:
	.asciz	"224:1-1"
	.size	.L.str495, 8

	.type	.L.str496,@object       # @.str496
.L.str496:
	.asciz	"indvars.iv145"
	.size	.L.str496, 14

	.type	.L.str497,@object       # @.str497
	.align	16
.L.str497:
	.asciz	"indvars.iv.next146"
	.size	.L.str497, 19

	.type	.L.str498,@object       # @.str498
.L.str498:
	.asciz	"._crit_edge46:1"
	.size	.L.str498, 16

	.type	.L.str499,@object       # @.str499
	.align	16
.L.str499:
	.asciz	".preheader43:1-0"
	.size	.L.str499, 17

	.type	.L.str500,@object       # @.str500
.L.str500:
	.asciz	".lr.ph45:1"
	.size	.L.str500, 11

	.type	.L.str501,@object       # @.str501
.L.str501:
	.asciz	"230"
	.size	.L.str501, 4

	.type	.L.str502,@object       # @.str502
.L.str502:
	.asciz	"231"
	.size	.L.str502, 4

	.type	.L.str503,@object       # @.str503
.L.str503:
	.asciz	"232"
	.size	.L.str503, 4

	.type	.L.str504,@object       # @.str504
.L.str504:
	.asciz	"233"
	.size	.L.str504, 4

	.type	.L.str505,@object       # @.str505
.L.str505:
	.asciz	"234"
	.size	.L.str505, 4

	.type	.L.str506,@object       # @.str506
.L.str506:
	.asciz	"235"
	.size	.L.str506, 4

	.type	.L.str507,@object       # @.str507
.L.str507:
	.asciz	"236"
	.size	.L.str507, 4

	.type	.L.str508,@object       # @.str508
.L.str508:
	.asciz	".lr.ph45:1-0"
	.size	.L.str508, 13

	.type	.L.str509,@object       # @.str509
.L.str509:
	.asciz	"237:2"
	.size	.L.str509, 6

	.type	.L.str510,@object       # @.str510
.L.str510:
	.asciz	"indvars.iv141"
	.size	.L.str510, 14

	.type	.L.str511,@object       # @.str511
	.align	16
.L.str511:
	.asciz	"indvars.iv.next142"
	.size	.L.str511, 19

	.type	.L.str512,@object       # @.str512
.L.str512:
	.asciz	"238"
	.size	.L.str512, 4

	.type	.L.str513,@object       # @.str513
.L.str513:
	.asciz	"239"
	.size	.L.str513, 4

	.type	.L.str514,@object       # @.str514
.L.str514:
	.asciz	"240"
	.size	.L.str514, 4

	.type	.L.str515,@object       # @.str515
.L.str515:
	.asciz	"241"
	.size	.L.str515, 4

	.type	.L.str516,@object       # @.str516
.L.str516:
	.asciz	"242"
	.size	.L.str516, 4

	.type	.L.str517,@object       # @.str517
.L.str517:
	.asciz	"237:2-0"
	.size	.L.str517, 8

	.type	.L.str518,@object       # @.str518
.L.str518:
	.asciz	"lftr.wideiv143"
	.size	.L.str518, 15

	.type	.L.str519,@object       # @.str519
.L.str519:
	.asciz	"exitcond144"
	.size	.L.str519, 12

	.type	.L.str520,@object       # @.str520
.L.str520:
	.asciz	"237:2-1"
	.size	.L.str520, 8

	.type	.L.str521,@object       # @.str521
.L.str521:
	.asciz	"lftr.wideiv147"
	.size	.L.str521, 15

	.type	.L.str522,@object       # @.str522
.L.str522:
	.asciz	"exitcond148"
	.size	.L.str522, 12

	.type	.L.str523,@object       # @.str523
	.align	16
.L.str523:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str523, 18

	.type	.L.str524,@object       # @.str524
.L.str524:
	.asciz	"._crit_edge49:0"
	.size	.L.str524, 16

	.type	.L.str525,@object       # @.str525
.L.str525:
	.asciz	"243"
	.size	.L.str525, 4

	.type	.L.str526,@object       # @.str526
	.align	16
.L.str526:
	.asciz	"._crit_edge49.thread250:0-2"
	.size	.L.str526, 28

	.type	.L.str527,@object       # @.str527
.L.str527:
	.asciz	"244"
	.size	.L.str527, 4

	.type	.L.str528,@object       # @.str528
.L.str528:
	.asciz	"245"
	.size	.L.str528, 4

	.type	.L.str529,@object       # @.str529
	.align	16
.L.str529:
	.asciz	"._crit_edge49:0-2"
	.size	.L.str529, 18

	.type	.L.str530,@object       # @.str530
	.align	16
.L.str530:
	.asciz	".preheader37.lr.ph:0"
	.size	.L.str530, 21

	.type	.L.str531,@object       # @.str531
.L.str531:
	.asciz	"246"
	.size	.L.str531, 4

	.type	.L.str532,@object       # @.str532
.L.str532:
	.asciz	"247"
	.size	.L.str532, 4

	.type	.L.str533,@object       # @.str533
	.align	16
.L.str533:
	.asciz	".preheader37.lr.ph:0-0"
	.size	.L.str533, 23

	.type	.L.str534,@object       # @.str534
.L.str534:
	.asciz	".lr.ph39:1"
	.size	.L.str534, 11

	.type	.L.str535,@object       # @.str535
.L.str535:
	.asciz	"indvars.iv137"
	.size	.L.str535, 14

	.type	.L.str536,@object       # @.str536
	.align	16
.L.str536:
	.asciz	"indvars.iv.next138"
	.size	.L.str536, 19

	.type	.L.str537,@object       # @.str537
.L.str537:
	.asciz	"._crit_edge40:1"
	.size	.L.str537, 16

	.type	.L.str538,@object       # @.str538
.L.str538:
	.asciz	"248"
	.size	.L.str538, 4

	.type	.L.str539,@object       # @.str539
.L.str539:
	.asciz	"249"
	.size	.L.str539, 4

	.type	.L.str540,@object       # @.str540
.L.str540:
	.asciz	"250"
	.size	.L.str540, 4

	.type	.L.str541,@object       # @.str541
.L.str541:
	.asciz	"251"
	.size	.L.str541, 4

	.type	.L.str542,@object       # @.str542
.L.str542:
	.asciz	"252"
	.size	.L.str542, 4

	.type	.L.str543,@object       # @.str543
.L.str543:
	.asciz	".lr.ph39:1-0"
	.size	.L.str543, 13

	.type	.L.str544,@object       # @.str544
.L.str544:
	.asciz	"253:2"
	.size	.L.str544, 6

	.type	.L.str545,@object       # @.str545
.L.str545:
	.asciz	"indvars.iv133"
	.size	.L.str545, 14

	.type	.L.str546,@object       # @.str546
	.align	16
.L.str546:
	.asciz	"indvars.iv.next134"
	.size	.L.str546, 19

	.type	.L.str547,@object       # @.str547
.L.str547:
	.asciz	"274:2"
	.size	.L.str547, 6

	.type	.L.str548,@object       # @.str548
.L.str548:
	.asciz	"254"
	.size	.L.str548, 4

	.type	.L.str549,@object       # @.str549
.L.str549:
	.asciz	"255"
	.size	.L.str549, 4

	.type	.L.str550,@object       # @.str550
	.align	16
.L.str550:
	.asciz	"time_xcorr_matrix"
	.size	.L.str550, 18

	.type	.L.str551,@object       # @.str551
.L.str551:
	.asciz	"253:2-0"
	.size	.L.str551, 8

	.type	.L.str552,@object       # @.str552
.L.str552:
	.asciz	"253:2-2"
	.size	.L.str552, 8

	.type	.L.str553,@object       # @.str553
.L.str553:
	.asciz	".lr.ph35:2"
	.size	.L.str553, 11

	.type	.L.str554,@object       # @.str554
.L.str554:
	.asciz	"256"
	.size	.L.str554, 4

	.type	.L.str555,@object       # @.str555
.L.str555:
	.asciz	"257"
	.size	.L.str555, 4

	.type	.L.str556,@object       # @.str556
.L.str556:
	.asciz	"258"
	.size	.L.str556, 4

	.type	.L.str557,@object       # @.str557
.L.str557:
	.asciz	"259"
	.size	.L.str557, 4

	.type	.L.str558,@object       # @.str558
.L.str558:
	.asciz	"260"
	.size	.L.str558, 4

	.type	.L.str559,@object       # @.str559
.L.str559:
	.asciz	".promoted"
	.size	.L.str559, 10

	.type	.L.str560,@object       # @.str560
.L.str560:
	.asciz	"261"
	.size	.L.str560, 4

	.type	.L.str561,@object       # @.str561
.L.str561:
	.asciz	".lr.ph35:2-0"
	.size	.L.str561, 13

	.type	.L.str562,@object       # @.str562
.L.str562:
	.asciz	"262:3"
	.size	.L.str562, 6

	.type	.L.str563,@object       # @.str563
.L.str563:
	.asciz	"indvars.iv127"
	.size	.L.str563, 14

	.type	.L.str564,@object       # @.str564
	.align	16
.L.str564:
	.asciz	"indvars.iv.next128"
	.size	.L.str564, 19

	.type	.L.str565,@object       # @.str565
.L.str565:
	.asciz	"263"
	.size	.L.str565, 4

	.type	.L.str566,@object       # @.str566
.L.str566:
	.asciz	"273"
	.size	.L.str566, 4

	.type	.L.str567,@object       # @.str567
.L.str567:
	.asciz	"264"
	.size	.L.str567, 4

	.type	.L.str568,@object       # @.str568
.L.str568:
	.asciz	"265"
	.size	.L.str568, 4

	.type	.L.str569,@object       # @.str569
.L.str569:
	.asciz	"266"
	.size	.L.str569, 4

	.type	.L.str570,@object       # @.str570
.L.str570:
	.asciz	"267"
	.size	.L.str570, 4

	.type	.L.str571,@object       # @.str571
.L.str571:
	.asciz	"268"
	.size	.L.str571, 4

	.type	.L.str572,@object       # @.str572
.L.str572:
	.asciz	"269"
	.size	.L.str572, 4

	.type	.L.str573,@object       # @.str573
.L.str573:
	.asciz	"270"
	.size	.L.str573, 4

	.type	.L.str574,@object       # @.str574
.L.str574:
	.asciz	"271"
	.size	.L.str574, 4

	.type	.L.str575,@object       # @.str575
.L.str575:
	.asciz	"272"
	.size	.L.str575, 4

	.type	.L.str576,@object       # @.str576
.L.str576:
	.asciz	"lftr.wideiv129"
	.size	.L.str576, 15

	.type	.L.str577,@object       # @.str577
.L.str577:
	.asciz	"exitcond130"
	.size	.L.str577, 12

	.type	.L.str578,@object       # @.str578
.L.str578:
	.asciz	"262:3-0"
	.size	.L.str578, 8

	.type	.L.str579,@object       # @.str579
.L.str579:
	.asciz	"._crit_edge36:2"
	.size	.L.str579, 16

	.type	.L.str580,@object       # @.str580
	.align	16
.L.str580:
	.asciz	"._crit_edge36:2-0"
	.size	.L.str580, 18

	.type	.L.str581,@object       # @.str581
	.align	16
.L.str581:
	.asciz	"._crit_edge36:2-1"
	.size	.L.str581, 18

	.type	.L.str582,@object       # @.str582
.L.str582:
	.asciz	"275"
	.size	.L.str582, 4

	.type	.L.str583,@object       # @.str583
.L.str583:
	.asciz	"276"
	.size	.L.str583, 4

	.type	.L.str584,@object       # @.str584
.L.str584:
	.asciz	"274:2-0"
	.size	.L.str584, 8

	.type	.L.str585,@object       # @.str585
.L.str585:
	.asciz	"lftr.wideiv135"
	.size	.L.str585, 15

	.type	.L.str586,@object       # @.str586
.L.str586:
	.asciz	"exitcond136"
	.size	.L.str586, 12

	.type	.L.str587,@object       # @.str587
.L.str587:
	.asciz	"274:2-1"
	.size	.L.str587, 8

	.type	.L.str588,@object       # @.str588
.L.str588:
	.asciz	"lftr.wideiv139"
	.size	.L.str588, 15

	.type	.L.str589,@object       # @.str589
.L.str589:
	.asciz	"exitcond140"
	.size	.L.str589, 12

	.type	.L.str590,@object       # @.str590
	.align	16
.L.str590:
	.asciz	"._crit_edge40:1-0"
	.size	.L.str590, 18

	.type	.L.str591,@object       # @.str591
.L.str591:
	.asciz	"._crit_edge42:0"
	.size	.L.str591, 16

	.type	.L.str592,@object       # @.str592
.L.str592:
	.asciz	".ph248"
	.size	.L.str592, 7

	.type	.L.str593,@object       # @.str593
.L.str593:
	.asciz	"277"
	.size	.L.str593, 4

	.type	.L.str594,@object       # @.str594
	.align	16
.L.str594:
	.asciz	"._crit_edge42.thread:0-2"
	.size	.L.str594, 25

	.type	.L.str595,@object       # @.str595
.L.str595:
	.asciz	".preheader27:0"
	.size	.L.str595, 15

	.type	.L.str596,@object       # @.str596
.L.str596:
	.asciz	"278"
	.size	.L.str596, 4

	.type	.L.str597,@object       # @.str597
.L.str597:
	.asciz	"279"
	.size	.L.str597, 4

	.type	.L.str598,@object       # @.str598
	.align	16
.L.str598:
	.asciz	"._crit_edge42:0-2"
	.size	.L.str598, 18

	.type	.L.str599,@object       # @.str599
.L.str599:
	.asciz	".lr.ph32:1"
	.size	.L.str599, 11

	.type	.L.str600,@object       # @.str600
.L.str600:
	.asciz	"._crit_edge29:0"
	.size	.L.str600, 16

	.type	.L.str601,@object       # @.str601
.L.str601:
	.asciz	"280"
	.size	.L.str601, 4

	.type	.L.str602,@object       # @.str602
.L.str602:
	.asciz	"281"
	.size	.L.str602, 4

	.type	.L.str603,@object       # @.str603
.L.str603:
	.asciz	"282"
	.size	.L.str603, 4

	.type	.L.str604,@object       # @.str604
	.align	16
.L.str604:
	.asciz	".preheader27:0-0"
	.size	.L.str604, 17

	.type	.L.str605,@object       # @.str605
.L.str605:
	.asciz	"indvars.iv123"
	.size	.L.str605, 14

	.type	.L.str606,@object       # @.str606
	.align	16
.L.str606:
	.asciz	"indvars.iv.next124"
	.size	.L.str606, 19

	.type	.L.str607,@object       # @.str607
.L.str607:
	.asciz	"283"
	.size	.L.str607, 4

	.type	.L.str608,@object       # @.str608
.L.str608:
	.asciz	"284"
	.size	.L.str608, 4

	.type	.L.str609,@object       # @.str609
.L.str609:
	.asciz	"285"
	.size	.L.str609, 4

	.type	.L.str610,@object       # @.str610
.L.str610:
	.asciz	"286"
	.size	.L.str610, 4

	.type	.L.str611,@object       # @.str611
.L.str611:
	.asciz	"287"
	.size	.L.str611, 4

	.type	.L.str612,@object       # @.str612
.L.str612:
	.asciz	"288"
	.size	.L.str612, 4

	.type	.L.str613,@object       # @.str613
.L.str613:
	.asciz	"289"
	.size	.L.str613, 4

	.type	.L.str614,@object       # @.str614
.L.str614:
	.asciz	"290"
	.size	.L.str614, 4

	.type	.L.str615,@object       # @.str615
.L.str615:
	.asciz	".lr.ph32:1-0"
	.size	.L.str615, 13

	.type	.L.str616,@object       # @.str616
.L.str616:
	.asciz	"lftr.wideiv125"
	.size	.L.str616, 15

	.type	.L.str617,@object       # @.str617
.L.str617:
	.asciz	"exitcond126"
	.size	.L.str617, 12

	.type	.L.str618,@object       # @.str618
.L.str618:
	.asciz	".lr.ph32:1-1"
	.size	.L.str618, 13

	.type	.L.str619,@object       # @.str619
.L.str619:
	.asciz	"indvars.iv119"
	.size	.L.str619, 14

	.type	.L.str620,@object       # @.str620
	.align	16
.L.str620:
	.asciz	"indvars.iv.next120"
	.size	.L.str620, 19

	.type	.L.str621,@object       # @.str621
.L.str621:
	.asciz	"291"
	.size	.L.str621, 4

	.type	.L.str622,@object       # @.str622
.L.str622:
	.asciz	"292"
	.size	.L.str622, 4

	.type	.L.str623,@object       # @.str623
.L.str623:
	.asciz	"293"
	.size	.L.str623, 4

	.type	.L.str624,@object       # @.str624
.L.str624:
	.asciz	"294"
	.size	.L.str624, 4

	.type	.L.str625,@object       # @.str625
.L.str625:
	.asciz	"295"
	.size	.L.str625, 4

	.type	.L.str626,@object       # @.str626
.L.str626:
	.asciz	"296:2"
	.size	.L.str626, 6

	.type	.L.str627,@object       # @.str627
.L.str627:
	.asciz	"297"
	.size	.L.str627, 4

	.type	.L.str628,@object       # @.str628
.L.str628:
	.asciz	"298"
	.size	.L.str628, 4

	.type	.L.str629,@object       # @.str629
.L.str629:
	.asciz	"299"
	.size	.L.str629, 4

	.type	.L.str630,@object       # @.str630
.L.str630:
	.asciz	"300"
	.size	.L.str630, 4

	.type	.L.str631,@object       # @.str631
.L.str631:
	.asciz	"301"
	.size	.L.str631, 4

	.type	.L.str632,@object       # @.str632
.L.str632:
	.asciz	"302"
	.size	.L.str632, 4

	.type	.L.str633,@object       # @.str633
.L.str633:
	.asciz	"303"
	.size	.L.str633, 4

	.type	.L.str634,@object       # @.str634
.L.str634:
	.asciz	"304"
	.size	.L.str634, 4

	.type	.L.str635,@object       # @.str635
.L.str635:
	.asciz	"296:2-0"
	.size	.L.str635, 8

	.type	.L.str636,@object       # @.str636
.L.str636:
	.asciz	"296:2-1"
	.size	.L.str636, 8

	.type	.L.str637,@object       # @.str637
.L.str637:
	.asciz	"lftr.wideiv121"
	.size	.L.str637, 15

	.type	.L.str638,@object       # @.str638
.L.str638:
	.asciz	"exitcond122"
	.size	.L.str638, 12

	.type	.L.str639,@object       # @.str639
.L.str639:
	.asciz	"305"
	.size	.L.str639, 4

	.type	.L.str640,@object       # @.str640
.L.str640:
	.asciz	"306"
	.size	.L.str640, 4

	.type	.L.str641,@object       # @.str641
.L.str641:
	.asciz	"307"
	.size	.L.str641, 4

	.type	.L.str642,@object       # @.str642
	.align	16
.L.str642:
	.asciz	"time_eigenvalues"
	.size	.L.str642, 17

	.type	.L.str643,@object       # @.str643
	.align	16
.L.str643:
	.asciz	"._crit_edge29:0-1"
	.size	.L.str643, 18

	.type	.L.str644,@object       # @.str644
.L.str644:
	.asciz	"main"
	.size	.L.str644, 5

	.type	.L.str645,@object       # @.str645
.L.str645:
	.asciz	"malloc"
	.size	.L.str645, 7

	.type	.L.str646,@object       # @.str646
.L.str646:
	.asciz	"0:0-3"
	.size	.L.str646, 6

	.type	.L.str647,@object       # @.str647
.L.str647:
	.asciz	"indvars.iv3"
	.size	.L.str647, 12

	.type	.L.str648,@object       # @.str648
	.align	16
.L.str648:
	.asciz	"indvars.iv.next4"
	.size	.L.str648, 17

	.type	.L.str649,@object       # @.str649
.L.str649:
	.asciz	"15:1"
	.size	.L.str649, 5

	.type	.L.str650,@object       # @.str650
.L.str650:
	.asciz	"6:2"
	.size	.L.str650, 4

	.type	.L.str651,@object       # @.str651
.L.str651:
	.asciz	"cos"
	.size	.L.str651, 4

	.type	.L.str652,@object       # @.str652
.L.str652:
	.asciz	"6:2-0"
	.size	.L.str652, 6

	.type	.L.str653,@object       # @.str653
.L.str653:
	.asciz	"6:2-1"
	.size	.L.str653, 6

	.type	.L.str654,@object       # @.str654
.L.str654:
	.asciz	"6:2-2"
	.size	.L.str654, 6

	.type	.L.str655,@object       # @.str655
.L.str655:
	.asciz	"exitcond5"
	.size	.L.str655, 10

	.type	.L.str656,@object       # @.str656
.L.str656:
	.asciz	"15:1-0"
	.size	.L.str656, 7

	.type	.L.str657,@object       # @.str657
.L.str657:
	.asciz	"16:0"
	.size	.L.str657, 5

	.type	.L.str658,@object       # @.str658
.L.str658:
	.asciz	"kiss_fft_alloc"
	.size	.L.str658, 15

	.type	.L.str659,@object       # @.str659
.L.str659:
	.asciz	"16:0-1"
	.size	.L.str659, 7

	.type	.L.str660,@object       # @.str660
.L.str660:
	.asciz	"16:0-3"
	.size	.L.str660, 7

	.type	.L.str661,@object       # @.str661
	.align	16
.L.str661:
	.asciz	"process_data/fft_loop 38\nprocess_data/fft_loop_1 40\nprocess_data/fft_loop_2 48\nprocess_data/fft_mean_loop_1 73\nprocess_data/fft_mean_loop_2 76\nprocess_data/fft_scale_loop_1 96\nprocess_data/fft_scale_loop_2 98\nprocess_data/fft_stddev_loop_1 83\nprocess_data/fft_stddev_loop_2 87\nprocess_data/freq_xcorr_loop_1 109\nprocess_data/freq_xcorr_loop_2 113\nprocess_data/freq_xcorr_loop_3 117\nprocess_data/freq_xcorr_loop_4 129\nprocess_data/freq_xcorr_loop_5 133\nprocess_data/freq_xcorr_loop_6 135\nprocess_data/mag_log_loop_1 61\nprocess_data/mag_log_loop_2 63\nprocess_data/time_mean_loop_1 155\nprocess_data/time_mean_loop_2 158\nprocess_data/time_scale_loop_1 178\nprocess_data/time_scale_loop_2 180\nprocess_data/time_stddev_loop_1 165\nprocess_data/time_stddev_loop_2 168\nprocess_data/time_xcorr_loop_1 189\nprocess_data/time_xcorr_loop_2 192\nprocess_data/time_xcorr_loop_3 195\nprocess_data/time_xcorr_loop_4 207\nprocess_data/time_xcorr_loop_5 211\nprocess_data/time_xcorr_loop_6 213\nkf_bfly2/kf_bfly2_loop 32\nkf_bfly3/kf_bfly3_loop 108\nkf_bfly4/kf_bfly4_loop 60\nkf_bfly5/kf_bfly5_loop 161\nkf_bfly_generic/kf_bfly_loop 219\nkf_bfly_generic/kf_bfly_loop_1 221\nkf_bfly_generic/kf_bfly_loop_2 228\nkf_bfly_generic/kf_bfly_loop_3 231\nkf_factor/kf_factor_1 324\nkf_factor/kf_factor_2 325\nkf_work/kf_work_1 284\nkf_work/kf_work_2 289\npythag/pythag_loop 84\ntqlrat/tqlrat_1 459\ntqlrat/tqlrat_2 468\ntqlrat/tqlrat_3 482\ntqlrat/tqlrat_4 492\ntqlrat/tqlrat_5 511\ntqlrat/tqlrat_6 529\ntqlrat/tqlrat_7 572\ntrbak1/trbak1_1 671\ntrbak1/trbak1_2 677\ntrbak1/trbak1_3 680\ntrbak1/trbak1_4 685\ntred1/tred1_1 778\ntred1/tred1_10 847\ntred1/tred1_11 858\ntred1/tred1_12 868\ntred1/tred1_13 875\ntred1/tred1_14 879\ntred1/tred1_15 886\ntred1/tred1_2 783\ntred1/tred1_3 788\ntred1/tred1_4 796\ntred1/tred1_5 803\ntred1/tred1_6 815\ntred1/tred1_7 820\ntred1/tred1_8 837\ntred1/tred1_9 842\n"
	.size	.L.str661, 1828

	.type	.L.str662,@object       # @.str662
.L.str662:
	.asciz	"kiss_fft_alloc"
	.size	.L.str662, 15

	.type	.L.str1663,@object      # @.str1663
.L.str1663:
	.asciz	"0:0"
	.size	.L.str1663, 4

	.type	.L.str2664,@object      # @.str2664
.L.str2664:
	.asciz	"1"
	.size	.L.str2664, 2

	.type	.L.str3665,@object      # @.str3665
.L.str3665:
	.zero	1
	.size	.L.str3665, 1

	.type	.L.str4666,@object      # @.str4666
.L.str4666:
	.asciz	"phi"
	.size	.L.str4666, 4

	.type	.L.str5667,@object      # @.str5667
.L.str5667:
	.asciz	"nfft"
	.size	.L.str5667, 5

	.type	.L.str6668,@object      # @.str6668
.L.str6668:
	.asciz	"2"
	.size	.L.str6668, 2

	.type	.L.str7669,@object      # @.str7669
.L.str7669:
	.asciz	"3"
	.size	.L.str7669, 2

	.type	.L.str8670,@object      # @.str8670
.L.str8670:
	.asciz	"4"
	.size	.L.str8670, 2

	.type	.L.str9671,@object      # @.str9671
.L.str9671:
	.asciz	"5"
	.size	.L.str9671, 2

	.type	.L.str10672,@object     # @.str10672
.L.str10672:
	.asciz	"lenmem"
	.size	.L.str10672, 7

	.type	.L.str11673,@object     # @.str11673
.L.str11673:
	.asciz	"0:0-6"
	.size	.L.str11673, 6

	.type	.L.str12674,@object     # @.str12674
.L.str12674:
	.asciz	"6:0"
	.size	.L.str12674, 4

	.type	.L.str13675,@object     # @.str13675
.L.str13675:
	.asciz	"9:0"
	.size	.L.str13675, 4

	.type	.L.str14676,@object     # @.str14676
.L.str14676:
	.asciz	"7"
	.size	.L.str14676, 2

	.type	.L.str15677,@object     # @.str15677
.L.str15677:
	.asciz	"malloc"
	.size	.L.str15677, 7

	.type	.L.str16678,@object     # @.str16678
.L.str16678:
	.asciz	"8"
	.size	.L.str16678, 2

	.type	.L.str17679,@object     # @.str17679
.L.str17679:
	.asciz	"6:0-1"
	.size	.L.str17679, 6

	.type	.L.str18680,@object     # @.str18680
.L.str18680:
	.asciz	"17:0"
	.size	.L.str18680, 5

	.type	.L.str19681,@object     # @.str19681
.L.str19681:
	.asciz	"10"
	.size	.L.str19681, 3

	.type	.L.str20682,@object     # @.str20682
.L.str20682:
	.asciz	"mem"
	.size	.L.str20682, 4

	.type	.L.str21683,@object     # @.str21683
.L.str21683:
	.asciz	"9:0-0"
	.size	.L.str21683, 6

	.type	.L.str22684,@object     # @.str22684
.L.str22684:
	.asciz	"16:0"
	.size	.L.str22684, 5

	.type	.L.str23685,@object     # @.str23685
.L.str23685:
	.asciz	"11:0"
	.size	.L.str23685, 5

	.type	.L.str24686,@object     # @.str24686
.L.str24686:
	.asciz	"12"
	.size	.L.str24686, 3

	.type	.L.str25687,@object     # @.str25687
.L.str25687:
	.asciz	"13"
	.size	.L.str25687, 3

	.type	.L.str26688,@object     # @.str26688
.L.str26688:
	.asciz	"11:0-0"
	.size	.L.str26688, 7

	.type	.L.str27689,@object     # @.str27689
.L.str27689:
	.asciz	"14:0"
	.size	.L.str27689, 5

	.type	.L.str28690,@object     # @.str28690
.L.str28690:
	.asciz	"15"
	.size	.L.str28690, 3

	.type	.L.str29691,@object     # @.str29691
.L.str29691:
	.asciz	"14:0-1"
	.size	.L.str29691, 7

	.type	.L.str30692,@object     # @.str30692
.L.str30692:
	.asciz	"st.0"
	.size	.L.str30692, 5

	.type	.L.str31693,@object     # @.str31693
.L.str31693:
	.asciz	"16:0-0"
	.size	.L.str31693, 7

	.type	.L.str32694,@object     # @.str32694
.L.str32694:
	.asciz	"16:0-1"
	.size	.L.str32694, 7

	.type	.L.str33695,@object     # @.str33695
.L.str33695:
	.asciz	"st.1"
	.size	.L.str33695, 5

	.type	.L.str34696,@object     # @.str34696
.L.str34696:
	.asciz	"18"
	.size	.L.str34696, 3

	.type	.L.str35697,@object     # @.str35697
.L.str35697:
	.asciz	"17:0-0"
	.size	.L.str35697, 7

	.type	.L.str36698,@object     # @.str36698
.L.str36698:
	.asciz	"39:0"
	.size	.L.str36698, 5

	.type	.L.str37699,@object     # @.str37699
.L.str37699:
	.asciz	"19:0"
	.size	.L.str37699, 5

	.type	.L.str38700,@object     # @.str38700
.L.str38700:
	.asciz	"20"
	.size	.L.str38700, 3

	.type	.L.str39701,@object     # @.str39701
.L.str39701:
	.asciz	"19:0-0"
	.size	.L.str39701, 7

	.type	.L.str40702,@object     # @.str40702
.L.str40702:
	.asciz	"21"
	.size	.L.str40702, 3

	.type	.L.str41703,@object     # @.str41703
.L.str41703:
	.asciz	"19:0-1"
	.size	.L.str41703, 7

	.type	.L.str42704,@object     # @.str42704
.L.str42704:
	.asciz	"inverse_fft"
	.size	.L.str42704, 12

	.type	.L.str43705,@object     # @.str43705
.L.str43705:
	.asciz	"22"
	.size	.L.str43705, 3

	.type	.L.str44706,@object     # @.str44706
.L.str44706:
	.asciz	"19:0-3"
	.size	.L.str44706, 7

	.type	.L.str45707,@object     # @.str45707
.L.str45707:
	.asciz	".lr.ph:0"
	.size	.L.str45707, 9

	.type	.L.str46708,@object     # @.str46708
.L.str46708:
	.asciz	"._crit_edge:0"
	.size	.L.str46708, 14

	.type	.L.str47709,@object     # @.str47709
.L.str47709:
	.asciz	"23"
	.size	.L.str47709, 3

	.type	.L.str48710,@object     # @.str48710
.L.str48710:
	.asciz	".lr.ph:0-0"
	.size	.L.str48710, 11

	.type	.L.str49711,@object     # @.str49711
.L.str49711:
	.asciz	"24:1"
	.size	.L.str49711, 5

	.type	.L.str50712,@object     # @.str50712
.L.str50712:
	.asciz	"indvars.iv"
	.size	.L.str50712, 11

	.type	.L.str51713,@object     # @.str51713
.L.str51713:
	.asciz	"indvars.iv.next"
	.size	.L.str51713, 16

	.type	.L.str52714,@object     # @.str52714
.L.str52714:
	.asciz	"33:1"
	.size	.L.str52714, 5

	.type	.L.str53715,@object     # @.str53715
.L.str53715:
	.asciz	"25"
	.size	.L.str53715, 3

	.type	.L.str54716,@object     # @.str54716
.L.str54716:
	.asciz	"26"
	.size	.L.str54716, 3

	.type	.L.str55717,@object     # @.str55717
.L.str55717:
	.asciz	"27"
	.size	.L.str55717, 3

	.type	.L.str56718,@object     # @.str56718
.L.str56718:
	.asciz	"28"
	.size	.L.str56718, 3

	.type	.L.str57719,@object     # @.str57719
.L.str57719:
	.asciz	"29"
	.size	.L.str57719, 3

	.type	.L.str58720,@object     # @.str58720
.L.str58720:
	.asciz	"30"
	.size	.L.str58720, 3

	.type	.L.str59721,@object     # @.str59721
.L.str59721:
	.asciz	"24:1-2"
	.size	.L.str59721, 7

	.type	.L.str60722,@object     # @.str60722
.L.str60722:
	.asciz	"31:1"
	.size	.L.str60722, 5

	.type	.L.str61723,@object     # @.str61723
.L.str61723:
	.asciz	"32"
	.size	.L.str61723, 3

	.type	.L.str62724,@object     # @.str62724
.L.str62724:
	.asciz	"31:1-1"
	.size	.L.str62724, 7

	.type	.L.str63725,@object     # @.str63725
.L.str63725:
	.asciz	"phase.0"
	.size	.L.str63725, 8

	.type	.L.str64726,@object     # @.str64726
.L.str64726:
	.asciz	"34"
	.size	.L.str64726, 3

	.type	.L.str65727,@object     # @.str65727
.L.str65727:
	.asciz	"cos"
	.size	.L.str65727, 4

	.type	.L.str66728,@object     # @.str66728
.L.str66728:
	.asciz	"35"
	.size	.L.str66728, 3

	.type	.L.str67729,@object     # @.str67729
.L.str67729:
	.asciz	"33:1-0"
	.size	.L.str67729, 7

	.type	.L.str68730,@object     # @.str68730
.L.str68730:
	.asciz	"36"
	.size	.L.str68730, 3

	.type	.L.str69731,@object     # @.str69731
.L.str69731:
	.asciz	"sin"
	.size	.L.str69731, 4

	.type	.L.str70732,@object     # @.str70732
.L.str70732:
	.asciz	"37"
	.size	.L.str70732, 3

	.type	.L.str71733,@object     # @.str71733
.L.str71733:
	.asciz	"33:1-1"
	.size	.L.str71733, 7

	.type	.L.str72734,@object     # @.str72734
.L.str72734:
	.asciz	"lftr.wideiv"
	.size	.L.str72734, 12

	.type	.L.str73735,@object     # @.str73735
.L.str73735:
	.asciz	"exitcond"
	.size	.L.str73735, 9

	.type	.L.str74736,@object     # @.str74736
.L.str74736:
	.asciz	"33:1-2"
	.size	.L.str74736, 7

	.type	.L.str75737,@object     # @.str75737
.L.str75737:
	.asciz	"38"
	.size	.L.str75737, 3

	.type	.L.str76738,@object     # @.str76738
.L.str76738:
	.asciz	"._crit_edge:0-0"
	.size	.L.str76738, 16

	.type	.L.str77739,@object     # @.str77739
.L.str77739:
	.asciz	"kf_factor"
	.size	.L.str77739, 10

	.type	.L.str78740,@object     # @.str78740
.L.str78740:
	.asciz	"._crit_edge:0-1"
	.size	.L.str78740, 16

	.type	.L.str79741,@object     # @.str79741
.L.str79741:
	.asciz	"39:0-0"
	.size	.L.str79741, 7

	.type	.L.str80742,@object     # @.str80742
.L.str80742:
	.asciz	"n"
	.size	.L.str80742, 2

	.type	.L.str81743,@object     # @.str81743
.L.str81743:
	.asciz	"sqrt"
	.size	.L.str81743, 5

	.type	.L.str82744,@object     # @.str82744
.L.str82744:
	.asciz	"floor"
	.size	.L.str82744, 6

	.type	.L.str83745,@object     # @.str83745
.L.str83745:
	.asciz	"0:0-4"
	.size	.L.str83745, 6

	.type	.L.str84746,@object     # @.str84746
.L.str84746:
	.asciz	".outer:1"
	.size	.L.str84746, 9

	.type	.L.str85747,@object     # @.str85747
.L.str85747:
	.asciz	".01.ph"
	.size	.L.str85747, 7

	.type	.L.str86748,@object     # @.str86748
.L.str86748:
	.asciz	"._crit_edge:1"
	.size	.L.str86748, 14

	.type	.L.str87749,@object     # @.str87749
.L.str87749:
	.asciz	"facbuf"
	.size	.L.str87749, 7

	.type	.L.str88750,@object     # @.str88750
.L.str88750:
	.asciz	"p.0.ph"
	.size	.L.str88750, 7

	.type	.L.str89751,@object     # @.str89751
.L.str89751:
	.asciz	"p.0.lcssa"
	.size	.L.str89751, 10

	.type	.L.str90752,@object     # @.str90752
.L.str90752:
	.asciz	".0.ph"
	.size	.L.str90752, 6

	.type	.L.str91753,@object     # @.str91753
.L.str91753:
	.asciz	".outer:1-0"
	.size	.L.str91753, 11

	.type	.L.str92754,@object     # @.str92754
.L.str92754:
	.asciz	".lr.ph:2"
	.size	.L.str92754, 9

	.type	.L.str93755,@object     # @.str93755
.L.str93755:
	.asciz	"p.02"
	.size	.L.str93755, 5

	.type	.L.str94756,@object     # @.str94756
.L.str94756:
	.asciz	"p.0.be"
	.size	.L.str94756, 7

	.type	.L.str95757,@object     # @.str95757
.L.str95757:
	.asciz	".backedge:2"
	.size	.L.str95757, 12

	.type	.L.str96758,@object     # @.str96758
.L.str96758:
	.asciz	".lr.ph:2-0"
	.size	.L.str96758, 11

	.type	.L.str97759,@object     # @.str97759
.L.str97759:
	.asciz	"6:2"
	.size	.L.str97759, 4

	.type	.L.str98760,@object     # @.str98760
.L.str98760:
	.asciz	"7:2"
	.size	.L.str98760, 4

	.type	.L.str99761,@object     # @.str99761
.L.str99761:
	.asciz	"6:2-1"
	.size	.L.str99761, 6

	.type	.L.str100762,@object    # @.str100762
.L.str100762:
	.asciz	"7:2-1"
	.size	.L.str100762, 6

	.type	.L.str101763,@object    # @.str101763
.L.str101763:
	.asciz	"p.1"
	.size	.L.str101763, 4

	.type	.L.str102764,@object    # @.str102764
.L.str102764:
	.asciz	"9"
	.size	.L.str102764, 2

	.type	.L.str103765,@object    # @.str103765
.L.str103765:
	.asciz	"11"
	.size	.L.str103765, 3

	.type	.L.str104766,@object    # @.str104766
.L.str104766:
	.asciz	".backedge:2-1"
	.size	.L.str104766, 14

	.type	.L.str105767,@object    # @.str105767
.L.str105767:
	.asciz	"14"
	.size	.L.str105767, 3

	.type	.L.str106768,@object    # @.str106768
.L.str106768:
	.asciz	"._crit_edge:1-2"
	.size	.L.str106768, 16

	.type	.L.str107769,@object    # @.str107769
.L.str107769:
	.asciz	"._crit_edge:1-4"
	.size	.L.str107769, 16

	.type	.L.str108770,@object    # @.str108770
.L.str108770:
	.asciz	"16"
	.size	.L.str108770, 3

	.type	.L.str109771,@object    # @.str109771
.L.str109771:
	.asciz	"._crit_edge:1-5"
	.size	.L.str109771, 16

	.type	.L.str110772,@object    # @.str110772
.L.str110772:
	.asciz	"kiss_fft_stride"
	.size	.L.str110772, 16

	.type	.L.str111773,@object    # @.str111773
.L.str111773:
	.asciz	"0:0-2"
	.size	.L.str111773, 6

	.type	.L.str112774,@object    # @.str112774
.L.str112774:
	.asciz	"fin"
	.size	.L.str112774, 4

	.type	.L.str113775,@object    # @.str113775
.L.str113775:
	.asciz	"0:0-5"
	.size	.L.str113775, 6

	.type	.L.str114776,@object    # @.str114776
.L.str114776:
	.asciz	"fout"
	.size	.L.str114776, 5

	.type	.L.str115777,@object    # @.str115777
.L.str115777:
	.asciz	"st"
	.size	.L.str115777, 3

	.type	.L.str116778,@object    # @.str116778
.L.str116778:
	.asciz	"0:0-8"
	.size	.L.str116778, 6

	.type	.L.str117779,@object    # @.str117779
.L.str117779:
	.asciz	"kf_work"
	.size	.L.str117779, 8

	.type	.L.str118780,@object    # @.str118780
.L.str118780:
	.asciz	"in_stride"
	.size	.L.str118780, 10

	.type	.L.str119781,@object    # @.str119781
.L.str119781:
	.asciz	"0:0-9"
	.size	.L.str119781, 6

	.type	.L.str120782,@object    # @.str120782
.L.str120782:
	.asciz	"Fout"
	.size	.L.str120782, 5

	.type	.L.str121783,@object    # @.str121783
.L.str121783:
	.asciz	"f"
	.size	.L.str121783, 2

	.type	.L.str122784,@object    # @.str122784
.L.str122784:
	.asciz	"factors"
	.size	.L.str122784, 8

	.type	.L.str123785,@object    # @.str123785
.L.str123785:
	.asciz	"6"
	.size	.L.str123785, 2

	.type	.L.str124786,@object    # @.str124786
.L.str124786:
	.asciz	"0:0-13"
	.size	.L.str124786, 7

	.type	.L.str125787,@object    # @.str125787
.L.str125787:
	.asciz	".preheader:0"
	.size	.L.str125787, 13

	.type	.L.str126788,@object    # @.str126788
.L.str126788:
	.asciz	".preheader1:0"
	.size	.L.str126788, 14

	.type	.L.str127789,@object    # @.str127789
.L.str127789:
	.asciz	"fstride"
	.size	.L.str127789, 8

	.type	.L.str128790,@object    # @.str128790
.L.str128790:
	.asciz	".preheader1:0-0"
	.size	.L.str128790, 16

	.type	.L.str129791,@object    # @.str129791
.L.str129791:
	.asciz	"28:1"
	.size	.L.str129791, 5

	.type	.L.str130792,@object    # @.str130792
.L.str130792:
	.asciz	"17"
	.size	.L.str130792, 3

	.type	.L.str131793,@object    # @.str131793
.L.str131793:
	.asciz	".preheader:0-0"
	.size	.L.str131793, 15

	.type	.L.str132794,@object    # @.str132794
.L.str132794:
	.asciz	"18:1"
	.size	.L.str132794, 5

	.type	.L.str133795,@object    # @.str133795
.L.str133795:
	.asciz	"19"
	.size	.L.str133795, 3

	.type	.L.str134796,@object    # @.str134796
.L.str134796:
	.asciz	"18:1-0"
	.size	.L.str134796, 7

	.type	.L.str135797,@object    # @.str135797
	.align	16
.L.str135797:
	.asciz	"llvm.memcpy.p0i8.p0i8.i64"
	.size	.L.str135797, 26

	.type	.L.str136798,@object    # @.str136798
.L.str136798:
	.asciz	"24"
	.size	.L.str136798, 3

	.type	.L.str137799,@object    # @.str137799
.L.str137799:
	.asciz	"18:1-1"
	.size	.L.str137799, 7

	.type	.L.str138800,@object    # @.str138800
.L.str138800:
	.asciz	"18:1-2"
	.size	.L.str138800, 7

	.type	.L.str139801,@object    # @.str139801
.L.str139801:
	.asciz	"18:1-3"
	.size	.L.str139801, 7

	.type	.L.str140802,@object    # @.str140802
.L.str140802:
	.asciz	".loopexit:0"
	.size	.L.str140802, 12

	.type	.L.str141803,@object    # @.str141803
.L.str141803:
	.asciz	"28:1-0"
	.size	.L.str141803, 7

	.type	.L.str142804,@object    # @.str142804
.L.str142804:
	.asciz	"28:1-1"
	.size	.L.str142804, 7

	.type	.L.str143805,@object    # @.str143805
.L.str143805:
	.asciz	"31"
	.size	.L.str143805, 3

	.type	.L.str144806,@object    # @.str144806
.L.str144806:
	.asciz	"28:1-2"
	.size	.L.str144806, 7

	.type	.L.str145807,@object    # @.str145807
.L.str145807:
	.asciz	"33"
	.size	.L.str145807, 3

	.type	.L.str146808,@object    # @.str146808
.L.str146808:
	.asciz	"28:1-3"
	.size	.L.str146808, 7

	.type	.L.str147809,@object    # @.str147809
.L.str147809:
	.asciz	".loopexit:0-0"
	.size	.L.str147809, 14

	.type	.L.str148810,@object    # @.str148810
.L.str148810:
	.asciz	".loopexit:0-1"
	.size	.L.str148810, 14

	.type	.L.str149811,@object    # @.str149811
.L.str149811:
	.asciz	".loopexit:0-2"
	.size	.L.str149811, 14

	.type	.L.str150812,@object    # @.str150812
.L.str150812:
	.asciz	"42:0"
	.size	.L.str150812, 5

	.type	.L.str151813,@object    # @.str151813
.L.str151813:
	.asciz	"36:0"
	.size	.L.str151813, 5

	.type	.L.str152814,@object    # @.str152814
.L.str152814:
	.asciz	"34:0"
	.size	.L.str152814, 5

	.type	.L.str153815,@object    # @.str153815
.L.str153815:
	.asciz	"44:0"
	.size	.L.str153815, 5

	.type	.L.str154816,@object    # @.str154816
.L.str154816:
	.asciz	"34:0-0"
	.size	.L.str154816, 7

	.type	.L.str155817,@object    # @.str155817
.L.str155817:
	.asciz	"kf_bfly2"
	.size	.L.str155817, 9

	.type	.L.str156818,@object    # @.str156818
.L.str156818:
	.asciz	"34:0-1"
	.size	.L.str156818, 7

	.type	.L.str157819,@object    # @.str157819
.L.str157819:
	.asciz	"46:0"
	.size	.L.str157819, 5

	.type	.L.str158820,@object    # @.str158820
.L.str158820:
	.asciz	"36:0-0"
	.size	.L.str158820, 7

	.type	.L.str159821,@object    # @.str159821
.L.str159821:
	.asciz	"kf_bfly3"
	.size	.L.str159821, 9

	.type	.L.str160822,@object    # @.str160822
.L.str160822:
	.asciz	"36:0-1"
	.size	.L.str160822, 7

	.type	.L.str161823,@object    # @.str161823
.L.str161823:
	.asciz	"40"
	.size	.L.str161823, 3

	.type	.L.str162824,@object    # @.str162824
.L.str162824:
	.asciz	"41"
	.size	.L.str162824, 3

	.type	.L.str163825,@object    # @.str163825
.L.str163825:
	.asciz	"kf_bfly4"
	.size	.L.str163825, 9

	.type	.L.str164826,@object    # @.str164826
.L.str164826:
	.asciz	"39:0-1"
	.size	.L.str164826, 7

	.type	.L.str165827,@object    # @.str165827
.L.str165827:
	.asciz	"43"
	.size	.L.str165827, 3

	.type	.L.str166828,@object    # @.str166828
.L.str166828:
	.asciz	"42:0-0"
	.size	.L.str166828, 7

	.type	.L.str167829,@object    # @.str167829
.L.str167829:
	.asciz	"kf_bfly5"
	.size	.L.str167829, 9

	.type	.L.str168830,@object    # @.str168830
.L.str168830:
	.asciz	"42:0-1"
	.size	.L.str168830, 7

	.type	.L.str169831,@object    # @.str169831
.L.str169831:
	.asciz	"45"
	.size	.L.str169831, 3

	.type	.L.str170832,@object    # @.str170832
.L.str170832:
	.asciz	"44:0-0"
	.size	.L.str170832, 7

	.type	.L.str171833,@object    # @.str171833
.L.str171833:
	.asciz	"kf_bfly_generic"
	.size	.L.str171833, 16

	.type	.L.str172834,@object    # @.str172834
.L.str172834:
	.asciz	"44:0-1"
	.size	.L.str172834, 7

	.type	.L.str173835,@object    # @.str173835
.L.str173835:
	.asciz	"46:0-0"
	.size	.L.str173835, 7

	.type	.L.str174836,@object    # @.str174836
.L.str174836:
	.asciz	"kiss_fft"
	.size	.L.str174836, 9

	.type	.L.str175837,@object    # @.str175837
.L.str175837:
	.asciz	"0:0-3"
	.size	.L.str175837, 6

	.type	.L.str176838,@object    # @.str176838
.L.str176838:
	.asciz	"cfg"
	.size	.L.str176838, 4

	.type	.L.str177839,@object    # @.str177839
	.align	16
.L.str177839:
	.asciz	"kiss_fft_cleanup"
	.size	.L.str177839, 17

	.type	.L.str178840,@object    # @.str178840
.L.str178840:
	.asciz	"0:0-0"
	.size	.L.str178840, 6

	.type	.L.str179841,@object    # @.str179841
	.align	16
.L.str179841:
	.asciz	"kiss_fft_next_fast_size"
	.size	.L.str179841, 24

	.type	.L.str180842,@object    # @.str180842
.L.str180842:
	.asciz	"0:0-1"
	.size	.L.str180842, 6

	.type	.L.str181843,@object    # @.str181843
.L.str181843:
	.asciz	"1:1"
	.size	.L.str181843, 4

	.type	.L.str182844,@object    # @.str182844
.L.str182844:
	.asciz	".0"
	.size	.L.str182844, 3

	.type	.L.str183845,@object    # @.str183845
.L.str183845:
	.asciz	"1:1-1"
	.size	.L.str183845, 6

	.type	.L.str184846,@object    # @.str184846
.L.str184846:
	.asciz	".loopexit:1"
	.size	.L.str184846, 12

	.type	.L.str185847,@object    # @.str185847
.L.str185847:
	.asciz	"m.01"
	.size	.L.str185847, 5

	.type	.L.str186848,@object    # @.str186848
.L.str186848:
	.asciz	".lr.ph:2-1"
	.size	.L.str186848, 11

	.type	.L.str187849,@object    # @.str187849
.L.str187849:
	.asciz	"m.0.lcssa"
	.size	.L.str187849, 10

	.type	.L.str188850,@object    # @.str188850
.L.str188850:
	.asciz	".loopexit:1-0"
	.size	.L.str188850, 14

	.type	.L.str189851,@object    # @.str189851
.L.str189851:
	.asciz	".lr.ph4:2"
	.size	.L.str189851, 10

	.type	.L.str190852,@object    # @.str190852
.L.str190852:
	.asciz	".loopexit2:1"
	.size	.L.str190852, 13

	.type	.L.str191853,@object    # @.str191853
.L.str191853:
	.asciz	"m.13"
	.size	.L.str191853, 5

	.type	.L.str192854,@object    # @.str192854
.L.str192854:
	.asciz	".lr.ph4:2-1"
	.size	.L.str192854, 12

	.type	.L.str193855,@object    # @.str193855
.L.str193855:
	.asciz	"m.1.lcssa"
	.size	.L.str193855, 10

	.type	.L.str194856,@object    # @.str194856
.L.str194856:
	.asciz	".loopexit2:1-0"
	.size	.L.str194856, 15

	.type	.L.str195857,@object    # @.str195857
.L.str195857:
	.asciz	".lr.ph7:2"
	.size	.L.str195857, 10

	.type	.L.str196858,@object    # @.str196858
.L.str196858:
	.asciz	"m.26"
	.size	.L.str196858, 5

	.type	.L.str197859,@object    # @.str197859
.L.str197859:
	.asciz	".lr.ph7:2-1"
	.size	.L.str197859, 12

	.type	.L.str198860,@object    # @.str198860
.L.str198860:
	.asciz	"m.2.lcssa"
	.size	.L.str198860, 10

	.type	.L.str199861,@object    # @.str199861
.L.str199861:
	.asciz	"._crit_edge:1-1"
	.size	.L.str199861, 16

	.type	.L.str200862,@object    # @.str200862
.L.str200862:
	.asciz	"m"
	.size	.L.str200862, 2

	.type	.L.str201863,@object    # @.str201863
.L.str201863:
	.asciz	"0:0-7"
	.size	.L.str201863, 6

	.type	.L.str202864,@object    # @.str202864
.L.str202864:
	.asciz	"4:1"
	.size	.L.str202864, 4

	.type	.L.str203865,@object    # @.str203865
.L.str203865:
	.asciz	"Fout2.0"
	.size	.L.str203865, 8

	.type	.L.str204866,@object    # @.str204866
.L.str204866:
	.asciz	"tw1.0"
	.size	.L.str204866, 6

	.type	.L.str205867,@object    # @.str205867
.L.str205867:
	.asciz	".01"
	.size	.L.str205867, 4

	.type	.L.str206868,@object    # @.str206868
.L.str206868:
	.asciz	"4:1-1"
	.size	.L.str206868, 6

	.type	.L.str207869,@object    # @.str207869
.L.str207869:
	.asciz	"4:1-2"
	.size	.L.str207869, 6

	.type	.L.str208870,@object    # @.str208870
.L.str208870:
	.asciz	"4:1-3"
	.size	.L.str208870, 6

	.type	.L.str209871,@object    # @.str209871
.L.str209871:
	.asciz	"4:1-4"
	.size	.L.str209871, 6

	.type	.L.str210872,@object    # @.str210872
.L.str210872:
	.asciz	"4:1-8"
	.size	.L.str210872, 6

	.type	.L.str211873,@object    # @.str211873
.L.str211873:
	.asciz	"0:0-10"
	.size	.L.str211873, 7

	.type	.L.str212874,@object    # @.str212874
.L.str212874:
	.asciz	"7:1"
	.size	.L.str212874, 4

	.type	.L.str213875,@object    # @.str213875
.L.str213875:
	.asciz	"tw2.0"
	.size	.L.str213875, 6

	.type	.L.str214876,@object    # @.str214876
.L.str214876:
	.asciz	"k.0"
	.size	.L.str214876, 4

	.type	.L.str215877,@object    # @.str215877
.L.str215877:
	.asciz	"65"
	.size	.L.str215877, 3

	.type	.L.str216878,@object    # @.str216878
.L.str216878:
	.asciz	"64"
	.size	.L.str216878, 3

	.type	.L.str217879,@object    # @.str217879
.L.str217879:
	.asciz	"39"
	.size	.L.str217879, 3

	.type	.L.str218880,@object    # @.str218880
.L.str218880:
	.asciz	"42"
	.size	.L.str218880, 3

	.type	.L.str219881,@object    # @.str219881
.L.str219881:
	.asciz	"44"
	.size	.L.str219881, 3

	.type	.L.str220882,@object    # @.str220882
.L.str220882:
	.asciz	"7:1-2"
	.size	.L.str220882, 6

	.type	.L.str221883,@object    # @.str221883
.L.str221883:
	.asciz	"46"
	.size	.L.str221883, 3

	.type	.L.str222884,@object    # @.str222884
.L.str222884:
	.asciz	"47"
	.size	.L.str222884, 3

	.type	.L.str223885,@object    # @.str223885
.L.str223885:
	.asciz	"48"
	.size	.L.str223885, 3

	.type	.L.str224886,@object    # @.str224886
.L.str224886:
	.asciz	"49"
	.size	.L.str224886, 3

	.type	.L.str225887,@object    # @.str225887
.L.str225887:
	.asciz	"7:1-3"
	.size	.L.str225887, 6

	.type	.L.str226888,@object    # @.str226888
.L.str226888:
	.asciz	"50"
	.size	.L.str226888, 3

	.type	.L.str227889,@object    # @.str227889
.L.str227889:
	.asciz	"51"
	.size	.L.str227889, 3

	.type	.L.str228890,@object    # @.str228890
.L.str228890:
	.asciz	"52"
	.size	.L.str228890, 3

	.type	.L.str229891,@object    # @.str229891
.L.str229891:
	.asciz	"53"
	.size	.L.str229891, 3

	.type	.L.str230892,@object    # @.str230892
.L.str230892:
	.asciz	"7:1-4"
	.size	.L.str230892, 6

	.type	.L.str231893,@object    # @.str231893
.L.str231893:
	.asciz	"54"
	.size	.L.str231893, 3

	.type	.L.str232894,@object    # @.str232894
.L.str232894:
	.asciz	"55"
	.size	.L.str232894, 3

	.type	.L.str233895,@object    # @.str233895
.L.str233895:
	.asciz	"7:1-5"
	.size	.L.str233895, 6

	.type	.L.str234896,@object    # @.str234896
.L.str234896:
	.asciz	"56"
	.size	.L.str234896, 3

	.type	.L.str235897,@object    # @.str235897
.L.str235897:
	.asciz	"57"
	.size	.L.str235897, 3

	.type	.L.str236898,@object    # @.str236898
.L.str236898:
	.asciz	"7:1-6"
	.size	.L.str236898, 6

	.type	.L.str237899,@object    # @.str237899
.L.str237899:
	.asciz	"58"
	.size	.L.str237899, 3

	.type	.L.str238900,@object    # @.str238900
.L.str238900:
	.asciz	"59"
	.size	.L.str238900, 3

	.type	.L.str239901,@object    # @.str239901
.L.str239901:
	.asciz	"7:1-7"
	.size	.L.str239901, 6

	.type	.L.str240902,@object    # @.str240902
.L.str240902:
	.asciz	"60"
	.size	.L.str240902, 3

	.type	.L.str241903,@object    # @.str241903
.L.str241903:
	.asciz	"61"
	.size	.L.str241903, 3

	.type	.L.str242904,@object    # @.str242904
.L.str242904:
	.asciz	"7:1-8"
	.size	.L.str242904, 6

	.type	.L.str243905,@object    # @.str243905
.L.str243905:
	.asciz	"62"
	.size	.L.str243905, 3

	.type	.L.str244906,@object    # @.str244906
.L.str244906:
	.asciz	"63"
	.size	.L.str244906, 3

	.type	.L.str245907,@object    # @.str245907
.L.str245907:
	.asciz	"7:1-9"
	.size	.L.str245907, 6

	.type	.L.str246908,@object    # @.str246908
.L.str246908:
	.asciz	"66"
	.size	.L.str246908, 3

	.type	.L.str247909,@object    # @.str247909
.L.str247909:
	.asciz	"7:1-12"
	.size	.L.str247909, 7

	.type	.L.str248910,@object    # @.str248910
.L.str248910:
	.asciz	"67:0"
	.size	.L.str248910, 5

	.type	.L.str249911,@object    # @.str249911
.L.str249911:
	.asciz	"67:0-0"
	.size	.L.str249911, 7

	.type	.L.str250912,@object    # @.str250912
.L.str250912:
	.asciz	"0:0-11"
	.size	.L.str250912, 7

	.type	.L.str251913,@object    # @.str251913
.L.str251913:
	.asciz	"9:1"
	.size	.L.str251913, 4

	.type	.L.str252914,@object    # @.str252914
.L.str252914:
	.asciz	"tw3.0"
	.size	.L.str252914, 6

	.type	.L.str253915,@object    # @.str253915
.L.str253915:
	.asciz	"71"
	.size	.L.str253915, 3

	.type	.L.str254916,@object    # @.str254916
.L.str254916:
	.asciz	"86:1"
	.size	.L.str254916, 5

	.type	.L.str255917,@object    # @.str255917
.L.str255917:
	.asciz	"70"
	.size	.L.str255917, 3

	.type	.L.str256918,@object    # @.str256918
.L.str256918:
	.asciz	"88"
	.size	.L.str256918, 3

	.type	.L.str257919,@object    # @.str257919
.L.str257919:
	.asciz	"69"
	.size	.L.str257919, 3

	.type	.L.str258920,@object    # @.str258920
.L.str258920:
	.asciz	"87"
	.size	.L.str258920, 3

	.type	.L.str259921,@object    # @.str259921
.L.str259921:
	.asciz	"9:1-0"
	.size	.L.str259921, 6

	.type	.L.str260922,@object    # @.str260922
.L.str260922:
	.asciz	"9:1-1"
	.size	.L.str260922, 6

	.type	.L.str261923,@object    # @.str261923
.L.str261923:
	.asciz	"9:1-2"
	.size	.L.str261923, 6

	.type	.L.str262924,@object    # @.str262924
.L.str262924:
	.asciz	"67"
	.size	.L.str262924, 3

	.type	.L.str263925,@object    # @.str263925
.L.str263925:
	.asciz	"68"
	.size	.L.str263925, 3

	.type	.L.str264926,@object    # @.str264926
.L.str264926:
	.asciz	"9:1-3"
	.size	.L.str264926, 6

	.type	.L.str265927,@object    # @.str265927
.L.str265927:
	.asciz	"72"
	.size	.L.str265927, 3

	.type	.L.str266928,@object    # @.str266928
.L.str266928:
	.asciz	"73"
	.size	.L.str266928, 3

	.type	.L.str267929,@object    # @.str267929
.L.str267929:
	.asciz	"9:1-7"
	.size	.L.str267929, 6

	.type	.L.str268930,@object    # @.str268930
.L.str268930:
	.asciz	"74"
	.size	.L.str268930, 3

	.type	.L.str269931,@object    # @.str269931
.L.str269931:
	.asciz	"75"
	.size	.L.str269931, 3

	.type	.L.str270932,@object    # @.str270932
.L.str270932:
	.asciz	"9:1-8"
	.size	.L.str270932, 6

	.type	.L.str271933,@object    # @.str271933
.L.str271933:
	.asciz	"9:1-9"
	.size	.L.str271933, 6

	.type	.L.str272934,@object    # @.str272934
.L.str272934:
	.asciz	"81:1"
	.size	.L.str272934, 5

	.type	.L.str273935,@object    # @.str273935
.L.str273935:
	.asciz	"76:1"
	.size	.L.str273935, 5

	.type	.L.str274936,@object    # @.str274936
.L.str274936:
	.asciz	"77"
	.size	.L.str274936, 3

	.type	.L.str275937,@object    # @.str275937
.L.str275937:
	.asciz	"76:1-0"
	.size	.L.str275937, 7

	.type	.L.str276938,@object    # @.str276938
.L.str276938:
	.asciz	"78"
	.size	.L.str276938, 3

	.type	.L.str277939,@object    # @.str277939
.L.str277939:
	.asciz	"76:1-1"
	.size	.L.str277939, 7

	.type	.L.str278940,@object    # @.str278940
.L.str278940:
	.asciz	"79"
	.size	.L.str278940, 3

	.type	.L.str279941,@object    # @.str279941
.L.str279941:
	.asciz	"76:1-2"
	.size	.L.str279941, 7

	.type	.L.str280942,@object    # @.str280942
.L.str280942:
	.asciz	"80"
	.size	.L.str280942, 3

	.type	.L.str281943,@object    # @.str281943
.L.str281943:
	.asciz	"76:1-3"
	.size	.L.str281943, 7

	.type	.L.str282944,@object    # @.str282944
.L.str282944:
	.asciz	"82"
	.size	.L.str282944, 3

	.type	.L.str283945,@object    # @.str283945
.L.str283945:
	.asciz	"81:1-0"
	.size	.L.str283945, 7

	.type	.L.str284946,@object    # @.str284946
.L.str284946:
	.asciz	"83"
	.size	.L.str284946, 3

	.type	.L.str285947,@object    # @.str285947
.L.str285947:
	.asciz	"81:1-1"
	.size	.L.str285947, 7

	.type	.L.str286948,@object    # @.str286948
.L.str286948:
	.asciz	"84"
	.size	.L.str286948, 3

	.type	.L.str287949,@object    # @.str287949
.L.str287949:
	.asciz	"81:1-2"
	.size	.L.str287949, 7

	.type	.L.str288950,@object    # @.str288950
.L.str288950:
	.asciz	"85"
	.size	.L.str288950, 3

	.type	.L.str289951,@object    # @.str289951
.L.str289951:
	.asciz	"81:1-3"
	.size	.L.str289951, 7

	.type	.L.str290952,@object    # @.str290952
.L.str290952:
	.asciz	"storemerge"
	.size	.L.str290952, 11

	.type	.L.str291953,@object    # @.str291953
.L.str291953:
	.asciz	"86:1-0"
	.size	.L.str291953, 7

	.type	.L.str292954,@object    # @.str292954
.L.str292954:
	.asciz	"89"
	.size	.L.str292954, 3

	.type	.L.str293955,@object    # @.str293955
.L.str293955:
	.asciz	"86:1-3"
	.size	.L.str293955, 7

	.type	.L.str294956,@object    # @.str294956
.L.str294956:
	.asciz	"90:0"
	.size	.L.str294956, 5

	.type	.L.str295957,@object    # @.str295957
.L.str295957:
	.asciz	"90:0-0"
	.size	.L.str295957, 7

	.type	.L.str296958,@object    # @.str296958
.L.str296958:
	.asciz	"25:1"
	.size	.L.str296958, 5

	.type	.L.str297959,@object    # @.str297959
.L.str297959:
	.asciz	"Fout0.06"
	.size	.L.str297959, 9

	.type	.L.str298960,@object    # @.str298960
.L.str298960:
	.asciz	"162"
	.size	.L.str298960, 4

	.type	.L.str299961,@object    # @.str299961
.L.str299961:
	.asciz	"Fout1.05"
	.size	.L.str299961, 9

	.type	.L.str300962,@object    # @.str300962
.L.str300962:
	.asciz	"163"
	.size	.L.str300962, 4

	.type	.L.str301963,@object    # @.str301963
.L.str301963:
	.asciz	"Fout2.04"
	.size	.L.str301963, 9

	.type	.L.str302964,@object    # @.str302964
.L.str302964:
	.asciz	"164"
	.size	.L.str302964, 4

	.type	.L.str303965,@object    # @.str303965
.L.str303965:
	.asciz	"Fout3.03"
	.size	.L.str303965, 9

	.type	.L.str304966,@object    # @.str304966
.L.str304966:
	.asciz	"165"
	.size	.L.str304966, 4

	.type	.L.str305967,@object    # @.str305967
.L.str305967:
	.asciz	"Fout4.02"
	.size	.L.str305967, 9

	.type	.L.str306968,@object    # @.str306968
.L.str306968:
	.asciz	"166"
	.size	.L.str306968, 4

	.type	.L.str307969,@object    # @.str307969
.L.str307969:
	.asciz	"76"
	.size	.L.str307969, 3

	.type	.L.str308970,@object    # @.str308970
.L.str308970:
	.asciz	"sext"
	.size	.L.str308970, 5

	.type	.L.str309971,@object    # @.str309971
.L.str309971:
	.asciz	"81"
	.size	.L.str309971, 3

	.type	.L.str310972,@object    # @.str310972
.L.str310972:
	.asciz	"86"
	.size	.L.str310972, 3

	.type	.L.str311973,@object    # @.str311973
.L.str311973:
	.asciz	"90"
	.size	.L.str311973, 3

	.type	.L.str312974,@object    # @.str312974
.L.str312974:
	.asciz	"91"
	.size	.L.str312974, 3

	.type	.L.str313975,@object    # @.str313975
.L.str313975:
	.asciz	"92"
	.size	.L.str313975, 3

	.type	.L.str314976,@object    # @.str314976
.L.str314976:
	.asciz	"93"
	.size	.L.str314976, 3

	.type	.L.str315977,@object    # @.str315977
.L.str315977:
	.asciz	"94"
	.size	.L.str315977, 3

	.type	.L.str316978,@object    # @.str316978
.L.str316978:
	.asciz	"95"
	.size	.L.str316978, 3

	.type	.L.str317979,@object    # @.str317979
.L.str317979:
	.asciz	"96"
	.size	.L.str317979, 3

	.type	.L.str318980,@object    # @.str318980
.L.str318980:
	.asciz	"97"
	.size	.L.str318980, 3

	.type	.L.str319981,@object    # @.str319981
.L.str319981:
	.asciz	"98"
	.size	.L.str319981, 3

	.type	.L.str320982,@object    # @.str320982
.L.str320982:
	.asciz	"99"
	.size	.L.str320982, 3

	.type	.L.str321983,@object    # @.str321983
.L.str321983:
	.asciz	"100"
	.size	.L.str321983, 4

	.type	.L.str322984,@object    # @.str322984
.L.str322984:
	.asciz	"101"
	.size	.L.str322984, 4

	.type	.L.str323985,@object    # @.str323985
.L.str323985:
	.asciz	"102"
	.size	.L.str323985, 4

	.type	.L.str324986,@object    # @.str324986
.L.str324986:
	.asciz	"103"
	.size	.L.str324986, 4

	.type	.L.str325987,@object    # @.str325987
.L.str325987:
	.asciz	"104"
	.size	.L.str325987, 4

	.type	.L.str326988,@object    # @.str326988
.L.str326988:
	.asciz	"105"
	.size	.L.str326988, 4

	.type	.L.str327989,@object    # @.str327989
.L.str327989:
	.asciz	"106"
	.size	.L.str327989, 4

	.type	.L.str328990,@object    # @.str328990
.L.str328990:
	.asciz	"107"
	.size	.L.str328990, 4

	.type	.L.str329991,@object    # @.str329991
.L.str329991:
	.asciz	"108"
	.size	.L.str329991, 4

	.type	.L.str330992,@object    # @.str330992
.L.str330992:
	.asciz	"109"
	.size	.L.str330992, 4

	.type	.L.str331993,@object    # @.str331993
.L.str331993:
	.asciz	"110"
	.size	.L.str331993, 4

	.type	.L.str332994,@object    # @.str332994
.L.str332994:
	.asciz	"111"
	.size	.L.str332994, 4

	.type	.L.str333995,@object    # @.str333995
.L.str333995:
	.asciz	"112"
	.size	.L.str333995, 4

	.type	.L.str334996,@object    # @.str334996
.L.str334996:
	.asciz	"113"
	.size	.L.str334996, 4

	.type	.L.str335997,@object    # @.str335997
.L.str335997:
	.asciz	"114"
	.size	.L.str335997, 4

	.type	.L.str336998,@object    # @.str336998
.L.str336998:
	.asciz	"115"
	.size	.L.str336998, 4

	.type	.L.str337999,@object    # @.str337999
.L.str337999:
	.asciz	"116"
	.size	.L.str337999, 4

	.type	.L.str3381000,@object   # @.str3381000
.L.str3381000:
	.asciz	"117"
	.size	.L.str3381000, 4

	.type	.L.str3391001,@object   # @.str3391001
.L.str3391001:
	.asciz	"118"
	.size	.L.str3391001, 4

	.type	.L.str3401002,@object   # @.str3401002
.L.str3401002:
	.asciz	"119"
	.size	.L.str3401002, 4

	.type	.L.str3411003,@object   # @.str3411003
.L.str3411003:
	.asciz	"120"
	.size	.L.str3411003, 4

	.type	.L.str3421004,@object   # @.str3421004
.L.str3421004:
	.asciz	"121"
	.size	.L.str3421004, 4

	.type	.L.str3431005,@object   # @.str3431005
.L.str3431005:
	.asciz	"25:1-0"
	.size	.L.str3431005, 7

	.type	.L.str3441006,@object   # @.str3441006
.L.str3441006:
	.asciz	"122"
	.size	.L.str3441006, 4

	.type	.L.str3451007,@object   # @.str3451007
.L.str3451007:
	.asciz	"123"
	.size	.L.str3451007, 4

	.type	.L.str3461008,@object   # @.str3461008
.L.str3461008:
	.asciz	"124"
	.size	.L.str3461008, 4

	.type	.L.str3471009,@object   # @.str3471009
.L.str3471009:
	.asciz	"25:1-1"
	.size	.L.str3471009, 7

	.type	.L.str3481010,@object   # @.str3481010
.L.str3481010:
	.asciz	"125"
	.size	.L.str3481010, 4

	.type	.L.str3491011,@object   # @.str3491011
.L.str3491011:
	.asciz	"126"
	.size	.L.str3491011, 4

	.type	.L.str3501012,@object   # @.str3501012
.L.str3501012:
	.asciz	"127"
	.size	.L.str3501012, 4

	.type	.L.str3511013,@object   # @.str3511013
.L.str3511013:
	.asciz	"128"
	.size	.L.str3511013, 4

	.type	.L.str3521014,@object   # @.str3521014
.L.str3521014:
	.asciz	"129"
	.size	.L.str3521014, 4

	.type	.L.str3531015,@object   # @.str3531015
.L.str3531015:
	.asciz	"130"
	.size	.L.str3531015, 4

	.type	.L.str3541016,@object   # @.str3541016
.L.str3541016:
	.asciz	"131"
	.size	.L.str3541016, 4

	.type	.L.str3551017,@object   # @.str3551017
.L.str3551017:
	.asciz	"132"
	.size	.L.str3551017, 4

	.type	.L.str3561018,@object   # @.str3561018
.L.str3561018:
	.asciz	"133"
	.size	.L.str3561018, 4

	.type	.L.str3571019,@object   # @.str3571019
.L.str3571019:
	.asciz	"134"
	.size	.L.str3571019, 4

	.type	.L.str3581020,@object   # @.str3581020
.L.str3581020:
	.asciz	"135"
	.size	.L.str3581020, 4

	.type	.L.str3591021,@object   # @.str3591021
.L.str3591021:
	.asciz	"136"
	.size	.L.str3591021, 4

	.type	.L.str3601022,@object   # @.str3601022
.L.str3601022:
	.asciz	"137"
	.size	.L.str3601022, 4

	.type	.L.str3611023,@object   # @.str3611023
.L.str3611023:
	.asciz	"138"
	.size	.L.str3611023, 4

	.type	.L.str3621024,@object   # @.str3621024
.L.str3621024:
	.asciz	"139"
	.size	.L.str3621024, 4

	.type	.L.str3631025,@object   # @.str3631025
.L.str3631025:
	.asciz	"140"
	.size	.L.str3631025, 4

	.type	.L.str3641026,@object   # @.str3641026
.L.str3641026:
	.asciz	"25:1-2"
	.size	.L.str3641026, 7

	.type	.L.str3651027,@object   # @.str3651027
.L.str3651027:
	.asciz	"141"
	.size	.L.str3651027, 4

	.type	.L.str3661028,@object   # @.str3661028
.L.str3661028:
	.asciz	"25:1-3"
	.size	.L.str3661028, 7

	.type	.L.str3671029,@object   # @.str3671029
.L.str3671029:
	.asciz	"142"
	.size	.L.str3671029, 4

	.type	.L.str3681030,@object   # @.str3681030
.L.str3681030:
	.asciz	"25:1-4"
	.size	.L.str3681030, 7

	.type	.L.str3691031,@object   # @.str3691031
.L.str3691031:
	.asciz	"143"
	.size	.L.str3691031, 4

	.type	.L.str3701032,@object   # @.str3701032
.L.str3701032:
	.asciz	"25:1-5"
	.size	.L.str3701032, 7

	.type	.L.str3711033,@object   # @.str3711033
.L.str3711033:
	.asciz	"144"
	.size	.L.str3711033, 4

	.type	.L.str3721034,@object   # @.str3721034
.L.str3721034:
	.asciz	"145"
	.size	.L.str3721034, 4

	.type	.L.str3731035,@object   # @.str3731035
.L.str3731035:
	.asciz	"146"
	.size	.L.str3731035, 4

	.type	.L.str3741036,@object   # @.str3741036
.L.str3741036:
	.asciz	"147"
	.size	.L.str3741036, 4

	.type	.L.str3751037,@object   # @.str3751037
.L.str3751037:
	.asciz	"148"
	.size	.L.str3751037, 4

	.type	.L.str3761038,@object   # @.str3761038
.L.str3761038:
	.asciz	"149"
	.size	.L.str3761038, 4

	.type	.L.str3771039,@object   # @.str3771039
.L.str3771039:
	.asciz	"150"
	.size	.L.str3771039, 4

	.type	.L.str3781040,@object   # @.str3781040
.L.str3781040:
	.asciz	"151"
	.size	.L.str3781040, 4

	.type	.L.str3791041,@object   # @.str3791041
.L.str3791041:
	.asciz	"152"
	.size	.L.str3791041, 4

	.type	.L.str3801042,@object   # @.str3801042
.L.str3801042:
	.asciz	"153"
	.size	.L.str3801042, 4

	.type	.L.str3811043,@object   # @.str3811043
.L.str3811043:
	.asciz	"154"
	.size	.L.str3811043, 4

	.type	.L.str3821044,@object   # @.str3821044
.L.str3821044:
	.asciz	"155"
	.size	.L.str3821044, 4

	.type	.L.str3831045,@object   # @.str3831045
.L.str3831045:
	.asciz	"156"
	.size	.L.str3831045, 4

	.type	.L.str3841046,@object   # @.str3841046
.L.str3841046:
	.asciz	"157"
	.size	.L.str3841046, 4

	.type	.L.str3851047,@object   # @.str3851047
.L.str3851047:
	.asciz	"158"
	.size	.L.str3851047, 4

	.type	.L.str3861048,@object   # @.str3861048
.L.str3861048:
	.asciz	"25:1-6"
	.size	.L.str3861048, 7

	.type	.L.str3871049,@object   # @.str3871049
.L.str3871049:
	.asciz	"159"
	.size	.L.str3871049, 4

	.type	.L.str3881050,@object   # @.str3881050
.L.str3881050:
	.asciz	"25:1-7"
	.size	.L.str3881050, 7

	.type	.L.str3891051,@object   # @.str3891051
.L.str3891051:
	.asciz	"160"
	.size	.L.str3891051, 4

	.type	.L.str3901052,@object   # @.str3901052
.L.str3901052:
	.asciz	"25:1-8"
	.size	.L.str3901052, 7

	.type	.L.str3911053,@object   # @.str3911053
.L.str3911053:
	.asciz	"161"
	.size	.L.str3911053, 4

	.type	.L.str3921054,@object   # @.str3921054
.L.str3921054:
	.asciz	"25:1-9"
	.size	.L.str3921054, 7

	.type	.L.str3931055,@object   # @.str3931055
.L.str3931055:
	.asciz	"25:1-15"
	.size	.L.str3931055, 8

	.type	.L.str3941056,@object   # @.str3941056
.L.str3941056:
	.asciz	"p"
	.size	.L.str3941056, 2

	.type	.L.str3951057,@object   # @.str3951057
	.align	16
.L.str3951057:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str3951057, 19

	.type	.L.str3961058,@object   # @.str3961058
.L.str3961058:
	.asciz	"._crit_edge11:0"
	.size	.L.str3961058, 16

	.type	.L.str3971059,@object   # @.str3971059
	.align	16
.L.str3971059:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str3971059, 21

	.type	.L.str3981060,@object   # @.str3981060
.L.str3981060:
	.asciz	".preheader:1"
	.size	.L.str3981060, 13

	.type	.L.str3991061,@object   # @.str3991061
.L.str3991061:
	.asciz	"indvars.iv20"
	.size	.L.str3991061, 13

	.type	.L.str4001062,@object   # @.str4001062
	.align	16
.L.str4001062:
	.asciz	"indvars.iv.next21"
	.size	.L.str4001062, 18

	.type	.L.str4011063,@object   # @.str4011063
.L.str4011063:
	.asciz	"._crit_edge9:1"
	.size	.L.str4011063, 15

	.type	.L.str4021064,@object   # @.str4021064
.L.str4021064:
	.asciz	".preheader:1-0"
	.size	.L.str4021064, 15

	.type	.L.str4031065,@object   # @.str4031065
.L.str4031065:
	.asciz	"indvars.iv14"
	.size	.L.str4031065, 13

	.type	.L.str4041066,@object   # @.str4041066
	.align	16
.L.str4041066:
	.asciz	"indvars.iv.next15"
	.size	.L.str4041066, 18

	.type	.L.str4051067,@object   # @.str4051067
.L.str4051067:
	.asciz	"indvars.iv12"
	.size	.L.str4051067, 13

	.type	.L.str4061068,@object   # @.str4061068
	.align	16
.L.str4061068:
	.asciz	"indvars.iv.next13"
	.size	.L.str4061068, 18

	.type	.L.str4071069,@object   # @.str4071069
.L.str4071069:
	.asciz	".lr.ph8:2"
	.size	.L.str4071069, 10

	.type	.L.str4081070,@object   # @.str4081070
.L.str4081070:
	.asciz	"indvars.iv22"
	.size	.L.str4081070, 13

	.type	.L.str4091071,@object   # @.str4091071
	.align	16
.L.str4091071:
	.asciz	"indvars.iv.next23"
	.size	.L.str4091071, 18

	.type	.L.str4101072,@object   # @.str4101072
.L.str4101072:
	.asciz	"._crit_edge:2"
	.size	.L.str4101072, 14

	.type	.L.str4111073,@object   # @.str4111073
.L.str4111073:
	.asciz	"q1.16"
	.size	.L.str4111073, 6

	.type	.L.str4121074,@object   # @.str4121074
.L.str4121074:
	.asciz	".lr.ph8:2-1"
	.size	.L.str4121074, 12

	.type	.L.str4131075,@object   # @.str4131075
.L.str4131075:
	.asciz	".lr.ph8:2-3"
	.size	.L.str4131075, 12

	.type	.L.str4141076,@object   # @.str4141076
.L.str4141076:
	.asciz	".lr.ph5:2"
	.size	.L.str4141076, 10

	.type	.L.str4151077,@object   # @.str4151077
.L.str4151077:
	.asciz	".lr.ph5:2-0"
	.size	.L.str4151077, 12

	.type	.L.str4161078,@object   # @.str4161078
.L.str4161078:
	.asciz	"22:3"
	.size	.L.str4161078, 5

	.type	.L.str4171079,@object   # @.str4171079
.L.str4171079:
	.asciz	"indvars.iv16"
	.size	.L.str4171079, 13

	.type	.L.str4181080,@object   # @.str4181080
	.align	16
.L.str4181080:
	.asciz	"indvars.iv.next17"
	.size	.L.str4181080, 18

	.type	.L.str4191081,@object   # @.str4191081
.L.str4191081:
	.asciz	"twidx.04"
	.size	.L.str4191081, 9

	.type	.L.str4201082,@object   # @.str4201082
.L.str4201082:
	.asciz	"."
	.size	.L.str4201082, 2

	.type	.L.str4211083,@object   # @.str4211083
.L.str4211083:
	.asciz	"22:3-1"
	.size	.L.str4211083, 7

	.type	.L.str4221084,@object   # @.str4221084
.L.str4221084:
	.asciz	"22:3-2"
	.size	.L.str4221084, 7

	.type	.L.str4231085,@object   # @.str4231085
.L.str4231085:
	.asciz	"lftr.wideiv18"
	.size	.L.str4231085, 14

	.type	.L.str4241086,@object   # @.str4241086
.L.str4241086:
	.asciz	"exitcond19"
	.size	.L.str4241086, 11

	.type	.L.str4251087,@object   # @.str4251087
.L.str4251087:
	.asciz	"22:3-3"
	.size	.L.str4251087, 7

	.type	.L.str4261088,@object   # @.str4261088
.L.str4261088:
	.asciz	"exitcond24"
	.size	.L.str4261088, 11

	.type	.L.str4271089,@object   # @.str4271089
.L.str4271089:
	.asciz	"._crit_edge:2-1"
	.size	.L.str4271089, 16

	.type	.L.str4281090,@object   # @.str4281090
.L.str4281090:
	.asciz	"lftr.wideiv25"
	.size	.L.str4281090, 14

	.type	.L.str4291091,@object   # @.str4291091
.L.str4291091:
	.asciz	"exitcond26"
	.size	.L.str4291091, 11

	.type	.L.str4301092,@object   # @.str4301092
	.align	16
.L.str4301092:
	.asciz	"._crit_edge9:1-0"
	.size	.L.str4301092, 17

	.type	.L.str4311093,@object   # @.str4311093
	.align	16
.L.str4311093:
	.asciz	"._crit_edge11:0-0"
	.size	.L.str4311093, 18

	.type	.L.str4321094,@object   # @.str4321094
.L.str4321094:
	.asciz	"free"
	.size	.L.str4321094, 5

	.type	.L.str4331095,@object   # @.str4331095
	.align	16
.L.str4331095:
	.asciz	"._crit_edge11:0-1"
	.size	.L.str4331095, 18

	.type	.L.str1100,@object      # @.str1100
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str1100:
	.asciz	"\n"
	.size	.L.str1100, 2

	.type	.L.str11101,@object     # @.str11101
.L.str11101:
	.asciz	"RS - Fatal error!\n"
	.size	.L.str11101, 19

	.type	.L.str21102,@object     # @.str21102
.L.str21102:
	.asciz	"  Error return from TQLRAT!\n"
	.size	.L.str21102, 29

	.type	.L.str31103,@object     # @.str31103
	.section	.rodata,"a",@progbits
.L.str31103:
	.asciz	"pythag"
	.size	.L.str31103, 7

	.type	.L.str41104,@object     # @.str41104
.L.str41104:
	.asciz	"0:0"
	.size	.L.str41104, 4

	.type	.L.str51105,@object     # @.str51105
.L.str51105:
	.asciz	"1"
	.size	.L.str51105, 2

	.type	.L.str61106,@object     # @.str61106
.L.str61106:
	.asciz	"fabs"
	.size	.L.str61106, 5

	.type	.L.str71107,@object     # @.str71107
.L.str71107:
	.asciz	"phi"
	.size	.L.str71107, 4

	.type	.L.str81108,@object     # @.str81108
.L.str81108:
	.asciz	"a"
	.size	.L.str81108, 2

	.type	.L.str91109,@object     # @.str91109
.L.str91109:
	.asciz	"2"
	.size	.L.str91109, 2

	.type	.L.str101110,@object    # @.str101110
.L.str101110:
	.asciz	"b"
	.size	.L.str101110, 2

	.type	.L.str111111,@object    # @.str111111
.L.str111111:
	.asciz	"3"
	.size	.L.str111111, 2

	.type	.L.str121112,@object    # @.str121112
.L.str121112:
	.asciz	"r8_max"
	.size	.L.str121112, 7

	.type	.L.str131113,@object    # @.str131113
.L.str131113:
	.asciz	"4"
	.size	.L.str131113, 2

	.type	.L.str141114,@object    # @.str141114
.L.str141114:
	.zero	1
	.size	.L.str141114, 1

	.type	.L.str151115,@object    # @.str151115
.L.str151115:
	.asciz	"0:0-3"
	.size	.L.str151115, 6

	.type	.L.str161116,@object    # @.str161116
.L.str161116:
	.asciz	"5:0"
	.size	.L.str161116, 4

	.type	.L.str171117,@object    # @.str171117
.L.str171117:
	.asciz	".loopexit:0"
	.size	.L.str171117, 12

	.type	.L.str181118,@object    # @.str181118
.L.str181118:
	.asciz	"6"
	.size	.L.str181118, 2

	.type	.L.str191119,@object    # @.str191119
.L.str191119:
	.asciz	"r8_min"
	.size	.L.str191119, 7

	.type	.L.str201120,@object    # @.str201120
.L.str201120:
	.asciz	"7"
	.size	.L.str201120, 2

	.type	.L.str211121,@object    # @.str211121
.L.str211121:
	.asciz	"8"
	.size	.L.str211121, 2

	.type	.L.str221122,@object    # @.str221122
.L.str221122:
	.asciz	"9"
	.size	.L.str221122, 2

	.type	.L.str231123,@object    # @.str231123
.L.str231123:
	.asciz	"10"
	.size	.L.str231123, 3

	.type	.L.str241124,@object    # @.str241124
.L.str241124:
	.asciz	"5:0-3"
	.size	.L.str241124, 6

	.type	.L.str251125,@object    # @.str251125
.L.str251125:
	.asciz	".lr.ph:1"
	.size	.L.str251125, 9

	.type	.L.str261126,@object    # @.str261126
.L.str261126:
	.asciz	"11"
	.size	.L.str261126, 3

	.type	.L.str271127,@object    # @.str271127
.L.str271127:
	.asciz	"19"
	.size	.L.str271127, 3

	.type	.L.str281128,@object    # @.str281128
.L.str281128:
	.asciz	"p.02"
	.size	.L.str281128, 5

	.type	.L.str291129,@object    # @.str291129
.L.str291129:
	.asciz	"15"
	.size	.L.str291129, 3

	.type	.L.str301130,@object    # @.str301130
.L.str301130:
	.asciz	"r.01"
	.size	.L.str301130, 5

	.type	.L.str311131,@object    # @.str311131
.L.str311131:
	.asciz	"18"
	.size	.L.str311131, 3

	.type	.L.str321132,@object    # @.str321132
.L.str321132:
	.asciz	"12"
	.size	.L.str321132, 3

	.type	.L.str331133,@object    # @.str331133
.L.str331133:
	.asciz	"13"
	.size	.L.str331133, 3

	.type	.L.str341134,@object    # @.str341134
.L.str341134:
	.asciz	"14"
	.size	.L.str341134, 3

	.type	.L.str351135,@object    # @.str351135
.L.str351135:
	.asciz	"16"
	.size	.L.str351135, 3

	.type	.L.str361136,@object    # @.str361136
.L.str361136:
	.asciz	"17"
	.size	.L.str361136, 3

	.type	.L.str371137,@object    # @.str371137
.L.str371137:
	.asciz	"20"
	.size	.L.str371137, 3

	.type	.L.str381138,@object    # @.str381138
.L.str381138:
	.asciz	".lr.ph:1-5"
	.size	.L.str381138, 11

	.type	.L.str391139,@object    # @.str391139
.L.str391139:
	.asciz	"p.1"
	.size	.L.str391139, 4

	.type	.L.str401140,@object    # @.str401140
.L.str401140:
	.asciz	".loopexit:0-0"
	.size	.L.str401140, 14

	.type	.L.str411141,@object    # @.str411141
.L.str411141:
	.asciz	"x"
	.size	.L.str411141, 2

	.type	.L.str421142,@object    # @.str421142
.L.str421142:
	.asciz	"y"
	.size	.L.str421142, 2

	.type	.L.str431143,@object    # @.str431143
.L.str431143:
	.asciz	"x.y"
	.size	.L.str431143, 4

	.type	.L.str441144,@object    # @.str441144
.L.str441144:
	.asciz	"0:0-2"
	.size	.L.str441144, 6

	.type	.L.str451145,@object    # @.str451145
.L.str451145:
	.asciz	"y.x"
	.size	.L.str451145, 4

	.type	.L.str461146,@object    # @.str461146
.L.str461146:
	.asciz	"r8_epsilon"
	.size	.L.str461146, 11

	.type	.L.str471147,@object    # @.str471147
.L.str471147:
	.asciz	"0:0-1"
	.size	.L.str471147, 6

	.type	.L.str481148,@object    # @.str481148
.L.str481148:
	.asciz	"r8_sign"
	.size	.L.str481148, 8

	.type	.L.str491149,@object    # @.str491149
.L.str491149:
	.asciz	"."
	.size	.L.str491149, 2

	.type	.L.str501150,@object    # @.str501150
.L.str501150:
	.asciz	"rs"
	.size	.L.str501150, 3

	.type	.L.str511151,@object    # @.str511151
.L.str511151:
	.asciz	"n"
	.size	.L.str511151, 2

	.type	.L.str521152,@object    # @.str521152
.L.str521152:
	.asciz	"0:0-8"
	.size	.L.str521152, 6

	.type	.L.str531153,@object    # @.str531153
.L.str531153:
	.asciz	"11:0"
	.size	.L.str531153, 5

	.type	.L.str541154,@object    # @.str541154
.L.str541154:
	.asciz	"4:0"
	.size	.L.str541154, 4

	.type	.L.str551155,@object    # @.str551155
.L.str551155:
	.asciz	"matz"
	.size	.L.str551155, 5

	.type	.L.str561156,@object    # @.str561156
.L.str561156:
	.asciz	"4:0-0"
	.size	.L.str561156, 6

	.type	.L.str571157,@object    # @.str571157
.L.str571157:
	.asciz	"tred1"
	.size	.L.str571157, 6

	.type	.L.str581158,@object    # @.str581158
.L.str581158:
	.asciz	"w"
	.size	.L.str581158, 2

	.type	.L.str591159,@object    # @.str591159
.L.str591159:
	.asciz	"fv1"
	.size	.L.str591159, 4

	.type	.L.str601160,@object    # @.str601160
.L.str601160:
	.asciz	"fv2"
	.size	.L.str601160, 4

	.type	.L.str611161,@object    # @.str611161
.L.str611161:
	.asciz	"5"
	.size	.L.str611161, 2

	.type	.L.str621162,@object    # @.str621162
.L.str621162:
	.asciz	"tqlrat"
	.size	.L.str621162, 7

	.type	.L.str631163,@object    # @.str631163
.L.str631163:
	.asciz	"4:0-2"
	.size	.L.str631163, 6

	.type	.L.str641164,@object    # @.str641164
.L.str641164:
	.asciz	"7:0"
	.size	.L.str641164, 4

	.type	.L.str651165,@object    # @.str651165
.L.str651165:
	.asciz	"printf"
	.size	.L.str651165, 7

	.type	.L.str661166,@object    # @.str661166
.L.str661166:
	.asciz	"7:0-0"
	.size	.L.str661166, 6

	.type	.L.str671167,@object    # @.str671167
.L.str671167:
	.asciz	".0"
	.size	.L.str671167, 3

	.type	.L.str681168,@object    # @.str681168
.L.str681168:
	.asciz	"11:0-0"
	.size	.L.str681168, 7

	.type	.L.str691169,@object    # @.str691169
.L.str691169:
	.asciz	"z"
	.size	.L.str691169, 2

	.type	.L.str701170,@object    # @.str701170
.L.str701170:
	.asciz	"0:0-6"
	.size	.L.str701170, 6

	.type	.L.str711171,@object    # @.str711171
.L.str711171:
	.asciz	".lr.ph58:0"
	.size	.L.str711171, 11

	.type	.L.str721172,@object    # @.str721172
.L.str721172:
	.asciz	"._crit_edge52:0"
	.size	.L.str721172, 16

	.type	.L.str731173,@object    # @.str731173
.L.str731173:
	.asciz	".lr.ph58:0-0"
	.size	.L.str731173, 13

	.type	.L.str741174,@object    # @.str741174
.L.str741174:
	.asciz	"5:1"
	.size	.L.str741174, 4

	.type	.L.str751175,@object    # @.str751175
.L.str751175:
	.asciz	".preheader53:0"
	.size	.L.str751175, 15

	.type	.L.str761176,@object    # @.str761176
	.align	16
.L.str761176:
	.asciz	".preheader53:0-0"
	.size	.L.str761176, 17

	.type	.L.str771177,@object    # @.str771177
.L.str771177:
	.asciz	".lr.ph55:0"
	.size	.L.str771177, 11

	.type	.L.str781178,@object    # @.str781178
.L.str781178:
	.asciz	".lr.ph55:0-0"
	.size	.L.str781178, 13

	.type	.L.str791179,@object    # @.str791179
.L.str791179:
	.asciz	"15:1"
	.size	.L.str791179, 5

	.type	.L.str801180,@object    # @.str801180
.L.str801180:
	.asciz	"indvars.iv140"
	.size	.L.str801180, 14

	.type	.L.str811181,@object    # @.str811181
	.align	16
.L.str811181:
	.asciz	"indvars.iv.next141"
	.size	.L.str811181, 19

	.type	.L.str821182,@object    # @.str821182
.L.str821182:
	.asciz	"d"
	.size	.L.str821182, 2

	.type	.L.str831183,@object    # @.str831183
.L.str831183:
	.asciz	"5:1-0"
	.size	.L.str831183, 6

	.type	.L.str841184,@object    # @.str841184
.L.str841184:
	.asciz	"lftr.wideiv142"
	.size	.L.str841184, 15

	.type	.L.str851185,@object    # @.str851185
.L.str851185:
	.asciz	"exitcond143"
	.size	.L.str851185, 12

	.type	.L.str861186,@object    # @.str861186
.L.str861186:
	.asciz	"5:1-1"
	.size	.L.str861186, 6

	.type	.L.str871187,@object    # @.str871187
.L.str871187:
	.asciz	".preheader47:0"
	.size	.L.str871187, 15

	.type	.L.str881188,@object    # @.str881188
	.align	16
.L.str881188:
	.asciz	".preheader47:0-0"
	.size	.L.str881188, 17

	.type	.L.str891189,@object    # @.str891189
.L.str891189:
	.asciz	".lr.ph51:0"
	.size	.L.str891189, 11

	.type	.L.str901190,@object    # @.str901190
.L.str901190:
	.asciz	".lr.ph51:0-0"
	.size	.L.str901190, 13

	.type	.L.str911191,@object    # @.str911191
.L.str911191:
	.asciz	"26:1"
	.size	.L.str911191, 5

	.type	.L.str921192,@object    # @.str921192
.L.str921192:
	.asciz	"indvars.iv136"
	.size	.L.str921192, 14

	.type	.L.str931193,@object    # @.str931193
	.align	16
.L.str931193:
	.asciz	"indvars.iv.next137"
	.size	.L.str931193, 19

	.type	.L.str941194,@object    # @.str941194
.L.str941194:
	.asciz	"21"
	.size	.L.str941194, 3

	.type	.L.str951195,@object    # @.str951195
.L.str951195:
	.asciz	"22"
	.size	.L.str951195, 3

	.type	.L.str961196,@object    # @.str961196
.L.str961196:
	.asciz	"23"
	.size	.L.str961196, 3

	.type	.L.str971197,@object    # @.str971197
.L.str971197:
	.asciz	"24"
	.size	.L.str971197, 3

	.type	.L.str981198,@object    # @.str981198
.L.str981198:
	.asciz	"25"
	.size	.L.str981198, 3

	.type	.L.str991199,@object    # @.str991199
.L.str991199:
	.asciz	"15:1-0"
	.size	.L.str991199, 7

	.type	.L.str1001200,@object   # @.str1001200
.L.str1001200:
	.asciz	"lftr.wideiv138"
	.size	.L.str1001200, 15

	.type	.L.str1011201,@object   # @.str1011201
.L.str1011201:
	.asciz	"exitcond139"
	.size	.L.str1011201, 12

	.type	.L.str1021202,@object   # @.str1021202
.L.str1021202:
	.asciz	"15:1-1"
	.size	.L.str1021202, 7

	.type	.L.str1031203,@object   # @.str1031203
.L.str1031203:
	.asciz	"indvars.iv134"
	.size	.L.str1031203, 14

	.type	.L.str1041204,@object   # @.str1041204
	.align	16
.L.str1041204:
	.asciz	"indvars.iv.next135"
	.size	.L.str1041204, 19

	.type	.L.str1051205,@object   # @.str1051205
.L.str1051205:
	.asciz	".backedge:1"
	.size	.L.str1051205, 12

	.type	.L.str1061206,@object   # @.str1061206
	.align	16
.L.str1061206:
	.asciz	"indvars.iv130.in"
	.size	.L.str1061206, 17

	.type	.L.str1071207,@object   # @.str1071207
.L.str1071207:
	.asciz	"indvars.iv130"
	.size	.L.str1071207, 14

	.type	.L.str1081208,@object   # @.str1081208
.L.str1081208:
	.asciz	"i.150.in"
	.size	.L.str1081208, 9

	.type	.L.str1091209,@object   # @.str1091209
.L.str1091209:
	.asciz	"i.150"
	.size	.L.str1091209, 6

	.type	.L.str1101210,@object   # @.str1101210
.L.str1101210:
	.asciz	"27"
	.size	.L.str1101210, 3

	.type	.L.str1111211,@object   # @.str1111211
.L.str1111211:
	.asciz	"28"
	.size	.L.str1111211, 3

	.type	.L.str1121212,@object   # @.str1121212
.L.str1121212:
	.asciz	"26:1-4"
	.size	.L.str1121212, 7

	.type	.L.str1131213,@object   # @.str1131213
.L.str1131213:
	.asciz	"._crit_edge46:1"
	.size	.L.str1131213, 16

	.type	.L.str1141214,@object   # @.str1141214
.L.str1141214:
	.asciz	".lr.ph:2"
	.size	.L.str1141214, 9

	.type	.L.str1151215,@object   # @.str1151215
.L.str1151215:
	.asciz	"indvars.iv"
	.size	.L.str1151215, 11

	.type	.L.str1161216,@object   # @.str1161216
.L.str1161216:
	.asciz	"indvars.iv.next"
	.size	.L.str1161216, 16

	.type	.L.str1171217,@object   # @.str1171217
.L.str1171217:
	.asciz	"scale.02"
	.size	.L.str1171217, 9

	.type	.L.str1181218,@object   # @.str1181218
.L.str1181218:
	.asciz	"32"
	.size	.L.str1181218, 3

	.type	.L.str1191219,@object   # @.str1191219
.L.str1191219:
	.asciz	"29"
	.size	.L.str1191219, 3

	.type	.L.str1201220,@object   # @.str1201220
.L.str1201220:
	.asciz	"30"
	.size	.L.str1201220, 3

	.type	.L.str1211221,@object   # @.str1211221
.L.str1211221:
	.asciz	"31"
	.size	.L.str1211221, 3

	.type	.L.str1221222,@object   # @.str1221222
.L.str1221222:
	.asciz	"lftr.wideiv"
	.size	.L.str1221222, 12

	.type	.L.str1231223,@object   # @.str1231223
.L.str1231223:
	.asciz	"exitcond"
	.size	.L.str1231223, 9

	.type	.L.str1241224,@object   # @.str1241224
.L.str1241224:
	.asciz	".lr.ph:2-1"
	.size	.L.str1241224, 11

	.type	.L.str1251225,@object   # @.str1251225
.L.str1251225:
	.asciz	"._crit_edge:1"
	.size	.L.str1251225, 14

	.type	.L.str1261226,@object   # @.str1261226
.L.str1261226:
	.asciz	"33"
	.size	.L.str1261226, 3

	.type	.L.str1271227,@object   # @.str1271227
.L.str1271227:
	.asciz	"34"
	.size	.L.str1271227, 3

	.type	.L.str1281228,@object   # @.str1281228
.L.str1281228:
	.asciz	"._crit_edge:1-0"
	.size	.L.str1281228, 16

	.type	.L.str1291229,@object   # @.str1291229
.L.str1291229:
	.asciz	".preheader43:1"
	.size	.L.str1291229, 15

	.type	.L.str1301230,@object   # @.str1301230
.L.str1301230:
	.asciz	".preheader:1"
	.size	.L.str1301230, 13

	.type	.L.str1311231,@object   # @.str1311231
	.align	16
.L.str1311231:
	.asciz	".preheader43:1-0"
	.size	.L.str1311231, 17

	.type	.L.str1321232,@object   # @.str1321232
.L.str1321232:
	.asciz	".lr.ph45:2"
	.size	.L.str1321232, 11

	.type	.L.str1331233,@object   # @.str1331233
.L.str1331233:
	.asciz	".preheader:1-0"
	.size	.L.str1331233, 15

	.type	.L.str1341234,@object   # @.str1341234
.L.str1341234:
	.asciz	"._crit_edge8:1"
	.size	.L.str1341234, 15

	.type	.L.str1351235,@object   # @.str1351235
.L.str1351235:
	.asciz	".lr.ph4:2"
	.size	.L.str1351235, 10

	.type	.L.str1361236,@object   # @.str1361236
.L.str1361236:
	.asciz	"indvars.iv128"
	.size	.L.str1361236, 14

	.type	.L.str1371237,@object   # @.str1371237
	.align	16
.L.str1371237:
	.asciz	"indvars.iv.next129"
	.size	.L.str1371237, 19

	.type	.L.str1381238,@object   # @.str1381238
.L.str1381238:
	.asciz	"35"
	.size	.L.str1381238, 3

	.type	.L.str1391239,@object   # @.str1391239
.L.str1391239:
	.asciz	"36"
	.size	.L.str1391239, 3

	.type	.L.str1401240,@object   # @.str1401240
.L.str1401240:
	.asciz	"37"
	.size	.L.str1401240, 3

	.type	.L.str1411241,@object   # @.str1411241
.L.str1411241:
	.asciz	"38"
	.size	.L.str1411241, 3

	.type	.L.str1421242,@object   # @.str1421242
.L.str1421242:
	.asciz	"39"
	.size	.L.str1421242, 3

	.type	.L.str1431243,@object   # @.str1431243
.L.str1431243:
	.asciz	"40"
	.size	.L.str1431243, 3

	.type	.L.str1441244,@object   # @.str1441244
.L.str1441244:
	.asciz	"41"
	.size	.L.str1441244, 3

	.type	.L.str1451245,@object   # @.str1451245
.L.str1451245:
	.asciz	".lr.ph45:2-0"
	.size	.L.str1451245, 13

	.type	.L.str1461246,@object   # @.str1461246
.L.str1461246:
	.asciz	"42"
	.size	.L.str1461246, 3

	.type	.L.str1471247,@object   # @.str1471247
.L.str1471247:
	.asciz	"43"
	.size	.L.str1471247, 3

	.type	.L.str1481248,@object   # @.str1481248
.L.str1481248:
	.asciz	"44"
	.size	.L.str1481248, 3

	.type	.L.str1491249,@object   # @.str1491249
.L.str1491249:
	.asciz	"45"
	.size	.L.str1491249, 3

	.type	.L.str1501250,@object   # @.str1501250
.L.str1501250:
	.asciz	"46"
	.size	.L.str1501250, 3

	.type	.L.str1511251,@object   # @.str1511251
.L.str1511251:
	.asciz	".lr.ph45:2-1"
	.size	.L.str1511251, 13

	.type	.L.str1521252,@object   # @.str1521252
.L.str1521252:
	.asciz	".lr.ph45:2-2"
	.size	.L.str1521252, 13

	.type	.L.str1531253,@object   # @.str1531253
.L.str1531253:
	.asciz	"lftr.wideiv132"
	.size	.L.str1531253, 15

	.type	.L.str1541254,@object   # @.str1541254
.L.str1541254:
	.asciz	"exitcond133"
	.size	.L.str1541254, 12

	.type	.L.str1551255,@object   # @.str1551255
.L.str1551255:
	.asciz	".lr.ph45:2-3"
	.size	.L.str1551255, 13

	.type	.L.str1561256,@object   # @.str1561256
.L.str1561256:
	.asciz	"47"
	.size	.L.str1561256, 3

	.type	.L.str1571257,@object   # @.str1571257
.L.str1571257:
	.asciz	"e"
	.size	.L.str1571257, 2

	.type	.L.str1581258,@object   # @.str1581258
	.align	16
.L.str1581258:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str1581258, 18

	.type	.L.str1591259,@object   # @.str1591259
.L.str1591259:
	.asciz	"48"
	.size	.L.str1591259, 3

	.type	.L.str1601260,@object   # @.str1601260
.L.str1601260:
	.asciz	"e2"
	.size	.L.str1601260, 3

	.type	.L.str1611261,@object   # @.str1611261
	.align	16
.L.str1611261:
	.asciz	"._crit_edge46:1-1"
	.size	.L.str1611261, 18

	.type	.L.str1621262,@object   # @.str1621262
	.align	16
.L.str1621262:
	.asciz	"._crit_edge46:1-2"
	.size	.L.str1621262, 18

	.type	.L.str1631263,@object   # @.str1631263
.L.str1631263:
	.asciz	"49"
	.size	.L.str1631263, 3

	.type	.L.str1641264,@object   # @.str1641264
.L.str1641264:
	.asciz	"50"
	.size	.L.str1641264, 3

	.type	.L.str1651265,@object   # @.str1651265
.L.str1651265:
	.asciz	".backedge:1-0"
	.size	.L.str1651265, 14

	.type	.L.str1661266,@object   # @.str1661266
.L.str1661266:
	.asciz	"indvars.iv61"
	.size	.L.str1661266, 13

	.type	.L.str1671267,@object   # @.str1671267
	.align	16
.L.str1671267:
	.asciz	"indvars.iv.next62"
	.size	.L.str1671267, 18

	.type	.L.str1681268,@object   # @.str1681268
.L.str1681268:
	.asciz	"51"
	.size	.L.str1681268, 3

	.type	.L.str1691269,@object   # @.str1691269
.L.str1691269:
	.asciz	"52"
	.size	.L.str1691269, 3

	.type	.L.str1701270,@object   # @.str1701270
.L.str1701270:
	.asciz	"53"
	.size	.L.str1701270, 3

	.type	.L.str1711271,@object   # @.str1711271
.L.str1711271:
	.asciz	".lr.ph4:2-0"
	.size	.L.str1711271, 12

	.type	.L.str1721272,@object   # @.str1721272
.L.str1721272:
	.asciz	"lftr.wideiv65"
	.size	.L.str1721272, 14

	.type	.L.str1731273,@object   # @.str1731273
.L.str1731273:
	.asciz	"exitcond66"
	.size	.L.str1731273, 11

	.type	.L.str1741274,@object   # @.str1741274
.L.str1741274:
	.asciz	".lr.ph4:2-1"
	.size	.L.str1741274, 12

	.type	.L.str1751275,@object   # @.str1751275
.L.str1751275:
	.asciz	".loopexit:1"
	.size	.L.str1751275, 12

	.type	.L.str1761276,@object   # @.str1761276
.L.str1761276:
	.asciz	"54"
	.size	.L.str1761276, 3

	.type	.L.str1771277,@object   # @.str1771277
.L.str1771277:
	.asciz	".loopexit:1-0"
	.size	.L.str1771277, 14

	.type	.L.str1781278,@object   # @.str1781278
.L.str1781278:
	.asciz	".lr.ph7:2"
	.size	.L.str1781278, 10

	.type	.L.str1791279,@object   # @.str1791279
.L.str1791279:
	.asciz	"indvars.iv68"
	.size	.L.str1791279, 13

	.type	.L.str1801280,@object   # @.str1801280
	.align	16
.L.str1801280:
	.asciz	"indvars.iv.next69"
	.size	.L.str1801280, 18

	.type	.L.str1811281,@object   # @.str1811281
.L.str1811281:
	.asciz	"h.05"
	.size	.L.str1811281, 5

	.type	.L.str1821282,@object   # @.str1821282
.L.str1821282:
	.asciz	"58"
	.size	.L.str1821282, 3

	.type	.L.str1831283,@object   # @.str1831283
.L.str1831283:
	.asciz	"55"
	.size	.L.str1831283, 3

	.type	.L.str1841284,@object   # @.str1841284
.L.str1841284:
	.asciz	"56"
	.size	.L.str1841284, 3

	.type	.L.str1851285,@object   # @.str1851285
.L.str1851285:
	.asciz	"57"
	.size	.L.str1851285, 3

	.type	.L.str1861286,@object   # @.str1861286
.L.str1861286:
	.asciz	"lftr.wideiv72"
	.size	.L.str1861286, 14

	.type	.L.str1871287,@object   # @.str1871287
.L.str1871287:
	.asciz	"exitcond73"
	.size	.L.str1871287, 11

	.type	.L.str1881288,@object   # @.str1881288
.L.str1881288:
	.asciz	".lr.ph7:2-1"
	.size	.L.str1881288, 12

	.type	.L.str1891289,@object   # @.str1891289
.L.str1891289:
	.asciz	"h.0.lcssa"
	.size	.L.str1891289, 10

	.type	.L.str1901290,@object   # @.str1901290
.L.str1901290:
	.asciz	"59"
	.size	.L.str1901290, 3

	.type	.L.str1911291,@object   # @.str1911291
.L.str1911291:
	.asciz	"60"
	.size	.L.str1911291, 3

	.type	.L.str1921292,@object   # @.str1921292
.L.str1921292:
	.asciz	"61"
	.size	.L.str1921292, 3

	.type	.L.str1931293,@object   # @.str1931293
	.align	16
.L.str1931293:
	.asciz	"._crit_edge8:1-0"
	.size	.L.str1931293, 17

	.type	.L.str1941294,@object   # @.str1941294
.L.str1941294:
	.asciz	"62"
	.size	.L.str1941294, 3

	.type	.L.str1951295,@object   # @.str1951295
.L.str1951295:
	.asciz	"63"
	.size	.L.str1951295, 3

	.type	.L.str1961296,@object   # @.str1961296
.L.str1961296:
	.asciz	"64"
	.size	.L.str1961296, 3

	.type	.L.str1971297,@object   # @.str1971297
.L.str1971297:
	.asciz	"65"
	.size	.L.str1971297, 3

	.type	.L.str1981298,@object   # @.str1981298
.L.str1981298:
	.asciz	"sqrt"
	.size	.L.str1981298, 5

	.type	.L.str1991299,@object   # @.str1991299
.L.str1991299:
	.asciz	"66"
	.size	.L.str1991299, 3

	.type	.L.str2001300,@object   # @.str2001300
.L.str2001300:
	.asciz	"67"
	.size	.L.str2001300, 3

	.type	.L.str2011301,@object   # @.str2011301
.L.str2011301:
	.asciz	"68"
	.size	.L.str2011301, 3

	.type	.L.str2021302,@object   # @.str2021302
.L.str2021302:
	.asciz	"69"
	.size	.L.str2021302, 3

	.type	.L.str2031303,@object   # @.str2031303
.L.str2031303:
	.asciz	"70"
	.size	.L.str2031303, 3

	.type	.L.str2041304,@object   # @.str2041304
	.align	16
.L.str2041304:
	.asciz	"._crit_edge8:1-3"
	.size	.L.str2041304, 17

	.type	.L.str2051305,@object   # @.str2051305
.L.str2051305:
	.asciz	"71"
	.size	.L.str2051305, 3

	.type	.L.str2061306,@object   # @.str2061306
.L.str2061306:
	.asciz	"72"
	.size	.L.str2061306, 3

	.type	.L.str2071307,@object   # @.str2071307
.L.str2071307:
	.asciz	"73"
	.size	.L.str2071307, 3

	.type	.L.str2081308,@object   # @.str2081308
	.align	16
.L.str2081308:
	.asciz	"._crit_edge8:1-5"
	.size	.L.str2081308, 17

	.type	.L.str2091309,@object   # @.str2091309
.L.str2091309:
	.asciz	"74"
	.size	.L.str2091309, 3

	.type	.L.str2101310,@object   # @.str2101310
	.align	16
.L.str2101310:
	.asciz	"._crit_edge8:1-6"
	.size	.L.str2101310, 17

	.type	.L.str2111311,@object   # @.str2111311
.L.str2111311:
	.asciz	".lr.ph13:2"
	.size	.L.str2111311, 11

	.type	.L.str2121312,@object   # @.str2121312
.L.str2121312:
	.asciz	"indvars.iv74"
	.size	.L.str2121312, 13

	.type	.L.str2131313,@object   # @.str2131313
	.align	16
.L.str2131313:
	.asciz	"indvars.iv.next75"
	.size	.L.str2131313, 18

	.type	.L.str2141314,@object   # @.str2141314
.L.str2141314:
	.asciz	"75"
	.size	.L.str2141314, 3

	.type	.L.str2151315,@object   # @.str2151315
.L.str2151315:
	.asciz	".lr.ph13:2-0"
	.size	.L.str2151315, 13

	.type	.L.str2161316,@object   # @.str2161316
.L.str2161316:
	.asciz	"lftr.wideiv78"
	.size	.L.str2161316, 14

	.type	.L.str2171317,@object   # @.str2171317
.L.str2171317:
	.asciz	"exitcond79"
	.size	.L.str2171317, 11

	.type	.L.str2181318,@object   # @.str2181318
.L.str2181318:
	.asciz	".lr.ph13:2-1"
	.size	.L.str2181318, 13

	.type	.L.str2191319,@object   # @.str2191319
.L.str2191319:
	.asciz	".loopexit11:1"
	.size	.L.str2191319, 14

	.type	.L.str2201320,@object   # @.str2201320
.L.str2201320:
	.asciz	"76"
	.size	.L.str2201320, 3

	.type	.L.str2211321,@object   # @.str2211321
.L.str2211321:
	.asciz	".loopexit11:1-0"
	.size	.L.str2211321, 16

	.type	.L.str2221322,@object   # @.str2221322
.L.str2221322:
	.asciz	".lr.ph22:2"
	.size	.L.str2221322, 11

	.type	.L.str2231323,@object   # @.str2231323
.L.str2231323:
	.asciz	"indvars.iv89"
	.size	.L.str2231323, 13

	.type	.L.str2241324,@object   # @.str2241324
	.align	16
.L.str2241324:
	.asciz	"indvars.iv.next90"
	.size	.L.str2241324, 18

	.type	.L.str2251325,@object   # @.str2251325
.L.str2251325:
	.asciz	"._crit_edge18:2"
	.size	.L.str2251325, 16

	.type	.L.str2261326,@object   # @.str2261326
.L.str2261326:
	.asciz	"indvars.iv81"
	.size	.L.str2261326, 13

	.type	.L.str2271327,@object   # @.str2271327
	.align	16
.L.str2271327:
	.asciz	"indvars.iv.next82"
	.size	.L.str2271327, 18

	.type	.L.str2281328,@object   # @.str2281328
.L.str2281328:
	.asciz	"77"
	.size	.L.str2281328, 3

	.type	.L.str2291329,@object   # @.str2291329
.L.str2291329:
	.asciz	"78"
	.size	.L.str2291329, 3

	.type	.L.str2301330,@object   # @.str2301330
.L.str2301330:
	.asciz	"79"
	.size	.L.str2301330, 3

	.type	.L.str2311331,@object   # @.str2311331
.L.str2311331:
	.asciz	"80"
	.size	.L.str2311331, 3

	.type	.L.str2321332,@object   # @.str2321332
.L.str2321332:
	.asciz	"81"
	.size	.L.str2321332, 3

	.type	.L.str2331333,@object   # @.str2331333
.L.str2331333:
	.asciz	"82"
	.size	.L.str2331333, 3

	.type	.L.str2341334,@object   # @.str2341334
.L.str2341334:
	.asciz	"83"
	.size	.L.str2341334, 3

	.type	.L.str2351335,@object   # @.str2351335
.L.str2351335:
	.asciz	"84"
	.size	.L.str2351335, 3

	.type	.L.str2361336,@object   # @.str2361336
.L.str2361336:
	.asciz	"85"
	.size	.L.str2361336, 3

	.type	.L.str2371337,@object   # @.str2371337
.L.str2371337:
	.asciz	"86"
	.size	.L.str2371337, 3

	.type	.L.str2381338,@object   # @.str2381338
.L.str2381338:
	.asciz	"87"
	.size	.L.str2381338, 3

	.type	.L.str2391339,@object   # @.str2391339
.L.str2391339:
	.asciz	"88"
	.size	.L.str2391339, 3

	.type	.L.str2401340,@object   # @.str2401340
.L.str2401340:
	.asciz	"89"
	.size	.L.str2401340, 3

	.type	.L.str2411341,@object   # @.str2411341
.L.str2411341:
	.asciz	"90"
	.size	.L.str2411341, 3

	.type	.L.str2421342,@object   # @.str2421342
.L.str2421342:
	.asciz	"91"
	.size	.L.str2421342, 3

	.type	.L.str2431343,@object   # @.str2431343
.L.str2431343:
	.asciz	".lr.ph22:2-2"
	.size	.L.str2431343, 13

	.type	.L.str2441344,@object   # @.str2441344
.L.str2441344:
	.asciz	".lr.ph17:2"
	.size	.L.str2441344, 11

	.type	.L.str2451345,@object   # @.str2451345
.L.str2451345:
	.asciz	"92"
	.size	.L.str2451345, 3

	.type	.L.str2461346,@object   # @.str2461346
.L.str2461346:
	.asciz	".lr.ph17:2-0"
	.size	.L.str2461346, 13

	.type	.L.str2471347,@object   # @.str2471347
.L.str2471347:
	.asciz	"93:3"
	.size	.L.str2471347, 5

	.type	.L.str2481348,@object   # @.str2481348
.L.str2481348:
	.asciz	"indvars.iv83"
	.size	.L.str2481348, 13

	.type	.L.str2491349,@object   # @.str2491349
	.align	16
.L.str2491349:
	.asciz	"indvars.iv.next84"
	.size	.L.str2491349, 18

	.type	.L.str2501350,@object   # @.str2501350
.L.str2501350:
	.asciz	"g.014"
	.size	.L.str2501350, 6

	.type	.L.str2511351,@object   # @.str2511351
.L.str2511351:
	.asciz	"100"
	.size	.L.str2511351, 4

	.type	.L.str2521352,@object   # @.str2521352
.L.str2521352:
	.asciz	"94"
	.size	.L.str2521352, 3

	.type	.L.str2531353,@object   # @.str2531353
.L.str2531353:
	.asciz	"95"
	.size	.L.str2531353, 3

	.type	.L.str2541354,@object   # @.str2541354
.L.str2541354:
	.asciz	"96"
	.size	.L.str2541354, 3

	.type	.L.str2551355,@object   # @.str2551355
.L.str2551355:
	.asciz	"97"
	.size	.L.str2551355, 3

	.type	.L.str2561356,@object   # @.str2561356
.L.str2561356:
	.asciz	"98"
	.size	.L.str2561356, 3

	.type	.L.str2571357,@object   # @.str2571357
.L.str2571357:
	.asciz	"99"
	.size	.L.str2571357, 3

	.type	.L.str2581358,@object   # @.str2581358
.L.str2581358:
	.asciz	"101"
	.size	.L.str2581358, 4

	.type	.L.str2591359,@object   # @.str2591359
.L.str2591359:
	.asciz	"102"
	.size	.L.str2591359, 4

	.type	.L.str2601360,@object   # @.str2601360
.L.str2601360:
	.asciz	"103"
	.size	.L.str2601360, 4

	.type	.L.str2611361,@object   # @.str2611361
.L.str2611361:
	.asciz	"104"
	.size	.L.str2611361, 4

	.type	.L.str2621362,@object   # @.str2621362
.L.str2621362:
	.asciz	"93:3-1"
	.size	.L.str2621362, 7

	.type	.L.str2631363,@object   # @.str2631363
.L.str2631363:
	.asciz	"lftr.wideiv87"
	.size	.L.str2631363, 14

	.type	.L.str2641364,@object   # @.str2641364
.L.str2641364:
	.asciz	"exitcond88"
	.size	.L.str2641364, 11

	.type	.L.str2651365,@object   # @.str2651365
.L.str2651365:
	.asciz	"93:3-2"
	.size	.L.str2651365, 7

	.type	.L.str2661366,@object   # @.str2661366
.L.str2661366:
	.asciz	"g.0.lcssa"
	.size	.L.str2661366, 10

	.type	.L.str2671367,@object   # @.str2671367
	.align	16
.L.str2671367:
	.asciz	"._crit_edge18:2-0"
	.size	.L.str2671367, 18

	.type	.L.str2681368,@object   # @.str2681368
.L.str2681368:
	.asciz	"lftr.wideiv93"
	.size	.L.str2681368, 14

	.type	.L.str2691369,@object   # @.str2691369
.L.str2691369:
	.asciz	"exitcond94"
	.size	.L.str2691369, 11

	.type	.L.str2701370,@object   # @.str2701370
	.align	16
.L.str2701370:
	.asciz	"._crit_edge18:2-1"
	.size	.L.str2701370, 18

	.type	.L.str2711371,@object   # @.str2711371
.L.str2711371:
	.asciz	".loopexit20:1"
	.size	.L.str2711371, 14

	.type	.L.str2721372,@object   # @.str2721372
.L.str2721372:
	.asciz	"105"
	.size	.L.str2721372, 4

	.type	.L.str2731373,@object   # @.str2731373
.L.str2731373:
	.asciz	".loopexit20:1-0"
	.size	.L.str2731373, 16

	.type	.L.str2741374,@object   # @.str2741374
.L.str2741374:
	.asciz	".lr.ph25:2"
	.size	.L.str2741374, 11

	.type	.L.str2751375,@object   # @.str2751375
.L.str2751375:
	.asciz	"indvars.iv96"
	.size	.L.str2751375, 13

	.type	.L.str2761376,@object   # @.str2761376
	.align	16
.L.str2761376:
	.asciz	"indvars.iv.next97"
	.size	.L.str2761376, 18

	.type	.L.str2771377,@object   # @.str2771377
.L.str2771377:
	.asciz	"f.024"
	.size	.L.str2771377, 6

	.type	.L.str2781378,@object   # @.str2781378
.L.str2781378:
	.asciz	"112"
	.size	.L.str2781378, 4

	.type	.L.str2791379,@object   # @.str2791379
.L.str2791379:
	.asciz	"106"
	.size	.L.str2791379, 4

	.type	.L.str2801380,@object   # @.str2801380
.L.str2801380:
	.asciz	"107"
	.size	.L.str2801380, 4

	.type	.L.str2811381,@object   # @.str2811381
.L.str2811381:
	.asciz	"108"
	.size	.L.str2811381, 4

	.type	.L.str2821382,@object   # @.str2821382
.L.str2821382:
	.asciz	".lr.ph25:2-0"
	.size	.L.str2821382, 13

	.type	.L.str2831383,@object   # @.str2831383
.L.str2831383:
	.asciz	"109"
	.size	.L.str2831383, 4

	.type	.L.str2841384,@object   # @.str2841384
.L.str2841384:
	.asciz	"110"
	.size	.L.str2841384, 4

	.type	.L.str2851385,@object   # @.str2851385
.L.str2851385:
	.asciz	"111"
	.size	.L.str2851385, 4

	.type	.L.str2861386,@object   # @.str2861386
.L.str2861386:
	.asciz	"lftr.wideiv100"
	.size	.L.str2861386, 15

	.type	.L.str2871387,@object   # @.str2871387
.L.str2871387:
	.asciz	"exitcond101"
	.size	.L.str2871387, 12

	.type	.L.str2881388,@object   # @.str2881388
.L.str2881388:
	.asciz	".lr.ph25:2-2"
	.size	.L.str2881388, 13

	.type	.L.str2891389,@object   # @.str2891389
.L.str2891389:
	.asciz	"._crit_edge26:1"
	.size	.L.str2891389, 16

	.type	.L.str2901390,@object   # @.str2901390
.L.str2901390:
	.asciz	"113"
	.size	.L.str2901390, 4

	.type	.L.str2911391,@object   # @.str2911391
.L.str2911391:
	.asciz	"114"
	.size	.L.str2911391, 4

	.type	.L.str2921392,@object   # @.str2921392
.L.str2921392:
	.asciz	"115"
	.size	.L.str2921392, 4

	.type	.L.str2931393,@object   # @.str2931393
	.align	16
.L.str2931393:
	.asciz	"._crit_edge26:1-2"
	.size	.L.str2931393, 18

	.type	.L.str2941394,@object   # @.str2941394
.L.str2941394:
	.asciz	".lr.ph31:2"
	.size	.L.str2941394, 11

	.type	.L.str2951395,@object   # @.str2951395
.L.str2951395:
	.asciz	"indvars.iv102"
	.size	.L.str2951395, 14

	.type	.L.str2961396,@object   # @.str2961396
	.align	16
.L.str2961396:
	.asciz	"indvars.iv.next103"
	.size	.L.str2961396, 19

	.type	.L.str2971397,@object   # @.str2971397
.L.str2971397:
	.asciz	"116"
	.size	.L.str2971397, 4

	.type	.L.str2981398,@object   # @.str2981398
.L.str2981398:
	.asciz	"117"
	.size	.L.str2981398, 4

	.type	.L.str2991399,@object   # @.str2991399
.L.str2991399:
	.asciz	"118"
	.size	.L.str2991399, 4

	.type	.L.str3001400,@object   # @.str3001400
.L.str3001400:
	.asciz	"119"
	.size	.L.str3001400, 4

	.type	.L.str3011401,@object   # @.str3011401
.L.str3011401:
	.asciz	"120"
	.size	.L.str3011401, 4

	.type	.L.str3021402,@object   # @.str3021402
.L.str3021402:
	.asciz	"121"
	.size	.L.str3021402, 4

	.type	.L.str3031403,@object   # @.str3031403
.L.str3031403:
	.asciz	".lr.ph31:2-0"
	.size	.L.str3031403, 13

	.type	.L.str3041404,@object   # @.str3041404
.L.str3041404:
	.asciz	"lftr.wideiv106"
	.size	.L.str3041404, 15

	.type	.L.str3051405,@object   # @.str3051405
.L.str3051405:
	.asciz	"exitcond107"
	.size	.L.str3051405, 12

	.type	.L.str3061406,@object   # @.str3061406
.L.str3061406:
	.asciz	".lr.ph31:2-1"
	.size	.L.str3061406, 13

	.type	.L.str3071407,@object   # @.str3071407
.L.str3071407:
	.asciz	".loopexit28:1"
	.size	.L.str3071407, 14

	.type	.L.str3081408,@object   # @.str3081408
.L.str3081408:
	.asciz	"122"
	.size	.L.str3081408, 4

	.type	.L.str3091409,@object   # @.str3091409
.L.str3091409:
	.asciz	".loopexit28:1-0"
	.size	.L.str3091409, 16

	.type	.L.str3101410,@object   # @.str3101410
.L.str3101410:
	.asciz	".lr.ph34:2"
	.size	.L.str3101410, 11

	.type	.L.str3111411,@object   # @.str3111411
.L.str3111411:
	.asciz	"indvars.iv116"
	.size	.L.str3111411, 14

	.type	.L.str3121412,@object   # @.str3121412
	.align	16
.L.str3121412:
	.asciz	"indvars.iv.next117"
	.size	.L.str3121412, 19

	.type	.L.str3131413,@object   # @.str3131413
.L.str3131413:
	.asciz	"._crit_edge35:2"
	.size	.L.str3131413, 16

	.type	.L.str3141414,@object   # @.str3141414
.L.str3141414:
	.asciz	"123"
	.size	.L.str3141414, 4

	.type	.L.str3151415,@object   # @.str3151415
.L.str3151415:
	.asciz	"124"
	.size	.L.str3151415, 4

	.type	.L.str3161416,@object   # @.str3161416
.L.str3161416:
	.asciz	"125"
	.size	.L.str3161416, 4

	.type	.L.str3171417,@object   # @.str3171417
.L.str3171417:
	.asciz	"126"
	.size	.L.str3171417, 4

	.type	.L.str3181418,@object   # @.str3181418
.L.str3181418:
	.asciz	"127"
	.size	.L.str3181418, 4

	.type	.L.str3191419,@object   # @.str3191419
.L.str3191419:
	.asciz	"128"
	.size	.L.str3191419, 4

	.type	.L.str3201420,@object   # @.str3201420
.L.str3201420:
	.asciz	"129"
	.size	.L.str3201420, 4

	.type	.L.str3211421,@object   # @.str3211421
.L.str3211421:
	.asciz	".lr.ph34:2-3"
	.size	.L.str3211421, 13

	.type	.L.str3221422,@object   # @.str3221422
.L.str3221422:
	.asciz	"130:3"
	.size	.L.str3221422, 6

	.type	.L.str3231423,@object   # @.str3231423
.L.str3231423:
	.asciz	"indvars.iv110"
	.size	.L.str3231423, 14

	.type	.L.str3241424,@object   # @.str3241424
	.align	16
.L.str3241424:
	.asciz	"indvars.iv.next111"
	.size	.L.str3241424, 19

	.type	.L.str3251425,@object   # @.str3251425
.L.str3251425:
	.asciz	"131"
	.size	.L.str3251425, 4

	.type	.L.str3261426,@object   # @.str3261426
.L.str3261426:
	.asciz	"132"
	.size	.L.str3261426, 4

	.type	.L.str3271427,@object   # @.str3271427
.L.str3271427:
	.asciz	"133"
	.size	.L.str3271427, 4

	.type	.L.str3281428,@object   # @.str3281428
.L.str3281428:
	.asciz	"134"
	.size	.L.str3281428, 4

	.type	.L.str3291429,@object   # @.str3291429
.L.str3291429:
	.asciz	"135"
	.size	.L.str3291429, 4

	.type	.L.str3301430,@object   # @.str3301430
.L.str3301430:
	.asciz	"136"
	.size	.L.str3301430, 4

	.type	.L.str3311431,@object   # @.str3311431
.L.str3311431:
	.asciz	"137"
	.size	.L.str3311431, 4

	.type	.L.str3321432,@object   # @.str3321432
.L.str3321432:
	.asciz	"138"
	.size	.L.str3321432, 4

	.type	.L.str3331433,@object   # @.str3331433
.L.str3331433:
	.asciz	"139"
	.size	.L.str3331433, 4

	.type	.L.str3341434,@object   # @.str3341434
.L.str3341434:
	.asciz	"140"
	.size	.L.str3341434, 4

	.type	.L.str3351435,@object   # @.str3351435
.L.str3351435:
	.asciz	"141"
	.size	.L.str3351435, 4

	.type	.L.str3361436,@object   # @.str3361436
.L.str3361436:
	.asciz	"130:3-0"
	.size	.L.str3361436, 8

	.type	.L.str3371437,@object   # @.str3371437
.L.str3371437:
	.asciz	"lftr.wideiv114"
	.size	.L.str3371437, 15

	.type	.L.str3381438,@object   # @.str3381438
.L.str3381438:
	.asciz	"exitcond115"
	.size	.L.str3381438, 12

	.type	.L.str3391439,@object   # @.str3391439
.L.str3391439:
	.asciz	"130:3-1"
	.size	.L.str3391439, 8

	.type	.L.str3401440,@object   # @.str3401440
.L.str3401440:
	.asciz	"lftr.wideiv120"
	.size	.L.str3401440, 15

	.type	.L.str3411441,@object   # @.str3411441
.L.str3411441:
	.asciz	"exitcond121"
	.size	.L.str3411441, 12

	.type	.L.str3421442,@object   # @.str3421442
	.align	16
.L.str3421442:
	.asciz	"._crit_edge35:2-0"
	.size	.L.str3421442, 18

	.type	.L.str3431443,@object   # @.str3431443
.L.str3431443:
	.asciz	".preheader39:1"
	.size	.L.str3431443, 15

	.type	.L.str3441444,@object   # @.str3441444
.L.str3441444:
	.asciz	"142"
	.size	.L.str3441444, 4

	.type	.L.str3451445,@object   # @.str3451445
	.align	16
.L.str3451445:
	.asciz	".preheader39:1-0"
	.size	.L.str3451445, 17

	.type	.L.str3461446,@object   # @.str3461446
.L.str3461446:
	.asciz	".lr.ph42:2"
	.size	.L.str3461446, 11

	.type	.L.str3471447,@object   # @.str3471447
.L.str3471447:
	.asciz	"indvars.iv122"
	.size	.L.str3471447, 14

	.type	.L.str3481448,@object   # @.str3481448
	.align	16
.L.str3481448:
	.asciz	"indvars.iv.next123"
	.size	.L.str3481448, 19

	.type	.L.str3491449,@object   # @.str3491449
.L.str3491449:
	.asciz	"143"
	.size	.L.str3491449, 4

	.type	.L.str3501450,@object   # @.str3501450
.L.str3501450:
	.asciz	"144"
	.size	.L.str3501450, 4

	.type	.L.str3511451,@object   # @.str3511451
.L.str3511451:
	.asciz	"145"
	.size	.L.str3511451, 4

	.type	.L.str3521452,@object   # @.str3521452
.L.str3521452:
	.asciz	"146"
	.size	.L.str3521452, 4

	.type	.L.str3531453,@object   # @.str3531453
.L.str3531453:
	.asciz	"147"
	.size	.L.str3531453, 4

	.type	.L.str3541454,@object   # @.str3541454
.L.str3541454:
	.asciz	"148"
	.size	.L.str3541454, 4

	.type	.L.str3551455,@object   # @.str3551455
.L.str3551455:
	.asciz	"149"
	.size	.L.str3551455, 4

	.type	.L.str3561456,@object   # @.str3561456
.L.str3561456:
	.asciz	"150"
	.size	.L.str3561456, 4

	.type	.L.str3571457,@object   # @.str3571457
.L.str3571457:
	.asciz	".lr.ph42:2-1"
	.size	.L.str3571457, 13

	.type	.L.str3581458,@object   # @.str3581458
.L.str3581458:
	.asciz	"151"
	.size	.L.str3581458, 4

	.type	.L.str3591459,@object   # @.str3591459
.L.str3591459:
	.asciz	"152"
	.size	.L.str3591459, 4

	.type	.L.str3601460,@object   # @.str3601460
.L.str3601460:
	.asciz	"153"
	.size	.L.str3601460, 4

	.type	.L.str3611461,@object   # @.str3611461
.L.str3611461:
	.asciz	"154"
	.size	.L.str3611461, 4

	.type	.L.str3621462,@object   # @.str3621462
.L.str3621462:
	.asciz	"155"
	.size	.L.str3621462, 4

	.type	.L.str3631463,@object   # @.str3631463
.L.str3631463:
	.asciz	".lr.ph42:2-2"
	.size	.L.str3631463, 13

	.type	.L.str3641464,@object   # @.str3641464
.L.str3641464:
	.asciz	"156"
	.size	.L.str3641464, 4

	.type	.L.str3651465,@object   # @.str3651465
.L.str3651465:
	.asciz	".lr.ph42:2-3"
	.size	.L.str3651465, 13

	.type	.L.str3661466,@object   # @.str3661466
.L.str3661466:
	.asciz	"lftr.wideiv126"
	.size	.L.str3661466, 15

	.type	.L.str3671467,@object   # @.str3671467
.L.str3671467:
	.asciz	"exitcond127"
	.size	.L.str3671467, 12

	.type	.L.str3681468,@object   # @.str3681468
.L.str3681468:
	.asciz	".lr.ph42:2-4"
	.size	.L.str3681468, 13

	.type	.L.str3691469,@object   # @.str3691469
	.align	16
.L.str3691469:
	.asciz	"._crit_edge52:0-0"
	.size	.L.str3691469, 18

	.type	.L.str3701470,@object   # @.str3701470
.L.str3701470:
	.asciz	".loopexit24:0"
	.size	.L.str3701470, 14

	.type	.L.str3711471,@object   # @.str3711471
.L.str3711471:
	.asciz	".preheader34:0"
	.size	.L.str3711471, 15

	.type	.L.str3721472,@object   # @.str3721472
	.align	16
.L.str3721472:
	.asciz	".preheader34:0-0"
	.size	.L.str3721472, 17

	.type	.L.str3731473,@object   # @.str3731473
.L.str3731473:
	.asciz	".lr.ph36:1"
	.size	.L.str3731473, 11

	.type	.L.str3741474,@object   # @.str3741474
	.align	16
.L.str3741474:
	.asciz	"._crit_edge37.thread:0"
	.size	.L.str3741474, 23

	.type	.L.str3751475,@object   # @.str3751475
	.align	16
.L.str3751475:
	.asciz	"._crit_edge37.thread:0-2"
	.size	.L.str3751475, 25

	.type	.L.str3761476,@object   # @.str3761476
	.align	16
.L.str3761476:
	.asciz	"._crit_edge37.thread:0-4"
	.size	.L.str3761476, 25

	.type	.L.str3771477,@object   # @.str3771477
.L.str3771477:
	.asciz	".lr.ph36:1-0"
	.size	.L.str3771477, 13

	.type	.L.str3781478,@object   # @.str3781478
.L.str3781478:
	.asciz	".lr.ph36:1-1"
	.size	.L.str3781478, 13

	.type	.L.str3791479,@object   # @.str3791479
.L.str3791479:
	.asciz	"._crit_edge37:0"
	.size	.L.str3791479, 16

	.type	.L.str3801480,@object   # @.str3801480
	.align	16
.L.str3801480:
	.asciz	"._crit_edge37:0-2"
	.size	.L.str3801480, 18

	.type	.L.str3811481,@object   # @.str3811481
	.align	16
.L.str3811481:
	.asciz	"._crit_edge37:0-4"
	.size	.L.str3811481, 18

	.type	.L.str3821482,@object   # @.str3821482
.L.str3821482:
	.asciz	".lr.ph33:1"
	.size	.L.str3821482, 11

	.type	.L.str3831483,@object   # @.str3831483
.L.str3831483:
	.asciz	"indvars.iv63"
	.size	.L.str3831483, 13

	.type	.L.str3841484,@object   # @.str3841484
	.align	16
.L.str3841484:
	.asciz	"indvars.iv.next64"
	.size	.L.str3841484, 18

	.type	.L.str3851485,@object   # @.str3851485
.L.str3851485:
	.asciz	".loopexit17:1"
	.size	.L.str3851485, 14

	.type	.L.str3861486,@object   # @.str3861486
.L.str3861486:
	.asciz	"indvars.iv49"
	.size	.L.str3861486, 13

	.type	.L.str3871487,@object   # @.str3871487
	.align	16
.L.str3871487:
	.asciz	"indvars.iv.next50"
	.size	.L.str3871487, 18

	.type	.L.str3881488,@object   # @.str3881488
.L.str3881488:
	.asciz	"indvars.iv42"
	.size	.L.str3881488, 13

	.type	.L.str3891489,@object   # @.str3891489
	.align	16
.L.str3891489:
	.asciz	"indvars.iv.next43"
	.size	.L.str3891489, 18

	.type	.L.str3901490,@object   # @.str3901490
.L.str3901490:
	.asciz	"t.031"
	.size	.L.str3901490, 6

	.type	.L.str3911491,@object   # @.str3911491
.L.str3911491:
	.asciz	"t.1"
	.size	.L.str3911491, 4

	.type	.L.str3921492,@object   # @.str3921492
.L.str3921492:
	.asciz	"b.030"
	.size	.L.str3921492, 6

	.type	.L.str3931493,@object   # @.str3931493
.L.str3931493:
	.asciz	"b.1"
	.size	.L.str3931493, 4

	.type	.L.str3941494,@object   # @.str3941494
.L.str3941494:
	.asciz	"l.028"
	.size	.L.str3941494, 6

	.type	.L.str3951495,@object   # @.str3951495
.L.str3951495:
	.asciz	"f.027"
	.size	.L.str3951495, 6

	.type	.L.str3961496,@object   # @.str3961496
.L.str3961496:
	.asciz	"f.2"
	.size	.L.str3961496, 4

	.type	.L.str3971497,@object   # @.str3971497
.L.str3971497:
	.asciz	"c.026"
	.size	.L.str3971497, 6

	.type	.L.str3981498,@object   # @.str3981498
.L.str3981498:
	.asciz	"c.1"
	.size	.L.str3981498, 4

	.type	.L.str3991499,@object   # @.str3991499
.L.str3991499:
	.asciz	".lr.ph33:1-2"
	.size	.L.str3991499, 13

	.type	.L.str4001500,@object   # @.str4001500
.L.str4001500:
	.asciz	"22:1"
	.size	.L.str4001500, 5

	.type	.L.str4011501,@object   # @.str4011501
.L.str4011501:
	.asciz	"22:1-3"
	.size	.L.str4011501, 7

	.type	.L.str4021502,@object   # @.str4021502
.L.str4021502:
	.asciz	".lr.ph:1-1"
	.size	.L.str4021502, 11

	.type	.L.str4031503,@object   # @.str4031503
.L.str4031503:
	.asciz	"29:2"
	.size	.L.str4031503, 5

	.type	.L.str4041504,@object   # @.str4041504
.L.str4041504:
	.asciz	"26:2"
	.size	.L.str4041504, 5

	.type	.L.str4051505,@object   # @.str4051505
	.align	16
.L.str4051505:
	.asciz	"indvars.iv.next41"
	.size	.L.str4051505, 18

	.type	.L.str4061506,@object   # @.str4061506
.L.str4061506:
	.asciz	"26:2-0"
	.size	.L.str4061506, 7

	.type	.L.str4071507,@object   # @.str4071507
.L.str4071507:
	.asciz	"split2:1"
	.size	.L.str4071507, 9

	.type	.L.str4081508,@object   # @.str4081508
.L.str4081508:
	.asciz	"indvars.iv40"
	.size	.L.str4081508, 13

	.type	.L.str4091509,@object   # @.str4091509
.L.str4091509:
	.asciz	"m.01"
	.size	.L.str4091509, 5

	.type	.L.str4101510,@object   # @.str4101510
.L.str4101510:
	.asciz	"29:2-1"
	.size	.L.str4101510, 7

	.type	.L.str4111511,@object   # @.str4111511
.L.str4111511:
	.asciz	"m.0.lcssa"
	.size	.L.str4111511, 10

	.type	.L.str4121512,@object   # @.str4121512
.L.str4121512:
	.asciz	"split2:1-0"
	.size	.L.str4121512, 11

	.type	.L.str4131513,@object   # @.str4131513
.L.str4131513:
	.asciz	".lr.ph23:1"
	.size	.L.str4131513, 11

	.type	.L.str4141514,@object   # @.str4141514
.L.str4141514:
	.asciz	"46:2"
	.size	.L.str4141514, 5

	.type	.L.str4151515,@object   # @.str4151515
.L.str4151515:
	.asciz	"f.1"
	.size	.L.str4151515, 4

	.type	.L.str4161516,@object   # @.str4161516
.L.str4161516:
	.asciz	"106:2"
	.size	.L.str4161516, 6

	.type	.L.str4171517,@object   # @.str4171517
.L.str4171517:
	.asciz	"j.0"
	.size	.L.str4171517, 4

	.type	.L.str4181518,@object   # @.str4181518
.L.str4181518:
	.asciz	"46:2-0"
	.size	.L.str4181518, 7

	.type	.L.str4191519,@object   # @.str4191519
.L.str4191519:
	.asciz	"48:0"
	.size	.L.str4191519, 5

	.type	.L.str4201520,@object   # @.str4201520
.L.str4201520:
	.asciz	"50:2"
	.size	.L.str4201520, 5

	.type	.L.str4211521,@object   # @.str4211521
.L.str4211521:
	.asciz	"48:0-1"
	.size	.L.str4211521, 7

	.type	.L.str4221522,@object   # @.str4221522
.L.str4221522:
	.asciz	"50:2-5"
	.size	.L.str4221522, 7

	.type	.L.str4231523,@object   # @.str4231523
.L.str4231523:
	.asciz	"50:2-7"
	.size	.L.str4231523, 7

	.type	.L.str4241524,@object   # @.str4241524
.L.str4241524:
	.asciz	".lr.ph5:3"
	.size	.L.str4241524, 10

	.type	.L.str4251525,@object   # @.str4251525
.L.str4251525:
	.asciz	"._crit_edge6:2"
	.size	.L.str4251525, 15

	.type	.L.str4261526,@object   # @.str4261526
.L.str4261526:
	.asciz	"indvars.iv44"
	.size	.L.str4261526, 13

	.type	.L.str4271527,@object   # @.str4271527
	.align	16
.L.str4271527:
	.asciz	"indvars.iv.next45"
	.size	.L.str4271527, 18

	.type	.L.str4281528,@object   # @.str4281528
.L.str4281528:
	.asciz	".lr.ph5:3-0"
	.size	.L.str4281528, 12

	.type	.L.str4291529,@object   # @.str4291529
.L.str4291529:
	.asciz	".lr.ph5:3-1"
	.size	.L.str4291529, 12

	.type	.L.str4301530,@object   # @.str4301530
.L.str4301530:
	.asciz	"g.0"
	.size	.L.str4301530, 4

	.type	.L.str4311531,@object   # @.str4311531
	.align	16
.L.str4311531:
	.asciz	"._crit_edge6:2-7"
	.size	.L.str4311531, 17

	.type	.L.str4321532,@object   # @.str4321532
.L.str4321532:
	.asciz	"._crit_edge13:2"
	.size	.L.str4321532, 16

	.type	.L.str4331533,@object   # @.str4331533
.L.str4331533:
	.asciz	".lr.ph12:3"
	.size	.L.str4331533, 11

	.type	.L.str4341534,@object   # @.str4341534
.L.str4341534:
	.asciz	"indvars.iv47"
	.size	.L.str4341534, 13

	.type	.L.str4351535,@object   # @.str4351535
	.align	16
.L.str4351535:
	.asciz	"indvars.iv.next48"
	.size	.L.str4351535, 18

	.type	.L.str4361536,@object   # @.str4361536
.L.str4361536:
	.asciz	"s.010"
	.size	.L.str4361536, 6

	.type	.L.str4371537,@object   # @.str4371537
.L.str4371537:
	.asciz	"h.08"
	.size	.L.str4371537, 5

	.type	.L.str4381538,@object   # @.str4381538
.L.str4381538:
	.asciz	"g.17"
	.size	.L.str4381538, 5

	.type	.L.str4391539,@object   # @.str4391539
.L.str4391539:
	.asciz	"g.2"
	.size	.L.str4391539, 4

	.type	.L.str4401540,@object   # @.str4401540
.L.str4401540:
	.asciz	".lr.ph12:3-3"
	.size	.L.str4401540, 13

	.type	.L.str4411541,@object   # @.str4411541
.L.str4411541:
	.asciz	".lr.ph12:3-5"
	.size	.L.str4411541, 13

	.type	.L.str4421542,@object   # @.str4421542
.L.str4421542:
	.asciz	"93"
	.size	.L.str4421542, 3

	.type	.L.str4431543,@object   # @.str4431543
.L.str4431543:
	.asciz	"lftr.wideiv51"
	.size	.L.str4431543, 14

	.type	.L.str4441544,@object   # @.str4441544
.L.str4441544:
	.asciz	"exitcond52"
	.size	.L.str4441544, 11

	.type	.L.str4451545,@object   # @.str4451545
.L.str4451545:
	.asciz	".lr.ph12:3-9"
	.size	.L.str4451545, 13

	.type	.L.str4461546,@object   # @.str4461546
.L.str4461546:
	.asciz	"s.0.lcssa"
	.size	.L.str4461546, 10

	.type	.L.str4471547,@object   # @.str4471547
.L.str4471547:
	.asciz	"g.1.lcssa"
	.size	.L.str4471547, 10

	.type	.L.str4481548,@object   # @.str4481548
	.align	16
.L.str4481548:
	.asciz	"._crit_edge13:2-0"
	.size	.L.str4481548, 18

	.type	.L.str4491549,@object   # @.str4491549
	.align	16
.L.str4491549:
	.asciz	"._crit_edge13:2-1"
	.size	.L.str4491549, 18

	.type	.L.str4501550,@object   # @.str4501550
	.align	16
.L.str4501550:
	.asciz	"._crit_edge13:2-2"
	.size	.L.str4501550, 18

	.type	.L.str4511551,@object   # @.str4511551
.L.str4511551:
	.asciz	"100:2"
	.size	.L.str4511551, 6

	.type	.L.str4521552,@object   # @.str4521552
.L.str4521552:
	.asciz	"100:2-0"
	.size	.L.str4521552, 8

	.type	.L.str4531553,@object   # @.str4531553
.L.str4531553:
	.asciz	"106:2-0"
	.size	.L.str4531553, 8

	.type	.L.str4541554,@object   # @.str4541554
.L.str4541554:
	.asciz	"106:2-1"
	.size	.L.str4541554, 8

	.type	.L.str4551555,@object   # @.str4551555
.L.str4551555:
	.asciz	".lr.ph23:1-2"
	.size	.L.str4551555, 13

	.type	.L.str4561556,@object   # @.str4561556
.L.str4561556:
	.asciz	"111:2"
	.size	.L.str4561556, 6

	.type	.L.str4571557,@object   # @.str4571557
.L.str4571557:
	.asciz	"indvars.iv60"
	.size	.L.str4571557, 13

	.type	.L.str4581558,@object   # @.str4581558
	.align	16
.L.str4581558:
	.asciz	"indvars.iv.next61"
	.size	.L.str4581558, 18

	.type	.L.str4591559,@object   # @.str4591559
.L.str4591559:
	.asciz	"123:2"
	.size	.L.str4591559, 6

	.type	.L.str4601560,@object   # @.str4601560
.L.str4601560:
	.asciz	"i.221"
	.size	.L.str4601560, 6

	.type	.L.str4611561,@object   # @.str4611561
.L.str4611561:
	.asciz	"111:2-0"
	.size	.L.str4611561, 8

	.type	.L.str4621562,@object   # @.str4621562
.L.str4621562:
	.asciz	"114:1"
	.size	.L.str4621562, 6

	.type	.L.str4631563,@object   # @.str4631563
.L.str4631563:
	.asciz	"117:2"
	.size	.L.str4631563, 6

	.type	.L.str4641564,@object   # @.str4641564
.L.str4641564:
	.asciz	"114:1-0"
	.size	.L.str4641564, 8

	.type	.L.str4651565,@object   # @.str4651565
.L.str4651565:
	.asciz	"114:1-1"
	.size	.L.str4651565, 8

	.type	.L.str4661566,@object   # @.str4661566
.L.str4661566:
	.asciz	"117:2-0"
	.size	.L.str4661566, 8

	.type	.L.str4671567,@object   # @.str4671567
.L.str4671567:
	.asciz	"122:1"
	.size	.L.str4671567, 6

	.type	.L.str4681568,@object   # @.str4681568
.L.str4681568:
	.asciz	"122:1-0"
	.size	.L.str4681568, 8

	.type	.L.str4691569,@object   # @.str4691569
.L.str4691569:
	.asciz	"122:1-1"
	.size	.L.str4691569, 8

	.type	.L.str4701570,@object   # @.str4701570
.L.str4701570:
	.asciz	"123:2-0"
	.size	.L.str4701570, 8

	.type	.L.str4711571,@object   # @.str4711571
.L.str4711571:
	.asciz	"123:2-2"
	.size	.L.str4711571, 8

	.type	.L.str4721572,@object   # @.str4721572
.L.str4721572:
	.asciz	".loopexit17:1-1"
	.size	.L.str4721572, 16

	.type	.L.str4731573,@object   # @.str4731573
.L.str4731573:
	.asciz	".loopexit24:0-0"
	.size	.L.str4731573, 16

	.type	.L.str4741574,@object   # @.str4741574
.L.str4741574:
	.asciz	"trbak1"
	.size	.L.str4741574, 7

	.type	.L.str4751575,@object   # @.str4751575
.L.str4751575:
	.asciz	"notlhs"
	.size	.L.str4751575, 7

	.type	.L.str4761576,@object   # @.str4761576
.L.str4761576:
	.asciz	"m"
	.size	.L.str4761576, 2

	.type	.L.str4771577,@object   # @.str4771577
.L.str4771577:
	.asciz	"notrhs"
	.size	.L.str4771577, 7

	.type	.L.str4781578,@object   # @.str4781578
.L.str4781578:
	.asciz	"or.cond.not"
	.size	.L.str4781578, 12

	.type	.L.str4791579,@object   # @.str4791579
.L.str4791579:
	.asciz	"or.cond32"
	.size	.L.str4791579, 10

	.type	.L.str4801580,@object   # @.str4801580
.L.str4801580:
	.asciz	"0:0-5"
	.size	.L.str4801580, 6

	.type	.L.str4811581,@object   # @.str4811581
.L.str4811581:
	.asciz	".lr.ph15:0"
	.size	.L.str4811581, 11

	.type	.L.str4821582,@object   # @.str4821582
.L.str4821582:
	.asciz	".loopexit11:0"
	.size	.L.str4821582, 14

	.type	.L.str4831583,@object   # @.str4831583
.L.str4831583:
	.asciz	".lr.ph15:0-0"
	.size	.L.str4831583, 13

	.type	.L.str4841584,@object   # @.str4841584
.L.str4841584:
	.asciz	"2:1"
	.size	.L.str4841584, 4

	.type	.L.str4851585,@object   # @.str4851585
.L.str4851585:
	.asciz	"indvars.iv28"
	.size	.L.str4851585, 13

	.type	.L.str4861586,@object   # @.str4861586
	.align	16
.L.str4861586:
	.asciz	"indvars.iv.next29"
	.size	.L.str4861586, 18

	.type	.L.str4871587,@object   # @.str4871587
.L.str4871587:
	.asciz	"indvars.iv20"
	.size	.L.str4871587, 13

	.type	.L.str4881588,@object   # @.str4881588
	.align	16
.L.str4881588:
	.asciz	"indvars.iv.next21"
	.size	.L.str4881588, 18

	.type	.L.str4891589,@object   # @.str4891589
.L.str4891589:
	.asciz	".not"
	.size	.L.str4891589, 5

	.type	.L.str4901590,@object   # @.str4901590
.L.str4901590:
	.asciz	".not33"
	.size	.L.str4901590, 7

	.type	.L.str4911591,@object   # @.str4911591
.L.str4911591:
	.asciz	"brmerge"
	.size	.L.str4911591, 8

	.type	.L.str4921592,@object   # @.str4921592
.L.str4921592:
	.asciz	"2:1-0"
	.size	.L.str4921592, 6

	.type	.L.str4931593,@object   # @.str4931593
	.align	16
.L.str4931593:
	.asciz	".preheader.lr.ph:1"
	.size	.L.str4931593, 19

	.type	.L.str4941594,@object   # @.str4941594
	.align	16
.L.str4941594:
	.asciz	".preheader.lr.ph:1-0"
	.size	.L.str4941594, 21

	.type	.L.str4951595,@object   # @.str4951595
.L.str4951595:
	.asciz	"indvars.iv24"
	.size	.L.str4951595, 13

	.type	.L.str4961596,@object   # @.str4961596
	.align	16
.L.str4961596:
	.asciz	"indvars.iv.next25"
	.size	.L.str4961596, 18

	.type	.L.str4971597,@object   # @.str4971597
.L.str4971597:
	.asciz	"._crit_edge7:2"
	.size	.L.str4971597, 15

	.type	.L.str4981598,@object   # @.str4981598
.L.str4981598:
	.asciz	".lr.ph:2-0"
	.size	.L.str4981598, 11

	.type	.L.str4991599,@object   # @.str4991599
.L.str4991599:
	.asciz	"15:3"
	.size	.L.str4991599, 5

	.type	.L.str5001600,@object   # @.str5001600
.L.str5001600:
	.asciz	"s.03"
	.size	.L.str5001600, 5

	.type	.L.str5011601,@object   # @.str5011601
.L.str5011601:
	.asciz	"26"
	.size	.L.str5011601, 3

	.type	.L.str5021602,@object   # @.str5021602
.L.str5021602:
	.asciz	"15:3-1"
	.size	.L.str5021602, 7

	.type	.L.str5031603,@object   # @.str5031603
.L.str5031603:
	.asciz	".lr.ph6:2"
	.size	.L.str5031603, 10

	.type	.L.str5041604,@object   # @.str5041604
.L.str5041604:
	.asciz	".lr.ph6:2-2"
	.size	.L.str5041604, 12

	.type	.L.str5051605,@object   # @.str5051605
.L.str5051605:
	.asciz	"35:3"
	.size	.L.str5051605, 5

	.type	.L.str5061606,@object   # @.str5061606
.L.str5061606:
	.asciz	"indvars.iv18"
	.size	.L.str5061606, 13

	.type	.L.str5071607,@object   # @.str5071607
	.align	16
.L.str5071607:
	.asciz	"indvars.iv.next19"
	.size	.L.str5071607, 18

	.type	.L.str5081608,@object   # @.str5081608
.L.str5081608:
	.asciz	"35:3-0"
	.size	.L.str5081608, 7

	.type	.L.str5091609,@object   # @.str5091609
.L.str5091609:
	.asciz	"lftr.wideiv22"
	.size	.L.str5091609, 14

	.type	.L.str5101610,@object   # @.str5101610
.L.str5101610:
	.asciz	"exitcond23"
	.size	.L.str5101610, 11

	.type	.L.str5111611,@object   # @.str5111611
.L.str5111611:
	.asciz	"35:3-1"
	.size	.L.str5111611, 7

	.type	.L.str5121612,@object   # @.str5121612
.L.str5121612:
	.asciz	"lftr.wideiv26"
	.size	.L.str5121612, 14

	.type	.L.str5131613,@object   # @.str5131613
.L.str5131613:
	.asciz	"exitcond27"
	.size	.L.str5131613, 11

	.type	.L.str5141614,@object   # @.str5141614
	.align	16
.L.str5141614:
	.asciz	"._crit_edge7:2-0"
	.size	.L.str5141614, 17

	.type	.L.str5151615,@object   # @.str5151615
.L.str5151615:
	.asciz	"lftr.wideiv30"
	.size	.L.str5151615, 14

	.type	.L.str5161616,@object   # @.str5161616
.L.str5161616:
	.asciz	"exitcond31"
	.size	.L.str5161616, 11

	.type	.L.str5171617,@object   # @.str5171617
.L.str5171617:
	.asciz	".loopexit:1-1"
	.size	.L.str5171617, 14

	.type	.L.str5181618,@object   # @.str5181618
.L.str5181618:
	.asciz	".loopexit11:0-0"
	.size	.L.str5181618, 16

	.type	initp,@object           # @initp
	.bss
	.globl	initp
initp:
	.byte	0                       # 0x0
	.size	initp, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str1621,@object      # @.str1621
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str1621:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str1621, 27

	.type	.L.str11622,@object     # @.str11622
.L.str11622:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str11622, 26

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str21623,@object     # @.str21623
.L.str21623:
	.asciz	"dynamic_trace.gz"
	.size	.L.str21623, 17

	.type	.L.str31624,@object     # @.str31624
.L.str31624:
	.asciz	"w"
	.size	.L.str31624, 2

	.type	.L.str41625,@object     # @.str41625
.L.str41625:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str41625, 39

	.type	current_toplevel_function,@object # @current_toplevel_function
	.comm	current_toplevel_function,8,8
	.type	current_logging_status,@object # @current_logging_status
	.comm	current_logging_status,4,4
	.type	.L.str51626,@object     # @.str51626
.L.str51626:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str51626, 75

	.type	.L.str61627,@object     # @.str61627
.L.str61627:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.c"
	.size	.L.str61627, 51

	.type	.L__PRETTY_FUNCTION__.log_or_not,@object # @__PRETTY_FUNCTION__.log_or_not
.L__PRETTY_FUNCTION__.log_or_not:
	.asciz	"logging_status log_or_not(_Bool, _Bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__.log_or_not, 53

	.type	.L.str71628,@object     # @.str71628
.L.str71628:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str71628, 69

	.type	.L.str81629,@object     # @.str81629
.L.str81629:
	.asciz	"0x"
	.size	.L.str81629, 3

	.type	.L.str91630,@object     # @.str91630
.L.str91630:
	.asciz	"%02x"
	.size	.L.str91630, 5

	.type	.L.str101631,@object    # @.str101631
.L.str101631:
	.asciz	"Stopping logging at inst %d.\n"
	.size	.L.str101631, 30

	.type	.L.str111632,@object    # @.str111632
.L.str111632:
	.asciz	"Starting to log at inst = %d.\n"
	.size	.L.str111632, 31

	.type	.L.str121633,@object    # @.str121633
.L.str121633:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str121633, 15

	.type	.L.str131634,@object    # @.str131634
.L.str131634:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str131634, 22

	.type	.L.str141635,@object    # @.str141635
.L.str141635:
	.asciz	"initp == true"
	.size	.L.str141635, 14

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str151636,@object    # @.str151636
.L.str151636:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str151636, 12

	.type	.L.str161637,@object    # @.str161637
.L.str161637:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str161637, 12

	.type	.L.str171638,@object    # @.str171638
.L.str171638:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str171638, 13

	.type	.L.str181639,@object    # @.str181639
.L.str181639:
	.asciz	",%s"
	.size	.L.str181639, 4

	.type	.L.str191640,@object    # @.str191640
.L.str191640:
	.asciz	", "
	.size	.L.str191640, 3

	.type	.L.str201641,@object    # @.str201641
.L.str201641:
	.asciz	",%s,\n"
	.size	.L.str201641, 6

	.type	.L.str211642,@object    # @.str211642
.L.str211642:
	.asciz	",\n"
	.size	.L.str211642, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_ptr,@object # @__PRETTY_FUNCTION__.trace_logger_log_ptr
.L__PRETTY_FUNCTION__.trace_logger_log_ptr:
	.asciz	"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_ptr, 72

	.type	.L.str221643,@object    # @.str221643
.L.str221643:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str221643, 14

	.type	.L.str231644,@object    # @.str231644
.L.str231644:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str231644, 14

	.type	.L.str241645,@object    # @.str241645
.L.str241645:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str241645, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str251646,@object    # @.str251646
.L.str251646:
	.asciz	"r,%d,%f,%d"
	.size	.L.str251646, 11

	.type	.L.str261647,@object    # @.str261647
.L.str261647:
	.asciz	"f,%d,%f,%d"
	.size	.L.str261647, 11

	.type	.L.str271648,@object    # @.str271648
.L.str271648:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str271648, 12

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_vector,@object # @__PRETTY_FUNCTION__.trace_logger_log_vector
.L__PRETTY_FUNCTION__.trace_logger_log_vector:
	.asciz	"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_vector, 76

	.type	.L.str281649,@object    # @.str281649
.L.str281649:
	.asciz	"r,%d,%s,%d"
	.size	.L.str281649, 11

	.type	.L.str291650,@object    # @.str291650
.L.str291650:
	.asciz	"f,%d,%s,%d"
	.size	.L.str291650, 11

	.type	.L.str301651,@object    # @.str301651
.L.str301651:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str301651, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"feature_extraction.c"
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/integration-test/with-cpu/feature_extraction"
.Linfo_string3:
	.asciz	"high_index"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"low_index"
.Linfo_string6:
	.asciz	"n_fft_items"
.Linfo_string7:
	.asciz	"n_sd"
.Linfo_string8:
	.asciz	"test_stores"
.Linfo_string9:
	.asciz	"process_data"
.Linfo_string10:
	.asciz	"main"
.Linfo_string11:
	.asciz	"kiss_fft.c"
.Linfo_string12:
	.asciz	"pi"
.Linfo_string13:
	.asciz	"double"
.Linfo_string14:
	.asciz	"kiss_fft_alloc"
.Linfo_string15:
	.asciz	"nfft"
.Linfo_string16:
	.asciz	"inverse"
.Linfo_string17:
	.asciz	"factors"
.Linfo_string18:
	.asciz	"twiddles"
.Linfo_string19:
	.asciz	"r"
.Linfo_string20:
	.asciz	"i"
.Linfo_string21:
	.asciz	"kiss_fft_cpx"
.Linfo_string22:
	.asciz	"kiss_fft_state"
.Linfo_string23:
	.asciz	"kiss_fft_cfg"
.Linfo_string24:
	.asciz	"kiss_fft_stride"
.Linfo_string25:
	.asciz	"kiss_fft"
.Linfo_string26:
	.asciz	"kiss_fft_cleanup"
.Linfo_string27:
	.asciz	"kiss_fft_next_fast_size"
.Linfo_string28:
	.asciz	"kf_work"
.Linfo_string29:
	.asciz	"kf_bfly_generic"
.Linfo_string30:
	.asciz	"kf_bfly5"
.Linfo_string31:
	.asciz	"kf_bfly4"
.Linfo_string32:
	.asciz	"kf_bfly3"
.Linfo_string33:
	.asciz	"kf_bfly2"
.Linfo_string34:
	.asciz	"kf_factor"
.Linfo_string35:
	.asciz	"eispack.c"
.Linfo_string36:
	.asciz	"value"
.Linfo_string37:
	.asciz	"pythag"
.Linfo_string38:
	.asciz	"r8_epsilon"
.Linfo_string39:
	.asciz	"r8_max"
.Linfo_string40:
	.asciz	"r8_min"
.Linfo_string41:
	.asciz	"r8_sign"
.Linfo_string42:
	.asciz	"rs"
.Linfo_string43:
	.asciz	"tqlrat"
.Linfo_string44:
	.asciz	"trbak1"
.Linfo_string45:
	.asciz	"tred1"
.Linfo_string46:
	.asciz	"time_data"
.Linfo_string47:
	.asciz	"TYPE"
.Linfo_string48:
	.asciz	"freq_data"
.Linfo_string49:
	.asciz	"n_samples"
.Linfo_string50:
	.asciz	"n_channels"
.Linfo_string51:
	.asciz	"j"
.Linfo_string52:
	.asciz	"cfg"
.Linfo_string53:
	.asciz	"out"
.Linfo_string54:
	.asciz	"fft_data"
.Linfo_string55:
	.asciz	"fft_stddev"
.Linfo_string56:
	.asciz	"scaled_fft_data"
.Linfo_string57:
	.asciz	"freq_xcorr_matrix"
.Linfo_string58:
	.asciz	"XCORR_TYPE"
.Linfo_string59:
	.asciz	"freq_corr_coeff"
.Linfo_string60:
	.asciz	"time_stddev"
.Linfo_string61:
	.asciz	"n_time_sd"
.Linfo_string62:
	.asciz	"time_xcorr_matrix"
.Linfo_string63:
	.asciz	"time_corr_coeff"
.Linfo_string64:
	.asciz	"time_eigenvalues"
.Linfo_string65:
	.asciz	"in"
.Linfo_string66:
	.asciz	"fft_mean"
.Linfo_string67:
	.asciz	"freq_eigenvalues"
.Linfo_string68:
	.asciz	"time_mean"
.Linfo_string69:
	.asciz	"channel"
.Linfo_string70:
	.asciz	"index"
.Linfo_string71:
	.asciz	"temp"
.Linfo_string72:
	.asciz	"stddev_temp"
.Linfo_string73:
	.asciz	"k"
.Linfo_string74:
	.asciz	"num_failures"
.Linfo_string75:
	.asciz	"inverse_fft"
.Linfo_string76:
	.asciz	"mem"
.Linfo_string77:
	.asciz	"lenmem"
.Linfo_string78:
	.asciz	"long unsigned int"
.Linfo_string79:
	.asciz	"size_t"
.Linfo_string80:
	.asciz	"memneeded"
.Linfo_string81:
	.asciz	"st"
.Linfo_string82:
	.asciz	"phase"
.Linfo_string83:
	.asciz	"fin"
.Linfo_string84:
	.asciz	"fout"
.Linfo_string85:
	.asciz	"in_stride"
.Linfo_string86:
	.asciz	"n"
.Linfo_string87:
	.asciz	"m"
.Linfo_string88:
	.asciz	"facbuf"
.Linfo_string89:
	.asciz	"p"
.Linfo_string90:
	.asciz	"floor_sqrt"
.Linfo_string91:
	.asciz	"Fout"
.Linfo_string92:
	.asciz	"f"
.Linfo_string93:
	.asciz	"fstride"
.Linfo_string94:
	.asciz	"Fout_beg"
.Linfo_string95:
	.asciz	"f_beg"
.Linfo_string96:
	.asciz	"Fout_end"
.Linfo_string97:
	.asciz	"Norig"
.Linfo_string98:
	.asciz	"scratch"
.Linfo_string99:
	.asciz	"u"
.Linfo_string100:
	.asciz	"q"
.Linfo_string101:
	.asciz	"q1"
.Linfo_string102:
	.asciz	"t"
.Linfo_string103:
	.asciz	"twidx"
.Linfo_string104:
	.asciz	"Fout0"
.Linfo_string105:
	.asciz	"Fout1"
.Linfo_string106:
	.asciz	"Fout2"
.Linfo_string107:
	.asciz	"Fout3"
.Linfo_string108:
	.asciz	"Fout4"
.Linfo_string109:
	.asciz	"ya"
.Linfo_string110:
	.asciz	"yb"
.Linfo_string111:
	.asciz	"m2"
.Linfo_string112:
	.asciz	"m3"
.Linfo_string113:
	.asciz	"tw1"
.Linfo_string114:
	.asciz	"tw2"
.Linfo_string115:
	.asciz	"tw3"
.Linfo_string116:
	.asciz	"epi3"
.Linfo_string117:
	.asciz	"a"
.Linfo_string118:
	.asciz	"b"
.Linfo_string119:
	.asciz	"s"
.Linfo_string120:
	.asciz	"x"
.Linfo_string121:
	.asciz	"y"
.Linfo_string122:
	.asciz	"w"
.Linfo_string123:
	.asciz	"matz"
.Linfo_string124:
	.asciz	"_Bool"
.Linfo_string125:
	.asciz	"z"
.Linfo_string126:
	.asciz	"fv2"
.Linfo_string127:
	.asciz	"ierr"
.Linfo_string128:
	.asciz	"fv1"
.Linfo_string129:
	.asciz	"d"
.Linfo_string130:
	.asciz	"e"
.Linfo_string131:
	.asciz	"e2"
.Linfo_string132:
	.asciz	"l"
.Linfo_string133:
	.asciz	"h"
.Linfo_string134:
	.asciz	"scale"
.Linfo_string135:
	.asciz	"g"
.Linfo_string136:
	.asciz	"c"
.Linfo_string137:
	.asciz	"mml"
.Linfo_string138:
	.asciz	"ii"
.Linfo_string139:
	.asciz	"l1"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	1776                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x6e9 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	2                       # Abbrev [2] 0x3e:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.byte	1                       # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x4a:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x56:0xc DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.byte	46                      # DW_AT_const_value
	.byte	5                       # Abbrev [5] 0x62:0x8f DW_TAG_subprogram
	.long	.Linfo_string8          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	15                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x7f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	15                      # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x8e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	15                      # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc2            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x9d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	15                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc4            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xac:0xf DW_TAG_formal_parameter
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	15                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbb:0x35 DW_TAG_lexical_block
	.quad	.Ltmp21                 # DW_AT_low_pc
	.quad	.Ltmp35                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0xcc:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	16                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0xd8:0x17 DW_TAG_lexical_block
	.long	.Ldebug_range+48        # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0xdd:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range           # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0xe2:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xf1:0x495 DW_TAG_subprogram
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x10a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc8            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x119:0xf DW_TAG_formal_parameter
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc11           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x128:0xf DW_TAG_formal_parameter
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc14           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x137:0xf DW_TAG_formal_parameter
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc17           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x146:0xf DW_TAG_formal_parameter
	.long	.Linfo_string52         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1595                    # DW_AT_type
	.long	.Ldebug_loc20           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x155:0xf DW_TAG_variable
	.long	.Linfo_string53         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	1735                    # DW_AT_type
	.long	.Ldebug_loc23           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x164:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x170:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x17c:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	12                      # Abbrev [12] 0x188:0xf DW_TAG_variable
	.long	.Linfo_string54         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	60                      # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.long	.Ldebug_loc25           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x197:0xf DW_TAG_variable
	.long	.Linfo_string55         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.long	.Ldebug_loc28           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1a6:0xf DW_TAG_variable
	.long	.Linfo_string56         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.long	.Ldebug_loc33           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1b5:0xf DW_TAG_variable
	.long	.Linfo_string57         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	108                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.long	.Ldebug_loc36           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1c4:0xf DW_TAG_variable
	.long	.Linfo_string59         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	128                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.long	.Ldebug_loc39           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1d3:0xf DW_TAG_variable
	.long	.Linfo_string60         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	154                     # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.long	.Ldebug_loc42           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1e2:0xf DW_TAG_variable
	.long	.Linfo_string61         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	164                     # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.long	.Ldebug_loc44           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1f1:0xf DW_TAG_variable
	.long	.Linfo_string62         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	188                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.long	.Ldebug_loc46           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x200:0xf DW_TAG_variable
	.long	.Linfo_string63         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	206                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.long	.Ldebug_loc50           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x20f:0xf DW_TAG_variable
	.long	.Linfo_string64         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	221                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.long	.Ldebug_loc53           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x21e:0xb DW_TAG_variable
	.long	.Linfo_string65         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	34                      # DW_AT_decl_line
	.long	1735                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x229:0xb DW_TAG_variable
	.long	.Linfo_string66         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x234:0xb DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	82                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x23f:0xb DW_TAG_variable
	.long	.Linfo_string67         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	1757                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x24a:0xb DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	153                     # DW_AT_decl_line
	.long	1746                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x255:0x3b DW_TAG_lexical_block
	.long	.Ldebug_range+240       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x25a:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	38                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x266:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+192       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x26b:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range+96        # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x270:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x27c:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+144       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x281:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x290:0x5d DW_TAG_lexical_block
	.long	.Ldebug_range+336       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x295:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x2a1:0x4b DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x2b2:0x39 DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x2c3:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	63                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x2ce:0x1c DW_TAG_lexical_block
	.long	.Ldebug_range+288       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x2d3:0xb DW_TAG_variable
	.long	.Linfo_string70         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	65                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x2de:0xb DW_TAG_variable
	.long	.Linfo_string71         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	66                      # DW_AT_decl_line
	.long	1686                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x2ed:0x42 DW_TAG_lexical_block
	.long	.Ldebug_range+384       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x2f2:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x2fe:0x30 DW_TAG_lexical_block
	.quad	.Ltmp88                 # DW_AT_low_pc
	.quad	.Ltmp95                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x30f:0x1e DW_TAG_lexical_block
	.quad	.Ltmp89                 # DW_AT_low_pc
	.quad	.Ltmp94                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x320:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	76                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x32f:0x4f DW_TAG_lexical_block
	.long	.Ldebug_range+448       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x334:0xb DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	83                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x33f:0x3e DW_TAG_lexical_block
	.quad	.Ltmp97                 # DW_AT_low_pc
	.quad	.Ltmp102                # DW_AT_high_pc
	.byte	12                      # Abbrev [12] 0x350:0xf DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	85                      # DW_AT_decl_line
	.long	1584                    # DW_AT_type
	.long	.Ldebug_loc31           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x35f:0x1d DW_TAG_lexical_block
	.quad	.Ltmp97                 # DW_AT_low_pc
	.quad	.Ltmp101                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x370:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	87                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x37e:0x41 DW_TAG_lexical_block
	.long	.Ldebug_range+496       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x383:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x38f:0x2f DW_TAG_lexical_block
	.quad	.Ltmp110                # DW_AT_low_pc
	.quad	.Ltmp116                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x3a0:0x1d DW_TAG_lexical_block
	.quad	.Ltmp110                # DW_AT_low_pc
	.quad	.Ltmp116                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x3b1:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	98                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x3bf:0x59 DW_TAG_lexical_block
	.long	.Ldebug_range+656       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x3c4:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	109                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x3d0:0x47 DW_TAG_lexical_block
	.quad	.Ltmp122                # DW_AT_low_pc
	.quad	.Ltmp134                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x3e1:0x35 DW_TAG_lexical_block
	.quad	.Ltmp122                # DW_AT_low_pc
	.quad	.Ltmp134                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x3f2:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	113                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x3fd:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+608       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x402:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+560       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x407:0xc DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	117                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x418:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+704       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x41d:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	129                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x42a:0x40 DW_TAG_lexical_block
	.long	.Ldebug_range+768       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x42f:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	133                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x43a:0x2f DW_TAG_lexical_block
	.quad	.Ltmp146                # DW_AT_low_pc
	.quad	.Ltmp150                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x44b:0x1d DW_TAG_lexical_block
	.quad	.Ltmp146                # DW_AT_low_pc
	.quad	.Ltmp150                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x45c:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	135                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	7                       # Abbrev [7] 0x46a:0x36 DW_TAG_lexical_block
	.quad	.Ltmp152                # DW_AT_low_pc
	.quad	.Ltmp169                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x47b:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	155                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x487:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+864       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x48c:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+816       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x491:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	158                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x4a0:0x2a DW_TAG_lexical_block
	.long	.Ldebug_range+1008      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x4a5:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	165                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x4b1:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+960       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x4b6:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+912       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x4bb:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	168                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x4ca:0x28 DW_TAG_lexical_block
	.long	.Ldebug_range+1152      # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x4cf:0xb DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	178                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x4da:0x17 DW_TAG_lexical_block
	.long	.Ldebug_range+1104      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x4df:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range+1056      # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x4e4:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	180                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x4f2:0x41 DW_TAG_lexical_block
	.long	.Ldebug_range+1440      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x4f7:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	189                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x503:0x2f DW_TAG_lexical_block
	.long	.Ldebug_range+1392      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x508:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+1344      # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x50d:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	192                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x518:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+1280      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x51d:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+1216      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x522:0xc DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	195                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x533:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+1504      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x538:0xc DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	207                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x545:0x40 DW_TAG_lexical_block
	.long	.Ldebug_range+1568      # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x54a:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x555:0x2f DW_TAG_lexical_block
	.quad	.Ltmp238                # DW_AT_low_pc
	.quad	.Ltmp242                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x566:0x1d DW_TAG_lexical_block
	.quad	.Ltmp238                # DW_AT_low_pc
	.quad	.Ltmp242                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x577:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	213                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x586:0xa5 DW_TAG_subprogram
	.long	.Linfo_string10         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	231                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	12                      # Abbrev [12] 0x5a3:0xf DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	233                     # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc55           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5b2:0xf DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	234                     # DW_AT_decl_line
	.long	1579                    # DW_AT_type
	.long	.Ldebug_loc57           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5c1:0xf DW_TAG_variable
	.long	.Linfo_string52         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	248                     # DW_AT_decl_line
	.long	1595                    # DW_AT_type
	.long	.Ldebug_loc59           # DW_AT_location
	.byte	14                      # Abbrev [14] 0x5d0:0xd DW_TAG_variable
	.long	.Linfo_string74         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.short	266                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x5dd:0x4d DW_TAG_lexical_block
	.quad	.Ltmp271                # DW_AT_low_pc
	.quad	.Ltmp278                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x5ee:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	237                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x5fa:0x2f DW_TAG_lexical_block
	.quad	.Ltmp273                # DW_AT_low_pc
	.quad	.Ltmp277                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x60b:0x1d DW_TAG_lexical_block
	.quad	.Ltmp273                # DW_AT_low_pc
	.quad	.Ltmp277                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x61c:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	239                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x62b:0x5 DW_TAG_pointer_type
	.long	1584                    # DW_AT_type
	.byte	16                      # Abbrev [16] 0x630:0xb DW_TAG_typedef
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	13                      # DW_AT_decl_line
	.byte	17                      # Abbrev [17] 0x63b:0xb DW_TAG_typedef
	.long	1606                    # DW_AT_type
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.byte	15                      # Abbrev [15] 0x646:0x5 DW_TAG_pointer_type
	.long	1611                    # DW_AT_type
	.byte	18                      # Abbrev [18] 0x64b:0x3f DW_TAG_structure_type
	.long	.Linfo_string22         # DW_AT_name
	.short	280                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	19                      # Abbrev [19] 0x654:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x661:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	20                      # Abbrev [20] 0x66e:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	.Lsection_info+2158     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	21                      # Abbrev [21] 0x67b:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	1674                    # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	22                      # Abbrev [22] 0x68a:0xc DW_TAG_array_type
	.long	1686                    # DW_AT_type
	.byte	23                      # Abbrev [23] 0x68f:0x6 DW_TAG_subrange_type
	.long	1728                    # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x696:0xb DW_TAG_typedef
	.long	1697                    # DW_AT_type
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.byte	24                      # Abbrev [24] 0x6a1:0x1f DW_TAG_structure_type
	.byte	16                      # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	20                      # Abbrev [20] 0x6a5:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	20                      # Abbrev [20] 0x6b2:0xd DW_TAG_member
	.long	.Linfo_string20         # DW_AT_name
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	25                      # Abbrev [25] 0x6c0:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	22                      # Abbrev [22] 0x6c7:0xb DW_TAG_array_type
	.long	1686                    # DW_AT_type
	.byte	26                      # Abbrev [26] 0x6cc:0x5 DW_TAG_subrange_type
	.long	1728                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	22                      # Abbrev [22] 0x6d2:0xb DW_TAG_array_type
	.long	1584                    # DW_AT_type
	.byte	26                      # Abbrev [26] 0x6d7:0x5 DW_TAG_subrange_type
	.long	1728                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	22                      # Abbrev [22] 0x6dd:0xb DW_TAG_array_type
	.long	1768                    # DW_AT_type
	.byte	26                      # Abbrev [26] 0x6e2:0x5 DW_TAG_subrange_type
	.long	1728                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	16                      # Abbrev [16] 0x6e8:0xb DW_TAG_typedef
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Linfo_string58         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	2047                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x7f8 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string11         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	27                      # Abbrev [27] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string13         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	28                      # Abbrev [28] 0x3e:0xed DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	299                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.quad	.Lfunc_end3             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x5c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc61           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x6c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string75         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc63           # DW_AT_location
	.byte	30                      # Abbrev [30] 0x7c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string76         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1950                    # DW_AT_type
	.long	.Ldebug_loc65           # DW_AT_location
	.byte	30                      # Abbrev [30] 0x8c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string77         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1951                    # DW_AT_type
	.long	.Ldebug_loc67           # DW_AT_location
	.byte	31                      # Abbrev [31] 0x9c:0x10 DW_TAG_variable
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	350                     # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc69           # DW_AT_location
	.byte	31                      # Abbrev [31] 0xac:0x10 DW_TAG_variable
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	349                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.long	.Ldebug_loc71           # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbc:0x6e DW_TAG_lexical_block
	.quad	.Ltmp315                # DW_AT_low_pc
	.quad	.Ltmp329                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xcd:0x5c DW_TAG_lexical_block
	.quad	.Ltmp316                # DW_AT_low_pc
	.quad	.Ltmp329                # DW_AT_high_pc
	.byte	32                      # Abbrev [32] 0xde:0xd DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0xeb:0x3d DW_TAG_lexical_block
	.quad	.Ltmp317                # DW_AT_low_pc
	.quad	.Ltmp328                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0xfc:0x2b DW_TAG_lexical_block
	.long	.Ldebug_range+1616      # DW_AT_ranges
	.byte	33                      # Abbrev [33] 0x101:0x15 DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	24
	.byte	45
	.byte	68
	.byte	84
	.byte	251
	.byte	33
	.byte	9
	.byte	64
	.byte	31                      # Abbrev [31] 0x116:0x10 DW_TAG_variable
	.long	.Linfo_string82         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	367                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc74           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x12b:0xb DW_TAG_typedef
	.long	310                     # DW_AT_type
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.byte	15                      # Abbrev [15] 0x136:0x5 DW_TAG_pointer_type
	.long	315                     # DW_AT_type
	.byte	18                      # Abbrev [18] 0x13b:0x3f DW_TAG_structure_type
	.long	.Linfo_string22         # DW_AT_name
	.short	280                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	20                      # Abbrev [20] 0x144:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	20                      # Abbrev [20] 0x151:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x15e:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	378                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	21                      # Abbrev [21] 0x16b:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	397                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	34                      # Abbrev [34] 0x17a:0xc DW_TAG_array_type
	.long	.Lsection_info+55       # DW_AT_type
	.byte	23                      # Abbrev [23] 0x17f:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	63                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	25                      # Abbrev [25] 0x186:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	22                      # Abbrev [22] 0x18d:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	23                      # Abbrev [23] 0x192:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	17                      # Abbrev [17] 0x199:0xb DW_TAG_typedef
	.long	420                     # DW_AT_type
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.byte	24                      # Abbrev [24] 0x1a4:0x1f DW_TAG_structure_type
	.byte	16                      # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	19                      # Abbrev [19] 0x1a8:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x1b5:0xd DW_TAG_member
	.long	.Linfo_string20         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	35                      # Abbrev [35] 0x1c3:0x5b DW_TAG_subprogram
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.quad	.Lfunc_end4             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	36                      # Abbrev [36] 0x1dd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\220\001"
	.byte	36                      # Abbrev [36] 0x1ed:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\360\002"
	.byte	36                      # Abbrev [36] 0x1fd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\350\002"
	.byte	29                      # Abbrev [29] 0x20d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc77           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	35                      # Abbrev [35] 0x21e:0x4b DW_TAG_subprogram
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	36                      # Abbrev [36] 0x238:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\210\001"
	.byte	36                      # Abbrev [36] 0x248:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\240\001"
	.byte	30                      # Abbrev [30] 0x258:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc79           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	37                      # Abbrev [37] 0x269:0x1a DW_TAG_subprogram
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	400                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	38                      # Abbrev [38] 0x283:0x51 DW_TAG_subprogram
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x2a1:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc81           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x2b1:0x22 DW_TAG_lexical_block
	.quad	.Ltmp409                # DW_AT_low_pc
	.quad	.Ltmp421                # DW_AT_high_pc
	.byte	39                      # Abbrev [39] 0x2c2:0x10 DW_TAG_variable
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	408                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc84           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x2d4:0xc1 DW_TAG_subprogram
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	244                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.quad	.Lfunc_end9             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x2ed:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	1994                    # DW_AT_type
	.long	.Ldebug_loc105          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x2fc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	246                     # DW_AT_decl_line
	.long	1999                    # DW_AT_type
	.long	.Ldebug_loc107          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x30b:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	247                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc109          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x31a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	248                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc111          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x329:0xf DW_TAG_formal_parameter
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	249                     # DW_AT_decl_line
	.long	1989                    # DW_AT_type
	.long	.Ldebug_loc113          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x338:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	250                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc117          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x347:0xf DW_TAG_variable
	.long	.Linfo_string94         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	253                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc119          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x356:0xf DW_TAG_variable
	.long	.Linfo_string95         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	254                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.long	.Ldebug_loc121          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x365:0xf DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	255                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc123          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x374:0x10 DW_TAG_variable
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	256                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc125          # DW_AT_location
	.byte	31                      # Abbrev [31] 0x384:0x10 DW_TAG_variable
	.long	.Linfo_string96         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	257                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.long	.Ldebug_loc127          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x395:0xfe DW_TAG_subprogram
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	204                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.quad	.Lfunc_end10            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x3ae:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	205                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc129          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3bd:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	206                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc131          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3cc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	207                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc133          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x3db:0xf DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc135          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x3ea:0xf DW_TAG_formal_parameter
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc137          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x3f9:0xf DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	215                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc139          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x408:0xf DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc141          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x417:0xc DW_TAG_variable
	.long	.Linfo_string99         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	43                      # Abbrev [43] 0x423:0xc DW_TAG_variable
	.long	.Linfo_string100        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	42                      # Abbrev [42] 0x42f:0xf DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc146          # DW_AT_location
	.byte	44                      # Abbrev [44] 0x43e:0xb DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	10                      # Abbrev [10] 0x449:0xb DW_TAG_variable
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	213                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x454:0xb DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	214                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	7                       # Abbrev [7] 0x45f:0x33 DW_TAG_lexical_block
	.quad	.Ltmp528                # DW_AT_low_pc
	.quad	.Ltmp553                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0x470:0x21 DW_TAG_lexical_block
	.long	.Ldebug_range+1760      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x475:0x1b DW_TAG_lexical_block
	.long	.Ldebug_range+1712      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x47a:0x15 DW_TAG_lexical_block
	.long	.Ldebug_range+1664      # DW_AT_ranges
	.byte	42                      # Abbrev [42] 0x47f:0xf DW_TAG_variable
	.long	.Linfo_string103        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	229                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc143          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x493:0xce DW_TAG_subprogram
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.quad	.Lfunc_end11            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x4ac:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	137                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc148          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4bb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	138                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc150          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4ca:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	139                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc152          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x4d9:0xf DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc154          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4e8:0xf DW_TAG_variable
	.long	.Linfo_string104        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc156          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4f7:0xf DW_TAG_variable
	.long	.Linfo_string105        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc159          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x506:0xf DW_TAG_variable
	.long	.Linfo_string106        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc162          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x515:0xf DW_TAG_variable
	.long	.Linfo_string107        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc165          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x524:0xf DW_TAG_variable
	.long	.Linfo_string108        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc168          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x533:0xc DW_TAG_variable
	.long	.Linfo_string99         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	144                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	10                      # Abbrev [10] 0x53f:0xb DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	145                     # DW_AT_decl_line
	.long	2014                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x54a:0xb DW_TAG_variable
	.long	.Linfo_string109        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0x555:0xb DW_TAG_variable
	.long	.Linfo_string110        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x561:0xbb DW_TAG_subprogram
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	44                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.quad	.Lfunc_end12            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x57a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	45                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc171          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x589:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc174          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x598:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc176          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x5a7:0xf DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc178          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5b6:0xf DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc180          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5c5:0xf DW_TAG_variable
	.long	.Linfo_string111        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc183          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5d4:0xf DW_TAG_variable
	.long	.Linfo_string112        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc185          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5e3:0xf DW_TAG_variable
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc187          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5f2:0xf DW_TAG_variable
	.long	.Linfo_string114        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc190          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x601:0xf DW_TAG_variable
	.long	.Linfo_string115        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc193          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x610:0xb DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.long	2026                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x61c:0xa8 DW_TAG_subprogram
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	92                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin13          # DW_AT_low_pc
	.quad	.Lfunc_end13            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x635:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc196          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x644:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc199          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x653:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc201          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x662:0xf DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc203          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x671:0xf DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc205          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x680:0xf DW_TAG_variable
	.long	.Linfo_string111        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc208          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x68f:0xf DW_TAG_variable
	.long	.Linfo_string114        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc210          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x69e:0xf DW_TAG_variable
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc213          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x6ad:0xb DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	2038                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x6b8:0xb DW_TAG_variable
	.long	.Linfo_string116        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	40                      # Abbrev [40] 0x6c4:0x7f DW_TAG_subprogram
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	21                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin14          # DW_AT_low_pc
	.quad	.Lfunc_end14            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x6dd:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	22                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc216          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6ec:0xf DW_TAG_formal_parameter
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc219          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6fb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc221          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x70a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	25                      # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc223          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x719:0xf DW_TAG_variable
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc226          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x728:0xf DW_TAG_variable
	.long	.Linfo_string106        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc229          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x737:0xb DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	45                      # Abbrev [45] 0x743:0x5b DW_TAG_subprogram
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.quad	.Lfunc_end8             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x75d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc94           # DW_AT_location
	.byte	30                      # Abbrev [30] 0x76d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	1989                    # DW_AT_type
	.long	.Ldebug_loc89           # DW_AT_location
	.byte	39                      # Abbrev [39] 0x77d:0x10 DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	319                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc98           # DW_AT_location
	.byte	31                      # Abbrev [31] 0x78d:0x10 DW_TAG_variable
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	320                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc103          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	46                      # Abbrev [46] 0x79e:0x1 DW_TAG_pointer_type
	.byte	15                      # Abbrev [15] 0x79f:0x5 DW_TAG_pointer_type
	.long	1956                    # DW_AT_type
	.byte	17                      # Abbrev [17] 0x7a4:0xb DW_TAG_typedef
	.long	1967                    # DW_AT_type
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	42                      # DW_AT_decl_line
	.byte	4                       # Abbrev [4] 0x7af:0x7 DW_TAG_base_type
	.long	.Linfo_string78         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	15                      # Abbrev [15] 0x7b6:0x5 DW_TAG_pointer_type
	.long	1979                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7bb:0x5 DW_TAG_const_type
	.long	409                     # DW_AT_type
	.byte	15                      # Abbrev [15] 0x7c0:0x5 DW_TAG_pointer_type
	.long	409                     # DW_AT_type
	.byte	47                      # Abbrev [47] 0x7c5:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+55       # DW_AT_type
	.byte	15                      # Abbrev [15] 0x7ca:0x5 DW_TAG_pointer_type
	.long	1984                    # DW_AT_type
	.byte	15                      # Abbrev [15] 0x7cf:0x5 DW_TAG_pointer_type
	.long	1974                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7d4:0x5 DW_TAG_const_type
	.long	1956                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7d9:0x5 DW_TAG_const_type
	.long	299                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x7de:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	23                      # Abbrev [23] 0x7e3:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	12                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	22                      # Abbrev [22] 0x7ea:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	23                      # Abbrev [23] 0x7ef:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	5                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	22                      # Abbrev [22] 0x7f6:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	23                      # Abbrev [23] 0x7fb:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	4                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
.L.debug_info_end1:
.L.debug_info_begin2:
	.long	1362                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x54b DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string35         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	48                      # Abbrev [48] 0x26:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.long	.Lsection_info+1830     # DW_AT_type
	.byte	5                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.byte	49                      # Abbrev [49] 0x31:0x87 DW_TAG_subprogram
	.long	.Linfo_string37         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1835     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin15          # DW_AT_low_pc
	.quad	.Lfunc_end15            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	41                      # Abbrev [41] 0x4e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc232          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x5d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string118        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc234          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x6c:0xf DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc236          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x7b:0xf DW_TAG_variable
	.long	.Linfo_string19         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc239          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x8a:0xf DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc243          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x99:0xf DW_TAG_variable
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc246          # DW_AT_location
	.byte	42                      # Abbrev [42] 0xa8:0xf DW_TAG_variable
	.long	.Linfo_string99         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc248          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	50                      # Abbrev [50] 0xb8:0x32 DW_TAG_subprogram
	.long	.Linfo_string38         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin18          # DW_AT_low_pc
	.quad	.Lfunc_end18            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	51                      # Abbrev [51] 0xd5:0x14 DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.long	.Lsection_info+1830     # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	176
	.byte	60
	.byte	0                       # End Of Children Mark
	.byte	49                      # Abbrev [49] 0xea:0x47 DW_TAG_subprogram
	.long	.Linfo_string39         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1835     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin16          # DW_AT_low_pc
	.quad	.Lfunc_end16            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	41                      # Abbrev [41] 0x107:0xf DW_TAG_formal_parameter
	.long	.Linfo_string120        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc253          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x116:0xf DW_TAG_formal_parameter
	.long	.Linfo_string121        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc250          # DW_AT_location
	.byte	44                      # Abbrev [44] 0x125:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	170                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	49                      # Abbrev [49] 0x131:0x47 DW_TAG_subprogram
	.long	.Linfo_string40         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1835     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin17          # DW_AT_low_pc
	.quad	.Lfunc_end17            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	41                      # Abbrev [41] 0x14e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string120        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc259          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x15d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string121        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc256          # DW_AT_location
	.byte	44                      # Abbrev [44] 0x16c:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	49                      # Abbrev [49] 0x178:0x38 DW_TAG_subprogram
	.long	.Linfo_string41         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1835     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin19          # DW_AT_low_pc
	.quad	.Lfunc_end19            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	41                      # Abbrev [41] 0x195:0xf DW_TAG_formal_parameter
	.long	.Linfo_string120        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc262          # DW_AT_location
	.byte	44                      # Abbrev [44] 0x1a4:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x1b0:0x9b DW_TAG_subprogram
	.long	.Linfo_string42         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin20          # DW_AT_low_pc
	.quad	.Lfunc_end20            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x1ce:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc277          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x1de:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc274          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x1ee:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string122        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc271          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x1fe:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string123        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1340                    # DW_AT_type
	.long	.Ldebug_loc265          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x20e:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string125        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc268          # DW_AT_location
	.byte	31                      # Abbrev [31] 0x21e:0x10 DW_TAG_variable
	.long	.Linfo_string126        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	335                     # DW_AT_decl_line
	.long	1347                    # DW_AT_type
	.long	.Ldebug_loc280          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x22e:0x10 DW_TAG_variable
	.long	.Linfo_string127        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	336                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc282          # DW_AT_location
	.byte	52                      # Abbrev [52] 0x23e:0xc DW_TAG_variable
	.long	.Linfo_string128        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	1347                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x24b:0x158 DW_TAG_subprogram
	.long	.Linfo_string43         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin22          # DW_AT_low_pc
	.quad	.Lfunc_end22            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x269:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc319          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x279:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string129        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc321          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x289:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string131        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc323          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x299:0x10 DW_TAG_variable
	.long	.Linfo_string118        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	434                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc325          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2a9:0x10 DW_TAG_variable
	.long	.Linfo_string136        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	435                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc328          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2b9:0x10 DW_TAG_variable
	.long	.Linfo_string127        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	440                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc331          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2c9:0x10 DW_TAG_variable
	.long	.Linfo_string92         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	436                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc334          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2d9:0x10 DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	450                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc337          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2e9:0x10 DW_TAG_variable
	.long	.Linfo_string132        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	443                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc340          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x2f9:0x10 DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	442                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc343          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x309:0x10 DW_TAG_variable
	.long	.Linfo_string133        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	438                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc346          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x319:0x10 DW_TAG_variable
	.long	.Linfo_string87         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	445                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc351          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x329:0x10 DW_TAG_variable
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	449                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc354          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x339:0x10 DW_TAG_variable
	.long	.Linfo_string135        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	437                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc358          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x349:0x10 DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	447                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc364          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x359:0x10 DW_TAG_variable
	.long	.Linfo_string19         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	448                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc368          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x369:0x10 DW_TAG_variable
	.long	.Linfo_string137        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	446                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc371          # DW_AT_location
	.byte	32                      # Abbrev [32] 0x379:0xd DW_TAG_variable
	.long	.Linfo_string138        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	441                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	39                      # Abbrev [39] 0x386:0x10 DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	439                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc373          # DW_AT_location
	.byte	53                      # Abbrev [53] 0x396:0xc DW_TAG_variable
	.long	.Linfo_string139        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	444                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	35                      # Abbrev [35] 0x3a3:0xb0 DW_TAG_subprogram
	.long	.Linfo_string44         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin23          # DW_AT_low_pc
	.quad	.Lfunc_end23            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x3bd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc377          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x3cd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc379          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x3dd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string130        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc381          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x3ed:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc383          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x3fd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string125        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc385          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x40d:0x10 DW_TAG_variable
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	659                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc387          # DW_AT_location
	.byte	32                      # Abbrev [32] 0x41d:0xd DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	657                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	39                      # Abbrev [39] 0x42a:0x10 DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	655                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc390          # DW_AT_location
	.byte	53                      # Abbrev [53] 0x43a:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	656                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	53                      # Abbrev [53] 0x446:0xc DW_TAG_variable
	.long	.Linfo_string132        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	658                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	35                      # Abbrev [35] 0x453:0xe4 DW_TAG_subprogram
	.long	.Linfo_string45         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin21          # DW_AT_low_pc
	.quad	.Lfunc_end21            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	29                      # Abbrev [29] 0x46d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc285          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x47d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc287          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x48d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string129        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc289          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x49d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string130        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc291          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x4ad:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string131        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc293          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x4bd:0x10 DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	773                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc295          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x4cd:0x10 DW_TAG_variable
	.long	.Linfo_string132        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	775                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc298          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x4dd:0x10 DW_TAG_variable
	.long	.Linfo_string133        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	770                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc300          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x4ed:0x10 DW_TAG_variable
	.long	.Linfo_string134        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	776                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc305          # DW_AT_location
	.byte	32                      # Abbrev [32] 0x4fd:0xd DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	774                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	39                      # Abbrev [39] 0x50a:0x10 DW_TAG_variable
	.long	.Linfo_string92         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	768                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc308          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x51a:0x10 DW_TAG_variable
	.long	.Linfo_string135        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	769                     # DW_AT_decl_line
	.long	.Lsection_info+1835     # DW_AT_type
	.long	.Ldebug_loc314          # DW_AT_location
	.byte	53                      # Abbrev [53] 0x52a:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	771                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	47                      # Abbrev [47] 0x537:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	4                       # Abbrev [4] 0x53c:0x7 DW_TAG_base_type
	.long	.Linfo_string124        # DW_AT_name
	.byte	2                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	34                      # Abbrev [34] 0x543:0xb DW_TAG_array_type
	.long	.Lsection_info+1835     # DW_AT_type
	.byte	26                      # Abbrev [26] 0x548:0x5 DW_TAG_subrange_type
	.long	1358                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	25                      # Abbrev [25] 0x54e:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	0                       # End Of Children Mark
.L.debug_info_end2:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	85                      # DW_AT_ranges
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	5                       # DW_FORM_data2
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	5                       # DW_FORM_data2
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	47                      # DW_AT_upper_bound
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	25                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	26                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	27                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	28                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	29                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	30                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	31                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	32                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	33                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	34                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	35                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	36                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	37                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	38                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	39                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	40                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	41                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	42                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	43                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	44                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	45                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	46                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	47                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	48                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	49                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	50                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	51                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	52                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	53                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset0 = .Ltmp1221-.Ltmp1220            # Loc expr size
	.short	.Lset0
.Ltmp1220:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\016"
.Ltmp1221:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset1 = .Ltmp1223-.Ltmp1222            # Loc expr size
	.short	.Lset1
.Ltmp1222:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\016"
.Ltmp1223:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp1225-.Ltmp1224            # Loc expr size
	.short	.Lset2
.Ltmp1224:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\016"
.Ltmp1225:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset3 = .Ltmp1227-.Ltmp1226            # Loc expr size
	.short	.Lset3
.Ltmp1226:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\017"
.Ltmp1227:
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin1
	.quad	.Ltmp52
.Lset4 = .Ltmp1229-.Ltmp1228            # Loc expr size
	.short	.Lset4
.Ltmp1228:
	.byte	85                      # DW_OP_reg5
.Ltmp1229:
	.quad	.Ltmp52
	.quad	.Ltmp56
.Lset5 = .Ltmp1231-.Ltmp1230            # Loc expr size
	.short	.Lset5
.Ltmp1230:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"
.Ltmp1231:
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin1
	.quad	.Ltmp53
.Lset6 = .Ltmp1233-.Ltmp1232            # Loc expr size
	.short	.Lset6
.Ltmp1232:
	.byte	84                      # DW_OP_reg4
.Ltmp1233:
	.quad	.Ltmp53
	.quad	.Ltmp56
.Lset7 = .Ltmp1235-.Ltmp1234            # Loc expr size
	.short	.Lset7
.Ltmp1234:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"
.Ltmp1235:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin1
	.quad	.Ltmp51
.Lset8 = .Ltmp1237-.Ltmp1236            # Loc expr size
	.short	.Lset8
.Ltmp1236:
	.byte	81                      # DW_OP_reg1
.Ltmp1237:
	.quad	.Ltmp51
	.quad	.Ltmp56
.Lset9 = .Ltmp1239-.Ltmp1238            # Loc expr size
	.short	.Lset9
.Ltmp1238:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370~"
.Ltmp1239:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Lfunc_begin1
	.quad	.Ltmp49
.Lset10 = .Ltmp1241-.Ltmp1240           # Loc expr size
	.short	.Lset10
.Ltmp1240:
	.byte	82                      # DW_OP_reg2
.Ltmp1241:
	.quad	.Ltmp49
	.quad	.Ltmp56
.Lset11 = .Ltmp1243-.Ltmp1242           # Loc expr size
	.short	.Lset11
.Ltmp1242:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274\177"
.Ltmp1243:
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Lfunc_begin1
	.quad	.Ltmp54
.Lset12 = .Ltmp1245-.Ltmp1244           # Loc expr size
	.short	.Lset12
.Ltmp1244:
	.byte	88                      # DW_OP_reg8
.Ltmp1245:
	.quad	.Ltmp54
	.quad	.Ltmp56
.Lset13 = .Ltmp1247-.Ltmp1246           # Loc expr size
	.short	.Lset13
.Ltmp1246:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300~"
.Ltmp1247:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp55
	.quad	.Ltmp56
.Lset14 = .Ltmp1249-.Ltmp1248           # Loc expr size
	.short	.Lset14
.Ltmp1248:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340|"
	.byte	6
.Ltmp1249:
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp72
	.quad	.Ltmp58
.Lset15 = .Ltmp1251-.Ltmp1250           # Loc expr size
	.short	.Lset15
.Ltmp1250:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200i"
	.byte	6
.Ltmp1251:
	.quad	.Ltmp73
	.quad	.Ltmp74
.Lset16 = .Ltmp1253-.Ltmp1252           # Loc expr size
	.short	.Lset16
.Ltmp1252:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200i"
	.byte	6
.Ltmp1253:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp86
	.quad	.Ltmp82
.Lset17 = .Ltmp1255-.Ltmp1254           # Loc expr size
	.short	.Lset17
.Ltmp1254:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250X"
	.byte	6
.Ltmp1255:
	.quad	.Ltmp86
	.quad	.Ltmp84
.Lset18 = .Ltmp1257-.Ltmp1256           # Loc expr size
	.short	.Lset18
.Ltmp1256:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250X"
	.byte	6
.Ltmp1257:
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp100
	.quad	.Ltmp101
.Lset19 = .Ltmp1259-.Ltmp1258           # Loc expr size
	.short	.Lset19
.Ltmp1258:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340J"
.Ltmp1259:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp118
	.quad	.Ltmp105
.Lset20 = .Ltmp1261-.Ltmp1260           # Loc expr size
	.short	.Lset20
.Ltmp1260:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\267\177"
	.byte	6
.Ltmp1261:
	.quad	.Ltmp118
	.quad	.Ltmp107
.Lset21 = .Ltmp1263-.Ltmp1262           # Loc expr size
	.short	.Lset21
.Ltmp1262:
	.byte	118                     # DW_OP_breg6
	.ascii	"\220\267\177"
	.byte	6
.Ltmp1263:
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp119
	.quad	.Ltmp109
.Lset22 = .Ltmp1265-.Ltmp1264           # Loc expr size
	.short	.Lset22
.Ltmp1264:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310\265\177"
	.byte	6
.Ltmp1265:
	.quad	.Ltmp120
	.quad	.Ltmp121
.Lset23 = .Ltmp1267-.Ltmp1266           # Loc expr size
	.short	.Lset23
.Ltmp1266:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310\265\177"
	.byte	6
.Ltmp1267:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Ltmp140
	.quad	.Ltmp137
.Lset24 = .Ltmp1269-.Ltmp1268           # Loc expr size
	.short	.Lset24
.Ltmp1268:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340\243\177"
	.byte	6
.Ltmp1269:
	.quad	.Ltmp140
	.quad	.Ltmp139
.Lset25 = .Ltmp1271-.Ltmp1270           # Loc expr size
	.short	.Lset25
.Ltmp1270:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340\243\177"
	.byte	6
.Ltmp1271:
	.quad	0
	.quad	0
.Ldebug_loc42:
	.quad	.Ltmp152
	.quad	.Ltmp153
.Lset26 = .Ltmp1273-.Ltmp1272           # Loc expr size
	.short	.Lset26
.Ltmp1272:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\223\177"
	.byte	6
.Ltmp1273:
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Ltmp170
	.quad	.Ltmp171
.Lset27 = .Ltmp1275-.Ltmp1274           # Loc expr size
	.short	.Lset27
.Ltmp1274:
	.byte	118                     # DW_OP_breg6
	.ascii	"\234\206\177"
.Ltmp1275:
	.quad	0
	.quad	0
.Ldebug_loc46:
	.quad	.Ltmp205
	.quad	.Ltmp179
.Lset28 = .Ltmp1277-.Ltmp1276           # Loc expr size
	.short	.Lset28
.Ltmp1276:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320\352~"
	.byte	6
.Ltmp1277:
	.quad	.Ltmp205
	.quad	.Ltmp204
.Lset29 = .Ltmp1279-.Ltmp1278           # Loc expr size
	.short	.Lset29
.Ltmp1278:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320\352~"
	.byte	6
.Ltmp1279:
	.quad	.Ltmp206
	.quad	.Ltmp207
.Lset30 = .Ltmp1281-.Ltmp1280           # Loc expr size
	.short	.Lset30
.Ltmp1280:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320\352~"
	.byte	6
.Ltmp1281:
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Ltmp233
	.quad	.Ltmp229
.Lset31 = .Ltmp1283-.Ltmp1282           # Loc expr size
	.short	.Lset31
.Ltmp1282:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\324~"
	.byte	6
.Ltmp1283:
	.quad	.Ltmp233
	.quad	.Ltmp231
.Lset32 = .Ltmp1285-.Ltmp1284           # Loc expr size
	.short	.Lset32
.Ltmp1284:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\324~"
	.byte	6
.Ltmp1285:
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Ltmp244
	.quad	.Ltmp245
.Lset33 = .Ltmp1287-.Ltmp1286           # Loc expr size
	.short	.Lset33
.Ltmp1286:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300\306~"
	.byte	6
.Ltmp1287:
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Ltmp269
	.quad	.Ltmp270
.Lset34 = .Ltmp1289-.Ltmp1288           # Loc expr size
	.short	.Lset34
.Ltmp1288:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\017"
.Ltmp1289:
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Ltmp271
	.quad	.Ltmp272
.Lset35 = .Ltmp1291-.Ltmp1290           # Loc expr size
	.short	.Lset35
.Ltmp1290:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\016"
.Ltmp1291:
	.quad	0
	.quad	0
.Ldebug_loc59:
	.quad	.Ltmp279
	.quad	.Ltmp280
.Lset36 = .Ltmp1293-.Ltmp1292           # Loc expr size
	.short	.Lset36
.Ltmp1292:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp1293:
	.quad	0
	.quad	0
.Ldebug_loc61:
	.quad	.Lfunc_begin3
	.quad	.Ltmp307
.Lset37 = .Ltmp1295-.Ltmp1294           # Loc expr size
	.short	.Lset37
.Ltmp1294:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\027"
.Ltmp1295:
	.quad	0
	.quad	0
.Ldebug_loc63:
	.quad	.Lfunc_begin3
	.quad	.Ltmp307
.Lset38 = .Ltmp1297-.Ltmp1296           # Loc expr size
	.short	.Lset38
.Ltmp1296:
	.byte	119                     # DW_OP_breg7
	.ascii	"\334\030"
.Ltmp1297:
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Lfunc_begin3
	.quad	.Ltmp307
.Lset39 = .Ltmp1299-.Ltmp1298           # Loc expr size
	.short	.Lset39
.Ltmp1298:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\027"
.Ltmp1299:
	.quad	0
	.quad	0
.Ldebug_loc67:
	.quad	.Lfunc_begin3
	.quad	.Ltmp307
.Lset40 = .Ltmp1301-.Ltmp1300           # Loc expr size
	.short	.Lset40
.Ltmp1300:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\027"
.Ltmp1301:
	.quad	0
	.quad	0
.Ldebug_loc69:
	.quad	.Ltmp306
	.quad	.Ltmp307
.Lset41 = .Ltmp1303-.Ltmp1302           # Loc expr size
	.short	.Lset41
.Ltmp1302:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\026"
.Ltmp1303:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp309
	.quad	.Ltmp310
.Lset42 = .Ltmp1305-.Ltmp1304           # Loc expr size
	.short	.Lset42
.Ltmp1304:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\024"
.Ltmp1305:
	.quad	.Ltmp312
	.quad	.Ltmp313
.Lset43 = .Ltmp1307-.Ltmp1306           # Loc expr size
	.short	.Lset43
.Ltmp1306:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\020"
.Ltmp1307:
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Ltmp322
	.quad	.Ltmp323
.Lset44 = .Ltmp1309-.Ltmp1308           # Loc expr size
	.short	.Lset44
.Ltmp1308:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\007"
.Ltmp1309:
	.quad	.Ltmp324
	.quad	.Ltmp325
.Lset45 = .Ltmp1311-.Ltmp1310           # Loc expr size
	.short	.Lset45
.Ltmp1310:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\005"
.Ltmp1311:
	.quad	0
	.quad	0
.Ldebug_loc77:
	.quad	.Lfunc_begin4
	.quad	.Ltmp355
.Lset46 = .Ltmp1313-.Ltmp1312           # Loc expr size
	.short	.Lset46
.Ltmp1312:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\001"
.Ltmp1313:
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Lfunc_begin5
	.quad	.Ltmp379
.Lset47 = .Ltmp1315-.Ltmp1314           # Loc expr size
	.short	.Lset47
.Ltmp1314:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp1315:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin7
	.quad	.Ltmp408
.Lset48 = .Ltmp1317-.Ltmp1316           # Loc expr size
	.short	.Lset48
.Ltmp1316:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\016"
.Ltmp1317:
	.quad	.Ltmp420
	.quad	.Ltmp421
.Lset49 = .Ltmp1319-.Ltmp1318           # Loc expr size
	.short	.Lset49
.Ltmp1318:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp1319:
	.quad	0
	.quad	0
.Ldebug_loc84:
	.quad	.Ltmp410
	.quad	.Ltmp411
.Lset50 = .Ltmp1321-.Ltmp1320           # Loc expr size
	.short	.Lset50
.Ltmp1320:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\f"
.Ltmp1321:
	.quad	.Ltmp412
	.quad	.Ltmp413
.Lset51 = .Ltmp1323-.Ltmp1322           # Loc expr size
	.short	.Lset51
.Ltmp1322:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\t"
.Ltmp1323:
	.quad	.Ltmp414
	.quad	.Ltmp415
.Lset52 = .Ltmp1325-.Ltmp1324           # Loc expr size
	.short	.Lset52
.Ltmp1324:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\006"
.Ltmp1325:
	.quad	.Ltmp416
	.quad	.Ltmp417
.Lset53 = .Ltmp1327-.Ltmp1326           # Loc expr size
	.short	.Lset53
.Ltmp1326:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp1327:
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin8
	.quad	.Ltmp445
.Lset54 = .Ltmp1329-.Ltmp1328           # Loc expr size
	.short	.Lset54
.Ltmp1328:
	.byte	84                      # DW_OP_reg4
.Ltmp1329:
	.quad	.Ltmp445
	.quad	.Ltmp450
.Lset55 = .Ltmp1331-.Ltmp1330           # Loc expr size
	.short	.Lset55
.Ltmp1330:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\013"
.Ltmp1331:
	.quad	.Ltmp461
	.quad	.Ltmp462
.Lset56 = .Ltmp1333-.Ltmp1332           # Loc expr size
	.short	.Lset56
.Ltmp1332:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1333:
	.quad	.Ltmp462
	.quad	.Ltmp463
.Lset57 = .Ltmp1335-.Ltmp1334           # Loc expr size
	.short	.Lset57
.Ltmp1334:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1335:
	.quad	0
	.quad	0
.Ldebug_loc94:
	.quad	.Lfunc_begin8
	.quad	.Ltmp446
.Lset58 = .Ltmp1337-.Ltmp1336           # Loc expr size
	.short	.Lset58
.Ltmp1336:
	.byte	85                      # DW_OP_reg5
.Ltmp1337:
	.quad	.Ltmp446
	.quad	.Ltmp447
.Lset59 = .Ltmp1339-.Ltmp1338           # Loc expr size
	.short	.Lset59
.Ltmp1338:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\013"
.Ltmp1339:
	.quad	.Ltmp460
	.quad	.Ltmp463
.Lset60 = .Ltmp1341-.Ltmp1340           # Loc expr size
	.short	.Lset60
.Ltmp1340:
	.byte	119                     # DW_OP_breg7
	.byte	36
.Ltmp1341:
	.quad	0
	.quad	0
.Ldebug_loc98:
	.quad	.Ltmp448
	.quad	.Ltmp454
.Lset61 = .Ltmp1343-.Ltmp1342           # Loc expr size
	.short	.Lset61
.Ltmp1342:
	.byte	16                      # DW_OP_constu
	.byte	3
.Ltmp1343:
	.quad	.Ltmp454
	.quad	.Ltmp455
.Lset62 = .Ltmp1345-.Ltmp1344           # Loc expr size
	.short	.Lset62
.Ltmp1344:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\005"
.Ltmp1345:
	.quad	.Ltmp457
	.quad	.Ltmp459
.Lset63 = .Ltmp1347-.Ltmp1346           # Loc expr size
	.short	.Lset63
.Ltmp1346:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244\n"
.Ltmp1347:
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Ltmp449
	.quad	.Ltmp450
.Lset64 = .Ltmp1349-.Ltmp1348           # Loc expr size
	.short	.Lset64
.Ltmp1348:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\n"
.Ltmp1349:
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Lfunc_begin9
	.quad	.Ltmp494
.Lset65 = .Ltmp1351-.Ltmp1350           # Loc expr size
	.short	.Lset65
.Ltmp1350:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\027"
.Ltmp1351:
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin9
	.quad	.Ltmp494
.Lset66 = .Ltmp1353-.Ltmp1352           # Loc expr size
	.short	.Lset66
.Ltmp1352:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\027"
.Ltmp1353:
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Lfunc_begin9
	.quad	.Ltmp494
.Lset67 = .Ltmp1355-.Ltmp1354           # Loc expr size
	.short	.Lset67
.Ltmp1354:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\027"
.Ltmp1355:
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Lfunc_begin9
	.quad	.Ltmp494
.Lset68 = .Ltmp1357-.Ltmp1356           # Loc expr size
	.short	.Lset68
.Ltmp1356:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\031"
.Ltmp1357:
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Lfunc_begin9
	.quad	.Ltmp489
.Lset69 = .Ltmp1359-.Ltmp1358           # Loc expr size
	.short	.Lset69
.Ltmp1358:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\026"
.Ltmp1359:
	.quad	.Ltmp489
	.quad	.Ltmp491
.Lset70 = .Ltmp1361-.Ltmp1360           # Loc expr size
	.short	.Lset70
.Ltmp1360:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\026"
.Ltmp1361:
	.quad	.Ltmp491
	.quad	.Ltmp494
.Lset71 = .Ltmp1363-.Ltmp1362           # Loc expr size
	.short	.Lset71
.Ltmp1362:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\026"
.Ltmp1363:
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Lfunc_begin9
	.quad	.Ltmp494
.Lset72 = .Ltmp1365-.Ltmp1364           # Loc expr size
	.short	.Lset72
.Ltmp1364:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\026"
.Ltmp1365:
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Ltmp487
	.quad	.Ltmp494
.Lset73 = .Ltmp1367-.Ltmp1366           # Loc expr size
	.short	.Lset73
.Ltmp1366:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\026"
.Ltmp1367:
	.quad	0
	.quad	0
.Ldebug_loc121:
	.quad	.Ltmp488
	.quad	.Ltmp494
.Lset74 = .Ltmp1369-.Ltmp1368           # Loc expr size
	.short	.Lset74
.Ltmp1368:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\026"
.Ltmp1369:
	.quad	0
	.quad	0
.Ldebug_loc123:
	.quad	.Ltmp490
	.quad	.Ltmp494
.Lset75 = .Ltmp1371-.Ltmp1370           # Loc expr size
	.short	.Lset75
.Ltmp1370:
	.byte	119                     # DW_OP_breg7
	.ascii	"\224\026"
.Ltmp1371:
	.quad	0
	.quad	0
.Ldebug_loc125:
	.quad	.Ltmp492
	.quad	.Ltmp494
.Lset76 = .Ltmp1373-.Ltmp1372           # Loc expr size
	.short	.Lset76
.Ltmp1372:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\026"
.Ltmp1373:
	.quad	0
	.quad	0
.Ldebug_loc127:
	.quad	.Ltmp493
	.quad	.Ltmp494
.Lset77 = .Ltmp1375-.Ltmp1374           # Loc expr size
	.short	.Lset77
.Ltmp1374:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\025"
.Ltmp1375:
	.quad	0
	.quad	0
.Ldebug_loc129:
	.quad	.Lfunc_begin10
	.quad	.Ltmp529
.Lset78 = .Ltmp1377-.Ltmp1376           # Loc expr size
	.short	.Lset78
.Ltmp1376:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\031"
.Ltmp1377:
	.quad	0
	.quad	0
.Ldebug_loc131:
	.quad	.Lfunc_begin10
	.quad	.Ltmp529
.Lset79 = .Ltmp1379-.Ltmp1378           # Loc expr size
	.short	.Lset79
.Ltmp1378:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\031"
.Ltmp1379:
	.quad	0
	.quad	0
.Ldebug_loc133:
	.quad	.Lfunc_begin10
	.quad	.Ltmp529
.Lset80 = .Ltmp1381-.Ltmp1380           # Loc expr size
	.short	.Lset80
.Ltmp1380:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\031"
.Ltmp1381:
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Lfunc_begin10
	.quad	.Ltmp529
.Lset81 = .Ltmp1383-.Ltmp1382           # Loc expr size
	.short	.Lset81
.Ltmp1382:
	.byte	119                     # DW_OP_breg7
	.ascii	"\334\032"
.Ltmp1383:
	.quad	0
	.quad	0
.Ldebug_loc137:
	.quad	.Lfunc_begin10
	.quad	.Ltmp529
.Lset82 = .Ltmp1385-.Ltmp1384           # Loc expr size
	.short	.Lset82
.Ltmp1384:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\031"
.Ltmp1385:
	.quad	0
	.quad	0
.Ldebug_loc139:
	.quad	.Ltmp526
	.quad	.Ltmp527
.Lset83 = .Ltmp1387-.Ltmp1386           # Loc expr size
	.short	.Lset83
.Ltmp1386:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\030"
.Ltmp1387:
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Ltmp528
	.quad	.Ltmp529
.Lset84 = .Ltmp1389-.Ltmp1388           # Loc expr size
	.short	.Lset84
.Ltmp1388:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\026"
.Ltmp1389:
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Ltmp540
	.quad	.Ltmp546
.Lset85 = .Ltmp1391-.Ltmp1390           # Loc expr size
	.short	.Lset85
.Ltmp1390:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1391:
	.quad	.Ltmp546
	.quad	.Ltmp550
.Lset86 = .Ltmp1393-.Ltmp1392           # Loc expr size
	.short	.Lset86
.Ltmp1392:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\005"
.Ltmp1393:
	.quad	0
	.quad	0
.Ldebug_loc146:
	.quad	.Ltmp551
	.quad	.Ltmp552
.Lset87 = .Ltmp1395-.Ltmp1394           # Loc expr size
	.short	.Lset87
.Ltmp1394:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp1395:
	.quad	0
	.quad	0
.Ldebug_loc148:
	.quad	.Lfunc_begin11
	.quad	.Ltmp578
.Lset88 = .Ltmp1397-.Ltmp1396           # Loc expr size
	.short	.Lset88
.Ltmp1396:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\034"
.Ltmp1397:
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Lfunc_begin11
	.quad	.Ltmp578
.Lset89 = .Ltmp1399-.Ltmp1398           # Loc expr size
	.short	.Lset89
.Ltmp1398:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\034"
.Ltmp1399:
	.quad	0
	.quad	0
.Ldebug_loc152:
	.quad	.Lfunc_begin11
	.quad	.Ltmp578
.Lset90 = .Ltmp1401-.Ltmp1400           # Loc expr size
	.short	.Lset90
.Ltmp1400:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\034"
.Ltmp1401:
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Lfunc_begin11
	.quad	.Ltmp578
.Lset91 = .Ltmp1403-.Ltmp1402           # Loc expr size
	.short	.Lset91
.Ltmp1402:
	.byte	119                     # DW_OP_breg7
	.ascii	"\374\036"
.Ltmp1403:
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Ltmp577
	.quad	.Ltmp578
.Lset92 = .Ltmp1405-.Ltmp1404           # Loc expr size
	.short	.Lset92
.Ltmp1404:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\034"
.Ltmp1405:
	.quad	.Ltmp601
	.quad	.Ltmp606
.Lset93 = .Ltmp1407-.Ltmp1406           # Loc expr size
	.short	.Lset93
.Ltmp1406:
	.byte	119                     # DW_OP_breg7
	.asciz	"\300"
.Ltmp1407:
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Ltmp583
	.quad	.Ltmp578
.Lset94 = .Ltmp1409-.Ltmp1408           # Loc expr size
	.short	.Lset94
.Ltmp1408:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\030"
.Ltmp1409:
	.quad	.Ltmp602
	.quad	.Ltmp606
.Lset95 = .Ltmp1411-.Ltmp1410           # Loc expr size
	.short	.Lset95
.Ltmp1410:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp1411:
	.quad	0
	.quad	0
.Ldebug_loc162:
	.quad	.Ltmp581
	.quad	.Ltmp578
.Lset96 = .Ltmp1413-.Ltmp1412           # Loc expr size
	.short	.Lset96
.Ltmp1412:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\030"
.Ltmp1413:
	.quad	.Ltmp603
	.quad	.Ltmp606
.Lset97 = .Ltmp1415-.Ltmp1414           # Loc expr size
	.short	.Lset97
.Ltmp1414:
	.byte	119                     # DW_OP_breg7
	.byte	48
.Ltmp1415:
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Ltmp580
	.quad	.Ltmp578
.Lset98 = .Ltmp1417-.Ltmp1416           # Loc expr size
	.short	.Lset98
.Ltmp1416:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\030"
.Ltmp1417:
	.quad	.Ltmp604
	.quad	.Ltmp606
.Lset99 = .Ltmp1419-.Ltmp1418           # Loc expr size
	.short	.Lset99
.Ltmp1418:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp1419:
	.quad	0
	.quad	0
.Ldebug_loc168:
	.quad	.Ltmp579
	.quad	.Ltmp578
.Lset100 = .Ltmp1421-.Ltmp1420          # Loc expr size
	.short	.Lset100
.Ltmp1420:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\030"
.Ltmp1421:
	.quad	.Ltmp605
	.quad	.Ltmp606
.Lset101 = .Ltmp1423-.Ltmp1422          # Loc expr size
	.short	.Lset101
.Ltmp1422:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp1423:
	.quad	0
	.quad	0
.Ldebug_loc171:
	.quad	.Lfunc_begin12
	.quad	.Ltmp636
.Lset102 = .Ltmp1425-.Ltmp1424          # Loc expr size
	.short	.Lset102
.Ltmp1424:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\024"
.Ltmp1425:
	.quad	.Ltmp657
	.quad	.Ltmp659
.Lset103 = .Ltmp1427-.Ltmp1426          # Loc expr size
	.short	.Lset103
.Ltmp1426:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1427:
	.quad	0
	.quad	0
.Ldebug_loc174:
	.quad	.Lfunc_begin12
	.quad	.Ltmp636
.Lset104 = .Ltmp1429-.Ltmp1428          # Loc expr size
	.short	.Lset104
.Ltmp1428:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\024"
.Ltmp1429:
	.quad	0
	.quad	0
.Ldebug_loc176:
	.quad	.Lfunc_begin12
	.quad	.Ltmp636
.Lset105 = .Ltmp1431-.Ltmp1430          # Loc expr size
	.short	.Lset105
.Ltmp1430:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\024"
.Ltmp1431:
	.quad	0
	.quad	0
.Ldebug_loc178:
	.quad	.Lfunc_begin12
	.quad	.Ltmp636
.Lset106 = .Ltmp1433-.Ltmp1432          # Loc expr size
	.short	.Lset106
.Ltmp1432:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\024"
.Ltmp1433:
	.quad	0
	.quad	0
.Ldebug_loc180:
	.quad	.Ltmp630
	.quad	.Ltmp636
.Lset107 = .Ltmp1435-.Ltmp1434          # Loc expr size
	.short	.Lset107
.Ltmp1434:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\024"
.Ltmp1435:
	.quad	.Ltmp658
	.quad	.Ltmp659
.Lset108 = .Ltmp1437-.Ltmp1436          # Loc expr size
	.short	.Lset108
.Ltmp1436:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1437:
	.quad	0
	.quad	0
.Ldebug_loc183:
	.quad	.Ltmp631
	.quad	.Ltmp636
.Lset109 = .Ltmp1439-.Ltmp1438          # Loc expr size
	.short	.Lset109
.Ltmp1438:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\024"
.Ltmp1439:
	.quad	0
	.quad	0
.Ldebug_loc185:
	.quad	.Ltmp632
	.quad	.Ltmp636
.Lset110 = .Ltmp1441-.Ltmp1440          # Loc expr size
	.short	.Lset110
.Ltmp1440:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\024"
.Ltmp1441:
	.quad	0
	.quad	0
.Ldebug_loc187:
	.quad	.Ltmp633
	.quad	.Ltmp636
.Lset111 = .Ltmp1443-.Ltmp1442          # Loc expr size
	.short	.Lset111
.Ltmp1442:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1443:
	.quad	.Ltmp646
	.quad	.Ltmp650
.Lset112 = .Ltmp1445-.Ltmp1444          # Loc expr size
	.short	.Lset112
.Ltmp1444:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\007"
.Ltmp1445:
	.quad	0
	.quad	0
.Ldebug_loc190:
	.quad	.Ltmp633
	.quad	.Ltmp636
.Lset113 = .Ltmp1447-.Ltmp1446          # Loc expr size
	.short	.Lset113
.Ltmp1446:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1447:
	.quad	.Ltmp647
	.quad	.Ltmp650
.Lset114 = .Ltmp1449-.Ltmp1448          # Loc expr size
	.short	.Lset114
.Ltmp1448:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\007"
.Ltmp1449:
	.quad	0
	.quad	0
.Ldebug_loc193:
	.quad	.Ltmp633
	.quad	.Ltmp636
.Lset115 = .Ltmp1451-.Ltmp1450          # Loc expr size
	.short	.Lset115
.Ltmp1450:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1451:
	.quad	.Ltmp648
	.quad	.Ltmp650
.Lset116 = .Ltmp1453-.Ltmp1452          # Loc expr size
	.short	.Lset116
.Ltmp1452:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\007"
.Ltmp1453:
	.quad	0
	.quad	0
.Ldebug_loc196:
	.quad	.Lfunc_begin13
	.quad	.Ltmp687
.Lset117 = .Ltmp1455-.Ltmp1454          # Loc expr size
	.short	.Lset117
.Ltmp1454:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\f"
.Ltmp1455:
	.quad	.Ltmp698
	.quad	.Ltmp700
.Lset118 = .Ltmp1457-.Ltmp1456          # Loc expr size
	.short	.Lset118
.Ltmp1456:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1457:
	.quad	0
	.quad	0
.Ldebug_loc199:
	.quad	.Lfunc_begin13
	.quad	.Ltmp687
.Lset119 = .Ltmp1459-.Ltmp1458          # Loc expr size
	.short	.Lset119
.Ltmp1458:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\f"
.Ltmp1459:
	.quad	0
	.quad	0
.Ldebug_loc201:
	.quad	.Lfunc_begin13
	.quad	.Ltmp687
.Lset120 = .Ltmp1461-.Ltmp1460          # Loc expr size
	.short	.Lset120
.Ltmp1460:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\f"
.Ltmp1461:
	.quad	0
	.quad	0
.Ldebug_loc203:
	.quad	.Lfunc_begin13
	.quad	.Ltmp687
.Lset121 = .Ltmp1463-.Ltmp1462          # Loc expr size
	.short	.Lset121
.Ltmp1462:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\f"
.Ltmp1463:
	.quad	0
	.quad	0
.Ldebug_loc205:
	.quad	.Ltmp683
	.quad	.Ltmp687
.Lset122 = .Ltmp1465-.Ltmp1464          # Loc expr size
	.short	.Lset122
.Ltmp1464:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\f"
.Ltmp1465:
	.quad	.Ltmp699
	.quad	.Ltmp700
.Lset123 = .Ltmp1467-.Ltmp1466          # Loc expr size
	.short	.Lset123
.Ltmp1466:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1467:
	.quad	0
	.quad	0
.Ldebug_loc208:
	.quad	.Ltmp684
	.quad	.Ltmp687
.Lset124 = .Ltmp1469-.Ltmp1468          # Loc expr size
	.short	.Lset124
.Ltmp1468:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\013"
.Ltmp1469:
	.quad	0
	.quad	0
.Ldebug_loc210:
	.quad	.Ltmp685
	.quad	.Ltmp687
.Lset125 = .Ltmp1471-.Ltmp1470          # Loc expr size
	.short	.Lset125
.Ltmp1470:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp1471:
	.quad	.Ltmp694
	.quad	.Ltmp700
.Lset126 = .Ltmp1473-.Ltmp1472          # Loc expr size
	.short	.Lset126
.Ltmp1472:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\001"
.Ltmp1473:
	.quad	0
	.quad	0
.Ldebug_loc213:
	.quad	.Ltmp685
	.quad	.Ltmp687
.Lset127 = .Ltmp1475-.Ltmp1474          # Loc expr size
	.short	.Lset127
.Ltmp1474:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp1475:
	.quad	.Ltmp693
	.quad	.Ltmp700
.Lset128 = .Ltmp1477-.Ltmp1476          # Loc expr size
	.short	.Lset128
.Ltmp1476:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp1477:
	.quad	0
	.quad	0
.Ldebug_loc216:
	.quad	.Lfunc_begin14
	.quad	.Ltmp726
.Lset129 = .Ltmp1479-.Ltmp1478          # Loc expr size
	.short	.Lset129
.Ltmp1478:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\007"
.Ltmp1479:
	.quad	.Ltmp733
	.quad	.Ltmp735
.Lset130 = .Ltmp1481-.Ltmp1480          # Loc expr size
	.short	.Lset130
.Ltmp1480:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp1481:
	.quad	0
	.quad	0
.Ldebug_loc219:
	.quad	.Lfunc_begin14
	.quad	.Ltmp726
.Lset131 = .Ltmp1483-.Ltmp1482          # Loc expr size
	.short	.Lset131
.Ltmp1482:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\007"
.Ltmp1483:
	.quad	0
	.quad	0
.Ldebug_loc221:
	.quad	.Lfunc_begin14
	.quad	.Ltmp726
.Lset132 = .Ltmp1485-.Ltmp1484          # Loc expr size
	.short	.Lset132
.Ltmp1484:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp1485:
	.quad	0
	.quad	0
.Ldebug_loc223:
	.quad	.Lfunc_begin14
	.quad	.Ltmp726
.Lset133 = .Ltmp1487-.Ltmp1486          # Loc expr size
	.short	.Lset133
.Ltmp1486:
	.byte	119                     # DW_OP_breg7
	.ascii	"\344\007"
.Ltmp1487:
	.quad	.Ltmp734
	.quad	.Ltmp735
.Lset134 = .Ltmp1489-.Ltmp1488          # Loc expr size
	.short	.Lset134
.Ltmp1488:
	.byte	119                     # DW_OP_breg7
	.byte	28
.Ltmp1489:
	.quad	0
	.quad	0
.Ldebug_loc226:
	.quad	.Ltmp724
	.quad	.Ltmp726
.Lset135 = .Ltmp1491-.Ltmp1490          # Loc expr size
	.short	.Lset135
.Ltmp1490:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\007"
.Ltmp1491:
	.quad	.Ltmp729
	.quad	.Ltmp735
.Lset136 = .Ltmp1493-.Ltmp1492          # Loc expr size
	.short	.Lset136
.Ltmp1492:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370"
.Ltmp1493:
	.quad	0
	.quad	0
.Ldebug_loc229:
	.quad	.Ltmp725
	.quad	.Ltmp726
.Lset137 = .Ltmp1495-.Ltmp1494          # Loc expr size
	.short	.Lset137
.Ltmp1494:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\006"
.Ltmp1495:
	.quad	.Ltmp732
	.quad	.Ltmp735
.Lset138 = .Ltmp1497-.Ltmp1496          # Loc expr size
	.short	.Lset138
.Ltmp1496:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp1497:
	.quad	0
	.quad	0
.Ldebug_loc232:
	.quad	.Lfunc_begin15
	.quad	.Ltmp761
.Lset139 = .Ltmp1499-.Ltmp1498          # Loc expr size
	.short	.Lset139
.Ltmp1498:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\n"
.Ltmp1499:
	.quad	0
	.quad	0
.Ldebug_loc234:
	.quad	.Lfunc_begin15
	.quad	.Ltmp759
.Lset140 = .Ltmp1501-.Ltmp1500          # Loc expr size
	.short	.Lset140
.Ltmp1500:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\n"
.Ltmp1501:
	.quad	0
	.quad	0
.Ldebug_loc236:
	.quad	.Ltmp760
	.quad	.Ltmp761
.Lset141 = .Ltmp1503-.Ltmp1502          # Loc expr size
	.short	.Lset141
.Ltmp1502:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\t"
.Ltmp1503:
	.quad	.Ltmp769
	.quad	.Ltmp772
.Lset142 = .Ltmp1505-.Ltmp1504          # Loc expr size
	.short	.Lset142
.Ltmp1504:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\001"
.Ltmp1505:
	.quad	0
	.quad	0
.Ldebug_loc239:
	.quad	.Ltmp763
	.quad	.Ltmp764
.Lset143 = .Ltmp1507-.Ltmp1506          # Loc expr size
	.short	.Lset143
.Ltmp1506:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp1507:
	.quad	.Ltmp764
	.quad	.Ltmp766
.Lset144 = .Ltmp1509-.Ltmp1508          # Loc expr size
	.short	.Lset144
.Ltmp1508:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\005"
.Ltmp1509:
	.quad	.Ltmp770
	.quad	.Ltmp772
.Lset145 = .Ltmp1511-.Ltmp1510          # Loc expr size
	.short	.Lset145
.Ltmp1510:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp1511:
	.quad	0
	.quad	0
.Ldebug_loc243:
	.quad	.Ltmp765
	.quad	.Ltmp766
.Lset146 = .Ltmp1513-.Ltmp1512          # Loc expr size
	.short	.Lset146
.Ltmp1512:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\005"
.Ltmp1513:
	.quad	.Ltmp771
	.quad	.Ltmp772
.Lset147 = .Ltmp1515-.Ltmp1514          # Loc expr size
	.short	.Lset147
.Ltmp1514:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\002"
.Ltmp1515:
	.quad	0
	.quad	0
.Ldebug_loc246:
	.quad	.Ltmp767
	.quad	.Ltmp772
.Lset148 = .Ltmp1517-.Ltmp1516          # Loc expr size
	.short	.Lset148
.Ltmp1516:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\002"
.Ltmp1517:
	.quad	0
	.quad	0
.Ldebug_loc248:
	.quad	.Ltmp768
	.quad	.Ltmp772
.Lset149 = .Ltmp1519-.Ltmp1518          # Loc expr size
	.short	.Lset149
.Ltmp1518:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\001"
.Ltmp1519:
	.quad	0
	.quad	0
.Ldebug_loc250:
	.quad	.Lfunc_begin16
	.quad	.Ltmp797
.Lset150 = .Ltmp1521-.Ltmp1520          # Loc expr size
	.short	.Lset150
.Ltmp1520:
	.byte	98                      # DW_OP_reg18
.Ltmp1521:
	.quad	.Ltmp797
	.quad	.Ltmp798
.Lset151 = .Ltmp1523-.Ltmp1522          # Loc expr size
	.short	.Lset151
.Ltmp1522:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp1523:
	.quad	0
	.quad	0
.Ldebug_loc253:
	.quad	.Lfunc_begin16
	.quad	.Ltmp796
.Lset152 = .Ltmp1525-.Ltmp1524          # Loc expr size
	.short	.Lset152
.Ltmp1524:
	.byte	97                      # DW_OP_reg17
.Ltmp1525:
	.quad	.Ltmp796
	.quad	.Lfunc_end16
.Lset153 = .Ltmp1527-.Ltmp1526          # Loc expr size
	.short	.Lset153
.Ltmp1526:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp1527:
	.quad	0
	.quad	0
.Ldebug_loc256:
	.quad	.Lfunc_begin17
	.quad	.Ltmp828
.Lset154 = .Ltmp1529-.Ltmp1528          # Loc expr size
	.short	.Lset154
.Ltmp1528:
	.byte	98                      # DW_OP_reg18
.Ltmp1529:
	.quad	.Ltmp828
	.quad	.Ltmp829
.Lset155 = .Ltmp1531-.Ltmp1530          # Loc expr size
	.short	.Lset155
.Ltmp1530:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp1531:
	.quad	0
	.quad	0
.Ldebug_loc259:
	.quad	.Lfunc_begin17
	.quad	.Ltmp827
.Lset156 = .Ltmp1533-.Ltmp1532          # Loc expr size
	.short	.Lset156
.Ltmp1532:
	.byte	97                      # DW_OP_reg17
.Ltmp1533:
	.quad	.Ltmp827
	.quad	.Lfunc_end17
.Lset157 = .Ltmp1535-.Ltmp1534          # Loc expr size
	.short	.Lset157
.Ltmp1534:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp1535:
	.quad	0
	.quad	0
.Ldebug_loc262:
	.quad	.Lfunc_begin19
	.quad	.Ltmp869
.Lset158 = .Ltmp1537-.Ltmp1536          # Loc expr size
	.short	.Lset158
.Ltmp1536:
	.byte	97                      # DW_OP_reg17
.Ltmp1537:
	.quad	.Ltmp869
	.quad	.Ltmp870
.Lset159 = .Ltmp1539-.Ltmp1538          # Loc expr size
	.short	.Lset159
.Ltmp1538:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\001"
.Ltmp1539:
	.quad	0
	.quad	0
.Ldebug_loc265:
	.quad	.Lfunc_begin20
	.quad	.Ltmp886
.Lset160 = .Ltmp1541-.Ltmp1540          # Loc expr size
	.short	.Lset160
.Ltmp1540:
	.byte	80                      # DW_OP_reg0
.Ltmp1541:
	.quad	.Ltmp886
	.quad	.Ltmp893
.Lset161 = .Ltmp1543-.Ltmp1542          # Loc expr size
	.short	.Lset161
.Ltmp1542:
	.byte	118                     # DW_OP_breg6
	.byte	87
.Ltmp1543:
	.quad	0
	.quad	0
.Ldebug_loc268:
	.quad	.Lfunc_begin20
	.quad	.Ltmp891
.Lset162 = .Ltmp1545-.Ltmp1544          # Loc expr size
	.short	.Lset162
.Ltmp1544:
	.byte	88                      # DW_OP_reg8
.Ltmp1545:
	.quad	.Ltmp891
	.quad	.Ltmp893
.Lset163 = .Ltmp1547-.Ltmp1546          # Loc expr size
	.short	.Lset163
.Ltmp1546:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"
.Ltmp1547:
	.quad	0
	.quad	0
.Ldebug_loc271:
	.quad	.Lfunc_begin20
	.quad	.Ltmp890
.Lset164 = .Ltmp1549-.Ltmp1548          # Loc expr size
	.short	.Lset164
.Ltmp1548:
	.byte	81                      # DW_OP_reg1
.Ltmp1549:
	.quad	.Ltmp890
	.quad	.Ltmp893
.Lset165 = .Ltmp1551-.Ltmp1550          # Loc expr size
	.short	.Lset165
.Ltmp1550:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310~"
.Ltmp1551:
	.quad	0
	.quad	0
.Ldebug_loc274:
	.quad	.Lfunc_begin20
	.quad	.Ltmp888
.Lset166 = .Ltmp1553-.Ltmp1552          # Loc expr size
	.short	.Lset166
.Ltmp1552:
	.byte	84                      # DW_OP_reg4
.Ltmp1553:
	.quad	.Ltmp888
	.quad	.Ltmp893
.Lset167 = .Ltmp1555-.Ltmp1554          # Loc expr size
	.short	.Lset167
.Ltmp1554:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"
.Ltmp1555:
	.quad	0
	.quad	0
.Ldebug_loc277:
	.quad	.Lfunc_begin20
	.quad	.Ltmp889
.Lset168 = .Ltmp1557-.Ltmp1556          # Loc expr size
	.short	.Lset168
.Ltmp1556:
	.byte	85                      # DW_OP_reg5
.Ltmp1557:
	.quad	.Ltmp889
	.quad	.Ltmp893
.Lset169 = .Ltmp1559-.Ltmp1558          # Loc expr size
	.short	.Lset169
.Ltmp1558:
	.byte	118                     # DW_OP_breg6
	.ascii	"\324~"
.Ltmp1559:
	.quad	0
	.quad	0
.Ldebug_loc280:
	.quad	.Ltmp892
	.quad	.Ltmp893
.Lset170 = .Ltmp1561-.Ltmp1560          # Loc expr size
	.short	.Lset170
.Ltmp1560:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240}"
	.byte	6
.Ltmp1561:
	.quad	0
	.quad	0
.Ldebug_loc282:
	.quad	.Ltmp892
	.quad	.Ltmp895
.Lset171 = .Ltmp1563-.Ltmp1562          # Loc expr size
	.short	.Lset171
.Ltmp1562:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1563:
	.quad	.Ltmp895
	.quad	.Ltmp896
.Lset172 = .Ltmp1565-.Ltmp1564          # Loc expr size
	.short	.Lset172
.Ltmp1564:
	.byte	118                     # DW_OP_breg6
	.ascii	"\264z"
.Ltmp1565:
	.quad	0
	.quad	0
.Ldebug_loc285:
	.quad	.Lfunc_begin21
	.quad	.Ltmp923
.Lset173 = .Ltmp1567-.Ltmp1566          # Loc expr size
	.short	.Lset173
.Ltmp1566:
	.byte	119                     # DW_OP_breg7
	.asciz	"\354\325"
.Ltmp1567:
	.quad	0
	.quad	0
.Ldebug_loc287:
	.quad	.Lfunc_begin21
	.quad	.Ltmp923
.Lset174 = .Ltmp1569-.Ltmp1568          # Loc expr size
	.short	.Lset174
.Ltmp1568:
	.byte	119                     # DW_OP_breg7
	.asciz	"\340\326"
.Ltmp1569:
	.quad	0
	.quad	0
.Ldebug_loc289:
	.quad	.Lfunc_begin21
	.quad	.Ltmp923
.Lset175 = .Ltmp1571-.Ltmp1570          # Loc expr size
	.short	.Lset175
.Ltmp1570:
	.byte	119                     # DW_OP_breg7
	.asciz	"\330\325"
.Ltmp1571:
	.quad	0
	.quad	0
.Ldebug_loc291:
	.quad	.Lfunc_begin21
	.quad	.Ltmp923
.Lset176 = .Ltmp1573-.Ltmp1572          # Loc expr size
	.short	.Lset176
.Ltmp1572:
	.byte	119                     # DW_OP_breg7
	.asciz	"\320\325"
.Ltmp1573:
	.quad	0
	.quad	0
.Ldebug_loc293:
	.quad	.Lfunc_begin21
	.quad	.Ltmp923
.Lset177 = .Ltmp1575-.Ltmp1574          # Loc expr size
	.short	.Lset177
.Ltmp1574:
	.byte	119                     # DW_OP_breg7
	.asciz	"\310\325"
.Ltmp1575:
	.quad	0
	.quad	0
.Ldebug_loc295:
	.quad	.Ltmp922
	.quad	.Lfunc_end21
.Lset178 = .Ltmp1577-.Ltmp1576          # Loc expr size
	.short	.Lset178
.Ltmp1576:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1577:
	.quad	0
	.quad	0
.Ldebug_loc298:
	.quad	.Ltmp941
	.quad	.Ltmp942
.Lset179 = .Ltmp1579-.Ltmp1578          # Loc expr size
	.short	.Lset179
.Ltmp1578:
	.byte	119                     # DW_OP_breg7
	.asciz	"\260\305"
.Ltmp1579:
	.quad	0
	.quad	0
.Ldebug_loc300:
	.quad	.Ltmp941
	.quad	.Ltmp962
.Lset180 = .Ltmp1581-.Ltmp1580          # Loc expr size
	.short	.Lset180
.Ltmp1580:
.Ltmp1581:
	.quad	.Ltmp962
	.quad	.Ltmp963
.Lset181 = .Ltmp1583-.Ltmp1582          # Loc expr size
	.short	.Lset181
.Ltmp1582:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2201"
.Ltmp1583:
	.quad	.Ltmp967
	.quad	.Ltmp969
.Lset182 = .Ltmp1585-.Ltmp1584          # Loc expr size
	.short	.Lset182
.Ltmp1584:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220*"
.Ltmp1585:
	.quad	.Ltmp989
	.quad	.Ltmp990
.Lset183 = .Ltmp1587-.Ltmp1586          # Loc expr size
	.short	.Lset183
.Ltmp1586:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\023"
.Ltmp1587:
	.quad	0
	.quad	0
.Ldebug_loc305:
	.quad	.Ltmp941
	.quad	.Ltmp944
.Lset184 = .Ltmp1589-.Ltmp1588          # Loc expr size
	.short	.Lset184
.Ltmp1588:
.Ltmp1589:
	.quad	.Ltmp944
	.quad	.Ltmp945
.Lset185 = .Ltmp1591-.Ltmp1590          # Loc expr size
	.short	.Lset185
.Ltmp1590:
	.byte	119                     # DW_OP_breg7
	.asciz	"\250\302"
.Ltmp1591:
	.quad	0
	.quad	0
.Ldebug_loc308:
	.quad	.Ltmp964
	.quad	.Ltmp965
.Lset186 = .Ltmp1593-.Ltmp1592          # Loc expr size
	.short	.Lset186
.Ltmp1592:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320-"
.Ltmp1593:
	.quad	.Ltmp975
	.quad	.Ltmp978
.Lset187 = .Ltmp1595-.Ltmp1594          # Loc expr size
	.short	.Lset187
.Ltmp1594:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\""
.Ltmp1595:
	.quad	.Ltmp987
	.quad	.Ltmp988
.Lset188 = .Ltmp1597-.Ltmp1596          # Loc expr size
	.short	.Lset188
.Ltmp1596:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\025"
.Ltmp1597:
	.quad	.Ltmp996
	.quad	.Ltmp999
.Lset189 = .Ltmp1599-.Ltmp1598          # Loc expr size
	.short	.Lset189
.Ltmp1598:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\f"
.Ltmp1599:
	.quad	.Ltmp1006
	.quad	.Ltmp1008
.Lset190 = .Ltmp1601-.Ltmp1600          # Loc expr size
	.short	.Lset190
.Ltmp1600:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp1601:
	.quad	0
	.quad	0
.Ldebug_loc314:
	.quad	.Ltmp966
	.quad	.Ltmp969
.Lset191 = .Ltmp1603-.Ltmp1602          # Loc expr size
	.short	.Lset191
.Ltmp1602:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260*"
.Ltmp1603:
	.quad	.Ltmp976
	.quad	.Ltmp978
.Lset192 = .Ltmp1605-.Ltmp1604          # Loc expr size
	.short	.Lset192
.Ltmp1604:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\""
.Ltmp1605:
	.quad	.Ltmp980
	.quad	.Ltmp982
.Lset193 = .Ltmp1607-.Ltmp1606          # Loc expr size
	.short	.Lset193
.Ltmp1606:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\034"
.Ltmp1607:
	.quad	.Ltmp997
	.quad	.Ltmp999
.Lset194 = .Ltmp1609-.Ltmp1608          # Loc expr size
	.short	.Lset194
.Ltmp1608:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\013"
.Ltmp1609:
	.quad	0
	.quad	0
.Ldebug_loc319:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1033
.Lset195 = .Ltmp1611-.Ltmp1610          # Loc expr size
	.short	.Lset195
.Ltmp1610:
	.byte	119                     # DW_OP_breg7
	.asciz	"\214\310"
.Ltmp1611:
	.quad	0
	.quad	0
.Ldebug_loc321:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1033
.Lset196 = .Ltmp1613-.Ltmp1612          # Loc expr size
	.short	.Lset196
.Ltmp1612:
	.byte	119                     # DW_OP_breg7
	.asciz	"\200\310"
.Ltmp1613:
	.quad	0
	.quad	0
.Ldebug_loc323:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1033
.Lset197 = .Ltmp1615-.Ltmp1614          # Loc expr size
	.short	.Lset197
.Ltmp1614:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370\307"
.Ltmp1615:
	.quad	0
	.quad	0
.Ldebug_loc325:
	.quad	.Ltmp1032
	.quad	.Ltmp1048
.Lset198 = .Ltmp1617-.Ltmp1616          # Loc expr size
	.short	.Lset198
.Ltmp1616:
.Ltmp1617:
	.quad	.Ltmp1048
	.quad	.Ltmp1050
.Lset199 = .Ltmp1619-.Ltmp1618          # Loc expr size
	.short	.Lset199
.Ltmp1618:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2408"
.Ltmp1619:
	.quad	0
	.quad	0
.Ldebug_loc328:
	.quad	.Ltmp1032
	.quad	.Ltmp1049
.Lset200 = .Ltmp1621-.Ltmp1620          # Loc expr size
	.short	.Lset200
.Ltmp1620:
.Ltmp1621:
	.quad	.Ltmp1049
	.quad	.Ltmp1050
.Lset201 = .Ltmp1623-.Ltmp1622          # Loc expr size
	.short	.Lset201
.Ltmp1622:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2308"
.Ltmp1623:
	.quad	0
	.quad	0
.Ldebug_loc331:
	.quad	.Ltmp1032
	.quad	.Ltmp1065
.Lset202 = .Ltmp1625-.Ltmp1624          # Loc expr size
	.short	.Lset202
.Ltmp1624:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1625:
	.quad	.Ltmp1065
	.quad	.Ltmp1066
.Lset203 = .Ltmp1627-.Ltmp1626          # Loc expr size
	.short	.Lset203
.Ltmp1626:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214*"
.Ltmp1627:
	.quad	0
	.quad	0
.Ldebug_loc334:
	.quad	.Ltmp1036
	.quad	.Ltmp1080
.Lset204 = .Ltmp1629-.Ltmp1628          # Loc expr size
	.short	.Lset204
.Ltmp1628:
.Ltmp1629:
	.quad	.Ltmp1080
	.quad	.Ltmp1081
.Lset205 = .Ltmp1631-.Ltmp1630          # Loc expr size
	.short	.Lset205
.Ltmp1630:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\036"
.Ltmp1631:
	.quad	0
	.quad	0
.Ldebug_loc337:
	.quad	.Ltmp1036
	.quad	.Ltmp1047
.Lset206 = .Ltmp1633-.Ltmp1632          # Loc expr size
	.short	.Lset206
.Ltmp1632:
.Ltmp1633:
	.quad	.Ltmp1047
	.quad	.Ltmp1050
.Lset207 = .Ltmp1635-.Ltmp1634          # Loc expr size
	.short	.Lset207
.Ltmp1634:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230:"
.Ltmp1635:
	.quad	0
	.quad	0
.Ldebug_loc340:
	.quad	.Ltmp1037
	.quad	.Ltmp1130
.Lset208 = .Ltmp1637-.Ltmp1636          # Loc expr size
	.short	.Lset208
.Ltmp1636:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1637:
	.quad	.Ltmp1130
	.quad	.Ltmp1131
.Lset209 = .Ltmp1639-.Ltmp1638          # Loc expr size
	.short	.Lset209
.Ltmp1638:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\001"
.Ltmp1639:
	.quad	0
	.quad	0
.Ldebug_loc343:
	.quad	.Ltmp1044
	.quad	.Ltmp1067
.Lset210 = .Ltmp1641-.Ltmp1640          # Loc expr size
	.short	.Lset210
.Ltmp1640:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1641:
	.quad	.Ltmp1067
	.quad	.Ltmp1068
.Lset211 = .Ltmp1643-.Ltmp1642          # Loc expr size
	.short	.Lset211
.Ltmp1642:
	.byte	119                     # DW_OP_breg7
	.ascii	"\254'"
.Ltmp1643:
	.quad	0
	.quad	0
.Ldebug_loc346:
	.quad	.Ltmp1045
	.quad	.Ltmp1046
.Lset212 = .Ltmp1645-.Ltmp1644          # Loc expr size
	.short	.Lset212
.Ltmp1644:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230:"
.Ltmp1645:
	.quad	.Ltmp1075
	.quad	.Ltmp1076
.Lset213 = .Ltmp1647-.Ltmp1646          # Loc expr size
	.short	.Lset213
.Ltmp1646:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220#"
.Ltmp1647:
	.quad	.Ltmp1089
	.quad	.Ltmp1090
.Lset214 = .Ltmp1649-.Ltmp1648          # Loc expr size
	.short	.Lset214
.Ltmp1648:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\035"
.Ltmp1649:
	.quad	.Ltmp1109
	.quad	.Ltmp1110
.Lset215 = .Ltmp1651-.Ltmp1650          # Loc expr size
	.short	.Lset215
.Ltmp1650:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\025"
.Ltmp1651:
	.quad	0
	.quad	0
.Ldebug_loc351:
	.quad	.Ltmp1052
	.quad	.Ltmp1053
.Lset216 = .Ltmp1653-.Ltmp1652          # Loc expr size
	.short	.Lset216
.Ltmp1652:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp1653:
	.quad	.Ltmp1056
	.quad	.Ltmp1057
.Lset217 = .Ltmp1655-.Ltmp1654          # Loc expr size
	.short	.Lset217
.Ltmp1654:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3444"
.Ltmp1655:
	.quad	0
	.quad	0
.Ldebug_loc354:
	.quad	.Ltmp1069
	.quad	.Ltmp1076
.Lset218 = .Ltmp1657-.Ltmp1656          # Loc expr size
	.short	.Lset218
.Ltmp1656:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230'"
.Ltmp1657:
	.quad	.Ltmp1089
	.quad	.Ltmp1098
.Lset219 = .Ltmp1659-.Ltmp1658          # Loc expr size
	.short	.Lset219
.Ltmp1658:
.Ltmp1659:
	.quad	.Ltmp1098
	.quad	.Ltmp1099
.Lset220 = .Ltmp1661-.Ltmp1660          # Loc expr size
	.short	.Lset220
.Ltmp1660:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\027"
.Ltmp1661:
	.quad	0
	.quad	0
.Ldebug_loc358:
	.quad	.Ltmp1070
	.quad	.Ltmp1076
.Lset221 = .Ltmp1663-.Ltmp1662          # Loc expr size
	.short	.Lset221
.Ltmp1662:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220'"
.Ltmp1663:
	.quad	.Ltmp1082
	.quad	.Ltmp1083
.Lset222 = .Ltmp1665-.Ltmp1664          # Loc expr size
	.short	.Lset222
.Ltmp1664:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\036"
.Ltmp1665:
	.quad	.Ltmp1086
	.quad	.Ltmp1087
.Lset223 = .Ltmp1667-.Ltmp1666          # Loc expr size
	.short	.Lset223
.Ltmp1666:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3706"
.Ltmp1667:
	.quad	.Ltmp1100
	.quad	.Ltmp1101
.Lset224 = .Ltmp1669-.Ltmp1668          # Loc expr size
	.short	.Lset224
.Ltmp1668:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\026"
.Ltmp1669:
	.quad	.Ltmp1106
	.quad	.Ltmp1107
.Lset225 = .Ltmp1671-.Ltmp1670          # Loc expr size
	.short	.Lset225
.Ltmp1670:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3706"
.Ltmp1671:
	.quad	0
	.quad	0
.Ldebug_loc364:
	.quad	.Ltmp1071
	.quad	.Ltmp1072
.Lset226 = .Ltmp1673-.Ltmp1672          # Loc expr size
	.short	.Lset226
.Ltmp1672:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360&"
.Ltmp1673:
	.quad	.Ltmp1094
	.quad	.Ltmp1095
.Lset227 = .Ltmp1675-.Ltmp1674          # Loc expr size
	.short	.Lset227
.Ltmp1674:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\031"
.Ltmp1675:
	.quad	.Ltmp1117
	.quad	.Ltmp1118
.Lset228 = .Ltmp1677-.Ltmp1676          # Loc expr size
	.short	.Lset228
.Ltmp1676:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\f"
.Ltmp1677:
	.quad	0
	.quad	0
.Ldebug_loc368:
	.quad	.Ltmp1073
	.quad	.Ltmp1074
.Lset229 = .Ltmp1679-.Ltmp1678          # Loc expr size
	.short	.Lset229
.Ltmp1678:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250&"
.Ltmp1679:
	.quad	.Ltmp1096
	.quad	.Ltmp1097
.Lset230 = .Ltmp1681-.Ltmp1680          # Loc expr size
	.short	.Lset230
.Ltmp1680:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\030"
.Ltmp1681:
	.quad	0
	.quad	0
.Ldebug_loc371:
	.quad	.Ltmp1089
	.quad	.Ltmp1090
.Lset231 = .Ltmp1683-.Ltmp1682          # Loc expr size
	.short	.Lset231
.Ltmp1682:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260-"
.Ltmp1683:
	.quad	0
	.quad	0
.Ldebug_loc373:
	.quad	.Ltmp1092
	.quad	.Ltmp1093
.Lset232 = .Ltmp1685-.Ltmp1684          # Loc expr size
	.short	.Lset232
.Ltmp1684:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\031"
.Ltmp1685:
	.quad	.Ltmp1117
	.quad	.Ltmp1118
.Lset233 = .Ltmp1687-.Ltmp1686          # Loc expr size
	.short	.Lset233
.Ltmp1686:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp1687:
	.quad	.Ltmp1128
	.quad	.Ltmp1129
.Lset234 = .Ltmp1689-.Ltmp1688          # Loc expr size
	.short	.Lset234
.Ltmp1688:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\004"
.Ltmp1689:
	.quad	0
	.quad	0
.Ldebug_loc377:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1158
.Lset235 = .Ltmp1691-.Ltmp1690          # Loc expr size
	.short	.Lset235
.Ltmp1690:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\026"
.Ltmp1691:
	.quad	0
	.quad	0
.Ldebug_loc379:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1158
.Lset236 = .Ltmp1693-.Ltmp1692          # Loc expr size
	.short	.Lset236
.Ltmp1692:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\026"
.Ltmp1693:
	.quad	0
	.quad	0
.Ldebug_loc381:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1158
.Lset237 = .Ltmp1695-.Ltmp1694          # Loc expr size
	.short	.Lset237
.Ltmp1694:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\026"
.Ltmp1695:
	.quad	0
	.quad	0
.Ldebug_loc383:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1158
.Lset238 = .Ltmp1697-.Ltmp1696          # Loc expr size
	.short	.Lset238
.Ltmp1696:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\027"
.Ltmp1697:
	.quad	0
	.quad	0
.Ldebug_loc385:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1158
.Lset239 = .Ltmp1699-.Ltmp1698          # Loc expr size
	.short	.Lset239
.Ltmp1698:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\026"
.Ltmp1699:
	.quad	0
	.quad	0
.Ldebug_loc387:
	.quad	.Ltmp1167
	.quad	.Ltmp1168
.Lset240 = .Ltmp1701-.Ltmp1700          # Loc expr size
	.short	.Lset240
.Ltmp1700:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\n"
.Ltmp1701:
	.quad	.Ltmp1169
	.quad	.Ltmp1171
.Lset241 = .Ltmp1703-.Ltmp1702          # Loc expr size
	.short	.Lset241
.Ltmp1702:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp1703:
	.quad	0
	.quad	0
.Ldebug_loc390:
	.quad	.Ltmp1176
	.quad	.Ltmp1177
.Lset242 = .Ltmp1705-.Ltmp1704          # Loc expr size
	.short	.Lset242
.Ltmp1704:
	.byte	119                     # DW_OP_breg7
	.byte	20
.Ltmp1705:
	.quad	0
	.quad	0
.Ldebug_loc392:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset243 = .Lfunc_begin3-.Lfunc_begin0
	.quad	.Lset243
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin1    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin3
.Lset244 = .Lfunc_begin15-.Lfunc_begin3
	.quad	.Lset244
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin2    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin15
.Lset245 = .Ldebug_end0-.Lfunc_begin15
	.quad	.Lset245
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp33
	.quad	0
	.quad	0
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp34
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp60
	.quad	.Ltmp62
	.quad	.Ltmp66
	.quad	0
	.quad	0
	.quad	.Ltmp60
	.quad	.Ltmp61
	.quad	.Ltmp67
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp61
	.quad	.Ltmp62
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp55
	.quad	.Ltmp56
	.quad	.Ltmp59
	.quad	.Ltmp71
	.quad	0
	.quad	0
	.quad	.Ltmp75
	.quad	.Ltmp76
	.quad	.Ltmp77
	.quad	.Ltmp78
	.quad	0
	.quad	0
	.quad	.Ltmp57
	.quad	.Ltmp58
	.quad	.Ltmp73
	.quad	.Ltmp80
	.quad	0
	.quad	0
	.quad	.Ltmp81
	.quad	.Ltmp82
	.quad	.Ltmp83
	.quad	.Ltmp84
	.quad	.Ltmp88
	.quad	.Ltmp96
	.quad	0
	.quad	0
	.quad	.Ltmp85
	.quad	.Ltmp87
	.quad	.Ltmp97
	.quad	.Ltmp103
	.quad	0
	.quad	0
	.quad	.Ltmp104
	.quad	.Ltmp105
	.quad	.Ltmp106
	.quad	.Ltmp107
	.quad	.Ltmp110
	.quad	.Ltmp117
	.quad	0
	.quad	0
	.quad	.Ltmp123
	.quad	.Ltmp124
	.quad	.Ltmp126
	.quad	.Ltmp132
	.quad	0
	.quad	0
	.quad	.Ltmp122
	.quad	.Ltmp124
	.quad	.Ltmp125
	.quad	.Ltmp133
	.quad	0
	.quad	0
	.quad	.Ltmp108
	.quad	.Ltmp109
	.quad	.Ltmp120
	.quad	.Ltmp135
	.quad	0
	.quad	0
	.quad	.Ltmp136
	.quad	.Ltmp137
	.quad	.Ltmp138
	.quad	.Ltmp139
	.quad	.Ltmp143
	.quad	.Ltmp145
	.quad	0
	.quad	0
	.quad	.Ltmp141
	.quad	.Ltmp142
	.quad	.Ltmp146
	.quad	.Ltmp151
	.quad	0
	.quad	0
	.quad	.Ltmp154
	.quad	.Ltmp155
	.quad	.Ltmp158
	.quad	.Ltmp167
	.quad	0
	.quad	0
	.quad	.Ltmp154
	.quad	.Ltmp156
	.quad	.Ltmp157
	.quad	.Ltmp168
	.quad	0
	.quad	0
	.quad	.Ltmp172
	.quad	.Ltmp173
	.quad	.Ltmp184
	.quad	.Ltmp193
	.quad	0
	.quad	0
	.quad	.Ltmp172
	.quad	.Ltmp174
	.quad	.Ltmp183
	.quad	.Ltmp194
	.quad	0
	.quad	0
	.quad	.Ltmp170
	.quad	.Ltmp175
	.quad	.Ltmp183
	.quad	.Ltmp195
	.quad	0
	.quad	0
	.quad	.Ltmp180
	.quad	.Ltmp181
	.quad	.Ltmp196
	.quad	.Ltmp201
	.quad	0
	.quad	0
	.quad	.Ltmp180
	.quad	.Ltmp181
	.quad	.Ltmp196
	.quad	.Ltmp201
	.quad	0
	.quad	0
	.quad	.Ltmp176
	.quad	.Ltmp177
	.quad	.Ltmp180
	.quad	.Ltmp182
	.quad	.Ltmp196
	.quad	.Ltmp202
	.quad	0
	.quad	0
	.quad	.Ltmp208
	.quad	.Ltmp209
	.quad	.Ltmp212
	.quad	.Ltmp213
	.quad	.Ltmp215
	.quad	.Ltmp224
	.quad	0
	.quad	0
	.quad	.Ltmp208
	.quad	.Ltmp210
	.quad	.Ltmp211
	.quad	.Ltmp213
	.quad	.Ltmp214
	.quad	.Ltmp225
	.quad	0
	.quad	0
	.quad	.Ltmp208
	.quad	.Ltmp210
	.quad	.Ltmp211
	.quad	.Ltmp226
	.quad	0
	.quad	0
	.quad	.Ltmp208
	.quad	.Ltmp210
	.quad	.Ltmp211
	.quad	.Ltmp226
	.quad	0
	.quad	0
	.quad	.Ltmp178
	.quad	.Ltmp179
	.quad	.Ltmp203
	.quad	.Ltmp204
	.quad	.Ltmp206
	.quad	.Ltmp227
	.quad	0
	.quad	0
	.quad	.Ltmp228
	.quad	.Ltmp229
	.quad	.Ltmp230
	.quad	.Ltmp231
	.quad	.Ltmp235
	.quad	.Ltmp237
	.quad	0
	.quad	0
	.quad	.Ltmp232
	.quad	.Ltmp234
	.quad	.Ltmp238
	.quad	.Ltmp243
	.quad	0
	.quad	0
	.quad	.Ltmp318
	.quad	.Ltmp319
	.quad	.Ltmp320
	.quad	.Ltmp327
	.quad	0
	.quad	0
	.quad	.Ltmp532
	.quad	.Ltmp533
	.quad	.Ltmp539
	.quad	.Ltmp550
	.quad	0
	.quad	0
	.quad	.Ltmp531
	.quad	.Ltmp533
	.quad	.Ltmp538
	.quad	.Ltmp552
	.quad	0
	.quad	0
	.quad	.Ltmp530
	.quad	.Ltmp533
	.quad	.Ltmp534
	.quad	.Ltmp552
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset246 = .Lpubnames_end2-.Lpubnames_begin2 # Length of Public Names Info
	.long	.Lset246
.Lpubnames_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset247 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset247
	.long	1107                    # DIE offset
	.asciz	"tred1"                 # External Name
	.long	184                     # DIE offset
	.asciz	"r8_epsilon"            # External Name
	.long	432                     # DIE offset
	.asciz	"rs"                    # External Name
	.long	931                     # DIE offset
	.asciz	"trbak1"                # External Name
	.long	587                     # DIE offset
	.asciz	"tqlrat"                # External Name
	.long	376                     # DIE offset
	.asciz	"r8_sign"               # External Name
	.long	49                      # DIE offset
	.asciz	"pythag"                # External Name
	.long	305                     # DIE offset
	.asciz	"r8_min"                # External Name
	.long	234                     # DIE offset
	.asciz	"r8_max"                # External Name
	.long	0                       # End Mark
.Lpubnames_end2:
.Lset248 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset248
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset249 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset249
	.long	617                     # DIE offset
	.asciz	"kiss_fft_cleanup"      # External Name
	.long	1377                    # DIE offset
	.asciz	"kf_bfly4"              # External Name
	.long	1171                    # DIE offset
	.asciz	"kf_bfly5"              # External Name
	.long	62                      # DIE offset
	.asciz	"kiss_fft_alloc"        # External Name
	.long	451                     # DIE offset
	.asciz	"kiss_fft_stride"       # External Name
	.long	1732                    # DIE offset
	.asciz	"kf_bfly2"              # External Name
	.long	724                     # DIE offset
	.asciz	"kf_work"               # External Name
	.long	542                     # DIE offset
	.asciz	"kiss_fft"              # External Name
	.long	917                     # DIE offset
	.asciz	"kf_bfly_generic"       # External Name
	.long	1859                    # DIE offset
	.asciz	"kf_factor"             # External Name
	.long	643                     # DIE offset
	.asciz	"kiss_fft_next_fast_size" # External Name
	.long	1564                    # DIE offset
	.asciz	"kf_bfly3"              # External Name
	.long	0                       # End Mark
.Lpubnames_end1:
.Lset250 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset250
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset251 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset251
	.long	1414                    # DIE offset
	.asciz	"main"                  # External Name
	.long	241                     # DIE offset
	.asciz	"process_data"          # External Name
	.long	98                      # DIE offset
	.asciz	"test_stores"           # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
	.section	.debug_pubtypes,"",@progbits
.Lset252 = .Lpubtypes_end2-.Lpubtypes_begin2 # Length of Public Types Info
	.long	.Lset252
.Lpubtypes_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset253 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset253
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1340                    # DIE offset
	.asciz	"_Bool"                 # External Name
	.long	0                       # End Mark
.Lpubtypes_end2:
.Lset254 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset254
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset255 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset255
	.long	409                     # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	299                     # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	315                     # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1967                    # DIE offset
	.asciz	"long unsigned int"     # External Name
	.long	1956                    # DIE offset
	.asciz	"size_t"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end1:
.Lset256 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset256
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset257 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset257
	.long	1584                    # DIE offset
	.asciz	"TYPE"                  # External Name
	.long	1686                    # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	1595                    # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	1611                    # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	1768                    # DIE offset
	.asciz	"XCORR_TYPE"            # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
