	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "feature_extraction.c"
	.file	2 "kiss_fft.c"
	.file	3 "./_kiss_fft_guts.h"
	.file	4 "./kiss_fft.h"
	.file	5 "eispack.c"
	.text
	.globl	test_stores
	.align	16, 0x90
	.type	test_stores,@function
test_stores:                            # @test_stores
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 17 0                  # feature_extraction.c:17:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$1944, %rsp             # imm = 0x798
.Ltmp13:
	.cfi_def_cfa_offset 2000
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str6, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$2, %r11
	leaq	.L.str12, %rbx
	movabsq	$3, %r14
	leaq	.L.str11, %r15
	movabsq	$18, %r12
	leaq	.L.str4, %r13
	leaq	.L.str5, %rbp
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movl	%ecx, 1932(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 1928(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str49, %rax
	.loc	1 17 0 prologue_end     # feature_extraction.c:17:0
.Ltmp20:
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1832(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1820(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	1936(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1816(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1808(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1800(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 1792(%rsp)        # 8-byte Spill
	movq	%r13, 1784(%rsp)        # 8-byte Spill
	movq	%rbp, 1776(%rsp)        # 8-byte Spill
	movq	%r15, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%rbx, 1752(%rsp)        # 8-byte Spill
	movq	%r10, 1744(%rsp)        # 8-byte Spill
	movq	%r11, 1736(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: test_stores:time_data <- [RSP+1832]
	#DEBUG_VALUE: test_stores:freq_data <- [RSP+1824]
	#DEBUG_VALUE: test_stores:n_samples <- [RSP+1820]
	#DEBUG_VALUE: test_stores:n_channels <- [RSP+1932]
.Ltmp21:
	#DEBUG_VALUE: j <- 0
	.loc	1 18 0                  # feature_extraction.c:18:0
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1928(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1932(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1735(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1928(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1735(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1735(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_1
	jmp	.LBB0_6
.Ltmp22:
.LBB0_1:                                # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdx
	movabsq	$18, %rdi
	leaq	.L.str4, %rsi
	leaq	.L.str11, %r9
	leaq	.L.str15, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str13, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 20 0                  # feature_extraction.c:20:0
.Ltmp23:
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1688(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1680(%rsp)        # 8-byte Spill
	movq	%rdx, 1672(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1696(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1656(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1648(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1640(%rsp)        # 8-byte Spill
	movl	%ebp, 1636(%rsp)        # 4-byte Spill
	movq	%r15, 1624(%rsp)        # 8-byte Spill
	movq	%r13, 1616(%rsp)        # 8-byte Spill
	movq	%r12, 1608(%rsp)        # 8-byte Spill
	movl	%ebx, 1604(%rsp)        # 4-byte Spill
	movq	%r10, 1592(%rsp)        # 8-byte Spill
	movq	%r11, 1584(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1584(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp24:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1583(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1680(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1604(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1720(%rsp), %rsi        # 8-byte Reload
	movq	1720(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1720(%rsp), %r9         # 8-byte Reload
	movq	1672(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
.LBB0_2:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
	movq	1568(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str13, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str19, %r9
	movabsq	$3, %r10
	leaq	.L.str23, %r11
	movabsq	$20, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str16, %r15
	leaq	.L.str22, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str11, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 22 0                  # feature_extraction.c:22:0
.Ltmp25:
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1448(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1440(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1432(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1416(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1408(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1400(%rsp)        # 8-byte Spill
	movq	%r14, 1392(%rsp)        # 8-byte Spill
	movq	%r12, 1384(%rsp)        # 8-byte Spill
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	movl	%r13d, 1376(%rsp)       # 4-byte Spill
	movq	%rbx, 1368(%rsp)        # 8-byte Spill
	movq	%r10, 1360(%rsp)        # 8-byte Spill
	movq	%r11, 1352(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1392(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp26:
	.loc	1 20 0                  # feature_extraction.c:20:0
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1544(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1392(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	1583(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1424(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	movq	1440(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1583(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	jne	.LBB0_3
	jmp	.LBB0_5
.LBB0_3:                                # %.lr.ph
                                        #   in Loop: Header=BB0_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str28, %r8
	leaq	.L.str8, %rdx
	movabsq	$20, %rsi
	leaq	.L.str4, %rdi
	leaq	.L.str23, %r9
	leaq	.L.str27, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str26, %r12
	movabsq	$32, %r13
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 22 0                  # feature_extraction.c:22:0
.Ltmp27:
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1248(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1208(%rsp)        # 8-byte Spill
	movl	%ebp, 1204(%rsp)        # 4-byte Spill
	movq	%r15, 1192(%rsp)        # 8-byte Spill
	movq	%r12, 1184(%rsp)        # 8-byte Spill
	movq	%r13, 1176(%rsp)        # 8-byte Spill
	movl	%ebx, 1172(%rsp)        # 4-byte Spill
	movq	%r10, 1160(%rsp)        # 8-byte Spill
	movq	%r11, 1152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 1148(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1148(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1148(%rsp), %ebx        # 4-byte Reload
	movl	1820(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp28:
	.loc	1 20 0                  # feature_extraction.c:20:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 1144(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1144(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1144(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1256(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	1172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movq	%rcx, 1120(%rsp)        # 8-byte Spill
.LBB0_4:                                #   Parent Loop BB0_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movabsq	$2, %rdx
	movabsq	$64, %rsi
	leaq	.L.str, %rdi
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str31, %rbx
	movabsq	$5, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$22, %r13
	leaq	.L.str4, %rbp
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1088(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1084(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rax
	.loc	1 22 0                  # feature_extraction.c:22:0
.Ltmp29:
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 908(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	1104(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	928(%rsp), %rax         # 8-byte Reload
	movq	%r8, 880(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1084(%rsp), %eax        # 4-byte Reload
	movq	%r9, 872(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 864(%rsp)         # 8-byte Spill
	movq	%r12, 856(%rsp)         # 8-byte Spill
	movq	%r13, 848(%rsp)         # 8-byte Spill
	movq	%rbp, 840(%rsp)         # 8-byte Spill
	movq	%r14, 832(%rsp)         # 8-byte Spill
	movq	%rbx, 824(%rsp)         # 8-byte Spill
	movq	%r10, 816(%rsp)         # 8-byte Spill
	movq	%r11, 808(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	800(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	1824(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 792(%rsp)         # 8-byte Spill
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 784(%rsp)        # 8-byte Spill
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	816(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	800(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 780(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	1084(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movl	780(%rsp), %edx         # 4-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	callq	fprintf
	movabsq	$1, %rcx
	leaq	.L.str41, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str28, %r10
	movabsq	$3, %r11
	leaq	.L.str19, %rbx
	movabsq	$20, %r14
	leaq	.L.str4, %r15
	leaq	.L.str42, %r12
	movl	$0, %edx
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	movabsq	$22, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	leaq	.L.str38, %rcx
.Ltmp30:
	.loc	1 20 0                  # feature_extraction.c:20:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movq	760(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	632(%rsp), %rax         # 8-byte Reload
	movl	%edx, 620(%rsp)         # 4-byte Spill
	movq	%rax, %rdx
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	608(%rsp), %rax         # 8-byte Reload
	movq	%r8, 600(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%r9, 592(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 584(%rsp)         # 8-byte Spill
	movq	%r12, 576(%rsp)         # 8-byte Spill
	movl	%ebp, 572(%rsp)         # 4-byte Spill
	movq	%r15, 560(%rsp)         # 8-byte Spill
	movq	%r14, 552(%rsp)         # 8-byte Spill
	movq	%r10, 544(%rsp)         # 8-byte Spill
	movq	%r11, 536(%rsp)         # 8-byte Spill
	movq	%rbx, 528(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	.loc	1 22 0                  # feature_extraction.c:22:0
.Ltmp31:
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 520(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp32:
	.loc	1 20 0                  # feature_extraction.c:20:0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 512(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	508(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	508(%rsp), %ebp         # 4-byte Reload
	movl	1820(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 507(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	620(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	536(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	507(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	507(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%rsi, 1336(%rsp)        # 8-byte Spill
	jne	.LBB0_5
	jmp	.LBB0_4
.Ltmp33:
.LBB0_5:                                # %._crit_edge
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	1336(%rsp), %rax        # 8-byte Reload
	movabsq	$2, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$1, %r10
	leaq	.L.str43, %r11
	movabsq	$3, %rbx
	leaq	fprintf, %r14
	leaq	.L.str39, %r15
	movabsq	$24, %r12
	leaq	.L.str4, %r13
	leaq	.L.str19, %rbp
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 24 0                  # feature_extraction.c:24:0
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 400(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 396(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 384(%rsp)         # 8-byte Spill
	movq	%rbp, %rdx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%r8, 368(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 360(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r12, 344(%rsp)         # 8-byte Spill
	movq	%r13, 336(%rsp)         # 8-byte Spill
	movq	%rbp, 328(%rsp)         # 8-byte Spill
	movq	%r14, 320(%rsp)         # 8-byte Spill
	movq	%rbx, 312(%rsp)         # 8-byte Spill
	movq	%r10, 304(%rsp)         # 8-byte Spill
	movq	%r11, 296(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	424(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	448(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	360(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	496(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movabsq	$1, %rcx
	leaq	.L.str46, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str16, %r9
	movabsq	$3, %r10
	leaq	.L.str12, %r11
	movabsq	$18, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str19, %r15
	leaq	.L.str47, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str45, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str9, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	leaq	.L.str17, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rcx
.Ltmp34:
	.loc	1 18 0                  # feature_extraction.c:18:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 184(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 176(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	288(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	160(%rsp), %rax         # 8-byte Reload
	movq	%r8, 152(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r9, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 140(%rsp)        # 4-byte Spill
	movq	%r15, 128(%rsp)         # 8-byte Spill
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%rbx, 96(%rsp)          # 8-byte Spill
	movq	%r10, 88(%rsp)          # 8-byte Spill
	movq	%r11, 80(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	68(%rsp), %ebp          # 4-byte Reload
	movl	1932(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 67(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	67(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	jne	.LBB0_6
	jmp	.LBB0_2
.Ltmp35:
.LBB0_6:                                # %._crit_edge3
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rsi
	movabsq	$0, %rdx
	leaq	.L.str7, %r8
	leaq	.L.str8, %rdi
	movabsq	$26, %r9
	leaq	.L.str4, %r10
	leaq	.L.str12, %r11
	leaq	.L.str48, %rbx
	movl	$1, %ebp
	.loc	1 26 0                  # feature_extraction.c:26:0
	movq	%rdi, 56(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%rbx, %rcx
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	addq	$1944, %rsp             # imm = 0x798
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp36:
.Ltmp37:
	.size	test_stores, .Ltmp37-test_stores
.Lfunc_end0:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI1_0:
	.quad	4631811479262199808     # double 47
.LCPI1_1:
	.quad	4631670741773844480     # double 46
	.text
	.globl	process_data
	.align	16, 0x90
	.type	process_data,@function
process_data:                           # @process_data
	.cfi_startproc
.Lfunc_begin1:
	.loc	1 30 0                  # feature_extraction.c:30:0
# BB#0:
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$19640, %rsp            # imm = 0x4CB8
.Ltmp44:
	.cfi_offset %rbx, -56
.Ltmp45:
	.cfi_offset %r12, -48
.Ltmp46:
	.cfi_offset %r13, -40
.Ltmp47:
	.cfi_offset %r14, -32
.Ltmp48:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: process_data:time_data <- RDI
	#DEBUG_VALUE: process_data:freq_data <- RSI
	#DEBUG_VALUE: process_data:n_samples <- EDX
	#DEBUG_VALUE: process_data:n_channels <- ECX
	#DEBUG_VALUE: process_data:cfg <- R8
	movabsq	$1, %rax
	leaq	.L.str25, %r9
	movabsq	$0, %r10
	leaq	.L.str8, %r11
	movabsq	$2, %rbx
	leaq	.L.str53, %r14
	movabsq	$3, %r15
	leaq	.L.str52, %r12
	movabsq	$38, %r13
	movq	%rax, -48(%rbp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str51, %rax
	movl	%ecx, -68(%rbp)         # 4-byte Spill
.Ltmp49:
	#DEBUG_VALUE: process_data:n_channels <- [RBP+-68]
	movl	$1, %ecx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	leaq	.L.str24, %rax
	.loc	1 30 0 prologue_end     # feature_extraction.c:30:0
.Ltmp50:
	movl	%ecx, -132(%rbp)        # 4-byte Spill
	movl	$.L.str50, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%edx, -136(%rbp)        # 4-byte Spill
.Ltmp51:
	#DEBUG_VALUE: process_data:n_samples <- [RBP+-136]
	movl	$5, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	%rdi, -144(%rbp)        # 8-byte Spill
.Ltmp52:
	#DEBUG_VALUE: process_data:time_data <- [RBP+-144]
	movq	%rcx, %rdi
	movq	%rsi, -152(%rbp)        # 8-byte Spill
.Ltmp53:
	#DEBUG_VALUE: process_data:freq_data <- [RBP+-152]
	movq	%rdx, %rsi
	movq	%r13, -160(%rbp)        # 8-byte Spill
	movq	%rcx, -168(%rbp)        # 8-byte Spill
	movq	%r12, -176(%rbp)        # 8-byte Spill
	movq	%rdx, -184(%rbp)        # 8-byte Spill
	movq	%r8, -192(%rbp)         # 8-byte Spill
.Ltmp54:
	#DEBUG_VALUE: process_data:cfg <- [RBP+-192]
	movq	%rax, -200(%rbp)        # 8-byte Spill
	movq	%r9, -208(%rbp)         # 8-byte Spill
	movq	%r10, -216(%rbp)        # 8-byte Spill
	movq	%r11, -224(%rbp)        # 8-byte Spill
	movq	%rbx, -232(%rbp)        # 8-byte Spill
	movq	%r14, -240(%rbp)        # 8-byte Spill
	movq	%r15, -248(%rbp)        # 8-byte Spill
	callq	trace_logger_log_entry
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str49, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movl	$1, %esi
	movl	%esi, %ecx
	xorl	%esi, %esi
	movl	%esi, %edx
	movq	%rcx, %rdi
	movq	%rax, %rsi
	movq	-144(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -256(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -264(%rbp)        # 8-byte Spill
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str35, %esi
	movl	%esi, %r8d
	movl	$2, %esi
	movl	%esi, %eax
	movq	%rax, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -280(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-136(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %esi
	movl	%esi, %ecx
	movl	$3, %esi
	movl	%esi, %edi
	movl	$32, %esi
	movl	%esi, %edx
	movq	%rdx, %rsi
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %esi
	movl	%esi, %ecx
	movl	$4, %esi
	movl	%esi, %edi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str89, %esi
	movl	%esi, %r8d
	movq	-184(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 36 0                  # feature_extraction.c:36:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str5, %esi
	movl	%esi, %eax
	movl	$.L.str6, %esi
	movl	%esi, %ecx
	movl	$36, %esi
	movl	%esi, %edx
	movl	$12, %esi
	movl	%esi, %r8d
	movl	$1, %esi
	movq	%rdx, %rdi
	movq	-168(%rbp), %r9         # 8-byte Reload
	movl	%esi, -324(%rbp)        # 4-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	-136(%rbp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %ecx
	movq	%rcx, %rdi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str13, %esi
	movl	%esi, %eax
	movl	$34, %esi
	movl	%esi, %r8d
	movq	-336(%rbp), %rdi        # 8-byte Reload
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-344(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str20, %esi
	movl	%esi, %eax
	movl	$26, %esi
	movl	%esi, %ecx
	movq	-336(%rbp), %rdi        # 8-byte Reload
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-324(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-368(%rbp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	%rsp, %rcx
	subq	%rax, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -400(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	%rax, -408(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 37 0                  # feature_extraction.c:37:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str24, %esi
	movl	%esi, %ecx
	movl	$37, %esi
	movl	%esi, %edi
	movq	-168(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-324(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-264(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rax
	movq	-408(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, %rsp
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-200(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp55:
	#DEBUG_VALUE: process_data:out <- [RBP+-416]
	#DEBUG_VALUE: channel <- 0
	.loc	1 38 0                  # feature_extraction.c:38:0
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r8         # 8-byte Reload
	movl	-132(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-216(%rbp), %rcx        # 8-byte Reload
	movq	-112(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -417(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	-232(%rbp), %r8         # 8-byte Reload
	movl	-132(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-248(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-176(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-232(%rbp), %rdi        # 8-byte Reload
	movq	-216(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-240(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	-216(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_2
.Ltmp56:
# BB#1:                                 # %._crit_edge93.thread
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str56, %r8
	leaq	.L.str8, %rdx
	movabsq	$59, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str53, %r9
	leaq	.L.str55, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str31, %r12
	.loc	1 58 0                  # feature_extraction.c:58:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movl	$.L.str53, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movl	$.L.str26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -448(%rbp)        # 8-byte Spill
	movl	$58, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -456(%rbp)        # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -464(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -472(%rbp)        # 8-byte Spill
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -484(%rbp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	-440(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -496(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%r8, -512(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-484(%rbp), %eax        # 4-byte Reload
	movq	%r9, -520(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -528(%rbp)        # 8-byte Spill
	movl	%ebx, -532(%rbp)        # 4-byte Spill
	movq	%r15, -544(%rbp)        # 8-byte Spill
	movq	%r12, -552(%rbp)        # 8-byte Spill
	movq	%r13, -560(%rbp)        # 8-byte Spill
	movq	%r11, -568(%rbp)        # 8-byte Spill
	movq	%r10, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsi, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-584(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %ebx
	movl	%ebx, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edx
	movq	%rdx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rdx, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-600(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-448(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movl	-484(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-448(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	%rcx, %rsi
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -632(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rsi        # 8-byte Reload
	movq	-440(%rbp), %rdx        # 8-byte Reload
	movl	-484(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-632(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-616(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-528(%rbp), %rdi        # 8-byte Reload
	movq	-544(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, -640(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	-640(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp57:
	#DEBUG_VALUE: process_data:fft_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 59 0                  # feature_extraction.c:59:0
	subq	$16, %rsp
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	-432(%rbp), %rsi        # 8-byte Reload
	movq	-520(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %rcx        # 8-byte Reload
	movq	-568(%rbp), %r8         # 8-byte Reload
	movl	-532(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-472(%rbp), %rdi        # 8-byte Reload
	movq	-504(%rbp), %rsi        # 8-byte Reload
	movq	-504(%rbp), %rdx        # 8-byte Reload
	movq	-472(%rbp), %rcx        # 8-byte Reload
	movq	-512(%rbp), %r8         # 8-byte Reload
	movq	-504(%rbp), %r9         # 8-byte Reload
	movq	-496(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-640(%rbp), %rcx        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -648(%rbp)        # 8-byte Spill
	movq	%rdx, -656(%rbp)        # 8-byte Spill
	jmp	.LBB1_14
.Ltmp58:
.LBB1_2:                                # %.preheader83.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str58, %r8
	leaq	.L.str8, %rdx
	movabsq	$38, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str52, %r9
	leaq	.L.str57, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str34, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, -664(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -688(%rbp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, -696(%rbp)        # 8-byte Spill
	movabsq	$40, %rax
	.loc	1 40 0                  # feature_extraction.c:40:0
.Ltmp59:
	subq	$16, %rsp
	movq	%rdi, -704(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -712(%rbp)        # 8-byte Spill
	movq	%rdx, -720(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-696(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%r8, -736(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -744(%rbp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, -752(%rbp)        # 8-byte Spill
	movl	%ebx, -756(%rbp)        # 4-byte Spill
	movq	%r14, -768(%rbp)        # 8-byte Spill
	movq	%r12, -776(%rbp)        # 8-byte Spill
	movq	%r15, -784(%rbp)        # 8-byte Spill
	movq	%r11, -792(%rbp)        # 8-byte Spill
	movq	%r10, -800(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-792(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	-672(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp60:
	.loc	1 48 0                  # feature_extraction.c:48:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-768(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-696(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -801(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-680(%rbp), %rdi        # 8-byte Reload
	movq	-712(%rbp), %rsi        # 8-byte Reload
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	-784(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movl	-756(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-792(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	-672(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-776(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
.Ltmp61:
	.loc	1 38 0                  # feature_extraction.c:38:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-768(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-784(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -802(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	-712(%rbp), %rsi        # 8-byte Reload
	movq	-744(%rbp), %rdx        # 8-byte Reload
	movq	-800(%rbp), %rcx        # 8-byte Reload
	movq	-792(%rbp), %r8         # 8-byte Reload
	movl	-756(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-664(%rbp), %rsi        # 8-byte Reload
	movq	-664(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-736(%rbp), %r8         # 8-byte Reload
	movq	-664(%rbp), %r9         # 8-byte Reload
	movq	-720(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-664(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -816(%rbp)        # 8-byte Spill
.LBB1_3:                                # %.preheader83
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_5 Depth 2
                                        #     Child Loop BB1_8 Depth 2
	movq	-816(%rbp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str33, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str64, %r9
	movabsq	$3, %r10
	leaq	.L.str63, %r11
	movabsq	$40, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str58, %r15
	leaq	.L.str62, %r12
	movl	$1, %r13d
	movq	%rax, -824(%rbp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -832(%rbp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, -936(%rbp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -944(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 42 0                  # feature_extraction.c:42:0
.Ltmp62:
	subq	$16, %rsp
	movq	%rax, -952(%rbp)        # 8-byte Spill
	movq	-944(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -960(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -968(%rbp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -976(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-896(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-952(%rbp), %rax        # 8-byte Reload
	movq	%r8, -992(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1000(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -1008(%rbp)       # 8-byte Spill
	movq	%rbx, -1016(%rbp)       # 8-byte Spill
	movq	%r15, -1024(%rbp)       # 8-byte Spill
	movq	%r12, -1032(%rbp)       # 8-byte Spill
	movl	%r13d, -1036(%rbp)      # 4-byte Spill
	movq	%r11, -1048(%rbp)       # 8-byte Spill
	movq	%r10, -1056(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-928(%rbp), %r8         # 8-byte Reload
	movq	-984(%rbp), %r9         # 8-byte Reload
	movq	-936(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-976(%rbp), %rcx        # 8-byte Reload
	movq	-920(%rbp), %r8         # 8-byte Reload
	movq	-984(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-896(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-856(%rbp), %rcx        # 8-byte Reload
	movq	-904(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-888(%rbp), %rsi        # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-896(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-824(%rbp), %rax        # 8-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-856(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r13d, -1060(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-848(%rbp), %rcx        # 8-byte Reload
	movq	-880(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1060(%rbp), %r13d      # 4-byte Reload
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-856(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1060(%rbp), %r13d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %r13d
.Ltmp63:
	.loc	1 40 0                  # feature_extraction.c:40:0
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-832(%rbp), %rdi        # 8-byte Reload
	movq	-840(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-848(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, -1064(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1016(%rbp), %rdi       # 8-byte Reload
	movq	-1008(%rbp), %rsi       # 8-byte Reload
	movq	-1024(%rbp), %rdx       # 8-byte Reload
	movq	-1032(%rbp), %rcx       # 8-byte Reload
	movq	-960(%rbp), %r8         # 8-byte Reload
	movl	-1036(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1056(%rbp), %rdi       # 8-byte Reload
	movq	-976(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1048(%rbp), %r8        # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-976(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-801(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-984(%rbp), %rsi        # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-992(%rbp), %r8         # 8-byte Reload
	movq	-976(%rbp), %r9         # 8-byte Reload
	movq	-968(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-801(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_4
	jmp	.LBB1_6
.LBB1_4:                                # %.lr.ph86
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str66, %r8
	leaq	.L.str8, %rdx
	movabsq	$40, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str63, %r9
	leaq	.L.str65, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str38, %r12
	movabsq	$32, %r13
	movq	%rax, -1072(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -1088(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -1096(%rbp)       # 8-byte Spill
	movq	-1088(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1104(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -1112(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -1120(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1128(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1136(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -1144(%rbp)       # 8-byte Spill
	movl	%ebx, -1148(%rbp)       # 4-byte Spill
	movq	%r15, -1160(%rbp)       # 8-byte Spill
	movq	%r12, -1168(%rbp)       # 8-byte Spill
	movq	%r13, -1176(%rbp)       # 8-byte Spill
	movq	%r11, -1184(%rbp)       # 8-byte Spill
	movq	%r10, -1192(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-1120(%rbp), %rdi       # 8-byte Reload
	movq	-1176(%rbp), %rsi       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1080(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	-1160(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1168(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1200(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1104(%rbp), %rdi       # 8-byte Reload
	movq	-1088(%rbp), %rsi       # 8-byte Reload
	movq	-1136(%rbp), %rdx       # 8-byte Reload
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	movq	-1184(%rbp), %r8        # 8-byte Reload
	movl	-1148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1120(%rbp), %rdi       # 8-byte Reload
	movq	-1072(%rbp), %rsi       # 8-byte Reload
	movq	-1072(%rbp), %rdx       # 8-byte Reload
	movq	-1120(%rbp), %rcx       # 8-byte Reload
	movq	-1128(%rbp), %r8        # 8-byte Reload
	movq	-1072(%rbp), %r9        # 8-byte Reload
	movq	-1112(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1072(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1208(%rbp)       # 8-byte Spill
.LBB1_5:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-1208(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str82, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str66, %r9
	movabsq	$3, %r10
	leaq	.L.str64, %r11
	movabsq	$40, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str83, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -1216(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1224(%rbp)       # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -1240(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -1248(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -1256(%rbp)       # 8-byte Spill
	leaq	.L.str68, %rax
	movq	%rax, -1264(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -1272(%rbp)       # 8-byte Spill
	leaq	.L.str67, %rax
	movq	%rax, -1280(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -1288(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -1296(%rbp)       # 8-byte Spill
	leaq	.L.str79, %rax
	movq	%rax, -1304(%rbp)       # 8-byte Spill
	movabsq	$45, %rax
	movq	%rax, -1312(%rbp)       # 8-byte Spill
	leaq	.L.str80, %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -1328(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -1336(%rbp)       # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, -1344(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1352(%rbp)       # 8-byte Spill
	leaq	.L.str76, %rax
	movq	%rax, -1360(%rbp)       # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, -1368(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
	leaq	.L.str74, %rax
	movq	%rax, -1384(%rbp)       # 8-byte Spill
	movabsq	$43, %rax
	movq	%rax, -1392(%rbp)       # 8-byte Spill
	leaq	.L.str75, %rax
	movq	%rax, -1400(%rbp)       # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, -1408(%rbp)       # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, -1416(%rbp)       # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, -1424(%rbp)       # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, -1432(%rbp)       # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, -1440(%rbp)       # 8-byte Spill
	leaq	.L.str69, %rax
	movq	%rax, -1448(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -1456(%rbp)       # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -1464(%rbp)       # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, -1472(%rbp)       # 8-byte Spill
	leaq	.L.str63, %rax
	movq	%rax, -1480(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -1488(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 42 0                  # feature_extraction.c:42:0
.Ltmp64:
	subq	$16, %rsp
	movq	%rax, -1496(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1504(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -1512(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1520(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-1280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1528(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1496(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1536(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1544(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -1552(%rbp)       # 8-byte Spill
	movl	%r12d, -1556(%rbp)      # 4-byte Spill
	movq	%r13, -1568(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -1576(%rbp)      # 8-byte Spill
	movq	%r14, -1584(%rbp)       # 8-byte Spill
	movq	%rbx, -1592(%rbp)       # 8-byte Spill
	movq	%r10, -1600(%rbp)       # 8-byte Spill
	movq	%r11, -1608(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1528(%rbp), %r9        # 8-byte Reload
	movq	-1544(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1528(%rbp), %r9        # 8-byte Reload
	movq	-1480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1480(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1344(%rbp), %rcx       # 8-byte Reload
	movq	-1296(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1472(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1216(%rbp), %rax       # 8-byte Reload
	movq	-1200(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1616(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1448(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1464(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1624(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1448(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1456(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1448(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-1616(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -1632(%rbp)      # 8-byte Spill
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-400(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1640(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1432(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1440(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1640(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1632(%rbp), %xmm0      # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1640(%rbp), %rax       # 8-byte Reload
	vmovsd	-1632(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 43 0                  # feature_extraction.c:43:0
	subq	$16, %rsp
	movq	-1392(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1384(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-400(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	addq	$8, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1648(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1392(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1648(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1648(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 44 0                  # feature_extraction.c:44:0
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1360(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1656(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1376(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1656(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1656(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 45 0                  # feature_extraction.c:45:0
	subq	$16, %rsp
	movq	-1312(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	movq	-1352(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1616(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1616(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	addq	$8, %rcx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1528(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1664(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1312(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1320(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1664(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1288(%rbp), %rcx       # 8-byte Reload
	movq	-1512(%rbp), %r8        # 8-byte Reload
	movq	-1504(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-1664(%rbp), %rax       # 8-byte Reload
	vmovsd	-1576(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp65:
	.loc	1 40 0                  # feature_extraction.c:40:0
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	movq	-1296(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rdx       # 8-byte Reload
	movq	-1512(%rbp), %rcx       # 8-byte Reload
	movq	-1288(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1216(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1216(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1672(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1256(%rbp), %rsi       # 8-byte Reload
	movq	-1672(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1672(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1232(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -1676(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1520(%rbp), %rcx       # 8-byte Reload
	movq	-1248(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1676(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1224(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1232(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1676(%rbp), %r12d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1528(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1520(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -1677(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1592(%rbp), %rdi       # 8-byte Reload
	movq	-1584(%rbp), %rsi       # 8-byte Reload
	movq	-1544(%rbp), %rdx       # 8-byte Reload
	movq	-1552(%rbp), %rcx       # 8-byte Reload
	movq	-1536(%rbp), %r8        # 8-byte Reload
	movl	-1556(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1512(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1608(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1536(%rbp), %rdi       # 8-byte Reload
	movq	-1512(%rbp), %rsi       # 8-byte Reload
	movq	-1512(%rbp), %rdx       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1544(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1677(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1528(%rbp), %rsi       # 8-byte Reload
	movq	-1528(%rbp), %rcx       # 8-byte Reload
	movq	-1520(%rbp), %r8        # 8-byte Reload
	movq	-1512(%rbp), %r9        # 8-byte Reload
	movq	-1504(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1677(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-1672(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1208(%rbp)       # 8-byte Spill
	jne	.LBB1_6
	jmp	.LBB1_5
.Ltmp66:
.LBB1_6:                                # %._crit_edge87
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$3, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str86, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str85, %r10
	leaq	.L.str89, %r11
	movabsq	$4, %rbx
	leaq	kiss_fft, %r14
	leaq	.L.str88, %r15
	movabsq	$47, %r12
	leaq	.L.str50, %r13
	movq	%rax, -1688(%rbp)       # 8-byte Spill
	leaq	.L.str64, %rax
	movq	%rax, -1696(%rbp)       # 8-byte Spill
	leaq	.L.str87, %rax
	movq	%rax, -1704(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -1712(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -1720(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -1728(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -1736(%rbp)       # 8-byte Spill
	leaq	.L.str84, %rax
	movq	%rax, -1744(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1752(%rbp)       # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, -1760(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1768(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1776(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	.loc	1 47 0                  # feature_extraction.c:47:0
	subq	$16, %rsp
	movq	%rdi, -1784(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, -1788(%rbp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	%rax, -1800(%rbp)       # 8-byte Spill
	movq	-1696(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1808(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1744(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1816(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1800(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1824(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-1788(%rbp), %eax       # 4-byte Reload
	movq	%r9, -1832(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -1840(%rbp)       # 8-byte Spill
	movq	%r14, -1848(%rbp)       # 8-byte Spill
	movq	%r15, -1856(%rbp)       # 8-byte Spill
	movq	%r12, -1864(%rbp)       # 8-byte Spill
	movq	%rbx, -1872(%rbp)       # 8-byte Spill
	movq	%r11, -1880(%rbp)       # 8-byte Spill
	movq	%r10, -1888(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1768(%rbp), %rsi       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1776(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1896(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1888(%rbp), %rcx       # 8-byte Reload
	movq	-1752(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1760(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1896(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1904(%rbp)       # 8-byte Spill
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1888(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1808(%rbp), %rcx       # 8-byte Reload
	movq	-1752(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1744(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1736(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1896(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1728(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1912(%rbp)       # 8-byte Spill
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1840(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1704(%rbp), %rcx       # 8-byte Reload
	movq	-1720(%rbp), %r8        # 8-byte Reload
	movl	-1788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1872(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1848(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1856(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1816(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1880(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1904(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1888(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1784(%rbp), %rdi       # 8-byte Reload
	movq	-1688(%rbp), %rsi       # 8-byte Reload
	movq	-1912(%rbp), %rdx       # 8-byte Reload
	movq	-1816(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r8        # 8-byte Reload
	movq	-1712(%rbp), %r9        # 8-byte Reload
	movq	-1824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-192(%rbp), %rdi        # 8-byte Reload
	movq	-1904(%rbp), %rsi       # 8-byte Reload
	movq	-1912(%rbp), %rdx       # 8-byte Reload
	callq	kiss_fft
	movabsq	$1, %rcx
	leaq	.L.str34, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str61, %r9
	movabsq	$3, %r10
	leaq	.L.str91, %r11
	movabsq	$48, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str64, %r15
	leaq	.L.str90, %r12
	movl	$1, %eax
.Ltmp67:
	#DEBUG_VALUE: i <- 0
	.loc	1 48 0                  # feature_extraction.c:48:0
	subq	$16, %rsp
	movq	%rdi, -1920(%rbp)       # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, -1928(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1936(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -1944(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-1920(%rbp), %rbx       # 8-byte Reload
	movq	%r8, -1952(%rbp)        # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, -1960(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r10, -1968(%rbp)       # 8-byte Spill
	movq	%r11, -1976(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1968(%rbp), %rdi       # 8-byte Reload
	movq	-1936(%rbp), %rsi       # 8-byte Reload
	movq	-1936(%rbp), %rdx       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1976(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1920(%rbp), %rdi       # 8-byte Reload
	movq	-1936(%rbp), %rsi       # 8-byte Reload
	movq	-1936(%rbp), %rdx       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1960(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-802(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-1944(%rbp), %rdi       # 8-byte Reload
	movq	-1944(%rbp), %rsi       # 8-byte Reload
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	movq	-1952(%rbp), %r8        # 8-byte Reload
	movq	-1936(%rbp), %r9        # 8-byte Reload
	movq	-1928(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-802(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_7
	jmp	.LBB1_9
.LBB1_7:                                # %.lr.ph90
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str94, %r8
	leaq	.L.str8, %rdx
	movabsq	$48, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str91, %r9
	leaq	.L.str93, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str92, %r12
	movabsq	$32, %r13
	movq	%rax, -1984(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1992(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -2000(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -2008(%rbp)       # 8-byte Spill
	movq	-2000(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -2016(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -2024(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -2032(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-2008(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2040(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2048(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2056(%rbp)       # 8-byte Spill
	movl	%ebx, -2060(%rbp)       # 4-byte Spill
	movq	%r15, -2072(%rbp)       # 8-byte Spill
	movq	%r12, -2080(%rbp)       # 8-byte Spill
	movq	%r13, -2088(%rbp)       # 8-byte Spill
	movq	%r11, -2096(%rbp)       # 8-byte Spill
	movq	%r10, -2104(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1064(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-2032(%rbp), %rdi       # 8-byte Reload
	movq	-2088(%rbp), %rsi       # 8-byte Reload
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-1992(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1064(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-2056(%rbp), %rdi       # 8-byte Reload
	movq	-2072(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-2080(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2112(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2016(%rbp), %rdi       # 8-byte Reload
	movq	-2000(%rbp), %rsi       # 8-byte Reload
	movq	-2048(%rbp), %rdx       # 8-byte Reload
	movq	-2104(%rbp), %rcx       # 8-byte Reload
	movq	-2096(%rbp), %r8        # 8-byte Reload
	movl	-2060(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2032(%rbp), %rdi       # 8-byte Reload
	movq	-1984(%rbp), %rsi       # 8-byte Reload
	movq	-1984(%rbp), %rdx       # 8-byte Reload
	movq	-2032(%rbp), %rcx       # 8-byte Reload
	movq	-2040(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-2024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1984(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2120(%rbp)       # 8-byte Spill
.LBB1_8:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-2120(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str103, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str94, %r9
	movabsq	$3, %r10
	leaq	.L.str61, %r11
	movabsq	$48, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str104, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2128(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2136(%rbp)       # 8-byte Spill
	leaq	.L.str102, %rax
	movq	%rax, -2144(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -2152(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2160(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2168(%rbp)       # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, -2176(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2184(%rbp)       # 8-byte Spill
	leaq	.L.str95, %rax
	movq	%rax, -2192(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2200(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -2208(%rbp)       # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, -2216(%rbp)       # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, -2224(%rbp)       # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, -2232(%rbp)       # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, -2240(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -2248(%rbp)       # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, -2256(%rbp)       # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, -2264(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -2272(%rbp)       # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, -2280(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -2288(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -2296(%rbp)       # 8-byte Spill
	leaq	.L.str92, %rax
	movq	%rax, -2304(%rbp)       # 8-byte Spill
	leaq	.L.str91, %rax
	movq	%rax, -2312(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	.loc	1 50 0                  # feature_extraction.c:50:0
.Ltmp68:
	subq	$16, %rsp
	movq	%rdi, -2320(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -2328(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -2336(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-2192(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2344(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, -2352(%rbp)        # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, -2360(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r13, -2368(%rbp)       # 8-byte Spill
	movq	%r14, -2376(%rbp)       # 8-byte Spill
	movq	%r15, -2384(%rbp)       # 8-byte Spill
	movl	%r12d, -2388(%rbp)      # 4-byte Spill
	movq	%rbx, -2400(%rbp)       # 8-byte Spill
	movq	%r11, -2408(%rbp)       # 8-byte Spill
	movq	%r10, -2416(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2344(%rbp), %r9        # 8-byte Reload
	movq	-2360(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2344(%rbp), %r9        # 8-byte Reload
	movq	-2312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2264(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2112(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2304(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2128(%rbp), %rax       # 8-byte Reload
	movq	-2112(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2280(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2416(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2296(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2424(%rbp), %rax       # 8-byte Reload
	shlq	$4, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2344(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2432(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2288(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2432(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2432(%rbp), %rax       # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -2440(%rbp)      # 8-byte Spill
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2320(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2224(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2256(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2424(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2344(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2448(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2224(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2232(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2240(%rbp), %rcx       # 8-byte Reload
	movq	-2248(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2448(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2224(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	vmovsd	-2440(%rbp), %xmm0      # 8-byte Reload
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2216(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2320(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	-2424(%rbp), %rcx       # 8-byte Reload
	vmovsd	-2440(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp69:
	.loc	1 48 0                  # feature_extraction.c:48:0
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2176(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2200(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2128(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2192(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2128(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2456(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2144(%rbp), %rcx       # 8-byte Reload
	movq	-2184(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2168(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2176(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2456(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2144(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2460(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2336(%rbp), %rcx       # 8-byte Reload
	movq	-2160(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2152(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2460(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2144(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2460(%rbp), %r12d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2368(%rbp), %rdi       # 8-byte Reload
	movq	-2344(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2461(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2400(%rbp), %rdi       # 8-byte Reload
	movq	-2376(%rbp), %rsi       # 8-byte Reload
	movq	-2360(%rbp), %rdx       # 8-byte Reload
	movq	-2384(%rbp), %rcx       # 8-byte Reload
	movq	-2352(%rbp), %r8        # 8-byte Reload
	movl	-2388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2416(%rbp), %rdi       # 8-byte Reload
	movq	-2328(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2408(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2352(%rbp), %rdi       # 8-byte Reload
	movq	-2328(%rbp), %rsi       # 8-byte Reload
	movq	-2328(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2360(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2461(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2344(%rbp), %rdi       # 8-byte Reload
	movq	-2344(%rbp), %rsi       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movq	-2328(%rbp), %r9        # 8-byte Reload
	movq	-2320(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2461(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2456(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2120(%rbp)       # 8-byte Spill
	jne	.LBB1_9
	jmp	.LBB1_8
.Ltmp70:
.LBB1_9:                                # %._crit_edge91
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$1, %rax
	leaq	.L.str106, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str58, %r8
	movabsq	$3, %r9
	leaq	.L.str108, %r10
	movabsq	$38, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str61, %r14
	leaq	.L.str107, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2472(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2480(%rbp)       # 8-byte Spill
	leaq	.L.str105, %rax
	movq	%rax, -2488(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2496(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2504(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2512(%rbp)       # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -2520(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2528(%rbp)       # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -2536(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2544(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 38 0                  # feature_extraction.c:38:0
	subq	$16, %rsp
	movq	%rdi, -2552(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -2560(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -2568(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -2576(%rbp)       # 8-byte Spill
	movq	-2520(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2584(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2576(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2592(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2600(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2608(%rbp)       # 8-byte Spill
	movq	%r15, -2616(%rbp)       # 8-byte Spill
	movl	%r12d, -2620(%rbp)      # 4-byte Spill
	movq	%r13, -2632(%rbp)       # 8-byte Spill
	movq	%rbx, -2640(%rbp)       # 8-byte Spill
	movq	%r11, -2648(%rbp)       # 8-byte Spill
	movq	%r10, -2656(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rdx       # 8-byte Reload
	movq	-2568(%rbp), %rcx       # 8-byte Reload
	movq	-2544(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-824(%rbp), %rdx        # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2536(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-824(%rbp), %rax        # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2520(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2664(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2488(%rbp), %rcx       # 8-byte Reload
	movq	-2528(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2512(%rbp), %rsi       # 8-byte Reload
	movq	-2664(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2520(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2664(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2488(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2668(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2584(%rbp), %rcx       # 8-byte Reload
	movq	-2504(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2496(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2668(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2480(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2488(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2668(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2632(%rbp), %rdi       # 8-byte Reload
	movq	-2472(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2669(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2640(%rbp), %rsi       # 8-byte Reload
	movq	-2608(%rbp), %rdx       # 8-byte Reload
	movq	-2616(%rbp), %rcx       # 8-byte Reload
	movq	-2552(%rbp), %r8        # 8-byte Reload
	movl	-2620(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2600(%rbp), %rdi       # 8-byte Reload
	movq	-2568(%rbp), %rsi       # 8-byte Reload
	movq	-2568(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2656(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2552(%rbp), %rdi       # 8-byte Reload
	movq	-2568(%rbp), %rsi       # 8-byte Reload
	movq	-2568(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2592(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2669(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2472(%rbp), %rdi       # 8-byte Reload
	movq	-2472(%rbp), %rsi       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2568(%rbp), %r9        # 8-byte Reload
	movq	-2560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2669(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2664(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -816(%rbp)        # 8-byte Spill
	jne	.LBB1_10
	jmp	.LBB1_3
.Ltmp71:
.LBB1_10:                               # %._crit_edge93
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str112, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str56, %r8
	movabsq	$3, %r9
	leaq	.L.str114, %r10
	movabsq	$59, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str108, %r14
	leaq	.L.str113, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -2680(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2688(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2696(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2704(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2712(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2720(%rbp)       # 8-byte Spill
	leaq	.L.str111, %rax
	.loc	1 58 0                  # feature_extraction.c:58:0
	subq	$16, %rsp
	movq	%rax, -2728(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -2736(%rbp)       # 8-byte Spill
	movl	$.L.str108, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2744(%rbp)       # 8-byte Spill
	movl	$.L.str109, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2752(%rbp)       # 8-byte Spill
	movl	$58, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2760(%rbp)       # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2768(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -2776(%rbp)       # 8-byte Spill
	movq	-2760(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -2784(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-2776(%rbp), %rax       # 8-byte Reload
	movl	%esi, -2788(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-2744(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -2800(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-2752(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2808(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2768(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2816(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-2788(%rbp), %eax       # 4-byte Reload
	movq	%r9, -2824(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -2832(%rbp)       # 8-byte Spill
	movq	%r14, -2840(%rbp)       # 8-byte Spill
	movq	%r15, -2848(%rbp)       # 8-byte Spill
	movl	%r12d, -2852(%rbp)      # 4-byte Spill
	movq	%rbx, -2864(%rbp)       # 8-byte Spill
	movq	%r11, -2872(%rbp)       # 8-byte Spill
	movq	%r10, -2880(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movq	%rsi, -2888(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2888(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2896(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %r12d
	movl	%r12d, %r8d
	movl	$1, %r12d
	movl	%r12d, %ecx
	movq	%rcx, %rdi
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -2904(%rbp)       # 8-byte Spill
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %r12d
	movl	%r12d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edx
	movq	%rdx, %rdi
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -2912(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-2904(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2920(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2752(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-2760(%rbp), %rdi       # 8-byte Reload
	movq	-2776(%rbp), %rsi       # 8-byte Reload
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -2928(%rbp)       # 8-byte Spill
	movl	-2788(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2896(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2752(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-2912(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rsi
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -2936(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2928(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str111, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-2760(%rbp), %rdi       # 8-byte Reload
	movq	-2776(%rbp), %rsi       # 8-byte Reload
	movq	-2744(%rbp), %rdx       # 8-byte Reload
	movl	-2788(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2936(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2928(%rbp), %r8        # 8-byte Reload
	movq	-2888(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2920(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-2832(%rbp), %rdi       # 8-byte Reload
	movq	-2720(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -2944(%rbp)       # 8-byte Spill
.Ltmp72:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-2944]
	movq	%rdx, %rsi
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2728(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp73:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-2944]
	#DEBUG_VALUE: channel <- 0
	.loc	1 59 0                  # feature_extraction.c:59:0
	subq	$16, %rsp
	movq	-2872(%rbp), %rdi       # 8-byte Reload
	movq	-2864(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movq	-2800(%rbp), %rcx       # 8-byte Reload
	movq	-2712(%rbp), %r8        # 8-byte Reload
	movl	-2852(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2784(%rbp), %rdi       # 8-byte Reload
	movq	-2688(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2680(%rbp), %rcx       # 8-byte Reload
	movq	-2704(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2808(%rbp), %rdi       # 8-byte Reload
	movq	-2688(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2696(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2832(%rbp), %rdi       # 8-byte Reload
	movq	-2808(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2800(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2945(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2872(%rbp), %rdi       # 8-byte Reload
	movq	-2864(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movq	-2848(%rbp), %rcx       # 8-byte Reload
	movq	-2784(%rbp), %r8        # 8-byte Reload
	movl	-2852(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2824(%rbp), %rdi       # 8-byte Reload
	movq	-2680(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2880(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2784(%rbp), %rdi       # 8-byte Reload
	movq	-2680(%rbp), %rsi       # 8-byte Reload
	movq	-2680(%rbp), %rdx       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2816(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2945(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2808(%rbp), %rdi       # 8-byte Reload
	movq	-2808(%rbp), %rsi       # 8-byte Reload
	movq	-2808(%rbp), %rcx       # 8-byte Reload
	movq	-2800(%rbp), %r8        # 8-byte Reload
	movq	-2680(%rbp), %r9        # 8-byte Reload
	movq	-2736(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2945(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2680(%rbp), %rcx       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-2920(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -2960(%rbp)       # 8-byte Spill
	movq	%rdx, -648(%rbp)        # 8-byte Spill
	movq	%rsi, -656(%rbp)        # 8-byte Spill
	jne	.LBB1_11
	jmp	.LBB1_14
.Ltmp74:
.LBB1_11:                               # %.preheader79
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_12 Depth 2
	movq	-2960(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str125, %r8
	leaq	.L.str8, %rsi
	movabsq	$61, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str114, %r10
	leaq	.L.str124, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str123, %r13
	movq	%rax, -2968(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2976(%rbp)       # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, -2984(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -2992(%rbp)       # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, -3000(%rbp)       # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, -3008(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3016(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -3024(%rbp)       # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, -3032(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -3040(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -3048(%rbp)       # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, -3056(%rbp)       # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, -3064(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3072(%rbp)       # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, -3080(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -3088(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -3096(%rbp)       # 8-byte Spill
	leaq	.L.str117, %rax
	movq	%rax, -3104(%rbp)       # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, -3112(%rbp)       # 8-byte Spill
	leaq	.L.str108, %rax
	movq	%rax, -3120(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3128(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 63 0                  # feature_extraction.c:63:0
.Ltmp75:
	subq	$16, %rsp
	movq	%rax, -3136(%rbp)       # 8-byte Spill
	movq	-3128(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3144(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -3152(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -3160(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3032(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3168(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3136(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3176(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -3184(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -3188(%rbp)      # 4-byte Spill
	movq	%r15, -3200(%rbp)       # 8-byte Spill
	movq	%rbx, -3208(%rbp)       # 8-byte Spill
	movq	%r12, -3216(%rbp)       # 8-byte Spill
	movq	%r13, -3224(%rbp)       # 8-byte Spill
	movq	%r11, -3232(%rbp)       # 8-byte Spill
	movq	%r10, -3240(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3160(%rbp), %r9        # 8-byte Reload
	movq	-3120(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3160(%rbp), %r9        # 8-byte Reload
	movq	-3104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3104(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3080(%rbp), %rcx       # 8-byte Reload
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2968(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -3244(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3056(%rbp), %rcx       # 8-byte Reload
	movq	-3048(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3088(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3244(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3244(%rbp), %r14d      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3056(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3248(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3064(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-2984(%rbp), %rcx       # 8-byte Reload
	movq	-3072(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3248(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3056(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3248(%rbp), %r14d      # 4-byte Reload
	addl	$1, %r14d
.Ltmp76:
	.loc	1 61 0                  # feature_extraction.c:61:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3252(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3008(%rbp), %rcx       # 8-byte Reload
	movq	-3048(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3040(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-2968(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3160(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3264(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3008(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3000(%rbp), %rcx       # 8-byte Reload
	movq	-3024(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3208(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-2976(%rbp), %rdx       # 8-byte Reload
	movq	-3168(%rbp), %rcx       # 8-byte Reload
	movq	-3016(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	-3264(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3008(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3264(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3000(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3272(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3224(%rbp), %rcx       # 8-byte Reload
	movq	-2992(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-3252(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-2976(%rbp), %rsi       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-2984(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3252(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-3200(%rbp), %rdi       # 8-byte Reload
	movq	-3216(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3224(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3280(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3144(%rbp), %rdi       # 8-byte Reload
	movq	-3184(%rbp), %rsi       # 8-byte Reload
	movq	-3240(%rbp), %rdx       # 8-byte Reload
	movq	-3232(%rbp), %rcx       # 8-byte Reload
	movq	-3208(%rbp), %r8        # 8-byte Reload
	movl	-3188(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3168(%rbp), %rsi       # 8-byte Reload
	movq	-3168(%rbp), %rdx       # 8-byte Reload
	movq	-3160(%rbp), %rcx       # 8-byte Reload
	movq	-3176(%rbp), %r8        # 8-byte Reload
	movq	-3168(%rbp), %r9        # 8-byte Reload
	movq	-3152(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3168(%rbp), %rax       # 8-byte Reload
	movq	%rax, -3288(%rbp)       # 8-byte Spill
.LBB1_12:                               #   Parent Loop BB1_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-3288(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str136, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	log10, %r10
	leaq	.L.str139, %r11
	movabsq	$65, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str125, %r15
	leaq	.L.str138, %r12
	movabsq	$49, %r13
	movq	%rsi, -3296(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -3304(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -3312(%rbp)       # 8-byte Spill
	leaq	.L.str135, %rax
	movq	%rax, -3320(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -3328(%rbp)       # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -3336(%rbp)       # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, -3344(%rbp)       # 8-byte Spill
	leaq	.L.str134, %rax
	movq	%rax, -3352(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -3360(%rbp)       # 8-byte Spill
	leaq	.L.str132, %rax
	movq	%rax, -3368(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -3376(%rbp)       # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, -3384(%rbp)       # 8-byte Spill
	leaq	.L.str131, %rax
	movq	%rax, -3392(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -3400(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -3408(%rbp)       # 8-byte Spill
	leaq	.L.str128, %rax
	movq	%rax, -3416(%rbp)       # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, -3424(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3432(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3440(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -3448(%rbp)       # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, -3456(%rbp)       # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, -3464(%rbp)       # 8-byte Spill
	leaq	.L.str126, %rax
	movq	%rax, -3472(%rbp)       # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, -3480(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3488(%rbp)       # 8-byte Spill
	leaq	.L.str114, %rax
	movq	%rax, -3496(%rbp)       # 8-byte Spill
	leaq	.L.str127, %rax
	movq	%rax, -3504(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3512(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 63 0                  # feature_extraction.c:63:0
.Ltmp77:
	subq	$16, %rsp
	movq	%rax, -3520(%rbp)       # 8-byte Spill
	movq	-3512(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3528(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -3532(%rbp)       # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -3544(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-3472(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3552(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3520(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3560(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-3532(%rbp), %eax       # 4-byte Reload
	movq	%r9, -3568(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -3576(%rbp)       # 8-byte Spill
	movq	%r15, -3584(%rbp)       # 8-byte Spill
	movq	%r12, -3592(%rbp)       # 8-byte Spill
	movq	%r13, -3600(%rbp)       # 8-byte Spill
	movq	%rbx, -3608(%rbp)       # 8-byte Spill
	movq	%r11, -3616(%rbp)       # 8-byte Spill
	movq	%r10, -3624(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3528(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3504(%rbp), %r8        # 8-byte Reload
	movq	-3552(%rbp), %r9        # 8-byte Reload
	movq	-3584(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3528(%rbp), %rdx       # 8-byte Reload
	movq	-3528(%rbp), %rcx       # 8-byte Reload
	movq	-3440(%rbp), %r8        # 8-byte Reload
	movq	-3552(%rbp), %r9        # 8-byte Reload
	movq	-3496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3472(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3480(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3416(%rbp), %rcx       # 8-byte Reload
	movq	-3488(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3472(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3280(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3464(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3280(%rbp), %rcx       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	.loc	1 64 0                  # feature_extraction.c:64:0
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3552(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3632(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3416(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3544(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3456(%rbp), %rcx       # 8-byte Reload
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3424(%rbp), %rdi       # 8-byte Reload
	movq	-3432(%rbp), %rsi       # 8-byte Reload
	movq	-3528(%rbp), %rdx       # 8-byte Reload
	movq	-3528(%rbp), %rcx       # 8-byte Reload
	movq	-3440(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3632(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3416(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3408(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3632(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3640(%rbp)       # 8-byte Spill
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3456(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3544(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3400(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3640(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3456(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3640(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3648(%rbp)      # 8-byte Spill
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3544(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3392(%rbp), %rcx       # 8-byte Reload
	movq	-3448(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3424(%rbp), %rdi       # 8-byte Reload
	movq	-3432(%rbp), %rsi       # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3528(%rbp), %rcx       # 8-byte Reload
	movq	-3440(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3632(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3416(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3408(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3632(%rbp), %rcx       # 8-byte Reload
	shlq	$4, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	subq	$16, %rsp
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3656(%rbp)       # 8-byte Spill
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3392(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3544(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3400(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3656(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3392(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3656(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	.loc	1 65 0                  # feature_extraction.c:65:0
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3664(%rbp)      # 8-byte Spill
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3608(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3376(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3648(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3648(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3648(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -3672(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3608(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3376(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3664(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3664(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3664(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -3680(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3608(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3360(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3680(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3352(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3672(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3344(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3672(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-3680(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -3688(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3608(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3600(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3336(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3688(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3688(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-3312(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3696(%rbp)      # 8-byte Spill
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3608(%rbp), %rdi       # 8-byte Reload
	movq	-3576(%rbp), %rsi       # 8-byte Reload
	movq	-3584(%rbp), %rdx       # 8-byte Reload
	movq	-3592(%rbp), %rcx       # 8-byte Reload
	movq	-3600(%rbp), %r8        # 8-byte Reload
	movl	-3532(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3568(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	movq	-3624(%rbp), %rdx       # 8-byte Reload
	movq	-3552(%rbp), %rcx       # 8-byte Reload
	movq	-3616(%rbp), %r8        # 8-byte Reload
	movq	-3528(%rbp), %r9        # 8-byte Reload
	movq	-3560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3544(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3696(%rbp), %xmm0      # 8-byte Reload
	movq	-3552(%rbp), %rdx       # 8-byte Reload
	movq	-3296(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movq	-3560(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3696(%rbp), %xmm0      # 8-byte Reload
	callq	log10
	movabsq	$1, %rcx
	leaq	.L.str144, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str125, %r9
	movabsq	$3, %r10
	leaq	.L.str117, %r11
	movabsq	$61, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str145, %r15
	movl	$1, %eax
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rcx, -3704(%rbp)       # 8-byte Spill
	leaq	.L.str127, %rcx
	movq	%rcx, -3712(%rbp)       # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, -3720(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -3728(%rbp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -3736(%rbp)       # 8-byte Spill
	leaq	.L.str126, %rcx
	movq	%rcx, -3744(%rbp)       # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, -3752(%rbp)       # 8-byte Spill
	leaq	.L.str138, %rcx
	movq	%rcx, -3760(%rbp)       # 8-byte Spill
	leaq	.L.str141, %rcx
	movq	%rcx, -3768(%rbp)       # 8-byte Spill
	movabsq	$65, %rcx
	movq	%rcx, -3776(%rbp)       # 8-byte Spill
	leaq	.L.str143, %rcx
	movq	%rcx, -3784(%rbp)       # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, -3792(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rcx
	movq	%rcx, -3800(%rbp)       # 8-byte Spill
	leaq	.L.str140, %rcx
	movq	%rcx, -3808(%rbp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, -3816(%rbp)       # 8-byte Spill
	leaq	.L.str122, %rcx
	movq	%rdi, -3824(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, -3832(%rbp)       # 8-byte Spill
	movq	%r13, %rsi
	vmovsd	%xmm0, -3840(%rbp)      # 8-byte Spill
	movq	%rcx, -3848(%rbp)       # 8-byte Spill
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	%rdx, -3856(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3760(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -3864(%rbp)        # 8-byte Spill
	movq	-3832(%rbp), %r8        # 8-byte Reload
	movq	%r9, -3872(%rbp)        # 8-byte Spill
	movq	-3824(%rbp), %r9        # 8-byte Reload
	movl	%eax, -3876(%rbp)       # 4-byte Spill
	movq	%r14, -3888(%rbp)       # 8-byte Spill
	movq	%r15, -3896(%rbp)       # 8-byte Spill
	movq	%r12, -3904(%rbp)       # 8-byte Spill
	movq	%r13, -3912(%rbp)       # 8-byte Spill
	movq	%rbx, -3920(%rbp)       # 8-byte Spill
	movq	%r11, -3928(%rbp)       # 8-byte Spill
	movq	%r10, -3936(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3776(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3808(%rbp), %rcx       # 8-byte Reload
	movq	-3752(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3272(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3848(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3744(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3304(%rbp), %rcx       # 8-byte Reload
	movq	-3272(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3704(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3944(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3808(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3776(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3768(%rbp), %rcx       # 8-byte Reload
	movq	-3816(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3944(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3808(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3800(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3944(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3952(%rbp)       # 8-byte Spill
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3768(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3776(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3784(%rbp), %rcx       # 8-byte Reload
	movq	-3792(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3952(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3768(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3840(%rbp), %xmm0      # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3760(%rbp), %rcx       # 8-byte Reload
	movq	-3832(%rbp), %r8        # 8-byte Reload
	movq	-3824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-2944(%rbp), %rcx       # 8-byte Reload
	movq	-3944(%rbp), %rdx       # 8-byte Reload
	vmovsd	-3840(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp78:
	.loc	1 61 0                  # feature_extraction.c:61:0
	subq	$16, %rsp
	movq	-3920(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3752(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3832(%rbp), %rcx       # 8-byte Reload
	movq	-3728(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3304(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3744(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3304(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3704(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3960(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3712(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3920(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3856(%rbp), %rcx       # 8-byte Reload
	movq	-3736(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3720(%rbp), %rdx       # 8-byte Reload
	movq	-3832(%rbp), %rcx       # 8-byte Reload
	movq	-3728(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3912(%rbp), %rsi       # 8-byte Reload
	movq	-3960(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3712(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3960(%rbp), %rcx       # 8-byte Reload
	cmpq	$47, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-3704(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3856(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -3961(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3920(%rbp), %rdi       # 8-byte Reload
	movq	-3888(%rbp), %rsi       # 8-byte Reload
	movq	-3872(%rbp), %rdx       # 8-byte Reload
	movq	-3896(%rbp), %rcx       # 8-byte Reload
	movq	-3864(%rbp), %r8        # 8-byte Reload
	movl	-3876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3936(%rbp), %rdi       # 8-byte Reload
	movq	-3832(%rbp), %rsi       # 8-byte Reload
	movq	-3832(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3928(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3864(%rbp), %rdi       # 8-byte Reload
	movq	-3832(%rbp), %rsi       # 8-byte Reload
	movq	-3832(%rbp), %rdx       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3872(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3961(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-3704(%rbp), %rdi       # 8-byte Reload
	movq	-3704(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rcx       # 8-byte Reload
	movq	-3856(%rbp), %r8        # 8-byte Reload
	movq	-3832(%rbp), %r9        # 8-byte Reload
	movq	-3824(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3961(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-3960(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -3288(%rbp)       # 8-byte Spill
	jne	.LBB1_13
	jmp	.LBB1_12
.Ltmp79:
.LBB1_13:                               #   in Loop: Header=BB1_11 Depth=1
	movabsq	$1, %rax
	leaq	.L.str147, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str114, %r8
	movabsq	$3, %r9
	leaq	.L.str149, %r10
	movabsq	$59, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str117, %r14
	leaq	.L.str148, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -3976(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3984(%rbp)       # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, -3992(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4000(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4008(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4016(%rbp)       # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, -4024(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -4032(%rbp)       # 8-byte Spill
	leaq	.L.str115, %rax
	movq	%rax, -4040(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4048(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 59 0                  # feature_extraction.c:59:0
	subq	$16, %rsp
	movq	%rdi, -4056(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -4064(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -4072(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -4080(%rbp)       # 8-byte Spill
	movq	-4024(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4088(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4080(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4096(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -4104(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -4112(%rbp)       # 8-byte Spill
	movq	%r15, -4120(%rbp)       # 8-byte Spill
	movl	%r12d, -4124(%rbp)      # 4-byte Spill
	movq	%r13, -4136(%rbp)       # 8-byte Spill
	movq	%rbx, -4144(%rbp)       # 8-byte Spill
	movq	%r11, -4152(%rbp)       # 8-byte Spill
	movq	%r10, -4160(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-4016(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rdx       # 8-byte Reload
	movq	-4072(%rbp), %rcx       # 8-byte Reload
	movq	-4048(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3976(%rbp), %rdi       # 8-byte Reload
	movq	-4016(%rbp), %rsi       # 8-byte Reload
	movq	-2968(%rbp), %rdx       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4040(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2968(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-4016(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4024(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -4168(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4152(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4112(%rbp), %rdx       # 8-byte Reload
	movq	-3992(%rbp), %rcx       # 8-byte Reload
	movq	-4032(%rbp), %r8        # 8-byte Reload
	movl	-4124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3976(%rbp), %rdi       # 8-byte Reload
	movq	-4016(%rbp), %rsi       # 8-byte Reload
	movq	-4168(%rbp), %rdx       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4024(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4168(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-3992(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -4172(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4152(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4112(%rbp), %rdx       # 8-byte Reload
	movq	-4088(%rbp), %rcx       # 8-byte Reload
	movq	-4008(%rbp), %r8        # 8-byte Reload
	movl	-4124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4000(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4172(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3976(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-3992(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4172(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-3976(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4088(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4173(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4152(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4112(%rbp), %rdx       # 8-byte Reload
	movq	-4120(%rbp), %rcx       # 8-byte Reload
	movq	-4056(%rbp), %r8        # 8-byte Reload
	movl	-4124(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4104(%rbp), %rdi       # 8-byte Reload
	movq	-4072(%rbp), %rsi       # 8-byte Reload
	movq	-4072(%rbp), %rdx       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4160(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-4072(%rbp), %rsi       # 8-byte Reload
	movq	-4072(%rbp), %rdx       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4096(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4173(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-3976(%rbp), %rdi       # 8-byte Reload
	movq	-3976(%rbp), %rsi       # 8-byte Reload
	movq	-3976(%rbp), %rcx       # 8-byte Reload
	movq	-4088(%rbp), %r8        # 8-byte Reload
	movq	-4072(%rbp), %r9        # 8-byte Reload
	movq	-4064(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4173(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4168(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2960(%rbp)       # 8-byte Spill
	jne	.LBB1_15
	jmp	.LBB1_11
.Ltmp80:
.LBB1_14:                               # %._crit_edge82.thread
	movq	-656(%rbp), %rax        # 8-byte Reload
	movq	-648(%rbp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str156, %r8
	leaq	.L.str8, %rdi
	movabsq	$71, %r9
	leaq	.L.str50, %r10
	leaq	.L.str56, %r11
	leaq	.L.str155, %rbx
	movabsq	$2, %r14
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -4184(%rbp)       # 8-byte Spill
	leaq	.L.str154, %rax
	.loc	1 69 0                  # feature_extraction.c:69:0
	subq	$16, %rsp
	movq	%rax, -4192(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4200(%rbp)       # 8-byte Spill
	movl	$.L.str56, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4208(%rbp)       # 8-byte Spill
	movl	$.L.str150, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4216(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -4224(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -4232(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -4240(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -4248(%rbp)       # 8-byte Spill
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4252(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4208(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4264(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4216(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4272(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4232(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4280(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4252(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4288(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -4296(%rbp)       # 8-byte Spill
	movq	%r14, -4304(%rbp)       # 8-byte Spill
	movl	%r15d, -4308(%rbp)      # 4-byte Spill
	movq	%rbx, -4320(%rbp)       # 8-byte Spill
	movq	%r12, -4328(%rbp)       # 8-byte Spill
	movq	%r11, -4336(%rbp)       # 8-byte Spill
	movq	%r10, -4344(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str108, (%rcx)
	movl	$.L.str142, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -4352(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -4360(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-4360(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -4368(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-4352(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -4376(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %r8d
	movq	-4352(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4352(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4272(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4384(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4216(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str151, %eax
	movl	%eax, %ecx
	movq	-4248(%rbp), %rdi       # 8-byte Reload
	movq	-4224(%rbp), %rsi       # 8-byte Reload
	movq	-4208(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -4392(%rbp)       # 8-byte Spill
	movq	-4232(%rbp), %r8        # 8-byte Reload
	movl	-4252(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str108, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %r8d
	movq	-4376(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4352(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %r8d
	movq	-4352(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4352(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movq	-4384(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4184(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4392(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str152, %eax
	movl	%eax, %ecx
	movl	$69, %eax
	movl	%eax, %edx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	-4224(%rbp), %rsi       # 8-byte Reload
	movq	-4208(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4400(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -4408(%rbp)       # 8-byte Spill
	movl	-4252(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movq	-4352(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4416(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4384(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4416(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4408(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str153, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4400(%rbp), %rdi       # 8-byte Reload
	movq	-4224(%rbp), %rsi       # 8-byte Reload
	movq	-4208(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4424(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4432(%rbp)       # 8-byte Spill
	movq	-4424(%rbp), %r8        # 8-byte Reload
	movl	-4252(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4352(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4416(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4408(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4416(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4384(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4440(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4440(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4448(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4432(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 70 0                  # feature_extraction.c:70:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str154, %eax
	movl	%eax, %ecx
	movl	$70, %eax
	movl	%eax, %edi
	movq	-4224(%rbp), %rsi       # 8-byte Reload
	movq	-4208(%rbp), %rdx       # 8-byte Reload
	movq	-4424(%rbp), %r8        # 8-byte Reload
	movl	-4252(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4352(%rbp), %rdi       # 8-byte Reload
	movq	-4368(%rbp), %rsi       # 8-byte Reload
	movq	-4416(%rbp), %rdx       # 8-byte Reload
	movq	-4352(%rbp), %rcx       # 8-byte Reload
	movq	-4408(%rbp), %r8        # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4448(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4328(%rbp), %rdi       # 8-byte Reload
	movq	-4296(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4264(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4456(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4192(%rbp), %r8        # 8-byte Reload
	movq	-4200(%rbp), %r9        # 8-byte Reload
	movq	-4240(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp81:
	#DEBUG_VALUE: process_data:fft_stddev <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 71 0                  # feature_extraction.c:71:0
	subq	$16, %rsp
	movq	-4288(%rbp), %rdi       # 8-byte Reload
	movq	-4344(%rbp), %rsi       # 8-byte Reload
	movq	-4336(%rbp), %rdx       # 8-byte Reload
	movq	-4320(%rbp), %rcx       # 8-byte Reload
	movq	-4304(%rbp), %r8        # 8-byte Reload
	movl	-4308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4264(%rbp), %rdi       # 8-byte Reload
	movq	-4200(%rbp), %rsi       # 8-byte Reload
	movq	-4200(%rbp), %rdx       # 8-byte Reload
	movq	-4264(%rbp), %rcx       # 8-byte Reload
	movq	-4280(%rbp), %r8        # 8-byte Reload
	movq	-4200(%rbp), %r9        # 8-byte Reload
	movq	-4240(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4456(%rbp), %rcx       # 8-byte Reload
	movq	-4440(%rbp), %rdx       # 8-byte Reload
	movq	-4416(%rbp), %rsi       # 8-byte Reload
	movq	-4184(%rbp), %rdi       # 8-byte Reload
	movq	-4272(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4464(%rbp)       # 8-byte Spill
	movq	%rdx, -4472(%rbp)       # 8-byte Spill
	movq	%rsi, -4480(%rbp)       # 8-byte Spill
	movq	%rdi, -4488(%rbp)       # 8-byte Spill
	movq	%r8, -4496(%rbp)        # 8-byte Spill
	jmp	.LBB1_16
.Ltmp82:
.LBB1_15:                               # %._crit_edge82
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str160, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str163, %r8
	movabsq	$3, %r9
	leaq	.L.str162, %r10
	movabsq	$71, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str149, %r14
	leaq	.L.str161, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -4504(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4512(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4520(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4528(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4536(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4544(%rbp)       # 8-byte Spill
	leaq	.L.str159, %rax
	.loc	1 69 0                  # feature_extraction.c:69:0
	subq	$16, %rsp
	movq	%rax, -4552(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4560(%rbp)       # 8-byte Spill
	movl	$.L.str149, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4568(%rbp)       # 8-byte Spill
	movl	$.L.str157, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4576(%rbp)       # 8-byte Spill
	movl	$69, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4584(%rbp)       # 8-byte Spill
	movl	$34, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4592(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -4600(%rbp)       # 8-byte Spill
	movq	-4584(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -4608(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-4600(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4612(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4568(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4624(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4576(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4632(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4592(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4640(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4612(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4648(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -4656(%rbp)       # 8-byte Spill
	movq	%r14, -4664(%rbp)       # 8-byte Spill
	movq	%r15, -4672(%rbp)       # 8-byte Spill
	movl	%r12d, -4676(%rbp)      # 4-byte Spill
	movq	%rbx, -4688(%rbp)       # 8-byte Spill
	movq	%r11, -4696(%rbp)       # 8-byte Spill
	movq	%r10, -4704(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	xorl	%r9d, %r9d
	movl	%r9d, %edi
	movq	%rdi, -4712(%rbp)       # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rdx, -4720(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-4720(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4728(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4712(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	movq	-4728(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4736(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	-4720(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4744(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-4576(%rbp), %r8        # 8-byte Reload
	movq	-4712(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str158, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4584(%rbp), %rdi       # 8-byte Reload
	movq	-4600(%rbp), %rsi       # 8-byte Reload
	movq	-4568(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4752(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4760(%rbp)       # 8-byte Spill
	movq	-4752(%rbp), %r8        # 8-byte Reload
	movl	-4612(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4720(%rbp), %rdi       # 8-byte Reload
	movq	-4736(%rbp), %rsi       # 8-byte Reload
	movq	-4728(%rbp), %rdx       # 8-byte Reload
	movq	-4720(%rbp), %rcx       # 8-byte Reload
	movq	-4576(%rbp), %r8        # 8-byte Reload
	movq	-4712(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4728(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4744(%rbp), %rdi       # 8-byte Reload
	movq	-4736(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4768(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4768(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4776(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4720(%rbp), %rcx       # 8-byte Reload
	movq	-4760(%rbp), %r8        # 8-byte Reload
	movq	-4712(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 70 0                  # feature_extraction.c:70:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str159, %eax
	movl	%eax, %ecx
	movl	$70, %eax
	movl	%eax, %edi
	movq	-4600(%rbp), %rsi       # 8-byte Reload
	movq	-4568(%rbp), %rdx       # 8-byte Reload
	movq	-4752(%rbp), %r8        # 8-byte Reload
	movl	-4612(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4720(%rbp), %rdi       # 8-byte Reload
	movq	-4736(%rbp), %rsi       # 8-byte Reload
	movq	-4728(%rbp), %rdx       # 8-byte Reload
	movq	-4720(%rbp), %rcx       # 8-byte Reload
	movq	-4576(%rbp), %r8        # 8-byte Reload
	movq	-4712(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4776(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4656(%rbp), %rdi       # 8-byte Reload
	movq	-4544(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4632(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4784(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4552(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:fft_stddev <- undef
.Ltmp83:
	#DEBUG_VALUE: channel <- 0
	.loc	1 71 0                  # feature_extraction.c:71:0
	subq	$16, %rsp
	movq	-4696(%rbp), %rdi       # 8-byte Reload
	movq	-4688(%rbp), %rsi       # 8-byte Reload
	movq	-4664(%rbp), %rdx       # 8-byte Reload
	movq	-4624(%rbp), %rcx       # 8-byte Reload
	movq	-4536(%rbp), %r8        # 8-byte Reload
	movl	-4676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4608(%rbp), %rdi       # 8-byte Reload
	movq	-4512(%rbp), %rsi       # 8-byte Reload
	movq	-4504(%rbp), %rdx       # 8-byte Reload
	movq	-4504(%rbp), %rcx       # 8-byte Reload
	movq	-4528(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4632(%rbp), %rdi       # 8-byte Reload
	movq	-4512(%rbp), %rsi       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4520(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4656(%rbp), %rdi       # 8-byte Reload
	movq	-4632(%rbp), %rsi       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4624(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4785(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4696(%rbp), %rdi       # 8-byte Reload
	movq	-4688(%rbp), %rsi       # 8-byte Reload
	movq	-4664(%rbp), %rdx       # 8-byte Reload
	movq	-4672(%rbp), %rcx       # 8-byte Reload
	movq	-4608(%rbp), %r8        # 8-byte Reload
	movl	-4676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4648(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4504(%rbp), %rdx       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4704(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4608(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4504(%rbp), %rdx       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4640(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4785(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4632(%rbp), %rdi       # 8-byte Reload
	movq	-4632(%rbp), %rsi       # 8-byte Reload
	movq	-4632(%rbp), %rcx       # 8-byte Reload
	movq	-4624(%rbp), %r8        # 8-byte Reload
	movq	-4504(%rbp), %r9        # 8-byte Reload
	movq	-4560(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4785(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4504(%rbp), %rcx       # 8-byte Reload
	movq	-2920(%rbp), %rdx       # 8-byte Reload
	movq	-4728(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -4800(%rbp)       # 8-byte Spill
	movq	%rdx, -4808(%rbp)       # 8-byte Spill
	movq	%rsi, -4816(%rbp)       # 8-byte Spill
	jne	.LBB1_17
	jmp	.LBB1_23
.Ltmp84:
.LBB1_16:                               # %.preheader70
	movq	-4496(%rbp), %rax       # 8-byte Reload
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4480(%rbp), %rdx       # 8-byte Reload
	movq	-4472(%rbp), %rsi       # 8-byte Reload
	movq	-4464(%rbp), %rdi       # 8-byte Reload
	movabsq	$0, %r8
	movabsq	$1, %r9
	leaq	.L.str170, %r10
	leaq	.L.str8, %r11
	movabsq	$2, %rbx
	leaq	.L.str163, %r14
	movabsq	$3, %r15
	leaq	.L.str172, %r12
	movabsq	$81, %r13
	movq	%rax, -4824(%rbp)       # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -4832(%rbp)       # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, -4840(%rbp)       # 8-byte Spill
	leaq	.L.str171, %rax
	movq	%rsi, -4848(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -4856(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -4864(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4872(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4880(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4888(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4896(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4904(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -4912(%rbp)       # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, -4928(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, -4936(%rbp)       # 8-byte Spill
	leaq	.L.str165, %rax
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	leaq	.L.str151, %rax
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, -4984(%rbp)       # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	leaq	.L.str152, %rax
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -5016(%rbp)       # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	leaq	.L.str158, %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	leaq	.L.str154, %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	leaq	.L.str159, %rax
	.loc	1 81 0                  # feature_extraction.c:81:0
.Ltmp85:
	subq	$16, %rsp
	movq	%rax, -5056(%rbp)       # 8-byte Spill
	movq	-4952(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5064(%rbp)       # 8-byte Spill
.Ltmp86:
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5064]
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5064]
	movq	%rax, %rdi
	movq	-4832(%rbp), %rax       # 8-byte Reload
	movl	%esi, -5068(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4840(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -5080(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-5040(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5088(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4960(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5096(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-5068(%rbp), %eax       # 4-byte Reload
	movq	%r9, -5104(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -5112(%rbp)       # 8-byte Spill
	movq	%r15, -5120(%rbp)       # 8-byte Spill
	movq	%r12, -5128(%rbp)       # 8-byte Spill
	movq	%r13, -5136(%rbp)       # 8-byte Spill
	movq	%rbx, -5144(%rbp)       # 8-byte Spill
	movq	%r11, -5152(%rbp)       # 8-byte Spill
	movq	%r10, -5160(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5056(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5048(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5064(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5040(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-5016(%rbp), %rcx       # 8-byte Reload
	movq	-4960(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5032(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5024(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-4848(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5016(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4992(%rbp), %rcx       # 8-byte Reload
	movq	-4960(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5008(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5000(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5080(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4992(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4968(%rbp), %rcx       # 8-byte Reload
	movq	-4960(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4984(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5088(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4968(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4912(%rbp), %rcx       # 8-byte Reload
	movq	-4960(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4936(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4944(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4928(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-4904(%rbp), %rsi       # 8-byte Reload
	movq	-4824(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4912(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-4920(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5136(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-5160(%rbp), %rcx       # 8-byte Reload
	movq	-4896(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-4872(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5096(%rbp), %rcx       # 8-byte Reload
	movq	-4888(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4872(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4880(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4864(%rbp), %rdi       # 8-byte Reload
	movq	-5104(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5160(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5161(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5136(%rbp), %rdi       # 8-byte Reload
	movq	-4832(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4856(%rbp), %rcx       # 8-byte Reload
	movq	-5144(%rbp), %r8        # 8-byte Reload
	movl	-5068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5120(%rbp), %rdi       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5128(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5144(%rbp), %rdi       # 8-byte Reload
	movq	-5096(%rbp), %rsi       # 8-byte Reload
	movq	-5096(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5112(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5161(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-5104(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5160(%rbp), %r8        # 8-byte Reload
	movq	-5096(%rbp), %r9        # 8-byte Reload
	movq	-5152(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5161(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-5096(%rbp), %rcx       # 8-byte Reload
	movq	-5088(%rbp), %rdx       # 8-byte Reload
	movq	-5080(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -5176(%rbp)       # 8-byte Spill
	movq	%rdx, -4808(%rbp)       # 8-byte Spill
	movq	%rsi, -4816(%rbp)       # 8-byte Spill
	jne	.LBB1_20
	jmp	.LBB1_23
.Ltmp87:
.LBB1_17:                               # %.lr.ph78
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_18 Depth 2
	movq	-4800(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str180, %r8
	leaq	.L.str8, %rsi
	movabsq	$74, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str162, %r10
	leaq	.L.str179, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str178, %r13
	movq	%rax, -5184(%rbp)       # 8-byte Spill
	leaq	.L.str177, %rax
	movq	%rax, -5192(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5200(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5208(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -5216(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5224(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -5232(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -5240(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5248(%rbp)       # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, -5256(%rbp)       # 8-byte Spill
	leaq	.L.str176, %rax
	movq	%rax, -5264(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -5272(%rbp)       # 8-byte Spill
	leaq	.L.str158, %rax
	movq	%rax, -5280(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	leaq	.L.str165, %rax
	movq	%rax, -5296(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5304(%rbp)       # 8-byte Spill
	leaq	.L.str149, %rax
	movq	%rax, -5312(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 73 0                  # feature_extraction.c:73:0
.Ltmp88:
	subq	$16, %rsp
	movq	%rax, -5328(%rbp)       # 8-byte Spill
	movq	-5320(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5336(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5344(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -5352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5224(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5360(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5328(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5368(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -5376(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -5380(%rbp)      # 4-byte Spill
	vmovsd	%xmm0, -5392(%rbp)      # 8-byte Spill
	movq	%r15, -5400(%rbp)       # 8-byte Spill
	movq	%rbx, -5408(%rbp)       # 8-byte Spill
	movq	%r12, -5416(%rbp)       # 8-byte Spill
	movq	%r13, -5424(%rbp)       # 8-byte Spill
	movq	%r11, -5432(%rbp)       # 8-byte Spill
	movq	%r10, -5440(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5360(%rbp), %rdx       # 8-byte Reload
	movq	-5360(%rbp), %rcx       # 8-byte Reload
	movq	-5208(%rbp), %r8        # 8-byte Reload
	movq	-5352(%rbp), %r9        # 8-byte Reload
	movq	-5312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5360(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5304(%rbp), %r8        # 8-byte Reload
	movq	-5352(%rbp), %r9        # 8-byte Reload
	movq	-5296(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5400(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5184(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5296(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5256(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5440(%rbp), %rdx       # 8-byte Reload
	movq	-5248(%rbp), %rcx       # 8-byte Reload
	movq	-5288(%rbp), %r8        # 8-byte Reload
	movl	-5380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5184(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-4768(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5280(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5184(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4768(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-5400(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5352(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5448(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5248(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5256(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5440(%rbp), %rdx       # 8-byte Reload
	movq	-5264(%rbp), %rcx       # 8-byte Reload
	movq	-5272(%rbp), %r8        # 8-byte Reload
	movl	-5380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5448(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5248(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5392(%rbp), %xmm0      # 8-byte Reload
	movq	-5360(%rbp), %rdx       # 8-byte Reload
	movq	-5208(%rbp), %rcx       # 8-byte Reload
	movq	-5360(%rbp), %r8        # 8-byte Reload
	movq	-5344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-4768(%rbp), %rax       # 8-byte Reload
	movq	-5184(%rbp), %rcx       # 8-byte Reload
	vmovsd	-5392(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp89:
	#DEBUG_VALUE: i <- 0
	.loc	1 74 0                  # feature_extraction.c:74:0
	subq	$16, %rsp
	movq	-5336(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5440(%rbp), %rdx       # 8-byte Reload
	movq	-5192(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movl	-5380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5232(%rbp), %rdx       # 8-byte Reload
	movq	-5360(%rbp), %rcx       # 8-byte Reload
	movq	-5208(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5184(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-5184(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-5400(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5352(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5456(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5192(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5336(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5440(%rbp), %rdx       # 8-byte Reload
	movq	-5424(%rbp), %rcx       # 8-byte Reload
	movq	-5216(%rbp), %r8        # 8-byte Reload
	movl	-5380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5408(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5200(%rbp), %rdx       # 8-byte Reload
	movq	-5360(%rbp), %rcx       # 8-byte Reload
	movq	-5208(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	-5456(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5192(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5456(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-5400(%rbp), %rdi       # 8-byte Reload
	movq	-5416(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5424(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5464(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5336(%rbp), %rdi       # 8-byte Reload
	movq	-5376(%rbp), %rsi       # 8-byte Reload
	movq	-5440(%rbp), %rdx       # 8-byte Reload
	movq	-5432(%rbp), %rcx       # 8-byte Reload
	movq	-5408(%rbp), %r8        # 8-byte Reload
	movl	-5380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5352(%rbp), %rdi       # 8-byte Reload
	movq	-5360(%rbp), %rsi       # 8-byte Reload
	movq	-5360(%rbp), %rdx       # 8-byte Reload
	movq	-5352(%rbp), %rcx       # 8-byte Reload
	movq	-5368(%rbp), %r8        # 8-byte Reload
	movq	-5360(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5360(%rbp), %rax       # 8-byte Reload
	.loc	1 76 0                  # feature_extraction.c:76:0
.Ltmp90:
	vmovsd	-5392(%rbp), %xmm0      # 8-byte Reload
	movq	%rax, -5472(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -5480(%rbp)      # 8-byte Spill
.LBB1_18:                               #   Parent Loop BB1_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-5480(%rbp), %xmm0      # 8-byte Reload
	movq	-5472(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str188, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str180, %r9
	movabsq	$3, %r10
	leaq	.L.str165, %r11
	movabsq	$74, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str189, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -5488(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -5496(%rbp)       # 8-byte Spill
	leaq	.L.str182, %rax
	movq	%rax, -5504(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -5512(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5520(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -5528(%rbp)       # 8-byte Spill
	leaq	.L.str181, %rax
	movq	%rax, -5536(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -5544(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, -5552(%rbp)       # 8-byte Spill
	leaq	.L.str187, %rax
	movq	%rax, -5560(%rbp)       # 8-byte Spill
	leaq	.L.str183, %rax
	movq	%rax, -5568(%rbp)       # 8-byte Spill
	movabsq	$76, %rax
	movq	%rax, -5576(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -5584(%rbp)       # 8-byte Spill
	leaq	.L.str186, %rax
	movq	%rax, -5592(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -5600(%rbp)       # 8-byte Spill
	leaq	.L.str142, %rax
	movq	%rax, -5608(%rbp)       # 8-byte Spill
	leaq	.L.str185, %rax
	movq	%rax, -5616(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -5624(%rbp)       # 8-byte Spill
	leaq	.L.str178, %rax
	movq	%rax, -5632(%rbp)       # 8-byte Spill
	leaq	.L.str162, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -5640(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -5648(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -5656(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5664(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -5672(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-5536(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5680(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5648(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5688(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -5696(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -5704(%rbp)      # 8-byte Spill
	vmovsd	%xmm1, -5712(%rbp)      # 8-byte Spill
	movq	%r15, -5720(%rbp)       # 8-byte Spill
	movl	%r12d, -5724(%rbp)      # 4-byte Spill
	movq	%r13, -5736(%rbp)       # 8-byte Spill
	movq	%r14, -5744(%rbp)       # 8-byte Spill
	movq	%rbx, -5752(%rbp)       # 8-byte Spill
	movq	%r10, -5760(%rbp)       # 8-byte Spill
	movq	%r11, -5768(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5504(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5696(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5664(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5488(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5576(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	movq	-5648(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5680(%rbp), %r9        # 8-byte Reload
	movq	-5696(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5712(%rbp), %xmm0      # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5520(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5704(%rbp), %xmm0      # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5576(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5616(%rbp), %rcx       # 8-byte Reload
	movq	-5544(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5464(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5632(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5488(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5488(%rbp), %rax       # 8-byte Reload
	movq	-5464(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5776(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5576(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5592(%rbp), %rcx       # 8-byte Reload
	movq	-5624(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5776(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-2944(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5608(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5776(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-2944(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5680(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5784(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5592(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5576(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5560(%rbp), %rcx       # 8-byte Reload
	movq	-5600(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5784(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5592(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2944(%rbp), %rax       # 8-byte Reload
	movq	-5776(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -5792(%rbp)      # 8-byte Spill
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5560(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5576(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5552(%rbp), %rcx       # 8-byte Reload
	movq	-5584(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5704(%rbp), %xmm0      # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5568(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5792(%rbp), %xmm0      # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5560(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-5792(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-5704(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp91:
	.loc	1 74 0                  # feature_extraction.c:74:0
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5552(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5656(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -5800(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5504(%rbp), %rcx       # 8-byte Reload
	movq	-5544(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rdx       # 8-byte Reload
	movq	-5664(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5488(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5536(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5488(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5504(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -5808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5672(%rbp), %rcx       # 8-byte Reload
	movq	-5528(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5512(%rbp), %rdx       # 8-byte Reload
	movq	-5664(%rbp), %rcx       # 8-byte Reload
	movq	-5520(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5496(%rbp), %rsi       # 8-byte Reload
	movq	-5808(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5504(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5808(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5680(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5672(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5809(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5744(%rbp), %rsi       # 8-byte Reload
	movq	-5696(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5688(%rbp), %r8        # 8-byte Reload
	movl	-5724(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5760(%rbp), %rdi       # 8-byte Reload
	movq	-5664(%rbp), %rsi       # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5768(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5688(%rbp), %rdi       # 8-byte Reload
	movq	-5664(%rbp), %rsi       # 8-byte Reload
	movq	-5664(%rbp), %rdx       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5696(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5809(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5680(%rbp), %rdi       # 8-byte Reload
	movq	-5680(%rbp), %rsi       # 8-byte Reload
	movq	-5680(%rbp), %rcx       # 8-byte Reload
	movq	-5672(%rbp), %r8        # 8-byte Reload
	movq	-5664(%rbp), %r9        # 8-byte Reload
	movq	-5656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5809(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-5808(%rbp), %rcx       # 8-byte Reload
	.loc	1 76 0                  # feature_extraction.c:76:0
.Ltmp92:
	vmovsd	-5800(%rbp), %xmm0      # 8-byte Reload
.Ltmp93:
	.loc	1 74 0                  # feature_extraction.c:74:0
	movq	%rcx, -5472(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -5480(%rbp)      # 8-byte Spill
	jne	.LBB1_19
	jmp	.LBB1_18
.Ltmp94:
.LBB1_19:                               #   in Loop: Header=BB1_17 Depth=1
	movabsq	$1, %rax
	leaq	.L.str193, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str162, %r8
	movabsq	$3, %r9
	leaq	.L.str156, %r10
	movabsq	$71, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str165, %r14
	leaq	.L.str194, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -5824(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5832(%rbp)       # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, -5840(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -5848(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -5856(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -5864(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5872(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -5880(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5888(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5896(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -5904(%rbp)       # 8-byte Spill
	leaq	.L.str190, %rax
	movq	%rax, -5912(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5920(%rbp)       # 8-byte Spill
	movabsq	$78, %rax
	movq	%rax, -5928(%rbp)       # 8-byte Spill
	leaq	.L.str191, %rax
	movq	%rax, -5936(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -5944(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	vmovsd	.LCPI1_0, %xmm0
	movq	%rax, -5952(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, -5960(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 78 0                  # feature_extraction.c:78:0
	subq	$16, %rsp
	movq	%rax, -5968(%rbp)       # 8-byte Spill
	movq	-5928(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5976(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5984(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -5992(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-5912(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6000(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5968(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6008(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6016(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -6024(%rbp)       # 8-byte Spill
	movl	%r12d, -6028(%rbp)      # 4-byte Spill
	movq	%r13, -6040(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6048(%rbp)      # 8-byte Spill
	movq	%r14, -6056(%rbp)       # 8-byte Spill
	movq	%rbx, -6064(%rbp)       # 8-byte Spill
	movq	%r10, -6072(%rbp)       # 8-byte Spill
	movq	%r11, -6080(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-5976(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6048(%rbp), %xmm0      # 8-byte Reload
	movq	-5992(%rbp), %rdx       # 8-byte Reload
	movq	-5896(%rbp), %rcx       # 8-byte Reload
	movq	-5992(%rbp), %r8        # 8-byte Reload
	movq	-5984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-5800(%rbp), %xmm0      # 8-byte Reload
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5960(%rbp), %rcx       # 8-byte Reload
	movq	-5992(%rbp), %r8        # 8-byte Reload
	movq	-5984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-5800(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6048(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-6040(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5912(%rbp), %rcx       # 8-byte Reload
	movq	-5992(%rbp), %r8        # 8-byte Reload
	movq	-5984(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6088(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-5928(%rbp), %rdi       # 8-byte Reload
	movq	-6064(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5936(%rbp), %rcx       # 8-byte Reload
	movq	-5944(%rbp), %r8        # 8-byte Reload
	movl	-6028(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5976(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	movq	-5448(%rbp), %rdx       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5920(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6088(%rbp), %xmm0      # 8-byte Reload
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5912(%rbp), %rcx       # 8-byte Reload
	movq	-5992(%rbp), %r8        # 8-byte Reload
	movq	-5984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5448(%rbp), %rax       # 8-byte Reload
	vmovsd	-6088(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp95:
	.loc	1 71 0                  # feature_extraction.c:71:0
	subq	$16, %rsp
	movq	-6080(%rbp), %rdi       # 8-byte Reload
	movq	-6064(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5872(%rbp), %rcx       # 8-byte Reload
	movq	-5904(%rbp), %r8        # 8-byte Reload
	movl	-6028(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5976(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5992(%rbp), %rcx       # 8-byte Reload
	movq	-5896(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	movq	-5184(%rbp), %rdx       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5888(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5184(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-6040(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5872(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6096(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6080(%rbp), %rdi       # 8-byte Reload
	movq	-6064(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5880(%rbp), %r8        # 8-byte Reload
	movl	-6028(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5864(%rbp), %rsi       # 8-byte Reload
	movq	-6096(%rbp), %rdx       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5872(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6096(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6040(%rbp), %rdi       # 8-byte Reload
	movq	-5832(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5840(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -6100(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6080(%rbp), %rdi       # 8-byte Reload
	movq	-6064(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-6000(%rbp), %rcx       # 8-byte Reload
	movq	-5856(%rbp), %r8        # 8-byte Reload
	movl	-6028(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5976(%rbp), %rdi       # 8-byte Reload
	movq	-5832(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5848(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6100(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5832(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-5840(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6100(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-6040(%rbp), %rdi       # 8-byte Reload
	movq	-5824(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-6000(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6101(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6080(%rbp), %rdi       # 8-byte Reload
	movq	-6064(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-6024(%rbp), %rcx       # 8-byte Reload
	movq	-5976(%rbp), %r8        # 8-byte Reload
	movl	-6028(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6016(%rbp), %rdi       # 8-byte Reload
	movq	-5992(%rbp), %rsi       # 8-byte Reload
	movq	-5992(%rbp), %rdx       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-6072(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5976(%rbp), %rdi       # 8-byte Reload
	movq	-5992(%rbp), %rsi       # 8-byte Reload
	movq	-5992(%rbp), %rdx       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6101(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5824(%rbp), %rdi       # 8-byte Reload
	movq	-5824(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	movq	-6000(%rbp), %r8        # 8-byte Reload
	movq	-5992(%rbp), %r9        # 8-byte Reload
	movq	-5984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6101(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4784(%rbp), %rcx       # 8-byte Reload
	movq	-4768(%rbp), %rdx       # 8-byte Reload
	movq	-4728(%rbp), %rsi       # 8-byte Reload
	movq	-2920(%rbp), %rdi       # 8-byte Reload
	movq	-2944(%rbp), %r8        # 8-byte Reload
	movq	-6096(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4464(%rbp)       # 8-byte Spill
	movq	%rdx, -4472(%rbp)       # 8-byte Spill
	movq	%rsi, -4480(%rbp)       # 8-byte Spill
	movq	%rdi, -4488(%rbp)       # 8-byte Spill
	movq	%r8, -4496(%rbp)        # 8-byte Spill
	movq	%r9, -4800(%rbp)        # 8-byte Spill
	jne	.LBB1_16
	jmp	.LBB1_17
.Ltmp96:
.LBB1_20:                               # %.preheader67
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_21 Depth 2
	movq	-5176(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str203, %r8
	leaq	.L.str8, %rsi
	movabsq	$85, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str172, %r10
	leaq	.L.str202, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str201, %r13
	movq	%rax, -6112(%rbp)       # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, -6120(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6128(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6136(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -6144(%rbp)       # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, -6152(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -6160(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -6168(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -6176(%rbp)       # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, -6184(%rbp)       # 8-byte Spill
	movabsq	$87, %rax
	movq	%rax, -6192(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -6200(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -6208(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6216(%rbp)       # 8-byte Spill
	leaq	.L.str197, %rax
	movq	%rax, -6224(%rbp)       # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, -6232(%rbp)       # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, -6240(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -6248(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 87 0                  # feature_extraction.c:87:0
.Ltmp97:
	subq	$16, %rsp
	movq	%rax, -6256(%rbp)       # 8-byte Spill
	movq	-6248(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6264(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6272(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -6280(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6152(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6288(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6256(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6296(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6304(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -6308(%rbp)      # 4-byte Spill
	vmovsd	%xmm0, -6320(%rbp)      # 8-byte Spill
	movq	%r15, -6328(%rbp)       # 8-byte Spill
	movq	%rbx, -6336(%rbp)       # 8-byte Spill
	movq	%r12, -6344(%rbp)       # 8-byte Spill
	movq	%r13, -6352(%rbp)       # 8-byte Spill
	movq	%r11, -6360(%rbp)       # 8-byte Spill
	movq	%r10, -6368(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6336(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	movq	-6136(%rbp), %r8        # 8-byte Reload
	movq	-6280(%rbp), %r9        # 8-byte Reload
	movq	-6240(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6232(%rbp), %r8        # 8-byte Reload
	movq	-6280(%rbp), %r9        # 8-byte Reload
	movq	-6224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6328(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6192(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6368(%rbp), %rdx       # 8-byte Reload
	movq	-6184(%rbp), %rcx       # 8-byte Reload
	movq	-6216(%rbp), %r8        # 8-byte Reload
	movl	-6308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6336(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-4848(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6208(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6112(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4848(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-6328(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6376(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6184(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6192(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6368(%rbp), %rdx       # 8-byte Reload
	movq	-6176(%rbp), %rcx       # 8-byte Reload
	movq	-6200(%rbp), %r8        # 8-byte Reload
	movl	-6308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6376(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6184(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4848(%rbp), %rax       # 8-byte Reload
	movq	-6112(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp98:
	.loc	1 85 0                  # feature_extraction.c:85:0
	movq	-6328(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -6384(%rbp)      # 8-byte Spill
	movq	-6280(%rbp), %rdx       # 8-byte Reload
	movq	-6176(%rbp), %rcx       # 8-byte Reload
	movq	-6288(%rbp), %r8        # 8-byte Reload
	movq	-6272(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6264(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6368(%rbp), %rdx       # 8-byte Reload
	movq	-6120(%rbp), %rcx       # 8-byte Reload
	movq	-6168(%rbp), %r8        # 8-byte Reload
	movl	-6308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6336(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6160(%rbp), %rdx       # 8-byte Reload
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	movq	-6136(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-6112(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-6328(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6392(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6120(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6264(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6368(%rbp), %rdx       # 8-byte Reload
	movq	-6352(%rbp), %rcx       # 8-byte Reload
	movq	-6144(%rbp), %r8        # 8-byte Reload
	movl	-6308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6336(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	movq	-6136(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	-6392(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6120(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6392(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-6328(%rbp), %rdi       # 8-byte Reload
	movq	-6344(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6352(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6400(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6264(%rbp), %rdi       # 8-byte Reload
	movq	-6304(%rbp), %rsi       # 8-byte Reload
	movq	-6368(%rbp), %rdx       # 8-byte Reload
	movq	-6360(%rbp), %rcx       # 8-byte Reload
	movq	-6336(%rbp), %r8        # 8-byte Reload
	movl	-6308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6280(%rbp), %rdi       # 8-byte Reload
	movq	-6288(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6280(%rbp), %rcx       # 8-byte Reload
	movq	-6296(%rbp), %r8        # 8-byte Reload
	movq	-6288(%rbp), %r9        # 8-byte Reload
	movq	-6272(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6288(%rbp), %rax       # 8-byte Reload
	vmovsd	-6320(%rbp), %xmm0      # 8-byte Reload
	movq	%rax, -6408(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6416(%rbp)      # 8-byte Spill
.LBB1_21:                               #   Parent Loop BB1_20 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-6416(%rbp), %xmm0      # 8-byte Reload
	movq	-6408(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str213, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str203, %r9
	movabsq	$3, %r10
	leaq	.L.str197, %r11
	movabsq	$85, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str214, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -6424(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -6432(%rbp)       # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, -6440(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -6448(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6456(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -6464(%rbp)       # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, -6472(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -6480(%rbp)       # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, -6488(%rbp)       # 8-byte Spill
	leaq	.L.str206, %rax
	movq	%rax, -6496(%rbp)       # 8-byte Spill
	leaq	.L.str212, %rax
	movq	%rax, -6504(%rbp)       # 8-byte Spill
	movabsq	$87, %rax
	movq	%rax, -6512(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -6520(%rbp)       # 8-byte Spill
	leaq	.L.str211, %rax
	movq	%rax, -6528(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -6536(%rbp)       # 8-byte Spill
	leaq	.L.str210, %rax
	movq	%rax, -6544(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -6552(%rbp)       # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -6560(%rbp)       # 8-byte Spill
	leaq	.L.str209, %rax
	movq	%rax, -6568(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -6576(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -6584(%rbp)       # 8-byte Spill
	leaq	.L.str208, %rax
	movq	%rax, -6592(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6600(%rbp)       # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, -6608(%rbp)       # 8-byte Spill
	leaq	.L.str172, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -6616(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -6624(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 87 0                  # feature_extraction.c:87:0
.Ltmp99:
	subq	$16, %rsp
	movq	%rax, -6632(%rbp)       # 8-byte Spill
	movq	-6624(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6640(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6648(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -6656(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-6472(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6664(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6632(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6672(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6680(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -6688(%rbp)      # 8-byte Spill
	movq	%r15, -6696(%rbp)       # 8-byte Spill
	movl	%r12d, -6700(%rbp)      # 4-byte Spill
	movq	%r13, -6712(%rbp)       # 8-byte Spill
	vmovsd	%xmm1, -6720(%rbp)      # 8-byte Spill
	movq	%r14, -6728(%rbp)       # 8-byte Spill
	movq	%rbx, -6736(%rbp)       # 8-byte Spill
	movq	%r10, -6744(%rbp)       # 8-byte Spill
	movq	%r11, -6752(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6440(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6680(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6648(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6616(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6424(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6616(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6624(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6632(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6488(%rbp), %r8        # 8-byte Reload
	movq	-6664(%rbp), %r9        # 8-byte Reload
	movq	-6680(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6720(%rbp), %xmm0      # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6456(%rbp), %rcx       # 8-byte Reload
	movq	-6664(%rbp), %r8        # 8-byte Reload
	movq	-6616(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6688(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6616(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6592(%rbp), %rcx       # 8-byte Reload
	movq	-6480(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6400(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6608(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6424(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6424(%rbp), %rax       # 8-byte Reload
	movq	-6400(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6592(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6760(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6568(%rbp), %rcx       # 8-byte Reload
	movq	-6600(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6760(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6592(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-4824(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6584(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6760(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4824(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6664(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6768(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6568(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6576(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6768(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6568(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4824(%rbp), %rax       # 8-byte Reload
	movq	-6760(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -6776(%rbp)      # 8-byte Spill
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6528(%rbp), %rcx       # 8-byte Reload
	movq	-6560(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6384(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6552(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6776(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6544(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6776(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6384(%rbp), %xmm1      # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6528(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6784(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6504(%rbp), %rcx       # 8-byte Reload
	movq	-6536(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6784(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6528(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6784(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6528(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6784(%rbp), %xmm0      # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6504(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -6792(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6512(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6488(%rbp), %rcx       # 8-byte Reload
	movq	-6520(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6792(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6504(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6688(%rbp), %xmm0      # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6688(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-6792(%rbp), %xmm1      # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6488(%rbp), %rcx       # 8-byte Reload
	movq	-6648(%rbp), %r8        # 8-byte Reload
	movq	-6640(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -6800(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp100:
	#DEBUG_VALUE: stddev_temp <- [RBP+-6800]
	.loc	1 85 0                  # feature_extraction.c:85:0
	subq	$16, %rsp
	movq	-6736(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6440(%rbp), %rcx       # 8-byte Reload
	movq	-6480(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rdx       # 8-byte Reload
	movq	-6648(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6424(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6472(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6424(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6440(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -6808(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6736(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6656(%rbp), %rcx       # 8-byte Reload
	movq	-6464(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6448(%rbp), %rdx       # 8-byte Reload
	movq	-6648(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6432(%rbp), %rsi       # 8-byte Reload
	movq	-6808(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6440(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6808(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6712(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6656(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6809(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6736(%rbp), %rdi       # 8-byte Reload
	movq	-6728(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6696(%rbp), %rcx       # 8-byte Reload
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movl	-6700(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6744(%rbp), %rdi       # 8-byte Reload
	movq	-6648(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6752(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6672(%rbp), %rdi       # 8-byte Reload
	movq	-6648(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6680(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6809(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6664(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6664(%rbp), %rcx       # 8-byte Reload
	movq	-6656(%rbp), %r8        # 8-byte Reload
	movq	-6648(%rbp), %r9        # 8-byte Reload
	movq	-6640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6809(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-6808(%rbp), %rcx       # 8-byte Reload
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	movq	%rcx, -6408(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -6416(%rbp)      # 8-byte Spill
	jne	.LBB1_22
	jmp	.LBB1_21
.Ltmp101:
.LBB1_22:                               #   in Loop: Header=BB1_20 Depth=1
	movabsq	$1, %rax
	leaq	.L.str220, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str172, %r8
	movabsq	$3, %r9
	leaq	.L.str222, %r10
	movabsq	$81, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str197, %r14
	leaq	.L.str221, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -6824(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6832(%rbp)       # 8-byte Spill
	leaq	.L.str219, %rax
	movq	%rax, -6840(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -6848(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -6856(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -6864(%rbp)       # 8-byte Spill
	leaq	.L.str196, %rax
	movq	%rax, -6872(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -6880(%rbp)       # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, -6888(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6896(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -6904(%rbp)       # 8-byte Spill
	leaq	.L.str216, %rax
	movq	%rax, -6912(%rbp)       # 8-byte Spill
	leaq	.L.str217, %rax
	movq	%rax, -6920(%rbp)       # 8-byte Spill
	movabsq	$91, %rax
	movq	%rax, -6928(%rbp)       # 8-byte Spill
	leaq	.L.str218, %rax
	movq	%rax, -6936(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -6944(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -6952(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6960(%rbp)       # 8-byte Spill
	leaq	.L.str215, %rax
	movq	%rax, -6968(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -6976(%rbp)       # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -6984(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	vmovsd	.LCPI1_1, %xmm0
	movq	%rax, -6992(%rbp)       # 8-byte Spill
	leaq	.L.str207, %rax
	movq	%rax, -7000(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 91 0                  # feature_extraction.c:91:0
	subq	$16, %rsp
	movq	%rax, -7008(%rbp)       # 8-byte Spill
	movq	-6928(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7016(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -7024(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -7032(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-6968(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7040(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7008(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7048(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -7056(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -7064(%rbp)       # 8-byte Spill
	movl	%r12d, -7068(%rbp)      # 4-byte Spill
	movq	%r13, -7080(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -7088(%rbp)      # 8-byte Spill
	movq	%r14, -7096(%rbp)       # 8-byte Spill
	movq	%rbx, -7104(%rbp)       # 8-byte Spill
	movq	%r10, -7112(%rbp)       # 8-byte Spill
	movq	%r11, -7120(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7088(%rbp), %xmm0      # 8-byte Reload
	movq	-7032(%rbp), %rdx       # 8-byte Reload
	movq	-6896(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-7000(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-6800(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-7088(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-6968(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -7128(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6928(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-6912(%rbp), %rcx       # 8-byte Reload
	movq	-6992(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6976(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6984(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7128(%rbp), %xmm0      # 8-byte Reload
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-6968(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-7128(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -7136(%rbp)      # 8-byte Spill
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-6912(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-6928(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-6920(%rbp), %rcx       # 8-byte Reload
	movq	-6960(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6888(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-5064(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6952(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6112(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-5064(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6824(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7144(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6920(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6928(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-6936(%rbp), %rcx       # 8-byte Reload
	movq	-6944(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-7144(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6920(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7136(%rbp), %xmm0      # 8-byte Reload
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-6912(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7024(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-5064(%rbp), %rax       # 8-byte Reload
	movq	-6112(%rbp), %rcx       # 8-byte Reload
	vmovsd	-7136(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp102:
	.loc	1 81 0                  # feature_extraction.c:81:0
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-6872(%rbp), %rcx       # 8-byte Reload
	movq	-6904(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rdx       # 8-byte Reload
	movq	-7032(%rbp), %rcx       # 8-byte Reload
	movq	-6896(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6888(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6112(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6872(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -7152(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-6840(%rbp), %rcx       # 8-byte Reload
	movq	-6880(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-7152(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6872(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7152(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6832(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6840(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -7156(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-7040(%rbp), %rcx       # 8-byte Reload
	movq	-6856(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-6832(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6848(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7156(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6832(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6840(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7156(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-7080(%rbp), %rdi       # 8-byte Reload
	movq	-6824(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-7040(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7157(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7104(%rbp), %rsi       # 8-byte Reload
	movq	-7096(%rbp), %rdx       # 8-byte Reload
	movq	-7064(%rbp), %rcx       # 8-byte Reload
	movq	-7016(%rbp), %r8        # 8-byte Reload
	movl	-7068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7056(%rbp), %rdi       # 8-byte Reload
	movq	-7032(%rbp), %rsi       # 8-byte Reload
	movq	-7032(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-7112(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7032(%rbp), %rsi       # 8-byte Reload
	movq	-7032(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7157(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6824(%rbp), %rdi       # 8-byte Reload
	movq	-6824(%rbp), %rsi       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-7040(%rbp), %r8        # 8-byte Reload
	movq	-7032(%rbp), %r9        # 8-byte Reload
	movq	-7024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7157(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-7152(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -5176(%rbp)       # 8-byte Spill
	jne	.LBB1_24
	jmp	.LBB1_20
.Ltmp103:
.LBB1_23:                               # %._crit_edge72.thread
	movq	-4816(%rbp), %rax       # 8-byte Reload
	movq	-4808(%rbp), %rcx       # 8-byte Reload
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str227, %r8
	leaq	.L.str8, %rdi
	movabsq	$94, %r9
	leaq	.L.str50, %r10
	leaq	.L.str163, %r11
	leaq	.L.str226, %rbx
	movabsq	$2, %r14
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -7168(%rbp)       # 8-byte Spill
	leaq	.L.str225, %rax
	.loc	1 93 0                  # feature_extraction.c:93:0
	subq	$16, %rsp
	movq	%rax, -7176(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -7184(%rbp)       # 8-byte Spill
	movl	$.L.str163, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7192(%rbp)       # 8-byte Spill
	movl	$.L.str223, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7200(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -7208(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -7216(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -7224(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -7232(%rbp)       # 8-byte Spill
	movq	-7208(%rbp), %rax       # 8-byte Reload
	movl	%esi, -7236(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-7192(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7248(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7200(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7256(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7216(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7264(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7236(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7272(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -7280(%rbp)       # 8-byte Spill
	movq	%r14, -7288(%rbp)       # 8-byte Spill
	movl	%r15d, -7292(%rbp)      # 4-byte Spill
	movq	%rbx, -7304(%rbp)       # 8-byte Spill
	movq	%r12, -7312(%rbp)       # 8-byte Spill
	movq	%r11, -7320(%rbp)       # 8-byte Spill
	movq	%r10, -7328(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str149, (%rcx)
	movl	$.L.str110, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -7336(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -7344(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7344(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7352(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7336(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -7360(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$.L.str168, %eax
	movl	%eax, %r8d
	movq	-7336(%rbp), %rdi       # 8-byte Reload
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7344(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %rcx       # 8-byte Reload
	movq	-7336(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7256(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7368(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7200(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str224, %eax
	movl	%eax, %ecx
	movq	-7232(%rbp), %rdi       # 8-byte Reload
	movq	-7208(%rbp), %rsi       # 8-byte Reload
	movq	-7192(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7376(%rbp)       # 8-byte Spill
	movq	-7216(%rbp), %r8        # 8-byte Reload
	movl	-7236(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str149, (%rcx)
	movl	$.L.str157, %eax
	movl	%eax, %r8d
	movq	-7360(%rbp), %rdi       # 8-byte Reload
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7344(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %rcx       # 8-byte Reload
	movq	-7336(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-7336(%rbp), %rdi       # 8-byte Reload
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7344(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %rcx       # 8-byte Reload
	movq	-7336(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str156, (%rcx)
	movq	-7368(%rbp), %rdi       # 8-byte Reload
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7168(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %rcx       # 8-byte Reload
	movq	-7376(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str225, %eax
	movl	%eax, %ecx
	movl	$93, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-7208(%rbp), %rsi       # 8-byte Reload
	movq	-7192(%rbp), %rdx       # 8-byte Reload
	movl	-7236(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7336(%rbp), %rdi       # 8-byte Reload
	movq	-7352(%rbp), %rsi       # 8-byte Reload
	movq	-7256(%rbp), %rdx       # 8-byte Reload
	movq	-7336(%rbp), %rcx       # 8-byte Reload
	movq	-7200(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7256(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7312(%rbp), %rdi       # 8-byte Reload
	movq	-7280(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7384(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7384(%rbp), %rdx       # 8-byte Reload
	movq	-7248(%rbp), %rcx       # 8-byte Reload
	movq	-7176(%rbp), %r8        # 8-byte Reload
	movq	-7184(%rbp), %r9        # 8-byte Reload
	movq	-7224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp104:
	#DEBUG_VALUE: process_data:scaled_fft_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 94 0                  # feature_extraction.c:94:0
	subq	$16, %rsp
	movq	-7272(%rbp), %rdi       # 8-byte Reload
	movq	-7328(%rbp), %rsi       # 8-byte Reload
	movq	-7320(%rbp), %rdx       # 8-byte Reload
	movq	-7304(%rbp), %rcx       # 8-byte Reload
	movq	-7288(%rbp), %r8        # 8-byte Reload
	movl	-7292(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7248(%rbp), %rdi       # 8-byte Reload
	movq	-7184(%rbp), %rsi       # 8-byte Reload
	movq	-7184(%rbp), %rdx       # 8-byte Reload
	movq	-7248(%rbp), %rcx       # 8-byte Reload
	movq	-7264(%rbp), %r8        # 8-byte Reload
	movq	-7184(%rbp), %r9        # 8-byte Reload
	movq	-7224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7384(%rbp), %rcx       # 8-byte Reload
	movq	-7168(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7392(%rbp)       # 8-byte Spill
	movq	%rdx, -7400(%rbp)       # 8-byte Spill
	jmp	.LBB1_31
.Ltmp105:
.LBB1_24:                               # %._crit_edge72
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str229, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str232, %r8
	movabsq	$3, %r9
	leaq	.L.str231, %r10
	movabsq	$94, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str222, %r14
	leaq	.L.str230, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -7408(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7416(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -7424(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7432(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -7440(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -7448(%rbp)       # 8-byte Spill
	leaq	.L.str228, %rax
	.loc	1 93 0                  # feature_extraction.c:93:0
	subq	$16, %rsp
	movq	%rax, -7456(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -7464(%rbp)       # 8-byte Spill
	movl	$.L.str222, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7472(%rbp)       # 8-byte Spill
	movl	$.L.str228, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7480(%rbp)       # 8-byte Spill
	movl	$93, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7488(%rbp)       # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7496(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -7504(%rbp)       # 8-byte Spill
	movq	-7488(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7512(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-7504(%rbp), %rax       # 8-byte Reload
	movl	%esi, -7516(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-7472(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7528(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7480(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7536(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7496(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7544(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7516(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7552(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -7560(%rbp)       # 8-byte Spill
	movq	%r14, -7568(%rbp)       # 8-byte Spill
	movq	%r15, -7576(%rbp)       # 8-byte Spill
	movl	%r12d, -7580(%rbp)      # 4-byte Spill
	movq	%rbx, -7592(%rbp)       # 8-byte Spill
	movq	%r11, -7600(%rbp)       # 8-byte Spill
	movq	%r10, -7608(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str168, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-5088(%rbp), %rdx       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5088(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7560(%rbp), %rdi       # 8-byte Reload
	movq	-7448(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7616(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7456(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:scaled_fft_data <- undef
.Ltmp106:
	#DEBUG_VALUE: channel <- 0
	.loc	1 94 0                  # feature_extraction.c:94:0
	subq	$16, %rsp
	movq	-7600(%rbp), %rdi       # 8-byte Reload
	movq	-7592(%rbp), %rsi       # 8-byte Reload
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	-7528(%rbp), %rcx       # 8-byte Reload
	movq	-7440(%rbp), %r8        # 8-byte Reload
	movl	-7580(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7512(%rbp), %rdi       # 8-byte Reload
	movq	-7416(%rbp), %rsi       # 8-byte Reload
	movq	-7408(%rbp), %rdx       # 8-byte Reload
	movq	-7408(%rbp), %rcx       # 8-byte Reload
	movq	-7432(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7536(%rbp), %rdi       # 8-byte Reload
	movq	-7416(%rbp), %rsi       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7424(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7560(%rbp), %rdi       # 8-byte Reload
	movq	-7536(%rbp), %rsi       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7528(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7617(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7600(%rbp), %rdi       # 8-byte Reload
	movq	-7592(%rbp), %rsi       # 8-byte Reload
	movq	-7568(%rbp), %rdx       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7512(%rbp), %r8        # 8-byte Reload
	movl	-7580(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7552(%rbp), %rdi       # 8-byte Reload
	movq	-7408(%rbp), %rsi       # 8-byte Reload
	movq	-7408(%rbp), %rdx       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7608(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7512(%rbp), %rdi       # 8-byte Reload
	movq	-7408(%rbp), %rsi       # 8-byte Reload
	movq	-7408(%rbp), %rdx       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7544(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7617(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7536(%rbp), %rdi       # 8-byte Reload
	movq	-7536(%rbp), %rsi       # 8-byte Reload
	movq	-7536(%rbp), %rcx       # 8-byte Reload
	movq	-7528(%rbp), %r8        # 8-byte Reload
	movq	-7408(%rbp), %r9        # 8-byte Reload
	movq	-7464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7617(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-7408(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -7632(%rbp)       # 8-byte Spill
	jne	.LBB1_26
.Ltmp107:
# BB#25:                                # %._crit_edge66.thread
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str237, %r8
	leaq	.L.str8, %rdx
	movabsq	$107, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str232, %r9
	leaq	.L.str236, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str235, %r12
	.loc	1 106 0                 # feature_extraction.c:106:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -7640(%rbp)       # 8-byte Spill
	movl	$.L.str232, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7648(%rbp)       # 8-byte Spill
	movl	$.L.str233, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7656(%rbp)       # 8-byte Spill
	movl	$106, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7664(%rbp)       # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7672(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -7680(%rbp)       # 8-byte Spill
	movq	-7664(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7688(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -7692(%rbp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7704(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7656(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7712(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7672(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7720(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7692(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7728(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -7736(%rbp)       # 8-byte Spill
	movl	%ebx, -7740(%rbp)       # 4-byte Spill
	movq	%r15, -7752(%rbp)       # 8-byte Spill
	movq	%r12, -7760(%rbp)       # 8-byte Spill
	movq	%r13, -7768(%rbp)       # 8-byte Spill
	movq	%r11, -7776(%rbp)       # 8-byte Spill
	movq	%r10, -7784(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %edx
	movl	$2, %r9d
	movl	%r9d, %edi
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %r8d
	xorl	%r9d, %r9d
	movl	%r9d, %r10d
	movq	%rsi, -7792(%rbp)       # 8-byte Spill
	movq	%rdx, -7800(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	%rcx, -7808(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7800(%rbp), %r11       # 8-byte Reload
	movq	%r8, -7816(%rbp)        # 8-byte Spill
	movq	%r11, %r8
	movq	%r10, %r9
	movq	%r10, -7824(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7816(%rbp), %rdi       # 8-byte Reload
	movq	-7792(%rbp), %rsi       # 8-byte Reload
	movq	-7808(%rbp), %rdx       # 8-byte Reload
	movq	-7816(%rbp), %rcx       # 8-byte Reload
	movq	-7800(%rbp), %r8        # 8-byte Reload
	movq	-7824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	%eax, %eax
	movl	%eax, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	-7792(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -7832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-7816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7840(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7656(%rbp), %r8        # 8-byte Reload
	movq	-7824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str234, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-7664(%rbp), %rdi       # 8-byte Reload
	movq	-7768(%rbp), %rsi       # 8-byte Reload
	movq	-7648(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -7848(%rbp)       # 8-byte Spill
	movl	-7692(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7816(%rbp), %rdi       # 8-byte Reload
	movq	-7792(%rbp), %rsi       # 8-byte Reload
	movq	-7840(%rbp), %rdx       # 8-byte Reload
	movq	-7816(%rbp), %rcx       # 8-byte Reload
	movq	-7656(%rbp), %r8        # 8-byte Reload
	movq	-7824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$64, %eax
	movl	%eax, %ecx
	movq	-7832(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rsi
	movq	-7840(%rbp), %rdx       # 8-byte Reload
	movq	-7816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7856(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7848(%rbp), %r8        # 8-byte Reload
	movq	-7824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-7664(%rbp), %rdi       # 8-byte Reload
	movq	-7768(%rbp), %rsi       # 8-byte Reload
	movq	-7648(%rbp), %rdx       # 8-byte Reload
	movl	-7692(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7816(%rbp), %rdi       # 8-byte Reload
	movq	-7856(%rbp), %rsi       # 8-byte Reload
	movq	-7840(%rbp), %rdx       # 8-byte Reload
	movq	-7816(%rbp), %rcx       # 8-byte Reload
	movq	-7848(%rbp), %r8        # 8-byte Reload
	movq	-7824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7840(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-7736(%rbp), %rdi       # 8-byte Reload
	movq	-7752(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -7864(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7864(%rbp), %rdx       # 8-byte Reload
	movq	-7680(%rbp), %rcx       # 8-byte Reload
	movq	-7760(%rbp), %r8        # 8-byte Reload
	movq	-7712(%rbp), %r9        # 8-byte Reload
	movq	-7704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp108:
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- undef
	#DEBUG_VALUE: i <- 0
	.loc	1 107 0                 # feature_extraction.c:107:0
	subq	$16, %rsp
	movq	-7688(%rbp), %rdi       # 8-byte Reload
	movq	-7640(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7784(%rbp), %rcx       # 8-byte Reload
	movq	-7776(%rbp), %r8        # 8-byte Reload
	movl	-7740(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7680(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7712(%rbp), %rdx       # 8-byte Reload
	movq	-7680(%rbp), %rcx       # 8-byte Reload
	movq	-7720(%rbp), %r8        # 8-byte Reload
	movq	-7712(%rbp), %r9        # 8-byte Reload
	movq	-7704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7864(%rbp), %rcx       # 8-byte Reload
	movq	-7840(%rbp), %rdx       # 8-byte Reload
	movq	-5080(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -7872(%rbp)       # 8-byte Spill
	movq	%rdx, -7880(%rbp)       # 8-byte Spill
	movq	%rsi, -7888(%rbp)       # 8-byte Spill
	jmp	.LBB1_37
.Ltmp109:
.LBB1_26:                               # %.preheader63
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_27 Depth 2
	movq	-7632(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str248, %r8
	leaq	.L.str8, %rsi
	movabsq	$96, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str231, %r10
	leaq	.L.str247, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str246, %r13
	movq	%rax, -7896(%rbp)       # 8-byte Spill
	leaq	.L.str245, %rax
	movq	%rax, -7904(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7912(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7920(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -7928(%rbp)       # 8-byte Spill
	leaq	.L.str238, %rax
	movq	%rax, -7936(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -7944(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -7952(%rbp)       # 8-byte Spill
	leaq	.L.str244, %rax
	movq	%rax, -7960(%rbp)       # 8-byte Spill
	leaq	.L.str166, %rax
	movq	%rax, -7968(%rbp)       # 8-byte Spill
	movabsq	$100, %rax
	movq	%rax, -7976(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -7984(%rbp)       # 8-byte Spill
	leaq	.L.str243, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -7992(%rbp)       # 8-byte Spill
	leaq	.L.str242, %rax
	movq	%rax, -8000(%rbp)       # 8-byte Spill
	movabsq	$98, %rax
	movq	%rax, -8008(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -8016(%rbp)       # 8-byte Spill
	leaq	.L.str241, %rax
	movq	%rax, -8024(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -8032(%rbp)       # 8-byte Spill
	leaq	.L.str164, %rax
	movq	%rax, -8040(%rbp)       # 8-byte Spill
	leaq	.L.str240, %rax
	movq	%rax, -8048(%rbp)       # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, -8056(%rbp)       # 8-byte Spill
	leaq	.L.str222, %rax
	movq	%rax, -8064(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -8072(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 98 0                  # feature_extraction.c:98:0
.Ltmp110:
	subq	$16, %rsp
	movq	%rax, -8080(%rbp)       # 8-byte Spill
	movq	-8072(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -8088(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -8096(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -8104(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7936(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8112(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8080(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8120(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8128(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -8136(%rbp)       # 8-byte Spill
	movq	%r12, -8144(%rbp)       # 8-byte Spill
	movl	%r14d, -8148(%rbp)      # 4-byte Spill
	movq	%r13, -8160(%rbp)       # 8-byte Spill
	vmovsd	%xmm0, -8168(%rbp)      # 8-byte Spill
	movq	%rbx, -8176(%rbp)       # 8-byte Spill
	movq	%r10, -8184(%rbp)       # 8-byte Spill
	movq	%r11, -8192(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	-8112(%rbp), %rcx       # 8-byte Reload
	movq	-7920(%rbp), %r8        # 8-byte Reload
	movq	-8104(%rbp), %r9        # 8-byte Reload
	movq	-8064(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-8056(%rbp), %r8        # 8-byte Reload
	movq	-8104(%rbp), %r9        # 8-byte Reload
	movq	-8048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7936(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8048(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-8024(%rbp), %rcx       # 8-byte Reload
	movq	-7984(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7936(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-5064(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-8040(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7896(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-5064(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8104(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8200(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8024(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-8000(%rbp), %rcx       # 8-byte Reload
	movq	-8032(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-8200(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-8024(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5064(%rbp), %rax       # 8-byte Reload
	movq	-7896(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8208(%rbp)      # 8-byte Spill
	movq	-8104(%rbp), %rdx       # 8-byte Reload
	movq	-8000(%rbp), %rcx       # 8-byte Reload
	movq	-8112(%rbp), %r8        # 8-byte Reload
	movq	-8096(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-7992(%rbp), %rcx       # 8-byte Reload
	movq	-8016(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8168(%rbp), %xmm0      # 8-byte Reload
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	-7920(%rbp), %rcx       # 8-byte Reload
	movq	-8112(%rbp), %r8        # 8-byte Reload
	movq	-8096(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8208(%rbp), %xmm0      # 8-byte Reload
	movq	-8104(%rbp), %rdx       # 8-byte Reload
	movq	-8000(%rbp), %rcx       # 8-byte Reload
	movq	-8112(%rbp), %r8        # 8-byte Reload
	movq	-8096(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8208(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8168(%rbp), %xmm1      # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	.loc	1 100 0                 # feature_extraction.c:100:0
.Ltmp111:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8104(%rbp), %rsi       # 8-byte Reload
	movq	-8104(%rbp), %r8        # 8-byte Reload
	movb	%cl, -8209(%rbp)        # 1-byte Spill
	movq	%r8, %rcx
	movq	-7992(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7976(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-7960(%rbp), %rcx       # 8-byte Reload
	movq	-7984(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7936(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-4848(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7968(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7896(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-4848(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
.Ltmp112:
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -8224(%rbp)       # 8-byte Spill
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7960(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8088(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-7904(%rbp), %rcx       # 8-byte Reload
	movq	-7952(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7944(%rbp), %rdx       # 8-byte Reload
	movq	-8112(%rbp), %rcx       # 8-byte Reload
	movq	-7920(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7936(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rcx     # imm = 0x2F00000000
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	imulq	%rcx, %rdx
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -8232(%rbp)       # 8-byte Spill
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7904(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8088(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-8160(%rbp), %rcx       # 8-byte Reload
	movq	-7928(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8176(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-7912(%rbp), %rdx       # 8-byte Reload
	movq	-8112(%rbp), %rcx       # 8-byte Reload
	movq	-7920(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	-8232(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-7904(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8232(%rbp), %rcx       # 8-byte Reload
	sarq	$32, %rcx
	subq	$16, %rsp
	movq	-8136(%rbp), %rdi       # 8-byte Reload
	movq	-8144(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8104(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -8240(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-8160(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8088(%rbp), %rdi       # 8-byte Reload
	movq	-8128(%rbp), %rsi       # 8-byte Reload
	movq	-8184(%rbp), %rdx       # 8-byte Reload
	movq	-8192(%rbp), %rcx       # 8-byte Reload
	movq	-8176(%rbp), %r8        # 8-byte Reload
	movl	-8148(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8104(%rbp), %rdi       # 8-byte Reload
	movq	-8112(%rbp), %rsi       # 8-byte Reload
	movq	-8112(%rbp), %rdx       # 8-byte Reload
	movq	-8104(%rbp), %rcx       # 8-byte Reload
	movq	-8120(%rbp), %r8        # 8-byte Reload
	movq	-8112(%rbp), %r9        # 8-byte Reload
	movq	-8096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8112(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -8248(%rbp)       # 8-byte Spill
.LBB1_27:                               #   Parent Loop BB1_26 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-8248(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str243, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251, %r9
	movabsq	$3, %r10
	leaq	.L.str253, %r11
	movabsq	$98, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str248, %r15
	leaq	.L.str252, %r12
	movl	$1, %r13d
	movq	%rax, -8256(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8264(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8272(%rbp)       # 8-byte Spill
	leaq	.L.str249, %rax
	movq	%rax, -8280(%rbp)       # 8-byte Spill
	leaq	.L.str231, %rax
	movq	%rax, -8288(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8296(%rbp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, -8304(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -8312(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 98 0                  # feature_extraction.c:98:0
.Ltmp113:
	subq	$16, %rsp
	movq	%rax, -8320(%rbp)       # 8-byte Spill
	movq	-8312(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -8328(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -8336(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -8344(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-8280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8352(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8320(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8360(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8368(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8376(%rbp)       # 8-byte Spill
	movq	%rbx, -8384(%rbp)       # 8-byte Spill
	movq	%r15, -8392(%rbp)       # 8-byte Spill
	movq	%r12, -8400(%rbp)       # 8-byte Spill
	movl	%r13d, -8404(%rbp)      # 4-byte Spill
	movq	%r11, -8416(%rbp)       # 8-byte Spill
	movq	%r10, -8424(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8328(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8344(%rbp), %rdx       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8304(%rbp), %r8        # 8-byte Reload
	movq	-8352(%rbp), %r9        # 8-byte Reload
	movq	-8368(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8352(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8344(%rbp), %rdx       # 8-byte Reload
	movq	-8344(%rbp), %rcx       # 8-byte Reload
	movq	-8296(%rbp), %r8        # 8-byte Reload
	movq	-8352(%rbp), %r9        # 8-byte Reload
	movq	-8288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8264(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rdx       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8280(%rbp), %r8        # 8-byte Reload
	movq	-8344(%rbp), %r9        # 8-byte Reload
	movq	-8288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8384(%rbp), %rdi       # 8-byte Reload
	movq	-8376(%rbp), %rsi       # 8-byte Reload
	movq	-8392(%rbp), %rdx       # 8-byte Reload
	movq	-8400(%rbp), %rcx       # 8-byte Reload
	movq	-8328(%rbp), %r8        # 8-byte Reload
	movl	-8404(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8424(%rbp), %rdi       # 8-byte Reload
	movq	-8344(%rbp), %rsi       # 8-byte Reload
	movq	-8344(%rbp), %rdx       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8416(%rbp), %r8        # 8-byte Reload
	movq	-8344(%rbp), %r9        # 8-byte Reload
	movq	-8336(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8328(%rbp), %rdi       # 8-byte Reload
	movq	-8344(%rbp), %rsi       # 8-byte Reload
	movq	-8344(%rbp), %rdx       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8368(%rbp), %r8        # 8-byte Reload
	movq	-8344(%rbp), %r9        # 8-byte Reload
	movq	-8336(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8209(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-8352(%rbp), %rdi       # 8-byte Reload
	movq	-8352(%rbp), %rsi       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8360(%rbp), %r8        # 8-byte Reload
	movq	-8344(%rbp), %r9        # 8-byte Reload
	movq	-8336(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8209(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_28
	jmp	.LBB1_29
.LBB1_28:                               #   in Loop: Header=BB1_27 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str251, %r8
	leaq	.L.str8, %rdx
	movabsq	$102, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str253, %r9
	leaq	.L.str262, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str259, %r15
	leaq	.L.str260, %r12
	movabsq	$100, %r13
	movq	%rax, -8432(%rbp)       # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, -8440(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -8448(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8456(%rbp)       # 8-byte Spill
	leaq	.L.str228, %rax
	movq	%rax, -8464(%rbp)       # 8-byte Spill
	leaq	.L.str254, %rax
	movq	%rax, -8472(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -8480(%rbp)       # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, -8488(%rbp)       # 8-byte Spill
	leaq	.L.str242, %rax
	movq	%rax, -8496(%rbp)       # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -8504(%rbp)       # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, -8512(%rbp)       # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, -8520(%rbp)       # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -8528(%rbp)       # 8-byte Spill
	leaq	.L.str244, %rax
	movq	%rax, -8536(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -8544(%rbp)       # 8-byte Spill
	leaq	.L.str255, %rax
	movq	%rax, -8552(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -8560(%rbp)       # 8-byte Spill
	leaq	.L.str249, %rax
	movq	%rax, -8568(%rbp)       # 8-byte Spill
	leaq	.L.str246, %rax
	movq	%rax, -8576(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 100 0                 # feature_extraction.c:100:0
.Ltmp114:
	subq	$16, %rsp
	movq	%rdi, -8584(%rbp)       # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -8592(%rbp)       # 8-byte Spill
	movq	%rdx, -8600(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, -8608(%rbp)       # 8-byte Spill
	movq	-8472(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8616(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8608(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8624(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8632(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8640(%rbp)       # 8-byte Spill
	movl	%ebx, -8644(%rbp)       # 4-byte Spill
	movq	%r15, -8656(%rbp)       # 8-byte Spill
	movq	%r13, -8664(%rbp)       # 8-byte Spill
	movq	%r12, -8672(%rbp)       # 8-byte Spill
	movq	%r11, -8680(%rbp)       # 8-byte Spill
	movq	%r10, -8688(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8240(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8576(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8568(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8256(%rbp), %rax       # 8-byte Reload
	movq	-8240(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8472(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8696(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8552(%rbp), %rcx       # 8-byte Reload
	movq	-8480(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8696(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8472(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-4824(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8560(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8696(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-4824(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8432(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8704(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8552(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8512(%rbp), %rcx       # 8-byte Reload
	movq	-8544(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8704(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8552(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4824(%rbp), %rax       # 8-byte Reload
	movq	-8696(%rbp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8712(%rbp)      # 8-byte Spill
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8512(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8520(%rbp), %rcx       # 8-byte Reload
	movq	-8544(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8536(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8224(%rbp), %rax       # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -8720(%rbp)      # 8-byte Spill
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8520(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8488(%rbp), %rcx       # 8-byte Reload
	movq	-8528(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8720(%rbp), %xmm0      # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8520(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8712(%rbp), %xmm0      # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8512(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8712(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8720(%rbp), %xmm1      # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8488(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -8728(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8656(%rbp), %rcx       # 8-byte Reload
	movq	-8504(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8208(%rbp), %xmm0      # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8496(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8728(%rbp), %xmm0      # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8488(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-8728(%rbp), %xmm0      # 8-byte Reload
	vmovsd	-8208(%rbp), %xmm1      # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8656(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm2, -8736(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8672(%rbp), %rcx       # 8-byte Reload
	movq	-8480(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8696(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8472(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8464(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8696(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-7616(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8456(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-8432(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8744(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8672(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8664(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8448(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8680(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	movq	-8744(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8672(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8640(%rbp), %rsi       # 8-byte Reload
	vmovsd	-8736(%rbp), %xmm0      # 8-byte Reload
	movq	-8432(%rbp), %rdx       # 8-byte Reload
	movq	-8656(%rbp), %rcx       # 8-byte Reload
	movq	-8616(%rbp), %r8        # 8-byte Reload
	movq	-8600(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-7616(%rbp), %rax       # 8-byte Reload
	movq	-8696(%rbp), %rcx       # 8-byte Reload
	vmovsd	-8736(%rbp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	1 102 0                 # feature_extraction.c:102:0
	subq	$16, %rsp
	movq	-8584(%rbp), %rdi       # 8-byte Reload
	movq	-8592(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8688(%rbp), %rcx       # 8-byte Reload
	movq	-8680(%rbp), %r8        # 8-byte Reload
	movl	-8644(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8432(%rbp), %rdi       # 8-byte Reload
	movq	-8616(%rbp), %rsi       # 8-byte Reload
	movq	-8616(%rbp), %rdx       # 8-byte Reload
	movq	-8432(%rbp), %rcx       # 8-byte Reload
	movq	-8624(%rbp), %r8        # 8-byte Reload
	movq	-8616(%rbp), %r9        # 8-byte Reload
	movq	-8600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp115:
.LBB1_29:                               #   in Loop: Header=BB1_27 Depth=2
	movabsq	$1, %rax
	leaq	.L.str263, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str248, %r8
	movabsq	$3, %r9
	leaq	.L.str240, %r10
	movabsq	$96, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str251, %r14
	leaq	.L.str264, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -8752(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8760(%rbp)       # 8-byte Spill
	leaq	.L.str250, %rax
	movq	%rax, -8768(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -8776(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8784(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -8792(%rbp)       # 8-byte Spill
	leaq	.L.str249, %rax
	movq	%rax, -8800(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	%rdi, -8808(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -8816(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -8824(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -8832(%rbp)       # 8-byte Spill
	movq	-8768(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8840(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8832(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8848(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8856(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8864(%rbp)       # 8-byte Spill
	movq	%r15, -8872(%rbp)       # 8-byte Spill
	movl	%r12d, -8876(%rbp)      # 4-byte Spill
	movq	%r13, -8888(%rbp)       # 8-byte Spill
	movq	%rbx, -8896(%rbp)       # 8-byte Spill
	movq	%r11, -8904(%rbp)       # 8-byte Spill
	movq	%r10, -8912(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8808(%rbp), %rdi       # 8-byte Reload
	movq	-8760(%rbp), %rsi       # 8-byte Reload
	movq	-8752(%rbp), %rdx       # 8-byte Reload
	movq	-8824(%rbp), %rcx       # 8-byte Reload
	movq	-8784(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8752(%rbp), %rdi       # 8-byte Reload
	movq	-8760(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rdx       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8800(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8256(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-8888(%rbp), %rdi       # 8-byte Reload
	movq	-8760(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8768(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8920(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8904(%rbp), %rdi       # 8-byte Reload
	movq	-8896(%rbp), %rsi       # 8-byte Reload
	movq	-8864(%rbp), %rdx       # 8-byte Reload
	movq	-8840(%rbp), %rcx       # 8-byte Reload
	movq	-8792(%rbp), %r8        # 8-byte Reload
	movl	-8876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8808(%rbp), %rdi       # 8-byte Reload
	movq	-8760(%rbp), %rsi       # 8-byte Reload
	movq	-8776(%rbp), %rdx       # 8-byte Reload
	movq	-8824(%rbp), %rcx       # 8-byte Reload
	movq	-8784(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8752(%rbp), %rdi       # 8-byte Reload
	movq	-8760(%rbp), %rsi       # 8-byte Reload
	movq	-8920(%rbp), %rdx       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8768(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8920(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8888(%rbp), %rdi       # 8-byte Reload
	movq	-8752(%rbp), %rsi       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8840(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -8921(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8904(%rbp), %rdi       # 8-byte Reload
	movq	-8896(%rbp), %rsi       # 8-byte Reload
	movq	-8864(%rbp), %rdx       # 8-byte Reload
	movq	-8872(%rbp), %rcx       # 8-byte Reload
	movq	-8808(%rbp), %r8        # 8-byte Reload
	movl	-8876(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8856(%rbp), %rdi       # 8-byte Reload
	movq	-8824(%rbp), %rsi       # 8-byte Reload
	movq	-8824(%rbp), %rdx       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8912(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8808(%rbp), %rdi       # 8-byte Reload
	movq	-8824(%rbp), %rsi       # 8-byte Reload
	movq	-8824(%rbp), %rdx       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8848(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8921(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8752(%rbp), %rdi       # 8-byte Reload
	movq	-8752(%rbp), %rsi       # 8-byte Reload
	movq	-8752(%rbp), %rcx       # 8-byte Reload
	movq	-8840(%rbp), %r8        # 8-byte Reload
	movq	-8824(%rbp), %r9        # 8-byte Reload
	movq	-8816(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8921(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-8920(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -8248(%rbp)       # 8-byte Spill
	jne	.LBB1_30
	jmp	.LBB1_27
.Ltmp116:
.LBB1_30:                               #   in Loop: Header=BB1_26 Depth=1
	movabsq	$1, %rax
	leaq	.L.str266, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str231, %r8
	movabsq	$3, %r9
	leaq	.L.str227, %r10
	movabsq	$94, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str240, %r14
	leaq	.L.str267, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -8936(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -8944(%rbp)       # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, -8952(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -8960(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -8968(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8976(%rbp)       # 8-byte Spill
	leaq	.L.str239, %rax
	movq	%rax, -8984(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -8992(%rbp)       # 8-byte Spill
	leaq	.L.str238, %rax
	movq	%rax, -9000(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9008(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 94 0                  # feature_extraction.c:94:0
	subq	$16, %rsp
	movq	%rdi, -9016(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -9024(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -9032(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -9040(%rbp)       # 8-byte Spill
	movq	-8984(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9048(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9040(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9056(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -9064(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -9072(%rbp)       # 8-byte Spill
	movq	%r15, -9080(%rbp)       # 8-byte Spill
	movl	%r12d, -9084(%rbp)      # 4-byte Spill
	movq	%r13, -9096(%rbp)       # 8-byte Spill
	movq	%rbx, -9104(%rbp)       # 8-byte Spill
	movq	%r11, -9112(%rbp)       # 8-byte Spill
	movq	%r10, -9120(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9016(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rdx       # 8-byte Reload
	movq	-9032(%rbp), %rcx       # 8-byte Reload
	movq	-9008(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8936(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	-7896(%rbp), %rdx       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-9000(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7896(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-9096(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-8984(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9128(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9112(%rbp), %rdi       # 8-byte Reload
	movq	-9104(%rbp), %rsi       # 8-byte Reload
	movq	-9072(%rbp), %rdx       # 8-byte Reload
	movq	-8952(%rbp), %rcx       # 8-byte Reload
	movq	-8992(%rbp), %r8        # 8-byte Reload
	movl	-9084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8936(%rbp), %rdi       # 8-byte Reload
	movq	-8976(%rbp), %rsi       # 8-byte Reload
	movq	-9128(%rbp), %rdx       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-8984(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9128(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9096(%rbp), %rdi       # 8-byte Reload
	movq	-8944(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-8952(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -9132(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9112(%rbp), %rdi       # 8-byte Reload
	movq	-9104(%rbp), %rsi       # 8-byte Reload
	movq	-9072(%rbp), %rdx       # 8-byte Reload
	movq	-9048(%rbp), %rcx       # 8-byte Reload
	movq	-8968(%rbp), %r8        # 8-byte Reload
	movl	-9084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-9016(%rbp), %rdi       # 8-byte Reload
	movq	-8944(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-8960(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9132(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-8936(%rbp), %rdi       # 8-byte Reload
	movq	-8944(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-8952(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9132(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-9096(%rbp), %rdi       # 8-byte Reload
	movq	-8936(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-9048(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -9133(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9112(%rbp), %rdi       # 8-byte Reload
	movq	-9104(%rbp), %rsi       # 8-byte Reload
	movq	-9072(%rbp), %rdx       # 8-byte Reload
	movq	-9080(%rbp), %rcx       # 8-byte Reload
	movq	-9016(%rbp), %r8        # 8-byte Reload
	movl	-9084(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9064(%rbp), %rdi       # 8-byte Reload
	movq	-9032(%rbp), %rsi       # 8-byte Reload
	movq	-9032(%rbp), %rdx       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-9120(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9016(%rbp), %rdi       # 8-byte Reload
	movq	-9032(%rbp), %rsi       # 8-byte Reload
	movq	-9032(%rbp), %rdx       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-9056(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9133(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8936(%rbp), %rdi       # 8-byte Reload
	movq	-8936(%rbp), %rsi       # 8-byte Reload
	movq	-8936(%rbp), %rcx       # 8-byte Reload
	movq	-9048(%rbp), %r8        # 8-byte Reload
	movq	-9032(%rbp), %r9        # 8-byte Reload
	movq	-9024(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9133(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-9128(%rbp), %rcx       # 8-byte Reload
	movq	-7616(%rbp), %rdx       # 8-byte Reload
	movq	-5080(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -7632(%rbp)       # 8-byte Spill
	movq	%rdx, -7392(%rbp)       # 8-byte Spill
	movq	%rsi, -7400(%rbp)       # 8-byte Spill
	jne	.LBB1_31
	jmp	.LBB1_26
.Ltmp117:
.LBB1_31:                               # %._crit_edge66
	movq	-7400(%rbp), %rax       # 8-byte Reload
	movq	-7392(%rbp), %rcx       # 8-byte Reload
	movabsq	$0, %rdx
	movabsq	$1, %rsi
	leaq	.L.str273, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str237, %r10
	movabsq	$3, %r11
	leaq	.L.str275, %rbx
	movabsq	$107, %r14
	leaq	.L.str50, %r15
	leaq	.L.str227, %r12
	leaq	.L.str274, %r13
	movq	%rsi, -9144(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -9152(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -9160(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9168(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9176(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9184(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -9192(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -9200(%rbp)       # 8-byte Spill
	leaq	.L.str272, %rax
	.loc	1 106 0                 # feature_extraction.c:106:0
	subq	$16, %rsp
	movq	%rax, -9208(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%esi, -9212(%rbp)       # 4-byte Spill
	movl	$.L.str227, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -9224(%rbp)       # 8-byte Spill
	movl	$.L.str268, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -9232(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -9240(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -9248(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -9256(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -9264(%rbp)       # 8-byte Spill
	movq	-9240(%rbp), %rax       # 8-byte Reload
	movl	%esi, -9268(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-9224(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -9280(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-9232(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9288(%rbp)       # 8-byte Spill
.Ltmp118:
	#DEBUG_VALUE: process_data:scaled_fft_data <- [RBP+-9288]
	#DEBUG_VALUE: process_data:scaled_fft_data <- [RBP+-9288]
	movq	%rax, %rcx
	movq	-9248(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9296(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-9268(%rbp), %eax       # 4-byte Reload
	movq	%r9, -9304(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -9312(%rbp)       # 8-byte Spill
	movq	%r14, -9320(%rbp)       # 8-byte Spill
	movq	%r15, -9328(%rbp)       # 8-byte Spill
	movq	%r12, -9336(%rbp)       # 8-byte Spill
	movq	%rbx, -9344(%rbp)       # 8-byte Spill
	movq	%r11, -9352(%rbp)       # 8-byte Spill
	movq	%r10, -9360(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str240, (%rcx)
	movl	$.L.str228, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -9368(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -9376(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-9376(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -9384(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-9368(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -9392(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$.L.str225, %eax
	movl	%eax, %r8d
	movq	-9368(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9376(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9288(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9400(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9232(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str269, %eax
	movl	%eax, %ecx
	movq	-9264(%rbp), %rdi       # 8-byte Reload
	movq	-9240(%rbp), %rsi       # 8-byte Reload
	movq	-9224(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -9408(%rbp)       # 8-byte Spill
	movq	-9248(%rbp), %r8        # 8-byte Reload
	movl	-9268(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str240, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-9392(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9376(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movl	$.L.str224, %eax
	movl	%eax, %r8d
	movq	-9368(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9376(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9368(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str163, (%rcx)
	movq	-9400(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9152(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9408(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str270, %eax
	movl	%eax, %ecx
	movl	$106, %eax
	movl	%eax, %edx
	movl	$12, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	-9240(%rbp), %rsi       # 8-byte Reload
	movq	-9224(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -9416(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -9424(%rbp)       # 8-byte Spill
	movl	-9268(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %edx
	movl	$32, %r9d
	movl	%r9d, %esi
	movq	-9392(%rbp), %rdi       # 8-byte Reload
	movq	%rsi, -9432(%rbp)       # 8-byte Spill
	movq	%rdx, -9440(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-9368(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9448(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9440(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9368(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9448(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9440(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	%eax, %eax
	movl	%eax, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movq	-9400(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-9368(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -9456(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-9424(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str271, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9240(%rbp), %rsi       # 8-byte Reload
	movq	-9224(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -9464(%rbp)       # 8-byte Spill
	movl	-9268(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9368(%rbp), %rdi       # 8-byte Reload
	movq	-9432(%rbp), %rsi       # 8-byte Reload
	movq	-9456(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9424(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9400(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9456(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9464(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str272, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-9416(%rbp), %rdi       # 8-byte Reload
	movq	-9240(%rbp), %rsi       # 8-byte Reload
	movq	-9224(%rbp), %rdx       # 8-byte Reload
	movl	-9268(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-9368(%rbp), %rdi       # 8-byte Reload
	movq	-9384(%rbp), %rsi       # 8-byte Reload
	movq	-9456(%rbp), %rdx       # 8-byte Reload
	movq	-9368(%rbp), %rcx       # 8-byte Reload
	movq	-9464(%rbp), %r8        # 8-byte Reload
	movq	-9376(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9456(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-9160(%rbp), %rdi       # 8-byte Reload
	movq	-9200(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -9472(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-9472(%rbp), %rdx       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9208(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- undef
.Ltmp119:
	#DEBUG_VALUE: i <- 0
	.loc	1 107 0                 # feature_extraction.c:107:0
	subq	$16, %rsp
	movq	-9320(%rbp), %rdi       # 8-byte Reload
	movq	-9328(%rbp), %rsi       # 8-byte Reload
	movq	-9336(%rbp), %rdx       # 8-byte Reload
	movq	-9256(%rbp), %rcx       # 8-byte Reload
	movq	-9192(%rbp), %r8        # 8-byte Reload
	movl	-9212(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9304(%rbp), %rdi       # 8-byte Reload
	movq	-9168(%rbp), %rsi       # 8-byte Reload
	movq	-9280(%rbp), %rdx       # 8-byte Reload
	movq	-9280(%rbp), %rcx       # 8-byte Reload
	movq	-9184(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-9144(%rbp), %rdi       # 8-byte Reload
	movq	-9168(%rbp), %rsi       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9176(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-9160(%rbp), %rdi       # 8-byte Reload
	movq	-9144(%rbp), %rsi       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9256(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -9473(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9320(%rbp), %rdi       # 8-byte Reload
	movq	-9328(%rbp), %rsi       # 8-byte Reload
	movq	-9336(%rbp), %rdx       # 8-byte Reload
	movq	-9312(%rbp), %rcx       # 8-byte Reload
	movq	-9304(%rbp), %r8        # 8-byte Reload
	movl	-9212(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9352(%rbp), %rdi       # 8-byte Reload
	movq	-9280(%rbp), %rsi       # 8-byte Reload
	movq	-9280(%rbp), %rdx       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9344(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9304(%rbp), %rdi       # 8-byte Reload
	movq	-9280(%rbp), %rsi       # 8-byte Reload
	movq	-9280(%rbp), %rdx       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9360(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9473(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-9144(%rbp), %rdi       # 8-byte Reload
	movq	-9144(%rbp), %rsi       # 8-byte Reload
	movq	-9144(%rbp), %rcx       # 8-byte Reload
	movq	-9256(%rbp), %r8        # 8-byte Reload
	movq	-9280(%rbp), %r9        # 8-byte Reload
	movq	-9296(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-9473(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-9280(%rbp), %rcx       # 8-byte Reload
	movq	-9472(%rbp), %rdx       # 8-byte Reload
	movq	-9456(%rbp), %rsi       # 8-byte Reload
	movq	-9152(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -9488(%rbp)       # 8-byte Spill
	movq	%rdx, -7872(%rbp)       # 8-byte Spill
	movq	%rsi, -7880(%rbp)       # 8-byte Spill
	movq	%rdi, -7888(%rbp)       # 8-byte Spill
	jne	.LBB1_32
	jmp	.LBB1_37
.Ltmp120:
.LBB1_32:                               # %.lr.ph58
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_33 Depth 2
                                        #       Child Loop BB1_34 Depth 3
	movq	-9488(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str284, %r8
	leaq	.L.str8, %rsi
	movabsq	$110, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str275, %r10
	leaq	.L.str283, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str282, %r13
	movq	%rax, -9496(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9504(%rbp)       # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, -9512(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -9520(%rbp)       # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, -9528(%rbp)       # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, -9536(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9544(%rbp)       # 8-byte Spill
	movabsq	$112, %rax
	movq	%rax, -9552(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -9560(%rbp)       # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rax, -9568(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -9576(%rbp)       # 8-byte Spill
	leaq	.L.str278, %rax
	movq	%rax, -9584(%rbp)       # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, -9592(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9600(%rbp)       # 8-byte Spill
	leaq	.L.str227, %rax
	movq	%rax, -9608(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -9616(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 112 0                 # feature_extraction.c:112:0
.Ltmp121:
	subq	$16, %rsp
	movq	%rax, -9624(%rbp)       # 8-byte Spill
	movq	-9616(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -9632(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -9640(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -9648(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-9568(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -9656(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-9624(%rbp), %rax       # 8-byte Reload
	movq	%r8, -9664(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -9672(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -9676(%rbp)      # 4-byte Spill
	movq	%r15, -9688(%rbp)       # 8-byte Spill
	movq	%rbx, -9696(%rbp)       # 8-byte Spill
	movq	%r12, -9704(%rbp)       # 8-byte Spill
	movq	%r13, -9712(%rbp)       # 8-byte Spill
	movq	%r11, -9720(%rbp)       # 8-byte Spill
	movq	%r10, -9728(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9696(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	-9648(%rbp), %rdx       # 8-byte Reload
	movq	-9648(%rbp), %rcx       # 8-byte Reload
	movq	-9600(%rbp), %r8        # 8-byte Reload
	movq	-9656(%rbp), %r9        # 8-byte Reload
	movq	-9608(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	-9648(%rbp), %rdx       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9592(%rbp), %r8        # 8-byte Reload
	movq	-9656(%rbp), %r9        # 8-byte Reload
	movq	-9584(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9688(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	-9496(%rbp), %rdx       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9568(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9584(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9552(%rbp), %rdi       # 8-byte Reload
	movq	-9672(%rbp), %rsi       # 8-byte Reload
	movq	-9728(%rbp), %rdx       # 8-byte Reload
	movq	-9536(%rbp), %rcx       # 8-byte Reload
	movq	-9576(%rbp), %r8        # 8-byte Reload
	movl	-9676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	-9496(%rbp), %rdx       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9568(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9496(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9688(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9536(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -9732(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9552(%rbp), %rdi       # 8-byte Reload
	movq	-9672(%rbp), %rsi       # 8-byte Reload
	movq	-9728(%rbp), %rdx       # 8-byte Reload
	movq	-9512(%rbp), %rcx       # 8-byte Reload
	movq	-9560(%rbp), %r8        # 8-byte Reload
	movl	-9676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9696(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9544(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9732(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9536(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9732(%rbp), %r14d      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
.Ltmp122:
	.loc	1 110 0                 # feature_extraction.c:110:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9688(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9512(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -9736(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9632(%rbp), %rdi       # 8-byte Reload
	movq	-9672(%rbp), %rsi       # 8-byte Reload
	movq	-9728(%rbp), %rdx       # 8-byte Reload
	movq	-9528(%rbp), %rcx       # 8-byte Reload
	movq	-9520(%rbp), %r8        # 8-byte Reload
	movl	-9676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-9736(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9512(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9736(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-9688(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9528(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9744(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9632(%rbp), %rdi       # 8-byte Reload
	movq	-9672(%rbp), %rsi       # 8-byte Reload
	movq	-9728(%rbp), %rdx       # 8-byte Reload
	movq	-9712(%rbp), %rcx       # 8-byte Reload
	movq	-9520(%rbp), %r8        # 8-byte Reload
	movl	-9676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-9736(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9504(%rbp), %rsi       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9512(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-9736(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-9688(%rbp), %rdi       # 8-byte Reload
	movq	-9704(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9712(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -9752(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9632(%rbp), %rdi       # 8-byte Reload
	movq	-9672(%rbp), %rsi       # 8-byte Reload
	movq	-9728(%rbp), %rdx       # 8-byte Reload
	movq	-9720(%rbp), %rcx       # 8-byte Reload
	movq	-9696(%rbp), %r8        # 8-byte Reload
	movl	-9676(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9656(%rbp), %rdi       # 8-byte Reload
	movq	-9648(%rbp), %rsi       # 8-byte Reload
	movq	-9648(%rbp), %rdx       # 8-byte Reload
	movq	-9656(%rbp), %rcx       # 8-byte Reload
	movq	-9664(%rbp), %r8        # 8-byte Reload
	movq	-9648(%rbp), %r9        # 8-byte Reload
	movq	-9640(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9496(%rbp), %rax       # 8-byte Reload
	movq	%rax, -9760(%rbp)       # 8-byte Spill
.LBB1_33:                               #   Parent Loop BB1_32 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB1_34 Depth 3
	movq	-9760(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str295, %r8
	leaq	.L.str8, %rsi
	movabsq	$114, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str284, %r10
	leaq	.L.str294, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str293, %r13
	movq	%rax, -9768(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -9776(%rbp)       # 8-byte Spill
	leaq	.L.str292, %rax
	movq	%rax, -9784(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -9792(%rbp)       # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, -9800(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -9808(%rbp)       # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, -9816(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -9824(%rbp)       # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, -9832(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -9840(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -9848(%rbp)       # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, -9856(%rbp)       # 8-byte Spill
	movabsq	$112, %rax
	movq	%rax, -9864(%rbp)       # 8-byte Spill
	leaq	.L.str290, %rax
	movq	%rax, -9872(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -9880(%rbp)       # 8-byte Spill
	leaq	.L.str272, %rax
	movq	%rax, -9888(%rbp)       # 8-byte Spill
	leaq	.L.str288, %rax
	movq	%rax, -9896(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -9904(%rbp)       # 8-byte Spill
	leaq	.L.str282, %rax
	movq	%rax, -9912(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -9920(%rbp)       # 8-byte Spill
	leaq	.L.str275, %rax
	movq	%rax, -9928(%rbp)       # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rax, -9936(%rbp)       # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, -9944(%rbp)       # 8-byte Spill
	leaq	.L.str287, %rax
	movq	%rax, -9952(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -9960(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 112 0                 # feature_extraction.c:112:0
.Ltmp123:
	subq	$16, %rsp
	movq	%rax, -9968(%rbp)       # 8-byte Spill
	movq	-9960(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -9976(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -9984(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -9992(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-9832(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -10000(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-9968(%rbp), %rax       # 8-byte Reload
	movq	%r8, -10008(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10016(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -10020(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -10032(%rbp)     # 8-byte Spill
	movq	%r15, -10040(%rbp)      # 8-byte Spill
	movq	%rbx, -10048(%rbp)      # 8-byte Spill
	movq	%r12, -10056(%rbp)      # 8-byte Spill
	movq	%r13, -10064(%rbp)      # 8-byte Spill
	movq	%r11, -10072(%rbp)      # 8-byte Spill
	movq	%r10, -10080(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-10000(%rbp), %rdx      # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9944(%rbp), %r8        # 8-byte Reload
	movq	-9992(%rbp), %r9        # 8-byte Reload
	movq	-9952(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-10000(%rbp), %rdx      # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9936(%rbp), %r8        # 8-byte Reload
	movq	-9992(%rbp), %r9        # 8-byte Reload
	movq	-9928(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-9768(%rbp), %rdx       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9832(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9928(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9864(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-9896(%rbp), %rcx       # 8-byte Reload
	movq	-9920(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-9752(%rbp), %rdx       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9912(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-9768(%rbp), %rdx       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9832(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9768(%rbp), %rax       # 8-byte Reload
	movq	-9752(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9896(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10088(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9864(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-9856(%rbp), %rcx       # 8-byte Reload
	movq	-9904(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-10088(%rbp), %rdx      # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9896(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-9472(%rbp), %rdx       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9888(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10088(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9472(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-9992(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -10096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-9856(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9864(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-9872(%rbp), %rcx       # 8-byte Reload
	movq	-9880(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-10096(%rbp), %rdx      # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9856(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10032(%rbp), %xmm0     # 8-byte Reload
	movq	-10000(%rbp), %rdx      # 8-byte Reload
	movq	-9848(%rbp), %rcx       # 8-byte Reload
	movq	-10000(%rbp), %r8       # 8-byte Reload
	movq	-9984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-9472(%rbp), %rax       # 8-byte Reload
	movq	-10088(%rbp), %rcx      # 8-byte Reload
	vmovsd	-10032(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp124:
	#DEBUG_VALUE: k <- 0
	.loc	1 117 0                 # feature_extraction.c:117:0
	subq	$16, %rsp
	movq	-9816(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-9800(%rbp), %rcx       # 8-byte Reload
	movq	-9840(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	-9768(%rbp), %rdx       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9832(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9768(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9800(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -10100(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9816(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-9784(%rbp), %rcx       # 8-byte Reload
	movq	-9824(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-10048(%rbp), %rdi      # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9808(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10100(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9800(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10100(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
.Ltmp125:
	.loc	1 114 0                 # feature_extraction.c:114:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9784(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -10104(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9976(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-10064(%rbp), %rcx      # 8-byte Reload
	movq	-9792(%rbp), %r8        # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-10104(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-9776(%rbp), %rsi       # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-9784(%rbp), %r8        # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10104(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-10040(%rbp), %rdi      # 8-byte Reload
	movq	-10056(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-10064(%rbp), %r8       # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10112(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9976(%rbp), %rdi       # 8-byte Reload
	movq	-10016(%rbp), %rsi      # 8-byte Reload
	movq	-10080(%rbp), %rdx      # 8-byte Reload
	movq	-10072(%rbp), %rcx      # 8-byte Reload
	movq	-10048(%rbp), %r8       # 8-byte Reload
	movl	-10020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-9992(%rbp), %rdi       # 8-byte Reload
	movq	-10000(%rbp), %rsi      # 8-byte Reload
	movq	-10000(%rbp), %rdx      # 8-byte Reload
	movq	-9992(%rbp), %rcx       # 8-byte Reload
	movq	-10008(%rbp), %r8       # 8-byte Reload
	movq	-10000(%rbp), %r9       # 8-byte Reload
	movq	-9984(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10000(%rbp), %rax      # 8-byte Reload
	.loc	1 117 0                 # feature_extraction.c:117:0
.Ltmp126:
	vmovsd	-10032(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -10120(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10128(%rbp)     # 8-byte Spill
.LBB1_34:                               #   Parent Loop BB1_32 Depth=1
                                        #     Parent Loop BB1_33 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	-10128(%rbp), %xmm0     # 8-byte Reload
	movq	-10120(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str307, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str295, %r9
	movabsq	$3, %r10
	leaq	.L.str287, %r11
	movabsq	$114, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str308, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -10136(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -10144(%rbp)      # 8-byte Spill
	leaq	.L.str297, %rax
	movq	%rax, -10152(%rbp)      # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -10160(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -10168(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -10176(%rbp)      # 8-byte Spill
	leaq	.L.str296, %rax
	movq	%rax, -10184(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -10192(%rbp)      # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, -10200(%rbp)      # 8-byte Spill
	leaq	.L.str298, %rax
	movq	%rax, -10208(%rbp)      # 8-byte Spill
	leaq	.L.str306, %rax
	movq	%rax, -10216(%rbp)      # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, -10224(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -10232(%rbp)      # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, -10240(%rbp)      # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, -10248(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -10256(%rbp)      # 8-byte Spill
	leaq	.L.str304, %rax
	movq	%rax, -10264(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -10272(%rbp)      # 8-byte Spill
	leaq	.L.str268, %rax
	movq	%rax, -10280(%rbp)      # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, -10288(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -10296(%rbp)      # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, -10304(%rbp)      # 8-byte Spill
	leaq	.L.str301, %rax
	movq	%rax, -10312(%rbp)      # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, -10320(%rbp)      # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, -10328(%rbp)      # 8-byte Spill
	leaq	.L.str284, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -10336(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -10344(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -10352(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -10360(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -10368(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-10184(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10376(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10344(%rbp), %rax      # 8-byte Reload
	movq	%r8, -10384(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10392(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -10400(%rbp)     # 8-byte Spill
	vmovsd	%xmm1, -10408(%rbp)     # 8-byte Spill
	movq	%r15, -10416(%rbp)      # 8-byte Spill
	movl	%r12d, -10420(%rbp)     # 4-byte Spill
	movq	%r13, -10432(%rbp)      # 8-byte Spill
	movq	%r14, -10440(%rbp)      # 8-byte Spill
	movq	%rbx, -10448(%rbp)      # 8-byte Spill
	movq	%r10, -10456(%rbp)      # 8-byte Spill
	movq	%r11, -10464(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10152(%rbp), %r8       # 8-byte Reload
	movq	-10376(%rbp), %r9       # 8-byte Reload
	movq	-10392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10360(%rbp), %rcx      # 8-byte Reload
	movq	-10168(%rbp), %r8       # 8-byte Reload
	movq	-10376(%rbp), %r9       # 8-byte Reload
	movq	-10336(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10136(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10184(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10336(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10208(%rbp), %rcx      # 8-byte Reload
	movq	-10344(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10200(%rbp), %r8       # 8-byte Reload
	movq	-10376(%rbp), %r9       # 8-byte Reload
	movq	-10392(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10408(%rbp), %xmm0     # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10168(%rbp), %rcx      # 8-byte Reload
	movq	-10376(%rbp), %r8       # 8-byte Reload
	movq	-10336(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10400(%rbp), %xmm0     # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10208(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10336(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10320(%rbp), %rcx      # 8-byte Reload
	movq	-10192(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-9744(%rbp), %rdx       # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10328(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10136(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10184(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	-9744(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10320(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10472(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10312(%rbp), %rcx      # 8-byte Reload
	movq	-10296(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10472(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10320(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-9288(%rbp), %rdx       # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10280(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10472(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9288(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10376(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10480(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10312(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10240(%rbp), %rcx      # 8-byte Reload
	movq	-10272(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10480(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10312(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9288(%rbp), %rax       # 8-byte Reload
	movq	-10472(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -10488(%rbp)     # 8-byte Spill
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10240(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10288(%rbp), %rcx      # 8-byte Reload
	movq	-10192(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10112(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10304(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10136(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10184(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10136(%rbp), %rax      # 8-byte Reload
	movq	-10112(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10288(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10496(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10264(%rbp), %rcx      # 8-byte Reload
	movq	-10296(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10496(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10288(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-9288(%rbp), %rdx       # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10280(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10496(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9288(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10376(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10504(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10264(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10248(%rbp), %rcx      # 8-byte Reload
	movq	-10272(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10504(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10264(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-9288(%rbp), %rax       # 8-byte Reload
	movq	-10496(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -10512(%rbp)     # 8-byte Spill
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10248(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10216(%rbp), %rcx      # 8-byte Reload
	movq	-10256(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10512(%rbp), %xmm0     # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10248(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10488(%rbp), %xmm0     # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10240(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10488(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10512(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10216(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10520(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10224(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10200(%rbp), %rcx      # 8-byte Reload
	movq	-10232(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10520(%rbp), %xmm0     # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10216(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10400(%rbp), %xmm0     # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10208(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10400(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10520(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp127:
	.loc	1 114 0                 # feature_extraction.c:114:0
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10200(%rbp), %rcx      # 8-byte Reload
	movq	-10360(%rbp), %r8       # 8-byte Reload
	movq	-10352(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10528(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10448(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10152(%rbp), %rcx      # 8-byte Reload
	movq	-10192(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10376(%rbp), %rdx      # 8-byte Reload
	movq	-10360(%rbp), %rcx      # 8-byte Reload
	movq	-10168(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10136(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10184(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10136(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10152(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10536(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10448(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10368(%rbp), %rcx      # 8-byte Reload
	movq	-10176(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10160(%rbp), %rdx      # 8-byte Reload
	movq	-10360(%rbp), %rcx      # 8-byte Reload
	movq	-10168(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10144(%rbp), %rsi      # 8-byte Reload
	movq	-10536(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10152(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10536(%rbp), %rax      # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10432(%rbp), %rdi      # 8-byte Reload
	movq	-10376(%rbp), %rsi      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10368(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -10537(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10448(%rbp), %rdi      # 8-byte Reload
	movq	-10440(%rbp), %rsi      # 8-byte Reload
	movq	-10392(%rbp), %rdx      # 8-byte Reload
	movq	-10416(%rbp), %rcx      # 8-byte Reload
	movq	-10384(%rbp), %r8       # 8-byte Reload
	movl	-10420(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10456(%rbp), %rdi      # 8-byte Reload
	movq	-10360(%rbp), %rsi      # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10464(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10384(%rbp), %rdi      # 8-byte Reload
	movq	-10360(%rbp), %rsi      # 8-byte Reload
	movq	-10360(%rbp), %rdx      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10392(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10537(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10376(%rbp), %rdi      # 8-byte Reload
	movq	-10376(%rbp), %rsi      # 8-byte Reload
	movq	-10376(%rbp), %rcx      # 8-byte Reload
	movq	-10368(%rbp), %r8       # 8-byte Reload
	movq	-10360(%rbp), %r9       # 8-byte Reload
	movq	-10352(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10537(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-10536(%rbp), %rcx      # 8-byte Reload
	.loc	1 117 0                 # feature_extraction.c:117:0
.Ltmp128:
	vmovsd	-10528(%rbp), %xmm0     # 8-byte Reload
.Ltmp129:
	.loc	1 114 0                 # feature_extraction.c:114:0
	movq	%rcx, -10120(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10128(%rbp)     # 8-byte Spill
	jne	.LBB1_35
	jmp	.LBB1_34
.Ltmp130:
.LBB1_35:                               #   in Loop: Header=BB1_33 Depth=2
	movabsq	$1, %rax
	leaq	.L.str319, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str284, %r8
	movabsq	$3, %r9
	leaq	.L.str278, %r10
	movabsq	$110, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str287, %r14
	leaq	.L.str320, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -10552(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -10560(%rbp)      # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, -10568(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -10576(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -10584(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -10592(%rbp)      # 8-byte Spill
	leaq	.L.str286, %rax
	movq	%rax, -10600(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -10608(%rbp)      # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, -10616(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -10624(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -10632(%rbp)      # 8-byte Spill
	leaq	.L.str309, %rax
	movq	%rax, -10640(%rbp)      # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, -10648(%rbp)      # 8-byte Spill
	movabsq	$121, %rax
	movq	%rax, -10656(%rbp)      # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, -10664(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -10672(%rbp)      # 8-byte Spill
	leaq	.L.str272, %rax
	movq	%rax, -10680(%rbp)      # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, -10688(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -10696(%rbp)      # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, -10704(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -10712(%rbp)      # 8-byte Spill
	leaq	.L.str312, %rax
	movq	%rax, -10720(%rbp)      # 8-byte Spill
	leaq	.L.str313, %rax
	movq	%rax, -10728(%rbp)      # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rax, -10736(%rbp)      # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, -10744(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -10752(%rbp)      # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, -10760(%rbp)      # 8-byte Spill
	movabsq	$119, %rax
	movq	%rax, -10768(%rbp)      # 8-byte Spill
	leaq	.L.str310, %rax
	vmovsd	.LCPI1_1, %xmm0
	movq	%rax, -10776(%rbp)      # 8-byte Spill
	leaq	.L.str299, %rax
	movq	%rax, -10784(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 119 0                 # feature_extraction.c:119:0
	subq	$16, %rsp
	movq	%rax, -10792(%rbp)      # 8-byte Spill
	movq	-10768(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -10800(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -10808(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -10816(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-10640(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10824(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10792(%rbp), %rax      # 8-byte Reload
	movq	%r8, -10832(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -10840(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -10848(%rbp)      # 8-byte Spill
	movl	%r12d, -10852(%rbp)     # 4-byte Spill
	movq	%r13, -10864(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -10872(%rbp)     # 8-byte Spill
	movq	%r14, -10880(%rbp)      # 8-byte Spill
	movq	%rbx, -10888(%rbp)      # 8-byte Spill
	movq	%r10, -10896(%rbp)      # 8-byte Spill
	movq	%r11, -10904(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10872(%rbp), %xmm0     # 8-byte Reload
	movq	-10816(%rbp), %rdx      # 8-byte Reload
	movq	-10624(%rbp), %rcx      # 8-byte Reload
	movq	-10816(%rbp), %r8       # 8-byte Reload
	movq	-10808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10528(%rbp), %xmm0     # 8-byte Reload
	movq	-10552(%rbp), %rdx      # 8-byte Reload
	movq	-10784(%rbp), %rcx      # 8-byte Reload
	movq	-10816(%rbp), %r8       # 8-byte Reload
	movq	-10808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-10528(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-10872(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-10552(%rbp), %rdx      # 8-byte Reload
	movq	-10640(%rbp), %rcx      # 8-byte Reload
	movq	-10816(%rbp), %r8       # 8-byte Reload
	movq	-10808(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -10912(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-10768(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10776(%rbp), %rcx      # 8-byte Reload
	movq	-10672(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-10096(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10760(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10912(%rbp), %xmm0     # 8-byte Reload
	movq	-10552(%rbp), %rdx      # 8-byte Reload
	movq	-10640(%rbp), %rcx      # 8-byte Reload
	movq	-10816(%rbp), %r8       # 8-byte Reload
	movq	-10808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-10096(%rbp), %rax      # 8-byte Reload
	vmovsd	-10912(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 121 0                 # feature_extraction.c:121:0
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10744(%rbp), %rcx      # 8-byte Reload
	movq	-10608(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-9768(%rbp), %rdx       # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10616(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9768(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10744(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -10916(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10720(%rbp), %rcx      # 8-byte Reload
	movq	-10752(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10576(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10916(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10744(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10916(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10720(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -10920(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10728(%rbp), %rcx      # 8-byte Reload
	movq	-10608(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-9496(%rbp), %rdx       # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10736(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9496(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10728(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -10924(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10704(%rbp), %rcx      # 8-byte Reload
	movq	-10632(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-10924(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10728(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10920(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10720(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10920(%rbp), %r12d     # 4-byte Reload
	movl	-10924(%rbp), %esi      # 4-byte Reload
	addl	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10704(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -10928(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10688(%rbp), %rcx      # 8-byte Reload
	movq	-10712(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-10928(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10704(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10928(%rbp), %r12d     # 4-byte Reload
	movslq	%r12d, %rax
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10688(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10936(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10648(%rbp), %rcx      # 8-byte Reload
	movq	-10696(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-10936(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10688(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-9472(%rbp), %rdx       # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10680(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10936(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-9472(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-10552(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -10944(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-10648(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10656(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10664(%rbp), %rcx      # 8-byte Reload
	movq	-10672(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-10944(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10648(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	vmovsd	-10912(%rbp), %xmm0     # 8-byte Reload
	movq	-10552(%rbp), %rdx      # 8-byte Reload
	movq	-10640(%rbp), %rcx      # 8-byte Reload
	movq	-10816(%rbp), %r8       # 8-byte Reload
	movq	-10808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-9472(%rbp), %rax       # 8-byte Reload
	movq	-10936(%rbp), %rcx      # 8-byte Reload
	vmovsd	-10912(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp131:
	.loc	1 110 0                 # feature_extraction.c:110:0
	subq	$16, %rsp
	movq	-10904(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10600(%rbp), %rcx      # 8-byte Reload
	movq	-10632(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rdx      # 8-byte Reload
	movq	-10816(%rbp), %rcx      # 8-byte Reload
	movq	-10624(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-9768(%rbp), %rdx       # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10616(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9768(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10600(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -10952(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10904(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10568(%rbp), %rcx      # 8-byte Reload
	movq	-10608(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10592(%rbp), %rsi      # 8-byte Reload
	movq	-10952(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10600(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-10952(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -10956(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10904(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10824(%rbp), %rcx      # 8-byte Reload
	movq	-10584(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10576(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10956(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10560(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10568(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-10956(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-10864(%rbp), %rdi      # 8-byte Reload
	movq	-10552(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10824(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -10957(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10904(%rbp), %rdi      # 8-byte Reload
	movq	-10888(%rbp), %rsi      # 8-byte Reload
	movq	-10880(%rbp), %rdx      # 8-byte Reload
	movq	-10848(%rbp), %rcx      # 8-byte Reload
	movq	-10800(%rbp), %r8       # 8-byte Reload
	movl	-10852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10840(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-10816(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10896(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10800(%rbp), %rdi      # 8-byte Reload
	movq	-10816(%rbp), %rsi      # 8-byte Reload
	movq	-10816(%rbp), %rdx      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10832(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10957(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10552(%rbp), %rdi      # 8-byte Reload
	movq	-10552(%rbp), %rsi      # 8-byte Reload
	movq	-10552(%rbp), %rcx      # 8-byte Reload
	movq	-10824(%rbp), %r8       # 8-byte Reload
	movq	-10816(%rbp), %r9       # 8-byte Reload
	movq	-10808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-10957(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-10952(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -9760(%rbp)       # 8-byte Spill
	jne	.LBB1_36
	jmp	.LBB1_33
.Ltmp132:
.LBB1_36:                               # %._crit_edge59
                                        #   in Loop: Header=BB1_32 Depth=1
	movabsq	$1, %rax
	leaq	.L.str322, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str275, %r8
	movabsq	$3, %r9
	leaq	.L.str237, %r10
	movabsq	$107, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str278, %r14
	leaq	.L.str323, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -10968(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -10976(%rbp)      # 8-byte Spill
	leaq	.L.str321, %rax
	movq	%rax, -10984(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -10992(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -11000(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11008(%rbp)      # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, -11016(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -11024(%rbp)      # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rax, -11032(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11040(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 107 0                 # feature_extraction.c:107:0
	subq	$16, %rsp
	movq	%rdi, -11048(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -11056(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -11064(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -11072(%rbp)      # 8-byte Spill
	movq	-11016(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11080(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11072(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11088(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -11096(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -11104(%rbp)      # 8-byte Spill
	movq	%r15, -11112(%rbp)      # 8-byte Spill
	movl	%r12d, -11116(%rbp)     # 4-byte Spill
	movq	%r13, -11128(%rbp)      # 8-byte Spill
	movq	%rbx, -11136(%rbp)      # 8-byte Spill
	movq	%r11, -11144(%rbp)      # 8-byte Spill
	movq	%r10, -11152(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11048(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rdx      # 8-byte Reload
	movq	-11064(%rbp), %rcx      # 8-byte Reload
	movq	-11040(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10968(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-9496(%rbp), %rdx       # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11032(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-9496(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-11128(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11016(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -11160(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11144(%rbp), %rdi      # 8-byte Reload
	movq	-11136(%rbp), %rsi      # 8-byte Reload
	movq	-11104(%rbp), %rdx      # 8-byte Reload
	movq	-10984(%rbp), %rcx      # 8-byte Reload
	movq	-11024(%rbp), %r8       # 8-byte Reload
	movl	-11116(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-10968(%rbp), %rdi      # 8-byte Reload
	movq	-11008(%rbp), %rsi      # 8-byte Reload
	movq	-11160(%rbp), %rdx      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11016(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11160(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-11128(%rbp), %rdi      # 8-byte Reload
	movq	-10976(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-10984(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -11164(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11144(%rbp), %rdi      # 8-byte Reload
	movq	-11136(%rbp), %rsi      # 8-byte Reload
	movq	-11104(%rbp), %rdx      # 8-byte Reload
	movq	-11080(%rbp), %rcx      # 8-byte Reload
	movq	-11000(%rbp), %r8       # 8-byte Reload
	movl	-11116(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-11048(%rbp), %rdi      # 8-byte Reload
	movq	-10976(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-10992(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11164(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-10968(%rbp), %rdi      # 8-byte Reload
	movq	-10976(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-10984(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11164(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-11128(%rbp), %rdi      # 8-byte Reload
	movq	-10968(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11080(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -11165(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11144(%rbp), %rdi      # 8-byte Reload
	movq	-11136(%rbp), %rsi      # 8-byte Reload
	movq	-11104(%rbp), %rdx      # 8-byte Reload
	movq	-11112(%rbp), %rcx      # 8-byte Reload
	movq	-11048(%rbp), %r8       # 8-byte Reload
	movl	-11116(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11096(%rbp), %rdi      # 8-byte Reload
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	movq	-11064(%rbp), %rdx      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11152(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11048(%rbp), %rdi      # 8-byte Reload
	movq	-11064(%rbp), %rsi      # 8-byte Reload
	movq	-11064(%rbp), %rdx      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11088(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11165(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-10968(%rbp), %rdi      # 8-byte Reload
	movq	-10968(%rbp), %rsi      # 8-byte Reload
	movq	-10968(%rbp), %rcx      # 8-byte Reload
	movq	-11080(%rbp), %r8       # 8-byte Reload
	movq	-11064(%rbp), %r9       # 8-byte Reload
	movq	-11056(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11165(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-11160(%rbp), %rcx      # 8-byte Reload
	movq	-9472(%rbp), %rdx       # 8-byte Reload
	movq	-9456(%rbp), %rsi       # 8-byte Reload
	movq	-9152(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -9488(%rbp)       # 8-byte Spill
	movq	%rdx, -7872(%rbp)       # 8-byte Spill
	movq	%rsi, -7880(%rbp)       # 8-byte Spill
	movq	%rdi, -7888(%rbp)       # 8-byte Spill
	jne	.LBB1_37
	jmp	.LBB1_32
.Ltmp133:
.LBB1_37:                               # %._crit_edge62
	movq	-7888(%rbp), %rax       # 8-byte Reload
	movq	-7880(%rbp), %rcx       # 8-byte Reload
	movq	-7872(%rbp), %rdx       # 8-byte Reload
	movabsq	$1, %rsi
	leaq	.L.str333, %rdi
	movabsq	$0, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	.L.str336, %r11
	movabsq	$3, %rbx
	leaq	.L.str335, %r14
	movabsq	$142, %r15
	leaq	.L.str50, %r12
	leaq	.L.str237, %r13
	movq	%rax, -11176(%rbp)      # 8-byte Spill
	leaq	.L.str334, %rax
	movq	%rsi, -11184(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -11192(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -11200(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -11208(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -11216(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11224(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -11232(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11240(%rbp)      # 8-byte Spill
	leaq	.L.str332, %rax
	.loc	1 127 0                 # feature_extraction.c:127:0
	subq	$16, %rsp
	movq	%rax, -11248(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%esi, -11252(%rbp)      # 4-byte Spill
	movl	$.L.str237, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11264(%rbp)      # 8-byte Spill
	movl	$.L.str324, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11272(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -11280(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -11288(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -11296(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, -11304(%rbp)      # 8-byte Spill
	movq	-11280(%rbp), %rax      # 8-byte Reload
	movl	%esi, -11308(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-11264(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -11320(%rbp)      # 8-byte Spill
.Ltmp134:
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- [RBP+-11320]
	#DEBUG_VALUE: process_data:freq_xcorr_matrix <- [RBP+-11320]
	movq	%rax, %rdx
	movq	-11272(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11328(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11288(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11336(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-11308(%rbp), %eax      # 4-byte Reload
	movq	%r9, -11344(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -11352(%rbp)      # 8-byte Spill
	movq	%r14, -11360(%rbp)      # 8-byte Spill
	movq	%r15, -11368(%rbp)      # 8-byte Spill
	movq	%r12, -11376(%rbp)      # 8-byte Spill
	movq	%rbx, -11384(%rbp)      # 8-byte Spill
	movq	%r11, -11392(%rbp)      # 8-byte Spill
	movq	%r10, -11400(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str278, (%rcx)
	movl	$.L.str272, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movl	%eax, %edx
	movl	$64, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movl	%eax, %edi
	movl	$1, %r9d
	movl	%r9d, %r8d
	movq	%rdi, -11408(%rbp)      # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, -11416(%rbp)      # 8-byte Spill
	movq	-11408(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -11424(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, -11432(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11432(%rbp), %r11      # 8-byte Reload
	movq	%r8, -11440(%rbp)       # 8-byte Spill
	movq	%r11, %r8
	movq	-11440(%rbp), %r9       # 8-byte Reload
	movl	%eax, -11444(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str227, (%rcx)
	movl	$2, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11456(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11432(%rbp), %r8       # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movl	$.L.str235, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11320(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11464(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11272(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str325, %eax
	movl	%eax, %ecx
	movq	-11304(%rbp), %rdi      # 8-byte Reload
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11472(%rbp)      # 8-byte Spill
	movq	-11288(%rbp), %r8       # 8-byte Reload
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str278, (%rcx)
	movl	$.L.str271, %eax
	movl	%eax, %ecx
	movq	-11424(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11480(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11480(%rbp), %r8       # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str227, (%rcx)
	movq	-11456(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11480(%rbp), %r8       # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movl	$.L.str234, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11328(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11472(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str326, %eax
	movl	%eax, %ecx
	movq	-11304(%rbp), %rdi      # 8-byte Reload
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11488(%rbp)      # 8-byte Spill
	movq	-11288(%rbp), %r8       # 8-byte Reload
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str278, (%rcx)
	movl	$.L.str269, %eax
	movl	%eax, %ecx
	movq	-11424(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11496(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11496(%rbp), %r8       # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str227, (%rcx)
	movq	-11456(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11496(%rbp), %r8       # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movl	$.L.str167, %eax
	movl	%eax, %r8d
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11440(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str232, (%rcx)
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11176(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str327, %eax
	movl	%eax, %ecx
	movl	$127, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %edx
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %r8       # 8-byte Reload
	movq	%rdx, -11504(%rbp)      # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -11512(%rbp)      # 8-byte Spill
	movq	-11504(%rbp), %r8       # 8-byte Reload
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11176(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11176(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %r8       # 8-byte Reload
	movq	%rsi, -11520(%rbp)      # 8-byte Spill
	movq	%r8, %rsi
	movq	-11520(%rbp), %r9       # 8-byte Reload
	movq	%rdx, -11528(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11512(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 128 0                 # feature_extraction.c:128:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str328, %eax
	movl	%eax, %ecx
	movl	$128, %eax
	movl	%eax, %edi
	movl	$49, %eax
	movl	%eax, %r8d
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11536(%rbp)      # 8-byte Spill
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$rs, %eax
	movl	%eax, %edx
	movl	$.L.str329, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %eax
	movl	%eax, %r8d
	movl	$32, %eax
	movl	%eax, %ecx
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, %rsi
	movq	-11440(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -11544(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11456(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11320(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11272(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str330, %eax
	movl	%eax, %r8d
	movq	-11424(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11520(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %ecx
	movl	$4, %eax
	movl	%eax, %edi
	movq	-11440(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11408(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11552(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11552(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$5, %eax
	movl	%eax, %edi
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11408(%rbp), %rdx      # 8-byte Reload
	movq	-11408(%rbp), %rcx      # 8-byte Reload
	movq	-11552(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %edi         # 4-byte Reload
	movq	-11320(%rbp), %rsi      # 8-byte Reload
	movq	-11520(%rbp), %rdx      # 8-byte Reload
	movl	-11444(%rbp), %ecx      # 4-byte Reload
	movq	-11408(%rbp), %r8       # 8-byte Reload
	callq	rs
	.loc	1 140 0                 # feature_extraction.c:140:0
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11544(%rbp), %rsi      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11536(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str331, %eax
	movl	%eax, %ecx
	movl	$140, %eax
	movl	%eax, %edi
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -11560(%rbp)      # 8-byte Spill
	movq	-11504(%rbp), %r8       # 8-byte Reload
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11176(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-11528(%rbp), %rdx      # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-11464(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-11440(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11568(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11560(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 141 0                 # feature_extraction.c:141:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str332, %eax
	movl	%eax, %ecx
	movl	$141, %eax
	movl	%eax, %edi
	movq	-11280(%rbp), %rsi      # 8-byte Reload
	movq	-11264(%rbp), %rdx      # 8-byte Reload
	movq	-11504(%rbp), %r8       # 8-byte Reload
	movl	-11308(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11440(%rbp), %rdi      # 8-byte Reload
	movq	-11416(%rbp), %rsi      # 8-byte Reload
	movq	-11176(%rbp), %rdx      # 8-byte Reload
	movq	-11440(%rbp), %rcx      # 8-byte Reload
	movq	-11488(%rbp), %r8       # 8-byte Reload
	movq	-11408(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-11528(%rbp), %rdx      # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-11200(%rbp), %rdi      # 8-byte Reload
	movq	-11240(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-11184(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -11576(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-11248(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp135:
	#DEBUG_VALUE: process_data:time_stddev <- [RBP+-11576]
	#DEBUG_VALUE: channel <- 0
	.loc	1 142 0                 # feature_extraction.c:142:0
	subq	$16, %rsp
	movq	-11368(%rbp), %rdi      # 8-byte Reload
	movq	-11376(%rbp), %rsi      # 8-byte Reload
	movq	-11352(%rbp), %rdx      # 8-byte Reload
	movq	-11296(%rbp), %rcx      # 8-byte Reload
	movq	-11232(%rbp), %r8       # 8-byte Reload
	movl	-11252(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11400(%rbp), %rdi      # 8-byte Reload
	movq	-11208(%rbp), %rsi      # 8-byte Reload
	movq	-11336(%rbp), %rdx      # 8-byte Reload
	movq	-11336(%rbp), %rcx      # 8-byte Reload
	movq	-11224(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-11184(%rbp), %rdi      # 8-byte Reload
	movq	-11208(%rbp), %rsi      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	movq	-11216(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-11200(%rbp), %rdi      # 8-byte Reload
	movq	-11184(%rbp), %rsi      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	movq	-11296(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -11577(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11368(%rbp), %rdi      # 8-byte Reload
	movq	-11376(%rbp), %rsi      # 8-byte Reload
	movq	-11352(%rbp), %rdx      # 8-byte Reload
	movq	-11192(%rbp), %rcx      # 8-byte Reload
	movq	-11400(%rbp), %r8       # 8-byte Reload
	movl	-11252(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11384(%rbp), %rdi      # 8-byte Reload
	movq	-11336(%rbp), %rsi      # 8-byte Reload
	movq	-11336(%rbp), %rdx      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	movq	-11360(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11400(%rbp), %rdi      # 8-byte Reload
	movq	-11336(%rbp), %rsi      # 8-byte Reload
	movq	-11336(%rbp), %rdx      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	movq	-11392(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11577(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-11184(%rbp), %rdi      # 8-byte Reload
	movq	-11184(%rbp), %rsi      # 8-byte Reload
	movq	-11184(%rbp), %rcx      # 8-byte Reload
	movq	-11296(%rbp), %r8       # 8-byte Reload
	movq	-11336(%rbp), %r9       # 8-byte Reload
	movq	-11344(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11577(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_39
.Ltmp136:
# BB#38:                                # %._crit_edge52.thread
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str339, %r8
	leaq	.L.str8, %rdx
	movabsq	$152, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str336, %r9
	leaq	.L.str338, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str337, %r12
	leaq	.L.str14, %r13
	movq	%rax, -11592(%rbp)      # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, -11600(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11608(%rbp)      # 8-byte Spill
	movabsq	$151, %rax
	movq	%rax, -11616(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 151 0                 # feature_extraction.c:151:0
	subq	$16, %rsp
	movq	%rax, -11624(%rbp)      # 8-byte Spill
	movq	-11616(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -11632(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -11640(%rbp)      # 8-byte Spill
	movq	%rdx, -11648(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -11656(%rbp)      # 8-byte Spill
	movq	%r12, %rcx
	movq	-11624(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11664(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -11672(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -11680(%rbp)      # 8-byte Spill
	movl	%ebx, -11684(%rbp)      # 4-byte Spill
	movq	%r15, -11696(%rbp)      # 8-byte Spill
	movq	%r13, -11704(%rbp)      # 8-byte Spill
	movq	%r12, -11712(%rbp)      # 8-byte Spill
	movq	%r11, -11720(%rbp)      # 8-byte Spill
	movq	%r10, -11728(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11720(%rbp), %rdi      # 8-byte Reload
	movq	-11696(%rbp), %rsi      # 8-byte Reload
	movq	-11600(%rbp), %rdx      # 8-byte Reload
	movq	-11656(%rbp), %rcx      # 8-byte Reload
	movq	-11608(%rbp), %r8       # 8-byte Reload
	movq	-11656(%rbp), %r9       # 8-byte Reload
	movq	-11648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-11592(%rbp), %rdi      # 8-byte Reload
	movq	-11696(%rbp), %rsi      # 8-byte Reload
	movq	-11592(%rbp), %rcx      # 8-byte Reload
	movq	-11704(%rbp), %r8       # 8-byte Reload
	movq	-11656(%rbp), %r9       # 8-byte Reload
	movq	-11648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-11680(%rbp), %rdi      # 8-byte Reload
	movq	-11696(%rbp), %rsi      # 8-byte Reload
	movq	-11592(%rbp), %rcx      # 8-byte Reload
	movq	-11712(%rbp), %r8       # 8-byte Reload
	movq	-11656(%rbp), %r9       # 8-byte Reload
	movq	-11648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -11732(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp137:
	#DEBUG_VALUE: process_data:n_time_sd <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 152 0                 # feature_extraction.c:152:0
	subq	$16, %rsp
	movq	-11632(%rbp), %rdi      # 8-byte Reload
	movq	-11640(%rbp), %rsi      # 8-byte Reload
	movq	-11672(%rbp), %rdx      # 8-byte Reload
	movq	-11728(%rbp), %rcx      # 8-byte Reload
	movq	-11720(%rbp), %r8       # 8-byte Reload
	movl	-11684(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11592(%rbp), %rdi      # 8-byte Reload
	movq	-11656(%rbp), %rsi      # 8-byte Reload
	movq	-11656(%rbp), %rdx      # 8-byte Reload
	movq	-11592(%rbp), %rcx      # 8-byte Reload
	movq	-11664(%rbp), %r8       # 8-byte Reload
	movq	-11656(%rbp), %r9       # 8-byte Reload
	movq	-11648(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-11732(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, -11736(%rbp)      # 4-byte Spill
	jmp	.LBB1_52
.Ltmp138:
.LBB1_39:                               # %.lr.ph51
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str343, %r8
	leaq	.L.str8, %rdx
	movabsq	$142, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str335, %r9
	leaq	.L.str342, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str341, %r12
	.loc	1 145 0                 # feature_extraction.c:145:0
.Ltmp139:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -11744(%rbp)      # 8-byte Spill
	movl	$.L.str335, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11752(%rbp)      # 8-byte Spill
	movl	$.L.str340, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11760(%rbp)      # 8-byte Spill
	movl	$145, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11768(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -11776(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -11784(%rbp)      # 8-byte Spill
	movq	-11768(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -11792(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -11796(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-11752(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -11808(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-11760(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -11816(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11776(%rbp), %rax      # 8-byte Reload
	movq	%r8, -11824(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-11796(%rbp), %eax      # 4-byte Reload
	movq	%r9, -11832(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -11840(%rbp)      # 8-byte Spill
	movl	%ebx, -11844(%rbp)      # 4-byte Spill
	movq	%r15, -11856(%rbp)      # 8-byte Spill
	movq	%r12, -11864(%rbp)      # 8-byte Spill
	movq	%r13, -11872(%rbp)      # 8-byte Spill
	movq	%r11, -11880(%rbp)      # 8-byte Spill
	movq	%r10, -11888(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -11896(%rbp)      # 8-byte Spill
	movq	-11896(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -11904(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str14, %ebx
	movl	%ebx, %edx
	movl	$1, %ebx
	movl	%ebx, %esi
	movq	%rsi, %rdi
	movq	-11904(%rbp), %r8       # 8-byte Reload
	movq	%rsi, -11912(%rbp)      # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, -11920(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-11912(%rbp), %r9       # 8-byte Reload
	movq	%rcx, -11928(%rbp)      # 8-byte Spill
	movq	%r9, %rcx
	movq	-11920(%rbp), %r8       # 8-byte Reload
	movq	-11896(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp140:
	.loc	1 149 0                 # feature_extraction.c:149:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-11912(%rbp), %rsi      # 8-byte Reload
	movq	-11912(%rbp), %rcx      # 8-byte Reload
	movq	-11760(%rbp), %r8       # 8-byte Reload
	movq	-11896(%rbp), %r9       # 8-byte Reload
	movb	%al, -11929(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str341, %ebx
	movl	%ebx, %ecx
	movl	$149, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-11872(%rbp), %rsi      # 8-byte Reload
	movq	-11752(%rbp), %rdx      # 8-byte Reload
	movl	-11796(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-11912(%rbp), %rdi      # 8-byte Reload
	movq	-11904(%rbp), %rsi      # 8-byte Reload
	movq	-11928(%rbp), %rdx      # 8-byte Reload
	movq	-11912(%rbp), %rcx      # 8-byte Reload
	movq	-11920(%rbp), %r8       # 8-byte Reload
	movq	-11896(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-136(%rbp), %ebx        # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp141:
	.loc	1 142 0                 # feature_extraction.c:142:0
	movq	-11840(%rbp), %rdi      # 8-byte Reload
	movq	-11856(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -11944(%rbp)     # 8-byte Spill
	movq	-11816(%rbp), %rdx      # 8-byte Reload
	movq	-11864(%rbp), %rcx      # 8-byte Reload
	movq	-11784(%rbp), %r8       # 8-byte Reload
	movq	-11808(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-11792(%rbp), %rdi      # 8-byte Reload
	movq	-11744(%rbp), %rsi      # 8-byte Reload
	movq	-11832(%rbp), %rdx      # 8-byte Reload
	movq	-11888(%rbp), %rcx      # 8-byte Reload
	movq	-11880(%rbp), %r8       # 8-byte Reload
	movl	-11844(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11816(%rbp), %rdi      # 8-byte Reload
	movq	-11784(%rbp), %rsi      # 8-byte Reload
	movq	-11784(%rbp), %rdx      # 8-byte Reload
	movq	-11816(%rbp), %rcx      # 8-byte Reload
	movq	-11824(%rbp), %r8       # 8-byte Reload
	movq	-11784(%rbp), %r9       # 8-byte Reload
	movq	-11808(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11784(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -11952(%rbp)      # 8-byte Spill
.LBB1_40:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_42 Depth 2
	movq	-11952(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str340, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str346, %r9
	movabsq	$3, %r10
	leaq	.L.str351, %r11
	movabsq	$145, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str343, %r15
	leaq	.L.str350, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -11960(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -11968(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -11976(%rbp)      # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, -11984(%rbp)      # 8-byte Spill
	movabsq	$144, %rax
	movq	%rax, -11992(%rbp)      # 8-byte Spill
	leaq	.L.str349, %rax
	movq	%rax, -12000(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -12008(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -12016(%rbp)      # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, -12024(%rbp)      # 8-byte Spill
	leaq	.L.str344, %rax
	movq	%rax, -12032(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -12040(%rbp)      # 8-byte Spill
	leaq	.L.str335, %rax
	movq	%rax, -12048(%rbp)      # 8-byte Spill
	leaq	.L.str345, %rax
	movq	%rax, -12056(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -12064(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 144 0                 # feature_extraction.c:144:0
.Ltmp142:
	subq	$16, %rsp
	movq	%rax, -12072(%rbp)      # 8-byte Spill
	movq	-12064(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -12080(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -12088(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -12096(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-12032(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12104(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12072(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12112(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12120(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -12128(%rbp)      # 8-byte Spill
	movq	%r14, -12136(%rbp)      # 8-byte Spill
	movq	%r12, -12144(%rbp)      # 8-byte Spill
	movl	%r13d, -12148(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -12160(%rbp)     # 8-byte Spill
	movq	%rbx, -12168(%rbp)      # 8-byte Spill
	movq	%r10, -12176(%rbp)      # 8-byte Spill
	movq	%r11, -12184(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12080(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-12096(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12056(%rbp), %r8       # 8-byte Reload
	movq	-12104(%rbp), %r9       # 8-byte Reload
	movq	-12120(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12104(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-12096(%rbp), %rdx      # 8-byte Reload
	movq	-12096(%rbp), %rcx      # 8-byte Reload
	movq	-11976(%rbp), %r8       # 8-byte Reload
	movq	-12104(%rbp), %r9       # 8-byte Reload
	movq	-12048(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12016(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-11960(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12032(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12048(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11992(%rbp), %rdi      # 8-byte Reload
	movq	-12136(%rbp), %rsi      # 8-byte Reload
	movq	-12128(%rbp), %rdx      # 8-byte Reload
	movq	-11984(%rbp), %rcx      # 8-byte Reload
	movq	-12040(%rbp), %r8       # 8-byte Reload
	movl	-12148(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12080(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-11960(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12032(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12104(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-11568(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12024(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11960(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11568(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-12016(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-12104(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12192(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-11984(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-11992(%rbp), %rdi      # 8-byte Reload
	movq	-12136(%rbp), %rsi      # 8-byte Reload
	movq	-12128(%rbp), %rdx      # 8-byte Reload
	movq	-12000(%rbp), %rcx      # 8-byte Reload
	movq	-12008(%rbp), %r8       # 8-byte Reload
	movl	-12148(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12080(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	movq	-12192(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-11984(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12104(%rbp), %rdi      # 8-byte Reload
	movq	-11968(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12160(%rbp), %xmm0     # 8-byte Reload
	movq	-12096(%rbp), %rdx      # 8-byte Reload
	movq	-11976(%rbp), %rcx      # 8-byte Reload
	movq	-12096(%rbp), %r8       # 8-byte Reload
	movq	-12088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-11568(%rbp), %rax      # 8-byte Reload
	movq	-11960(%rbp), %rcx      # 8-byte Reload
	vmovsd	-12160(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp143:
	#DEBUG_VALUE: i <- 0
	.loc	1 145 0                 # feature_extraction.c:145:0
	subq	$16, %rsp
	movq	-12168(%rbp), %rdi      # 8-byte Reload
	movq	-12136(%rbp), %rsi      # 8-byte Reload
	movq	-12128(%rbp), %rdx      # 8-byte Reload
	movq	-12144(%rbp), %rcx      # 8-byte Reload
	movq	-12080(%rbp), %r8       # 8-byte Reload
	movl	-12148(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12176(%rbp), %rdi      # 8-byte Reload
	movq	-12096(%rbp), %rsi      # 8-byte Reload
	movq	-12096(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12184(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12080(%rbp), %rdi      # 8-byte Reload
	movq	-12096(%rbp), %rsi      # 8-byte Reload
	movq	-12096(%rbp), %rdx      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12120(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11929(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-12104(%rbp), %rdi      # 8-byte Reload
	movq	-12104(%rbp), %rsi      # 8-byte Reload
	movq	-12104(%rbp), %rcx      # 8-byte Reload
	movq	-12112(%rbp), %r8       # 8-byte Reload
	movq	-12096(%rbp), %r9       # 8-byte Reload
	movq	-12088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-11929(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_41
	jmp	.LBB1_44
.LBB1_41:                               # %.lr.ph45
                                        #   in Loop: Header=BB1_40 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str357, %r8
	leaq	.L.str8, %rdx
	movabsq	$145, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str351, %r9
	leaq	.L.str356, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str355, %r12
	movabsq	$32, %r13
	movq	%rax, -12200(%rbp)      # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, -12208(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -12216(%rbp)      # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, -12224(%rbp)      # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, -12232(%rbp)      # 8-byte Spill
	movabsq	$147, %rax
	movq	%rax, -12240(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -12248(%rbp)      # 8-byte Spill
	leaq	.L.str352, %rax
	movq	%rax, -12256(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -12264(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -12272(%rbp)      # 8-byte Spill
	leaq	.L.str344, %rax
	movq	%rax, -12280(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 147 0                 # feature_extraction.c:147:0
.Ltmp144:
	subq	$16, %rsp
	movq	%rax, -12288(%rbp)      # 8-byte Spill
	movq	-12240(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -12296(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-12296(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -12304(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -12312(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-12256(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12320(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12288(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12328(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12336(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -12344(%rbp)      # 8-byte Spill
	movl	%ebx, -12348(%rbp)      # 4-byte Spill
	movq	%r15, -12360(%rbp)      # 8-byte Spill
	movq	%r12, -12368(%rbp)      # 8-byte Spill
	movq	%r13, -12376(%rbp)      # 8-byte Spill
	movq	%r11, -12384(%rbp)      # 8-byte Spill
	movq	%r10, -12392(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12320(%rbp), %rdi      # 8-byte Reload
	movq	-12360(%rbp), %rsi      # 8-byte Reload
	movq	-11960(%rbp), %rdx      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12280(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11960(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12344(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12256(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -12396(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12240(%rbp), %rdi      # 8-byte Reload
	movq	-12296(%rbp), %rsi      # 8-byte Reload
	movq	-12336(%rbp), %rdx      # 8-byte Reload
	movq	-12208(%rbp), %rcx      # 8-byte Reload
	movq	-12272(%rbp), %r8       # 8-byte Reload
	movl	-12348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-12384(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12264(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12396(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12320(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12256(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12396(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12344(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12208(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -12400(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12240(%rbp), %rdi      # 8-byte Reload
	movq	-12296(%rbp), %rsi      # 8-byte Reload
	movq	-12336(%rbp), %rdx      # 8-byte Reload
	movq	-12224(%rbp), %rcx      # 8-byte Reload
	movq	-12248(%rbp), %r8       # 8-byte Reload
	movl	-12348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12320(%rbp), %rdi      # 8-byte Reload
	movq	-12360(%rbp), %rsi      # 8-byte Reload
	movq	-12192(%rbp), %rdx      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12232(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12192(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp145:
	.loc	1 145 0                 # feature_extraction.c:145:0
	movq	-12344(%rbp), %rdi      # 8-byte Reload
	movq	-12360(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -12408(%rbp)     # 8-byte Spill
	movq	-12320(%rbp), %rdx      # 8-byte Reload
	movq	-12224(%rbp), %rcx      # 8-byte Reload
	movq	-12200(%rbp), %r8       # 8-byte Reload
	movq	-12312(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12304(%rbp), %rdi      # 8-byte Reload
	movq	-12296(%rbp), %rsi      # 8-byte Reload
	movq	-12336(%rbp), %rdx      # 8-byte Reload
	movq	-12368(%rbp), %rcx      # 8-byte Reload
	movq	-12216(%rbp), %r8       # 8-byte Reload
	movl	-12348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-12400(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-12320(%rbp), %rdi      # 8-byte Reload
	movq	-12376(%rbp), %rsi      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12208(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12400(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-12344(%rbp), %rdi      # 8-byte Reload
	movq	-12360(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12368(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12416(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12304(%rbp), %rdi      # 8-byte Reload
	movq	-12296(%rbp), %rsi      # 8-byte Reload
	movq	-12336(%rbp), %rdx      # 8-byte Reload
	movq	-12392(%rbp), %rcx      # 8-byte Reload
	movq	-12384(%rbp), %r8       # 8-byte Reload
	movl	-12348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12320(%rbp), %rdi      # 8-byte Reload
	movq	-12200(%rbp), %rsi      # 8-byte Reload
	movq	-12200(%rbp), %rdx      # 8-byte Reload
	movq	-12320(%rbp), %rcx      # 8-byte Reload
	movq	-12328(%rbp), %r8       # 8-byte Reload
	movq	-12200(%rbp), %r9       # 8-byte Reload
	movq	-12312(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12200(%rbp), %rax      # 8-byte Reload
	.loc	1 147 0                 # feature_extraction.c:147:0
.Ltmp146:
	vmovsd	-12408(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -12424(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -12432(%rbp)     # 8-byte Spill
.LBB1_42:                               #   Parent Loop BB1_40 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-12432(%rbp), %xmm0     # 8-byte Reload
	movq	-12424(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str366, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str357, %r9
	movabsq	$3, %r10
	leaq	.L.str368, %r11
	movabsq	$145, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str367, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -12440(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -12448(%rbp)      # 8-byte Spill
	leaq	.L.str365, %rax
	movq	%rax, -12456(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -12464(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -12472(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -12480(%rbp)      # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, -12488(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -12496(%rbp)      # 8-byte Spill
	leaq	.L.str358, %rax
	movq	%rax, -12504(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -12512(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -12520(%rbp)      # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, -12528(%rbp)      # 8-byte Spill
	leaq	.L.str364, %rax
	movq	%rax, -12536(%rbp)      # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, -12544(%rbp)      # 8-byte Spill
	movabsq	$147, %rax
	movq	%rax, -12552(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -12560(%rbp)      # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, -12568(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -12576(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -12584(%rbp)      # 8-byte Spill
	leaq	.L.str362, %rax
	movq	%rax, -12592(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -12600(%rbp)      # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, -12608(%rbp)      # 8-byte Spill
	leaq	.L.str351, %rax
	movq	%rax, -12616(%rbp)      # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, -12624(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -12632(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -12640(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -12648(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -12656(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-12504(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12664(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12632(%rbp), %rax      # 8-byte Reload
	movq	%r8, -12672(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12680(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -12688(%rbp)     # 8-byte Spill
	movq	%r13, -12696(%rbp)      # 8-byte Spill
	movq	%r14, -12704(%rbp)      # 8-byte Spill
	movq	%r15, -12712(%rbp)      # 8-byte Spill
	movl	%r12d, -12716(%rbp)     # 4-byte Spill
	movq	%rbx, -12728(%rbp)      # 8-byte Spill
	movq	%r11, -12736(%rbp)      # 8-byte Spill
	movq	%r10, -12744(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12488(%rbp), %r8       # 8-byte Reload
	movq	-12664(%rbp), %r9       # 8-byte Reload
	movq	-12680(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12648(%rbp), %rcx      # 8-byte Reload
	movq	-12512(%rbp), %r8       # 8-byte Reload
	movq	-12664(%rbp), %r9       # 8-byte Reload
	movq	-12616(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12440(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12504(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12616(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12552(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12544(%rbp), %rcx      # 8-byte Reload
	movq	-12632(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12528(%rbp), %r8       # 8-byte Reload
	movq	-12664(%rbp), %r9       # 8-byte Reload
	movq	-12680(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12624(%rbp), %r8       # 8-byte Reload
	movq	-12664(%rbp), %r9       # 8-byte Reload
	movq	-12616(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12688(%rbp), %xmm0     # 8-byte Reload
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12544(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movq	-12616(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12552(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12592(%rbp), %rcx      # 8-byte Reload
	movq	-12520(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12416(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12608(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12440(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12504(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12440(%rbp), %rax      # 8-byte Reload
	movq	-12416(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12592(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12752(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12552(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12568(%rbp), %rcx      # 8-byte Reload
	movq	-12600(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12752(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12592(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12584(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12752(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-12664(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -12760(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-12568(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12552(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12536(%rbp), %rcx      # 8-byte Reload
	movq	-12576(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12760(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12568(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-12752(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -12768(%rbp)     # 8-byte Spill
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12536(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movq	-12640(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12552(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12528(%rbp), %rcx      # 8-byte Reload
	movq	-12560(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12688(%rbp), %xmm0     # 8-byte Reload
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12544(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movq	-12640(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12768(%rbp), %xmm0     # 8-byte Reload
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12536(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movq	-12640(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-12768(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-12688(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp147:
	.loc	1 145 0                 # feature_extraction.c:145:0
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12528(%rbp), %rcx      # 8-byte Reload
	movq	-12648(%rbp), %r8       # 8-byte Reload
	movq	-12640(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -12776(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-12728(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12488(%rbp), %rcx      # 8-byte Reload
	movq	-12520(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rdx      # 8-byte Reload
	movq	-12648(%rbp), %rcx      # 8-byte Reload
	movq	-12512(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12440(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12504(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12440(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12488(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -12784(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12728(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12456(%rbp), %rcx      # 8-byte Reload
	movq	-12496(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12480(%rbp), %rsi      # 8-byte Reload
	movq	-12784(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12488(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-12784(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12448(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12456(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -12788(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12728(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12656(%rbp), %rcx      # 8-byte Reload
	movq	-12472(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12448(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12464(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12788(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12448(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12456(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-12788(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-12696(%rbp), %rdi      # 8-byte Reload
	movq	-12664(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12656(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -12789(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12728(%rbp), %rdi      # 8-byte Reload
	movq	-12704(%rbp), %rsi      # 8-byte Reload
	movq	-12680(%rbp), %rdx      # 8-byte Reload
	movq	-12712(%rbp), %rcx      # 8-byte Reload
	movq	-12672(%rbp), %r8       # 8-byte Reload
	movl	-12716(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12744(%rbp), %rdi      # 8-byte Reload
	movq	-12648(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12736(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12672(%rbp), %rdi      # 8-byte Reload
	movq	-12648(%rbp), %rsi      # 8-byte Reload
	movq	-12648(%rbp), %rdx      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12680(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12789(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12664(%rbp), %rdi      # 8-byte Reload
	movq	-12664(%rbp), %rsi      # 8-byte Reload
	movq	-12664(%rbp), %rcx      # 8-byte Reload
	movq	-12656(%rbp), %r8       # 8-byte Reload
	movq	-12648(%rbp), %r9       # 8-byte Reload
	movq	-12640(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-12789(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-12784(%rbp), %rcx      # 8-byte Reload
	.loc	1 147 0                 # feature_extraction.c:147:0
.Ltmp148:
	vmovsd	-12776(%rbp), %xmm0     # 8-byte Reload
.Ltmp149:
	.loc	1 145 0                 # feature_extraction.c:145:0
	movq	%rcx, -12424(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -12432(%rbp)     # 8-byte Spill
	jne	.LBB1_43
	jmp	.LBB1_42
.LBB1_43:                               # %._crit_edge46
                                        #   in Loop: Header=BB1_40 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str346, %r8
	leaq	.L.str8, %rdx
	movabsq	$145, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str368, %r9
	leaq	.L.str370, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str361, %r15
	leaq	.L.str347, %r12
	movabsq	$147, %r13
	movq	%rax, -12800(%rbp)      # 8-byte Spill
	leaq	.L.str369, %rax
	movq	%rax, -12808(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 147 0                 # feature_extraction.c:147:0
.Ltmp150:
	subq	$16, %rsp
	movq	%rdi, -12816(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -12824(%rbp)      # 8-byte Spill
	movq	%rdx, -12832(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-12808(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -12840(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -12848(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -12856(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -12860(%rbp)      # 4-byte Spill
	movq	%r11, -12872(%rbp)      # 8-byte Spill
	movq	%r14, -12880(%rbp)      # 8-byte Spill
	movq	%r12, -12888(%rbp)      # 8-byte Spill
	movq	%r15, -12896(%rbp)      # 8-byte Spill
	movq	%r10, -12904(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12872(%rbp), %rdi      # 8-byte Reload
	movq	-12880(%rbp), %rsi      # 8-byte Reload
	movq	-12192(%rbp), %rdx      # 8-byte Reload
	movq	-12800(%rbp), %rcx      # 8-byte Reload
	movq	-12888(%rbp), %r8       # 8-byte Reload
	movq	-12840(%rbp), %r9       # 8-byte Reload
	movq	-12832(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12800(%rbp), %rdi      # 8-byte Reload
	movq	-12880(%rbp), %rsi      # 8-byte Reload
	vmovsd	-12776(%rbp), %xmm0     # 8-byte Reload
	movq	-12800(%rbp), %rdx      # 8-byte Reload
	movq	-12896(%rbp), %rcx      # 8-byte Reload
	movq	-12840(%rbp), %r8       # 8-byte Reload
	movq	-12832(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-12192(%rbp), %rax      # 8-byte Reload
	vmovsd	-12776(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp151:
	.loc	1 145 0                 # feature_extraction.c:145:0
	subq	$16, %rsp
	movq	-12816(%rbp), %rdi      # 8-byte Reload
	movq	-12824(%rbp), %rsi      # 8-byte Reload
	movq	-12856(%rbp), %rdx      # 8-byte Reload
	movq	-12904(%rbp), %rcx      # 8-byte Reload
	movq	-12872(%rbp), %r8       # 8-byte Reload
	movl	-12860(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12800(%rbp), %rdi      # 8-byte Reload
	movq	-12840(%rbp), %rsi      # 8-byte Reload
	movq	-12840(%rbp), %rdx      # 8-byte Reload
	movq	-12800(%rbp), %rcx      # 8-byte Reload
	movq	-12848(%rbp), %r8       # 8-byte Reload
	movq	-12840(%rbp), %r9       # 8-byte Reload
	movq	-12832(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp152:
.LBB1_44:                               #   in Loop: Header=BB1_40 Depth=1
	movabsq	$1, %rax
	leaq	.L.str375, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str343, %r8
	movabsq	$3, %r9
	leaq	.L.str377, %r10
	movabsq	$142, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str346, %r14
	leaq	.L.str376, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -12912(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -12920(%rbp)      # 8-byte Spill
	leaq	.L.str374, %rax
	movq	%rax, -12928(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -12936(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -12944(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -12952(%rbp)      # 8-byte Spill
	leaq	.L.str345, %rax
	movq	%rax, -12960(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -12968(%rbp)      # 8-byte Spill
	leaq	.L.str344, %rax
	movq	%rax, -12976(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -12984(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -12992(%rbp)      # 8-byte Spill
	leaq	.L.str372, %rax
	movq	%rax, -13000(%rbp)      # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, -13008(%rbp)      # 8-byte Spill
	movabsq	$149, %rax
	movq	%rax, -13016(%rbp)      # 8-byte Spill
	leaq	.L.str373, %rax
	movq	%rax, -13024(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -13032(%rbp)      # 8-byte Spill
	leaq	.L.str371, %rax
	movq	%rax, -13040(%rbp)      # 8-byte Spill
	leaq	.L.str341, %rax
	movq	%rax, -13048(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -13056(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 149 0                 # feature_extraction.c:149:0
	subq	$16, %rsp
	movq	%rax, -13064(%rbp)      # 8-byte Spill
	movq	-13016(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13072(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -13080(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -13088(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-13040(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13064(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13104(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -13112(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -13120(%rbp)      # 8-byte Spill
	movq	%r15, -13128(%rbp)      # 8-byte Spill
	movl	%r12d, -13132(%rbp)     # 4-byte Spill
	movq	%r13, -13144(%rbp)      # 8-byte Spill
	movq	%rbx, -13152(%rbp)      # 8-byte Spill
	movq	%r11, -13160(%rbp)      # 8-byte Spill
	movq	%r10, -13168(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	-12192(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13008(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12192(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-13144(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -13176(%rbp)     # 8-byte Spill
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13040(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movq	-13080(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13016(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-13000(%rbp), %rcx      # 8-byte Reload
	movq	-13056(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-13072(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	vmovsd	-11944(%rbp), %xmm0     # 8-byte Reload
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13048(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movq	-13080(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13176(%rbp), %xmm0     # 8-byte Reload
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13040(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movq	-13080(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-13176(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-11944(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-13144(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13000(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movq	-13080(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -13184(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13016(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-13024(%rbp), %rcx      # 8-byte Reload
	movq	-13032(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13072(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	-12192(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13008(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13184(%rbp), %xmm0     # 8-byte Reload
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13000(%rbp), %rcx      # 8-byte Reload
	movq	-13088(%rbp), %r8       # 8-byte Reload
	movq	-13080(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-12192(%rbp), %rax      # 8-byte Reload
	vmovsd	-13184(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp153:
	.loc	1 142 0                 # feature_extraction.c:142:0
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-12960(%rbp), %rcx      # 8-byte Reload
	movq	-12992(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13072(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rdx      # 8-byte Reload
	movq	-13088(%rbp), %rcx      # 8-byte Reload
	movq	-12984(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	-11960(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12976(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11960(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-13144(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12960(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -13192(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-12928(%rbp), %rcx      # 8-byte Reload
	movq	-12968(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12952(%rbp), %rsi      # 8-byte Reload
	movq	-13192(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12960(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13192(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13144(%rbp), %rdi      # 8-byte Reload
	movq	-12920(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12928(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -13196(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-13096(%rbp), %rcx      # 8-byte Reload
	movq	-12944(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13072(%rbp), %rdi      # 8-byte Reload
	movq	-12920(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12936(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13196(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12920(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-12928(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-13196(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-13144(%rbp), %rdi      # 8-byte Reload
	movq	-12912(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13096(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -13197(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13160(%rbp), %rdi      # 8-byte Reload
	movq	-13152(%rbp), %rsi      # 8-byte Reload
	movq	-13120(%rbp), %rdx      # 8-byte Reload
	movq	-13128(%rbp), %rcx      # 8-byte Reload
	movq	-13072(%rbp), %r8       # 8-byte Reload
	movl	-13132(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13112(%rbp), %rdi      # 8-byte Reload
	movq	-13088(%rbp), %rsi      # 8-byte Reload
	movq	-13088(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13168(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13072(%rbp), %rdi      # 8-byte Reload
	movq	-13088(%rbp), %rsi      # 8-byte Reload
	movq	-13088(%rbp), %rdx      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13104(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13197(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-12912(%rbp), %rdi      # 8-byte Reload
	movq	-12912(%rbp), %rsi      # 8-byte Reload
	movq	-12912(%rbp), %rcx      # 8-byte Reload
	movq	-13096(%rbp), %r8       # 8-byte Reload
	movq	-13088(%rbp), %r9       # 8-byte Reload
	movq	-13080(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13197(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-13192(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -11952(%rbp)      # 8-byte Spill
	jne	.LBB1_45
	jmp	.LBB1_40
.Ltmp154:
.LBB1_45:                               # %._crit_edge52
	movabsq	$1, %rax
	leaq	.L.str379, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str339, %r8
	movabsq	$3, %r9
	leaq	.L.str381, %r10
	movabsq	$152, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str377, %r14
	leaq	.L.str380, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -13208(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -13216(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -13224(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -13232(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -13240(%rbp)      # 8-byte Spill
	leaq	.L.str378, %rax
	movq	%rax, -13248(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -13256(%rbp)      # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, -13264(%rbp)      # 8-byte Spill
	movabsq	$151, %rax
	movq	%rax, -13272(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 151 0                 # feature_extraction.c:151:0
	subq	$16, %rsp
	movq	%rax, -13280(%rbp)      # 8-byte Spill
	movq	-13272(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13288(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -13296(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -13304(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-13248(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13312(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13280(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13320(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -13328(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -13336(%rbp)      # 8-byte Spill
	movq	%r15, -13344(%rbp)      # 8-byte Spill
	movl	%r12d, -13348(%rbp)     # 4-byte Spill
	movq	%r13, -13360(%rbp)      # 8-byte Spill
	movq	%rbx, -13368(%rbp)      # 8-byte Spill
	movq	%r11, -13376(%rbp)      # 8-byte Spill
	movq	%r10, -13384(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13288(%rbp), %rdi      # 8-byte Reload
	movq	-13216(%rbp), %rsi      # 8-byte Reload
	movq	-13264(%rbp), %rdx      # 8-byte Reload
	movq	-13304(%rbp), %rcx      # 8-byte Reload
	movq	-13232(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %r12d       # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-13216(%rbp), %rsi      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13256(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %r12d       # 4-byte Reload
	addl	$4294967295, %r12d      # imm = 0xFFFFFFFF
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13360(%rbp), %rdi      # 8-byte Reload
	movq	-13216(%rbp), %rsi      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13248(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -13388(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:n_time_sd <- undef
.Ltmp155:
	#DEBUG_VALUE: channel <- 0
	.loc	1 152 0                 # feature_extraction.c:152:0
	subq	$16, %rsp
	movq	-13376(%rbp), %rdi      # 8-byte Reload
	movq	-13368(%rbp), %rsi      # 8-byte Reload
	movq	-13336(%rbp), %rdx      # 8-byte Reload
	movq	-13312(%rbp), %rcx      # 8-byte Reload
	movq	-13240(%rbp), %r8       # 8-byte Reload
	movl	-13348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13288(%rbp), %rdi      # 8-byte Reload
	movq	-13216(%rbp), %rsi      # 8-byte Reload
	movq	-13304(%rbp), %rdx      # 8-byte Reload
	movq	-13304(%rbp), %rcx      # 8-byte Reload
	movq	-13232(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-13216(%rbp), %rsi      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13224(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	$0, %r12d
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-13360(%rbp), %rdi      # 8-byte Reload
	movq	-13208(%rbp), %rsi      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13312(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -13389(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13376(%rbp), %rdi      # 8-byte Reload
	movq	-13368(%rbp), %rsi      # 8-byte Reload
	movq	-13336(%rbp), %rdx      # 8-byte Reload
	movq	-13344(%rbp), %rcx      # 8-byte Reload
	movq	-13288(%rbp), %r8       # 8-byte Reload
	movl	-13348(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13328(%rbp), %rdi      # 8-byte Reload
	movq	-13304(%rbp), %rsi      # 8-byte Reload
	movq	-13304(%rbp), %rdx      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13384(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13288(%rbp), %rdi      # 8-byte Reload
	movq	-13304(%rbp), %rsi      # 8-byte Reload
	movq	-13304(%rbp), %rdx      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13320(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13389(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-13208(%rbp), %rdi      # 8-byte Reload
	movq	-13208(%rbp), %rsi      # 8-byte Reload
	movq	-13208(%rbp), %rcx      # 8-byte Reload
	movq	-13312(%rbp), %r8       # 8-byte Reload
	movq	-13304(%rbp), %r9       # 8-byte Reload
	movq	-13296(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13389(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movl	-13388(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, -11736(%rbp)     # 4-byte Spill
	jne	.LBB1_46
	jmp	.LBB1_52
.Ltmp156:
.LBB1_46:                               # %.lr.ph41
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str385, %r8
	leaq	.L.str8, %rdx
	movabsq	$152, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str381, %r9
	leaq	.L.str384, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str383, %r12
	.loc	1 155 0                 # feature_extraction.c:155:0
.Ltmp157:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -13400(%rbp)      # 8-byte Spill
	movl	$.L.str381, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13408(%rbp)      # 8-byte Spill
	movl	$.L.str382, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13416(%rbp)      # 8-byte Spill
	movl	$155, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13424(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -13432(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -13440(%rbp)      # 8-byte Spill
	movq	-13424(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13448(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -13452(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-13408(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -13464(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-13416(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13472(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13432(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13480(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-13452(%rbp), %eax      # 4-byte Reload
	movq	%r9, -13488(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -13496(%rbp)      # 8-byte Spill
	movl	%ebx, -13500(%rbp)      # 4-byte Spill
	movq	%r15, -13512(%rbp)      # 8-byte Spill
	movq	%r12, -13520(%rbp)      # 8-byte Spill
	movq	%r13, -13528(%rbp)      # 8-byte Spill
	movq	%r11, -13536(%rbp)      # 8-byte Spill
	movq	%r10, -13544(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -13552(%rbp)      # 8-byte Spill
	movq	-13552(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -13560(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-13560(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, -13568(%rbp)      # 8-byte Spill
	movq	-13552(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp158:
	.loc	1 161 0                 # feature_extraction.c:161:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-13568(%rbp), %rsi      # 8-byte Reload
	movq	-13568(%rbp), %rcx      # 8-byte Reload
	movq	-13416(%rbp), %r8       # 8-byte Reload
	movq	-13552(%rbp), %r9       # 8-byte Reload
	movb	%al, -13569(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str383, %ebx
	movl	%ebx, %ecx
	movl	$161, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-13528(%rbp), %rsi      # 8-byte Reload
	movq	-13408(%rbp), %rdx      # 8-byte Reload
	movl	-13452(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-13388(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str378, %ebx
	movl	%ebx, %r8d
	movq	-13568(%rbp), %rdi      # 8-byte Reload
	movq	-13560(%rbp), %rsi      # 8-byte Reload
	movq	-13568(%rbp), %rcx      # 8-byte Reload
	movq	-13552(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-13388(%rbp), %ebx      # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp159:
	.loc	1 152 0                 # feature_extraction.c:152:0
	movq	-13496(%rbp), %rdi      # 8-byte Reload
	movq	-13512(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -13584(%rbp)     # 8-byte Spill
	movq	-13472(%rbp), %rdx      # 8-byte Reload
	movq	-13520(%rbp), %rcx      # 8-byte Reload
	movq	-13440(%rbp), %r8       # 8-byte Reload
	movq	-13464(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13448(%rbp), %rdi      # 8-byte Reload
	movq	-13400(%rbp), %rsi      # 8-byte Reload
	movq	-13488(%rbp), %rdx      # 8-byte Reload
	movq	-13544(%rbp), %rcx      # 8-byte Reload
	movq	-13536(%rbp), %r8       # 8-byte Reload
	movl	-13500(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13472(%rbp), %rdi      # 8-byte Reload
	movq	-13440(%rbp), %rsi      # 8-byte Reload
	movq	-13440(%rbp), %rdx      # 8-byte Reload
	movq	-13472(%rbp), %rcx      # 8-byte Reload
	movq	-13480(%rbp), %r8       # 8-byte Reload
	movq	-13440(%rbp), %r9       # 8-byte Reload
	movq	-13464(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13440(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -13592(%rbp)      # 8-byte Spill
.LBB1_47:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_49 Depth 2
	movq	-13592(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str382, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str388, %r9
	movabsq	$3, %r10
	leaq	.L.str393, %r11
	movabsq	$155, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str385, %r15
	leaq	.L.str392, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -13600(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -13608(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -13616(%rbp)      # 8-byte Spill
	leaq	.L.str389, %rax
	movq	%rax, -13624(%rbp)      # 8-byte Spill
	movabsq	$154, %rax
	movq	%rax, -13632(%rbp)      # 8-byte Spill
	leaq	.L.str391, %rax
	movq	%rax, -13640(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -13648(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -13656(%rbp)      # 8-byte Spill
	leaq	.L.str390, %rax
	movq	%rax, -13664(%rbp)      # 8-byte Spill
	leaq	.L.str386, %rax
	movq	%rax, -13672(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -13680(%rbp)      # 8-byte Spill
	leaq	.L.str381, %rax
	movq	%rax, -13688(%rbp)      # 8-byte Spill
	leaq	.L.str387, %rax
	movq	%rax, -13696(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -13704(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 154 0                 # feature_extraction.c:154:0
.Ltmp160:
	subq	$16, %rsp
	movq	%rax, -13712(%rbp)      # 8-byte Spill
	movq	-13704(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13720(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -13728(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -13736(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-13672(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13744(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13712(%rbp), %rax      # 8-byte Reload
	movq	%r8, -13752(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -13760(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -13768(%rbp)      # 8-byte Spill
	movq	%r14, -13776(%rbp)      # 8-byte Spill
	movq	%r12, -13784(%rbp)      # 8-byte Spill
	movl	%r13d, -13788(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -13800(%rbp)     # 8-byte Spill
	movq	%rbx, -13808(%rbp)      # 8-byte Spill
	movq	%r10, -13816(%rbp)      # 8-byte Spill
	movq	%r11, -13824(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-13736(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13696(%rbp), %r8       # 8-byte Reload
	movq	-13744(%rbp), %r9       # 8-byte Reload
	movq	-13760(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13744(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-13736(%rbp), %rdx      # 8-byte Reload
	movq	-13736(%rbp), %rcx      # 8-byte Reload
	movq	-13616(%rbp), %r8       # 8-byte Reload
	movq	-13744(%rbp), %r9       # 8-byte Reload
	movq	-13688(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13656(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-13600(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13672(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13688(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13632(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13624(%rbp), %rcx      # 8-byte Reload
	movq	-13680(%rbp), %r8       # 8-byte Reload
	movl	-13788(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-13600(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13672(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13744(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-11576(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13664(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13600(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11576(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-13656(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13744(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13832(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13624(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13632(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13640(%rbp), %rcx      # 8-byte Reload
	movq	-13648(%rbp), %r8       # 8-byte Reload
	movl	-13788(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13624(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13744(%rbp), %rdi      # 8-byte Reload
	movq	-13608(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13800(%rbp), %xmm0     # 8-byte Reload
	movq	-13736(%rbp), %rdx      # 8-byte Reload
	movq	-13616(%rbp), %rcx      # 8-byte Reload
	movq	-13736(%rbp), %r8       # 8-byte Reload
	movq	-13728(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-11576(%rbp), %rax      # 8-byte Reload
	movq	-13600(%rbp), %rcx      # 8-byte Reload
	vmovsd	-13800(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp161:
	#DEBUG_VALUE: i <- 0
	.loc	1 155 0                 # feature_extraction.c:155:0
	subq	$16, %rsp
	movq	-13808(%rbp), %rdi      # 8-byte Reload
	movq	-13776(%rbp), %rsi      # 8-byte Reload
	movq	-13768(%rbp), %rdx      # 8-byte Reload
	movq	-13784(%rbp), %rcx      # 8-byte Reload
	movq	-13720(%rbp), %r8       # 8-byte Reload
	movl	-13788(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13816(%rbp), %rdi      # 8-byte Reload
	movq	-13736(%rbp), %rsi      # 8-byte Reload
	movq	-13736(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13824(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13720(%rbp), %rdi      # 8-byte Reload
	movq	-13736(%rbp), %rsi      # 8-byte Reload
	movq	-13736(%rbp), %rdx      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13760(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13569(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-13744(%rbp), %rdi      # 8-byte Reload
	movq	-13744(%rbp), %rsi      # 8-byte Reload
	movq	-13744(%rbp), %rcx      # 8-byte Reload
	movq	-13752(%rbp), %r8       # 8-byte Reload
	movq	-13736(%rbp), %r9       # 8-byte Reload
	movq	-13728(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-13569(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_48
	jmp	.LBB1_51
.LBB1_48:                               # %.lr.ph35
                                        #   in Loop: Header=BB1_47 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str401, %r8
	leaq	.L.str8, %rdx
	movabsq	$155, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str393, %r9
	leaq	.L.str400, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str399, %r12
	movabsq	$32, %r13
	movq	%rax, -13840(%rbp)      # 8-byte Spill
	leaq	.L.str395, %rax
	movq	%rax, -13848(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -13856(%rbp)      # 8-byte Spill
	leaq	.L.str398, %rax
	movq	%rax, -13864(%rbp)      # 8-byte Spill
	leaq	.L.str389, %rax
	movq	%rax, -13872(%rbp)      # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, -13880(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -13888(%rbp)      # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, -13896(%rbp)      # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rax, -13904(%rbp)      # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, -13912(%rbp)      # 8-byte Spill
	leaq	.L.str386, %rax
	movq	%rax, -13920(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -13928(%rbp)      # 8-byte Spill
	leaq	.L.str394, %rax
	movq	%rax, -13936(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -13944(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -13952(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 157 0                 # feature_extraction.c:157:0
.Ltmp162:
	subq	$16, %rsp
	movq	%rax, -13960(%rbp)      # 8-byte Spill
	movq	-13880(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -13968(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-13968(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -13976(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -13984(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-13936(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -13992(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13960(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14000(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14008(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -14016(%rbp)      # 8-byte Spill
	movl	%ebx, -14020(%rbp)      # 4-byte Spill
	movq	%r15, -14032(%rbp)      # 8-byte Spill
	movq	%r12, -14040(%rbp)      # 8-byte Spill
	movq	%r13, -14048(%rbp)      # 8-byte Spill
	movq	%r11, -14056(%rbp)      # 8-byte Spill
	movq	%r10, -14064(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	-13600(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13920(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13600(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14048(%rbp), %rsi      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13936(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -14068(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13880(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-13848(%rbp), %rcx      # 8-byte Reload
	movq	-13952(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-14056(%rbp), %rdi      # 8-byte Reload
	movq	-14048(%rbp), %rsi      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13944(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14068(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14048(%rbp), %rsi      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13936(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14068(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14048(%rbp), %rsi      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13848(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -14072(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13880(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-13904(%rbp), %rcx      # 8-byte Reload
	movq	-13928(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14056(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	-13600(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13920(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	-11568(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13912(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13600(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11568(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-13992(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14080(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-13904(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13880(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-13896(%rbp), %rcx      # 8-byte Reload
	movq	-13888(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	-14080(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13904(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11568(%rbp), %rax      # 8-byte Reload
	movq	-13600(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14088(%rbp)     # 8-byte Spill
	movq	-13992(%rbp), %rdx      # 8-byte Reload
	movq	-13896(%rbp), %rcx      # 8-byte Reload
	movq	-13840(%rbp), %r8       # 8-byte Reload
	movq	-13984(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13880(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-13864(%rbp), %rcx      # 8-byte Reload
	movq	-13888(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13872(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13832(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp163:
	.loc	1 155 0                 # feature_extraction.c:155:0
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14096(%rbp)     # 8-byte Spill
	movq	-13992(%rbp), %rdx      # 8-byte Reload
	movq	-13864(%rbp), %rcx      # 8-byte Reload
	movq	-13840(%rbp), %r8       # 8-byte Reload
	movq	-13984(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-13976(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-14040(%rbp), %rcx      # 8-byte Reload
	movq	-13856(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-14072(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-14048(%rbp), %rsi      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-13848(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14072(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-14016(%rbp), %rdi      # 8-byte Reload
	movq	-14032(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-14040(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14104(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13976(%rbp), %rdi      # 8-byte Reload
	movq	-13968(%rbp), %rsi      # 8-byte Reload
	movq	-14008(%rbp), %rdx      # 8-byte Reload
	movq	-14064(%rbp), %rcx      # 8-byte Reload
	movq	-14056(%rbp), %r8       # 8-byte Reload
	movl	-14020(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-13992(%rbp), %rdi      # 8-byte Reload
	movq	-13840(%rbp), %rsi      # 8-byte Reload
	movq	-13840(%rbp), %rdx      # 8-byte Reload
	movq	-13992(%rbp), %rcx      # 8-byte Reload
	movq	-14000(%rbp), %r8       # 8-byte Reload
	movq	-13840(%rbp), %r9       # 8-byte Reload
	movq	-13984(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13840(%rbp), %rax      # 8-byte Reload
	.loc	1 157 0                 # feature_extraction.c:157:0
.Ltmp164:
	vmovsd	-14096(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -14112(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -14120(%rbp)     # 8-byte Spill
.LBB1_49:                               #   Parent Loop BB1_47 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	-14120(%rbp), %xmm0     # 8-byte Reload
	movq	-14112(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str412, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str401, %r9
	movabsq	$3, %r10
	leaq	.L.str414, %r11
	movabsq	$155, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str413, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -14128(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -14136(%rbp)      # 8-byte Spill
	leaq	.L.str411, %rax
	movq	%rax, -14144(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -14152(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -14160(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -14168(%rbp)      # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, -14176(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -14184(%rbp)      # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, -14192(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -14200(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -14208(%rbp)      # 8-byte Spill
	leaq	.L.str405, %rax
	movq	%rax, -14216(%rbp)      # 8-byte Spill
	leaq	.L.str404, %rax
	movq	%rax, -14224(%rbp)      # 8-byte Spill
	leaq	.L.str410, %rax
	movq	%rax, -14232(%rbp)      # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, -14240(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -14248(%rbp)      # 8-byte Spill
	leaq	.L.str409, %rax
	movq	%rax, -14256(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -14264(%rbp)      # 8-byte Spill
	leaq	.L.str408, %rax
	movq	%rax, -14272(%rbp)      # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, -14280(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -14288(%rbp)      # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, -14296(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -14304(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -14312(%rbp)      # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, -14320(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -14328(%rbp)      # 8-byte Spill
	leaq	.L.str399, %rax
	movq	%rax, -14336(%rbp)      # 8-byte Spill
	leaq	.L.str393, %rax
	movq	%rax, -14344(%rbp)      # 8-byte Spill
	leaq	.L.str398, %rax
	movq	%rax, -14352(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -14360(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -14368(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -14376(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -14384(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-14192(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14392(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14360(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14400(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14408(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -14416(%rbp)     # 8-byte Spill
	movq	%r13, -14424(%rbp)      # 8-byte Spill
	movq	%r14, -14432(%rbp)      # 8-byte Spill
	movq	%r15, -14440(%rbp)      # 8-byte Spill
	movl	%r12d, -14444(%rbp)     # 4-byte Spill
	movq	%rbx, -14456(%rbp)      # 8-byte Spill
	movq	%r11, -14464(%rbp)      # 8-byte Spill
	movq	%r10, -14472(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14176(%rbp), %r8       # 8-byte Reload
	movq	-14392(%rbp), %r9       # 8-byte Reload
	movq	-14408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14376(%rbp), %rcx      # 8-byte Reload
	movq	-14200(%rbp), %r8       # 8-byte Reload
	movq	-14392(%rbp), %r9       # 8-byte Reload
	movq	-14344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14128(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14192(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14224(%rbp), %rcx      # 8-byte Reload
	movq	-14360(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14216(%rbp), %r8       # 8-byte Reload
	movq	-14392(%rbp), %r9       # 8-byte Reload
	movq	-14408(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14352(%rbp), %r8       # 8-byte Reload
	movq	-14392(%rbp), %r9       # 8-byte Reload
	movq	-14344(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14416(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14224(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14344(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14320(%rbp), %rcx      # 8-byte Reload
	movq	-14208(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14104(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14336(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14128(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14192(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14128(%rbp), %rax      # 8-byte Reload
	movq	-14104(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14320(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14480(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14296(%rbp), %rcx      # 8-byte Reload
	movq	-14328(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14480(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14320(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14312(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14480(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-14392(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14488(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14296(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14272(%rbp), %rcx      # 8-byte Reload
	movq	-14304(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14488(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14296(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-14480(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14496(%rbp)     # 8-byte Spill
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14272(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14256(%rbp), %rcx      # 8-byte Reload
	movq	-14288(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14088(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14280(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14496(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14272(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14496(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-14088(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14256(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -14504(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14232(%rbp), %rcx      # 8-byte Reload
	movq	-14264(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14504(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14256(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14504(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14256(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14504(%rbp), %xmm0     # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14232(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm1, -14512(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14240(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14216(%rbp), %rcx      # 8-byte Reload
	movq	-14248(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14512(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14232(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14416(%rbp), %xmm0     # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14224(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14416(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-14512(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp165:
	.loc	1 155 0                 # feature_extraction.c:155:0
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14216(%rbp), %rcx      # 8-byte Reload
	movq	-14376(%rbp), %r8       # 8-byte Reload
	movq	-14368(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -14520(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14456(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14176(%rbp), %rcx      # 8-byte Reload
	movq	-14208(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rdx      # 8-byte Reload
	movq	-14376(%rbp), %rcx      # 8-byte Reload
	movq	-14200(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14128(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14192(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14128(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14176(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -14528(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14456(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14144(%rbp), %rcx      # 8-byte Reload
	movq	-14184(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14168(%rbp), %rsi      # 8-byte Reload
	movq	-14528(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14176(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-14528(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14136(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14144(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -14532(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14456(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14384(%rbp), %rcx      # 8-byte Reload
	movq	-14160(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14136(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14152(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14532(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14136(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14144(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-14532(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-14424(%rbp), %rdi      # 8-byte Reload
	movq	-14392(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14384(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -14533(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14456(%rbp), %rdi      # 8-byte Reload
	movq	-14432(%rbp), %rsi      # 8-byte Reload
	movq	-14408(%rbp), %rdx      # 8-byte Reload
	movq	-14440(%rbp), %rcx      # 8-byte Reload
	movq	-14400(%rbp), %r8       # 8-byte Reload
	movl	-14444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14472(%rbp), %rdi      # 8-byte Reload
	movq	-14376(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14464(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14400(%rbp), %rdi      # 8-byte Reload
	movq	-14376(%rbp), %rsi      # 8-byte Reload
	movq	-14376(%rbp), %rdx      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14408(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14533(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14392(%rbp), %rdi      # 8-byte Reload
	movq	-14392(%rbp), %rsi      # 8-byte Reload
	movq	-14392(%rbp), %rcx      # 8-byte Reload
	movq	-14384(%rbp), %r8       # 8-byte Reload
	movq	-14376(%rbp), %r9       # 8-byte Reload
	movq	-14368(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-14533(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-14528(%rbp), %rcx      # 8-byte Reload
	.loc	1 157 0                 # feature_extraction.c:157:0
.Ltmp166:
	vmovsd	-14520(%rbp), %xmm0     # 8-byte Reload
.Ltmp167:
	.loc	1 155 0                 # feature_extraction.c:155:0
	movq	%rcx, -14112(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -14120(%rbp)     # 8-byte Spill
	jne	.LBB1_50
	jmp	.LBB1_49
.LBB1_50:                               # %._crit_edge36
                                        #   in Loop: Header=BB1_47 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str388, %r8
	leaq	.L.str8, %rdx
	movabsq	$155, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str414, %r9
	leaq	.L.str416, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str405, %r15
	leaq	.L.str389, %r12
	movabsq	$157, %r13
	movq	%rax, -14544(%rbp)      # 8-byte Spill
	leaq	.L.str415, %rax
	movq	%rax, -14552(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 157 0                 # feature_extraction.c:157:0
.Ltmp168:
	subq	$16, %rsp
	movq	%rdi, -14560(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -14568(%rbp)      # 8-byte Spill
	movq	%rdx, -14576(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-14552(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -14584(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -14592(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14600(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -14604(%rbp)      # 4-byte Spill
	movq	%r11, -14616(%rbp)      # 8-byte Spill
	movq	%r14, -14624(%rbp)      # 8-byte Spill
	movq	%r12, -14632(%rbp)      # 8-byte Spill
	movq	%r15, -14640(%rbp)      # 8-byte Spill
	movq	%r10, -14648(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14616(%rbp), %rdi      # 8-byte Reload
	movq	-14624(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-14544(%rbp), %rcx      # 8-byte Reload
	movq	-14632(%rbp), %r8       # 8-byte Reload
	movq	-14584(%rbp), %r9       # 8-byte Reload
	movq	-14576(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14624(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14520(%rbp), %xmm0     # 8-byte Reload
	movq	-14544(%rbp), %rdx      # 8-byte Reload
	movq	-14640(%rbp), %rcx      # 8-byte Reload
	movq	-14584(%rbp), %r8       # 8-byte Reload
	movq	-14576(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13832(%rbp), %rax      # 8-byte Reload
	vmovsd	-14520(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp169:
	.loc	1 155 0                 # feature_extraction.c:155:0
	subq	$16, %rsp
	movq	-14560(%rbp), %rdi      # 8-byte Reload
	movq	-14568(%rbp), %rsi      # 8-byte Reload
	movq	-14600(%rbp), %rdx      # 8-byte Reload
	movq	-14648(%rbp), %rcx      # 8-byte Reload
	movq	-14616(%rbp), %r8       # 8-byte Reload
	movl	-14604(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14544(%rbp), %rdi      # 8-byte Reload
	movq	-14584(%rbp), %rsi      # 8-byte Reload
	movq	-14584(%rbp), %rdx      # 8-byte Reload
	movq	-14544(%rbp), %rcx      # 8-byte Reload
	movq	-14592(%rbp), %r8       # 8-byte Reload
	movq	-14584(%rbp), %r9       # 8-byte Reload
	movq	-14576(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp170:
.LBB1_51:                               #   in Loop: Header=BB1_47 Depth=1
	movabsq	$1, %rax
	leaq	.L.str424, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str385, %r8
	movabsq	$3, %r9
	leaq	.L.str426, %r10
	movabsq	$152, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str388, %r14
	leaq	.L.str425, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -14656(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -14664(%rbp)      # 8-byte Spill
	leaq	.L.str423, %rax
	movq	%rax, -14672(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -14680(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -14688(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -14696(%rbp)      # 8-byte Spill
	leaq	.L.str387, %rax
	movq	%rax, -14704(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -14712(%rbp)      # 8-byte Spill
	leaq	.L.str386, %rax
	movq	%rax, -14720(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -14728(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -14736(%rbp)      # 8-byte Spill
	leaq	.L.str421, %rax
	movq	%rax, -14744(%rbp)      # 8-byte Spill
	leaq	.L.str389, %rax
	movq	%rax, -14752(%rbp)      # 8-byte Spill
	movabsq	$161, %rax
	movq	%rax, -14760(%rbp)      # 8-byte Spill
	leaq	.L.str422, %rax
	movq	%rax, -14768(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -14776(%rbp)      # 8-byte Spill
	leaq	.L.str420, %rax
	movq	%rax, -14784(%rbp)      # 8-byte Spill
	leaq	.L.str419, %rax
	movq	%rax, -14792(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -14800(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -14808(%rbp)      # 8-byte Spill
	leaq	.L.str418, %rax
	movq	%rax, -14816(%rbp)      # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -14824(%rbp)      # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -14832(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -14840(%rbp)      # 8-byte Spill
	leaq	.L.str417, %rax
	movq	%rax, -14848(%rbp)      # 8-byte Spill
	leaq	.L.str383, %rax
	.loc	1 161 0                 # feature_extraction.c:161:0
	subq	$16, %rsp
	movq	%rax, -14856(%rbp)      # 8-byte Spill
	movq	-14760(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -14864(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -14872(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -14880(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-14848(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -14888(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-14808(%rbp), %rax      # 8-byte Reload
	movq	%r8, -14896(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -14904(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -14912(%rbp)      # 8-byte Spill
	movq	%r15, -14920(%rbp)      # 8-byte Spill
	movl	%r12d, -14924(%rbp)     # 4-byte Spill
	movq	%r13, -14936(%rbp)      # 8-byte Spill
	movq	%rbx, -14944(%rbp)      # 8-byte Spill
	movq	%r11, -14952(%rbp)      # 8-byte Spill
	movq	%r10, -14960(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14752(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13832(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14968(%rbp)     # 8-byte Spill
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14848(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14760(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14816(%rbp), %rcx      # 8-byte Reload
	movq	-14800(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-13584(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14856(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14968(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14848(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14968(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-13584(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14816(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -14976(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14760(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14792(%rbp), %rcx      # 8-byte Reload
	movq	-14840(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-14824(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14832(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14976(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14816(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14976(%rbp), %xmm0     # 8-byte Reload
	callq	sqrt
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14984(%rbp)     # 8-byte Spill
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14792(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14760(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14784(%rbp), %rcx      # 8-byte Reload
	movq	-14808(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14752(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-13832(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -14992(%rbp)     # 8-byte Spill
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14784(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14760(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14800(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14984(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14792(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-14992(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14784(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-14992(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-14984(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -15000(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-14760(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14768(%rbp), %rcx      # 8-byte Reload
	movq	-14776(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-13832(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14752(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	vmovsd	-15000(%rbp), %xmm0     # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14744(%rbp), %rcx      # 8-byte Reload
	movq	-14880(%rbp), %r8       # 8-byte Reload
	movq	-14872(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-13832(%rbp), %rax      # 8-byte Reload
	vmovsd	-15000(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp171:
	.loc	1 152 0                 # feature_extraction.c:152:0
	subq	$16, %rsp
	movq	-14952(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14704(%rbp), %rcx      # 8-byte Reload
	movq	-14736(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rdx      # 8-byte Reload
	movq	-14880(%rbp), %rcx      # 8-byte Reload
	movq	-14728(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-13600(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14720(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-13600(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14704(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -15008(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14952(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14672(%rbp), %rcx      # 8-byte Reload
	movq	-14712(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14696(%rbp), %rsi      # 8-byte Reload
	movq	-15008(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14704(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15008(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14664(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14672(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -15012(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14952(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14888(%rbp), %rcx      # 8-byte Reload
	movq	-14688(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14664(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14680(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-15012(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14664(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14672(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-15012(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-14936(%rbp), %rdi      # 8-byte Reload
	movq	-14656(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14888(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15013(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14952(%rbp), %rdi      # 8-byte Reload
	movq	-14944(%rbp), %rsi      # 8-byte Reload
	movq	-14912(%rbp), %rdx      # 8-byte Reload
	movq	-14920(%rbp), %rcx      # 8-byte Reload
	movq	-14864(%rbp), %r8       # 8-byte Reload
	movl	-14924(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14904(%rbp), %rdi      # 8-byte Reload
	movq	-14880(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14960(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-14864(%rbp), %rdi      # 8-byte Reload
	movq	-14880(%rbp), %rsi      # 8-byte Reload
	movq	-14880(%rbp), %rdx      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14896(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15013(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-14656(%rbp), %rdi      # 8-byte Reload
	movq	-14656(%rbp), %rsi      # 8-byte Reload
	movq	-14656(%rbp), %rcx      # 8-byte Reload
	movq	-14888(%rbp), %r8       # 8-byte Reload
	movq	-14880(%rbp), %r9       # 8-byte Reload
	movq	-14872(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15013(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-15008(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -13592(%rbp)      # 8-byte Spill
	jne	.LBB1_53
	jmp	.LBB1_47
.Ltmp172:
.LBB1_52:                               # %._crit_edge42.thread
	movl	-11736(%rbp), %eax      # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str430, %r8
	leaq	.L.str8, %rsi
	movabsq	$164, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str339, %r10
	leaq	.L.str429, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str428, %r13
	.loc	1 163 0                 # feature_extraction.c:163:0
	subq	$16, %rsp
	movq	%rcx, -15024(%rbp)      # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str50, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, -15028(%rbp)      # 4-byte Spill
	movl	$.L.str339, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -15040(%rbp)      # 8-byte Spill
	movl	$.L.str427, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15048(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -15056(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -15064(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -15072(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -15076(%rbp)      # 4-byte Spill
	movq	%rcx, %rsi
	movq	-15056(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -15088(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-15048(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15064(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15104(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-15076(%rbp), %eax      # 4-byte Reload
	movq	%r9, -15112(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movl	%r14d, -15116(%rbp)     # 4-byte Spill
	movq	%r13, -15128(%rbp)      # 8-byte Spill
	movq	%rbx, -15136(%rbp)      # 8-byte Spill
	movq	%r15, -15144(%rbp)      # 8-byte Spill
	movq	%r12, -15152(%rbp)      # 8-byte Spill
	movq	%r11, -15160(%rbp)      # 8-byte Spill
	movq	%r10, -15168(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str377, (%rcx)
	movl	$.L.str378, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movl	$1, %eax
	movl	%eax, %esi
	movq	%rsi, -15176(%rbp)      # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -15184(%rbp)      # 8-byte Spill
	movq	-15176(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -15192(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str336, (%rcx)
	movl	$.L.str337, %eax
	movl	%eax, %r8d
	movq	-15176(%rbp), %rdi      # 8-byte Reload
	movq	-15192(%rbp), %rsi      # 8-byte Reload
	movq	-15184(%rbp), %rdx      # 8-byte Reload
	movq	-15176(%rbp), %rcx      # 8-byte Reload
	movq	-15176(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-15028(%rbp), %eax      # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str336, (%rcx)
	movl	$19134, %r14d           # imm = 0x4ABE
	movl	%r14d, %edi
	movq	-15192(%rbp), %rsi      # 8-byte Reload
	movq	-15176(%rbp), %rcx      # 8-byte Reload
	movq	-15048(%rbp), %r8       # 8-byte Reload
	movq	-15184(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str428, %eax
	movl	%eax, %ecx
	movl	$163, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-15096(%rbp), %rsi      # 8-byte Reload
	movq	-15056(%rbp), %rdx      # 8-byte Reload
	movl	-15076(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str13, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movq	-15176(%rbp), %rdi      # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-15176(%rbp), %rcx      # 8-byte Reload
	movq	-15184(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-368(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-15144(%rbp), %rdi      # 8-byte Reload
	movq	-15152(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -15200(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-15200(%rbp), %rdx      # 8-byte Reload
	movq	-15024(%rbp), %rcx      # 8-byte Reload
	movq	-15128(%rbp), %r8       # 8-byte Reload
	movq	-15088(%rbp), %r9       # 8-byte Reload
	movq	-15040(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp173:
	#DEBUG_VALUE: process_data:scaled_time_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 164 0                 # feature_extraction.c:164:0
	subq	$16, %rsp
	movq	-15072(%rbp), %rdi      # 8-byte Reload
	movq	-15112(%rbp), %rsi      # 8-byte Reload
	movq	-15168(%rbp), %rdx      # 8-byte Reload
	movq	-15160(%rbp), %rcx      # 8-byte Reload
	movq	-15136(%rbp), %r8       # 8-byte Reload
	movl	-15116(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15024(%rbp), %rdi      # 8-byte Reload
	movq	-15088(%rbp), %rsi      # 8-byte Reload
	movq	-15088(%rbp), %rdx      # 8-byte Reload
	movq	-15024(%rbp), %rcx      # 8-byte Reload
	movq	-15104(%rbp), %r8       # 8-byte Reload
	movq	-15088(%rbp), %r9       # 8-byte Reload
	movq	-15040(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15200(%rbp), %rcx      # 8-byte Reload
	movl	-15028(%rbp), %eax      # 4-byte Reload
	movq	%rcx, -15208(%rbp)      # 8-byte Spill
	movl	%eax, -15212(%rbp)      # 4-byte Spill
	jmp	.LBB1_60
.Ltmp174:
.LBB1_53:                               # %._crit_edge42
	movabsq	$1, %rax
	leaq	.L.str432, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str435, %r8
	movabsq	$3, %r9
	leaq	.L.str434, %r10
	movabsq	$164, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str426, %r14
	leaq	.L.str433, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -15224(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -15232(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -15240(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15248(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -15256(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -15264(%rbp)      # 8-byte Spill
	leaq	.L.str431, %rax
	.loc	1 163 0                 # feature_extraction.c:163:0
	subq	$16, %rsp
	movq	%rax, -15272(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -15280(%rbp)      # 8-byte Spill
	movl	$.L.str426, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15288(%rbp)      # 8-byte Spill
	movl	$.L.str431, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15296(%rbp)      # 8-byte Spill
	movl	$163, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15304(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15312(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -15320(%rbp)      # 8-byte Spill
	movq	-15304(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15328(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-15320(%rbp), %rax      # 8-byte Reload
	movl	%esi, -15332(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	-15288(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -15344(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-15296(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15352(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15312(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15360(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-15332(%rbp), %eax      # 4-byte Reload
	movq	%r9, -15368(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -15376(%rbp)      # 8-byte Spill
	movq	%r14, -15384(%rbp)      # 8-byte Spill
	movq	%r15, -15392(%rbp)      # 8-byte Spill
	movl	%r12d, -15396(%rbp)     # 4-byte Spill
	movq	%rbx, -15408(%rbp)      # 8-byte Spill
	movq	%r11, -15416(%rbp)      # 8-byte Spill
	movq	%r10, -15424(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str13, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %r9d
	movq	%rcx, %rdi
	movq	-368(%rbp), %rdx        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-368(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-15376(%rbp), %rdi      # 8-byte Reload
	movq	-15264(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -15432(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-15432(%rbp), %rdx      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15272(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:scaled_time_data <- undef
.Ltmp175:
	#DEBUG_VALUE: channel <- 0
	.loc	1 164 0                 # feature_extraction.c:164:0
	subq	$16, %rsp
	movq	-15416(%rbp), %rdi      # 8-byte Reload
	movq	-15408(%rbp), %rsi      # 8-byte Reload
	movq	-15384(%rbp), %rdx      # 8-byte Reload
	movq	-15352(%rbp), %rcx      # 8-byte Reload
	movq	-15256(%rbp), %r8       # 8-byte Reload
	movl	-15396(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15328(%rbp), %rdi      # 8-byte Reload
	movq	-15232(%rbp), %rsi      # 8-byte Reload
	movq	-15344(%rbp), %rdx      # 8-byte Reload
	movq	-15344(%rbp), %rcx      # 8-byte Reload
	movq	-15248(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15224(%rbp), %rdi      # 8-byte Reload
	movq	-15232(%rbp), %rsi      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15240(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15376(%rbp), %rdi      # 8-byte Reload
	movq	-15224(%rbp), %rsi      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15352(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15433(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15416(%rbp), %rdi      # 8-byte Reload
	movq	-15408(%rbp), %rsi      # 8-byte Reload
	movq	-15384(%rbp), %rdx      # 8-byte Reload
	movq	-15392(%rbp), %rcx      # 8-byte Reload
	movq	-15328(%rbp), %r8       # 8-byte Reload
	movl	-15396(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15368(%rbp), %rdi      # 8-byte Reload
	movq	-15344(%rbp), %rsi      # 8-byte Reload
	movq	-15344(%rbp), %rdx      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15424(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15328(%rbp), %rdi      # 8-byte Reload
	movq	-15344(%rbp), %rsi      # 8-byte Reload
	movq	-15344(%rbp), %rdx      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15360(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15433(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-15224(%rbp), %rdi      # 8-byte Reload
	movq	-15224(%rbp), %rsi      # 8-byte Reload
	movq	-15224(%rbp), %rcx      # 8-byte Reload
	movq	-15352(%rbp), %r8       # 8-byte Reload
	movq	-15344(%rbp), %r9       # 8-byte Reload
	movq	-15280(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15433(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_55
.Ltmp176:
# BB#54:                                # %._crit_edge32.thread
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str438, %r8
	leaq	.L.str8, %rdx
	movabsq	$174, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str435, %r9
	leaq	.L.str437, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str436, %r12
	.loc	1 173 0                 # feature_extraction.c:173:0
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -15448(%rbp)      # 8-byte Spill
	movl	$.L.str435, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15456(%rbp)      # 8-byte Spill
	movl	$.L.str436, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15464(%rbp)      # 8-byte Spill
	movl	$173, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15472(%rbp)      # 8-byte Spill
	movl	$26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -15480(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -15488(%rbp)      # 8-byte Spill
	movq	-15472(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15496(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -15500(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-15456(%rbp), %r13      # 8-byte Reload
	movq	%rdx, -15512(%rbp)      # 8-byte Spill
	movq	%r13, %rdx
	movq	-15464(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15520(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15480(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15528(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-15500(%rbp), %r13d     # 4-byte Reload
	movq	%r9, -15536(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, -15544(%rbp)      # 8-byte Spill
	movl	%ebx, -15548(%rbp)      # 4-byte Spill
	movq	%r15, -15560(%rbp)      # 8-byte Spill
	movq	%r12, -15568(%rbp)      # 8-byte Spill
	movq	%r11, -15576(%rbp)      # 8-byte Spill
	movq	%r10, -15584(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str325, %r9d
	movl	%r9d, %r8d
	movl	$64, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %eax
	xorl	%r9d, %r9d
                                        # kill: R9<def> R9D<kill>
	movq	%rax, %rdi
	movq	-11328(%rbp), %rdx      # 8-byte Reload
	movq	%rax, %rcx
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11328(%rbp), %rax      # 8-byte Reload
	leaq	15(,%rax,8), %rcx
	andq	$-16, %rcx
	movq	%rsp, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rsp
	subq	$16, %rsp
	movq	-15544(%rbp), %rdi      # 8-byte Reload
	movq	-15560(%rbp), %rsi      # 8-byte Reload
	movq	%rdx, -15592(%rbp)      # 8-byte Spill
	movq	-15488(%rbp), %rcx      # 8-byte Reload
	movq	-15568(%rbp), %r8       # 8-byte Reload
	movq	-15520(%rbp), %r9       # 8-byte Reload
	movq	-15512(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp177:
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- undef
	#DEBUG_VALUE: i <- 0
	.loc	1 174 0                 # feature_extraction.c:174:0
	subq	$16, %rsp
	movq	-15496(%rbp), %rdi      # 8-byte Reload
	movq	-15448(%rbp), %rsi      # 8-byte Reload
	movq	-15536(%rbp), %rdx      # 8-byte Reload
	movq	-15584(%rbp), %rcx      # 8-byte Reload
	movq	-15576(%rbp), %r8       # 8-byte Reload
	movl	-15548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15488(%rbp), %rdi      # 8-byte Reload
	movq	-15520(%rbp), %rsi      # 8-byte Reload
	movq	-15520(%rbp), %rdx      # 8-byte Reload
	movq	-15488(%rbp), %rcx      # 8-byte Reload
	movq	-15528(%rbp), %r8       # 8-byte Reload
	movq	-15520(%rbp), %r9       # 8-byte Reload
	movq	-15512(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15592(%rbp), %rax      # 8-byte Reload
	movq	%rax, -15600(%rbp)      # 8-byte Spill
	jmp	.LBB1_69
.Ltmp178:
.LBB1_55:                               # %.preheader27.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str441, %r8
	leaq	.L.str8, %rdx
	movabsq	$164, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str434, %r9
	leaq	.L.str440, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str439, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, -15608(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15616(%rbp)      # 8-byte Spill
	movabsq	$166, %rax
	movq	%rax, -15624(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 166 0                 # feature_extraction.c:166:0
.Ltmp179:
	subq	$16, %rsp
	movq	%rax, -15632(%rbp)      # 8-byte Spill
	movq	-15624(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15640(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -15648(%rbp)      # 8-byte Spill
	movq	%rdx, -15656(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -15664(%rbp)      # 8-byte Spill
	movq	%r15, %rcx
	movq	-15632(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15672(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15680(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -15688(%rbp)      # 8-byte Spill
	movl	%ebx, -15692(%rbp)      # 4-byte Spill
	movq	%r15, -15704(%rbp)      # 8-byte Spill
	movq	%r13, -15712(%rbp)      # 8-byte Spill
	movq	%r12, -15720(%rbp)      # 8-byte Spill
	movq	%r11, -15728(%rbp)      # 8-byte Spill
	movq	%r10, -15736(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15728(%rbp), %rdi      # 8-byte Reload
	movq	-15720(%rbp), %rsi      # 8-byte Reload
	movq	-15608(%rbp), %rdx      # 8-byte Reload
	movq	-15608(%rbp), %rcx      # 8-byte Reload
	movq	-15616(%rbp), %r8       # 8-byte Reload
	movq	-15608(%rbp), %r9       # 8-byte Reload
	movq	-15656(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-15664(%rbp), %rdi      # 8-byte Reload
	movq	-15720(%rbp), %rsi      # 8-byte Reload
	movq	-15664(%rbp), %rcx      # 8-byte Reload
	movq	-15712(%rbp), %r8       # 8-byte Reload
	movq	-15608(%rbp), %r9       # 8-byte Reload
	movq	-15656(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp180:
	.loc	1 164 0                 # feature_extraction.c:164:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-15688(%rbp), %rdi      # 8-byte Reload
	movq	-15664(%rbp), %rsi      # 8-byte Reload
	movq	-15664(%rbp), %rcx      # 8-byte Reload
	movq	-15704(%rbp), %r8       # 8-byte Reload
	movq	-15608(%rbp), %r9       # 8-byte Reload
	movq	-15656(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -15737(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15640(%rbp), %rdi      # 8-byte Reload
	movq	-15648(%rbp), %rsi      # 8-byte Reload
	movq	-15680(%rbp), %rdx      # 8-byte Reload
	movq	-15736(%rbp), %rcx      # 8-byte Reload
	movq	-15728(%rbp), %r8       # 8-byte Reload
	movl	-15692(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15664(%rbp), %rdi      # 8-byte Reload
	movq	-15608(%rbp), %rsi      # 8-byte Reload
	movq	-15608(%rbp), %rdx      # 8-byte Reload
	movq	-15664(%rbp), %rcx      # 8-byte Reload
	movq	-15672(%rbp), %r8       # 8-byte Reload
	movq	-15608(%rbp), %r9       # 8-byte Reload
	movq	-15656(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15608(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -15752(%rbp)      # 8-byte Spill
.LBB1_56:                               # %.preheader27
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_58 Depth 2
	movq	-15752(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str439, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str444, %r9
	movabsq	$3, %r10
	leaq	.L.str446, %r11
	movabsq	$166, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str441, %r15
	leaq	.L.str445, %r12
	movl	$1, %r13d
	movq	%rax, -15760(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -15768(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -15776(%rbp)      # 8-byte Spill
	leaq	.L.str442, %rax
	movq	%rax, -15784(%rbp)      # 8-byte Spill
	leaq	.L.str434, %rax
	movq	%rax, -15792(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -15800(%rbp)      # 8-byte Spill
	leaq	.L.str443, %rax
	movq	%rax, -15808(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -15816(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 166 0                 # feature_extraction.c:166:0
.Ltmp181:
	subq	$16, %rsp
	movq	%rax, -15824(%rbp)      # 8-byte Spill
	movq	-15816(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -15832(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -15840(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -15848(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-15784(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -15856(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15824(%rbp), %rax      # 8-byte Reload
	movq	%r8, -15864(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -15872(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -15880(%rbp)      # 8-byte Spill
	movq	%rbx, -15888(%rbp)      # 8-byte Spill
	movq	%r15, -15896(%rbp)      # 8-byte Spill
	movq	%r12, -15904(%rbp)      # 8-byte Spill
	movl	%r13d, -15908(%rbp)     # 4-byte Spill
	movq	%r11, -15920(%rbp)      # 8-byte Spill
	movq	%r10, -15928(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15832(%rbp), %rdi      # 8-byte Reload
	movq	-15776(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15856(%rbp), %rcx      # 8-byte Reload
	movq	-15808(%rbp), %r8       # 8-byte Reload
	movq	-15856(%rbp), %r9       # 8-byte Reload
	movq	-15872(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15856(%rbp), %rdi      # 8-byte Reload
	movq	-15776(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15848(%rbp), %rcx      # 8-byte Reload
	movq	-15800(%rbp), %r8       # 8-byte Reload
	movq	-15856(%rbp), %r9       # 8-byte Reload
	movq	-15792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15768(%rbp), %rdi      # 8-byte Reload
	movq	-15776(%rbp), %rsi      # 8-byte Reload
	movq	-15760(%rbp), %rdx      # 8-byte Reload
	movq	-15856(%rbp), %rcx      # 8-byte Reload
	movq	-15784(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15888(%rbp), %rdi      # 8-byte Reload
	movq	-15880(%rbp), %rsi      # 8-byte Reload
	movq	-15896(%rbp), %rdx      # 8-byte Reload
	movq	-15904(%rbp), %rcx      # 8-byte Reload
	movq	-15832(%rbp), %r8       # 8-byte Reload
	movl	-15908(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15928(%rbp), %rdi      # 8-byte Reload
	movq	-15848(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15856(%rbp), %rcx      # 8-byte Reload
	movq	-15920(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15832(%rbp), %rdi      # 8-byte Reload
	movq	-15848(%rbp), %rsi      # 8-byte Reload
	movq	-15848(%rbp), %rdx      # 8-byte Reload
	movq	-15856(%rbp), %rcx      # 8-byte Reload
	movq	-15872(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15737(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-15856(%rbp), %rdi      # 8-byte Reload
	movq	-15856(%rbp), %rsi      # 8-byte Reload
	movq	-15856(%rbp), %rcx      # 8-byte Reload
	movq	-15864(%rbp), %r8       # 8-byte Reload
	movq	-15848(%rbp), %r9       # 8-byte Reload
	movq	-15840(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-15737(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_57
	jmp	.LBB1_59
.LBB1_57:                               # %.lr.ph29
                                        #   in Loop: Header=BB1_56 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str455, %r8
	leaq	.L.str8, %rdx
	movabsq	$166, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str446, %r9
	leaq	.L.str454, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str453, %r12
	movabsq	$32, %r13
	movq	%rax, -15936(%rbp)      # 8-byte Spill
	leaq	.L.str448, %rax
	movq	%rax, -15944(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -15952(%rbp)      # 8-byte Spill
	leaq	.L.str452, %rax
	movq	%rax, -15960(%rbp)      # 8-byte Spill
	leaq	.L.str451, %rax
	movq	%rax, -15968(%rbp)      # 8-byte Spill
	movabsq	$168, %rax
	movq	%rax, -15976(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -15984(%rbp)      # 8-byte Spill
	leaq	.L.str390, %rax
	movq	%rax, -15992(%rbp)      # 8-byte Spill
	leaq	.L.str442, %rax
	movq	%rax, -16000(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -16008(%rbp)      # 8-byte Spill
	leaq	.L.str450, %rax
	movq	%rax, -16016(%rbp)      # 8-byte Spill
	leaq	.L.str449, %rax
	movq	%rax, -16024(%rbp)      # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, -16032(%rbp)      # 8-byte Spill
	leaq	.L.str447, %rax
	movq	%rax, -16040(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -16048(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -16056(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 168 0                 # feature_extraction.c:168:0
.Ltmp182:
	subq	$16, %rsp
	movq	%rax, -16064(%rbp)      # 8-byte Spill
	movq	-15976(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -16072(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-16072(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -16080(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -16088(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-16040(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16096(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16064(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16104(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16112(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -16120(%rbp)      # 8-byte Spill
	movl	%ebx, -16124(%rbp)      # 4-byte Spill
	movq	%r15, -16136(%rbp)      # 8-byte Spill
	movq	%r12, -16144(%rbp)      # 8-byte Spill
	movq	%r13, -16152(%rbp)      # 8-byte Spill
	movq	%r11, -16160(%rbp)      # 8-byte Spill
	movq	%r10, -16168(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-15760(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16000(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15760(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16152(%rbp), %rsi      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16040(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -16172(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15976(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-15944(%rbp), %rcx      # 8-byte Reload
	movq	-16056(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-16160(%rbp), %rdi      # 8-byte Reload
	movq	-16152(%rbp), %rsi      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16048(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16172(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16152(%rbp), %rsi      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16040(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16172(%rbp), %ebx      # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16152(%rbp), %rsi      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-15944(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -16176(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15976(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-16024(%rbp), %rcx      # 8-byte Reload
	movq	-16008(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16160(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-15760(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16000(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-11568(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16032(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-15760(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11568(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16096(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16184(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16024(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15976(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-16016(%rbp), %rcx      # 8-byte Reload
	movq	-15984(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-16184(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16024(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11568(%rbp), %rax      # 8-byte Reload
	movq	-15760(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -16192(%rbp)     # 8-byte Spill
	movq	-16096(%rbp), %rdx      # 8-byte Reload
	movq	-16016(%rbp), %rcx      # 8-byte Reload
	movq	-15936(%rbp), %r8       # 8-byte Reload
	movq	-16088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-15976(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-15968(%rbp), %rcx      # 8-byte Reload
	movq	-16008(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16160(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-15760(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16000(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-11576(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-15992(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-15760(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-11576(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16096(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16200(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-15968(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-15976(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-15960(%rbp), %rcx      # 8-byte Reload
	movq	-15984(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	-16200(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-15968(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-11576(%rbp), %rax      # 8-byte Reload
	movq	-15760(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
.Ltmp183:
	.loc	1 166 0                 # feature_extraction.c:166:0
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -16208(%rbp)     # 8-byte Spill
	movq	-16096(%rbp), %rdx      # 8-byte Reload
	movq	-15960(%rbp), %rcx      # 8-byte Reload
	movq	-15936(%rbp), %r8       # 8-byte Reload
	movq	-16088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16080(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-16144(%rbp), %rcx      # 8-byte Reload
	movq	-15952(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-16176(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-16152(%rbp), %rsi      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-15944(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16176(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-16120(%rbp), %rdi      # 8-byte Reload
	movq	-16136(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16144(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -16216(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16080(%rbp), %rdi      # 8-byte Reload
	movq	-16072(%rbp), %rsi      # 8-byte Reload
	movq	-16112(%rbp), %rdx      # 8-byte Reload
	movq	-16168(%rbp), %rcx      # 8-byte Reload
	movq	-16160(%rbp), %r8       # 8-byte Reload
	movl	-16124(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16096(%rbp), %rdi      # 8-byte Reload
	movq	-15936(%rbp), %rsi      # 8-byte Reload
	movq	-15936(%rbp), %rdx      # 8-byte Reload
	movq	-16096(%rbp), %rcx      # 8-byte Reload
	movq	-16104(%rbp), %r8       # 8-byte Reload
	movq	-15936(%rbp), %r9       # 8-byte Reload
	movq	-16088(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15936(%rbp), %rax      # 8-byte Reload
	movq	%rax, -16224(%rbp)      # 8-byte Spill
.LBB1_58:                               #   Parent Loop BB1_56 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-16224(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str466, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str455, %r9
	movabsq	$3, %r10
	leaq	.L.str444, %r11
	movabsq	$166, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str467, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -16232(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -16240(%rbp)      # 8-byte Spill
	leaq	.L.str465, %rax
	movq	%rax, -16248(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -16256(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -16264(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -16272(%rbp)      # 8-byte Spill
	leaq	.L.str457, %rax
	movq	%rax, -16280(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -16288(%rbp)      # 8-byte Spill
	leaq	.L.str456, %rax
	movq	%rax, -16296(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -16304(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -16312(%rbp)      # 8-byte Spill
	leaq	.L.str462, %rax
	movq	%rax, -16320(%rbp)      # 8-byte Spill
	leaq	.L.str463, %rax
	movq	%rax, -16328(%rbp)      # 8-byte Spill
	movabsq	$168, %rax
	movq	%rax, -16336(%rbp)      # 8-byte Spill
	leaq	.L.str464, %rax
	movq	%rax, -16344(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -16352(%rbp)      # 8-byte Spill
	leaq	.L.str431, %rax
	movq	%rax, -16360(%rbp)      # 8-byte Spill
	leaq	.L.str458, %rax
	movq	%rax, -16368(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -16376(%rbp)      # 8-byte Spill
	leaq	.L.str461, %rax
	movq	%rax, -16384(%rbp)      # 8-byte Spill
	leaq	.L.str452, %rax
	movq	%rax, -16392(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -16400(%rbp)      # 8-byte Spill
	leaq	.L.str460, %rax
	movq	%rax, -16408(%rbp)      # 8-byte Spill
	leaq	.L.str450, %rax
	movq	%rax, -16416(%rbp)      # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, -16424(%rbp)      # 8-byte Spill
	leaq	.L.str459, %rax
	movq	%rax, -16432(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -16440(%rbp)      # 8-byte Spill
	leaq	.L.str49, %rax
	movq	%rax, -16448(%rbp)      # 8-byte Spill
	leaq	.L.str453, %rax
	movq	%rax, -16456(%rbp)      # 8-byte Spill
	leaq	.L.str446, %rax
	movq	%rax, -16464(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -16472(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 168 0                 # feature_extraction.c:168:0
.Ltmp184:
	subq	$16, %rsp
	movq	%rax, -16480(%rbp)      # 8-byte Spill
	movq	-16472(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -16488(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -16496(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -16504(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-16296(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16512(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16480(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16520(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16528(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -16536(%rbp)      # 8-byte Spill
	movq	%r15, -16544(%rbp)      # 8-byte Spill
	movl	%r12d, -16548(%rbp)     # 4-byte Spill
	movq	%r13, -16560(%rbp)      # 8-byte Spill
	movq	%rbx, -16568(%rbp)      # 8-byte Spill
	movq	%r11, -16576(%rbp)      # 8-byte Spill
	movq	%r10, -16584(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16496(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16280(%rbp), %r8       # 8-byte Reload
	movq	-16512(%rbp), %r9       # 8-byte Reload
	movq	-16528(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16496(%rbp), %rdx      # 8-byte Reload
	movq	-16496(%rbp), %rcx      # 8-byte Reload
	movq	-16304(%rbp), %r8       # 8-byte Reload
	movq	-16512(%rbp), %r9       # 8-byte Reload
	movq	-16464(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16232(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16296(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16464(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16368(%rbp), %rcx      # 8-byte Reload
	movq	-16312(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16216(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16456(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16232(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16296(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16232(%rbp), %rax      # 8-byte Reload
	movq	-16216(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16368(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -16592(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16432(%rbp), %rcx      # 8-byte Reload
	movq	-16376(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16592(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16368(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-144(%rbp), %rdx        # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16448(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16592(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-144(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16512(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16600(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16432(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16408(%rbp), %rcx      # 8-byte Reload
	movq	-16440(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16600(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16432(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-144(%rbp), %rax        # 8-byte Reload
	movq	-16592(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -16608(%rbp)     # 8-byte Spill
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16408(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16384(%rbp), %rcx      # 8-byte Reload
	movq	-16424(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16192(%rbp), %xmm0     # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16416(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16608(%rbp), %xmm0     # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16408(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-16608(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-16192(%rbp), %xmm1     # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16384(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -16616(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16320(%rbp), %rcx      # 8-byte Reload
	movq	-16400(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16208(%rbp), %xmm0     # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16392(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16616(%rbp), %xmm0     # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16384(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-16616(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-16208(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16320(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -16624(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16328(%rbp), %rcx      # 8-byte Reload
	movq	-16376(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16592(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16368(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-15432(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16360(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16592(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-15432(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-16512(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16632(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16328(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16336(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16344(%rbp), %rcx      # 8-byte Reload
	movq	-16352(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16632(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16328(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	vmovsd	-16624(%rbp), %xmm0     # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16320(%rbp), %rcx      # 8-byte Reload
	movq	-16496(%rbp), %r8       # 8-byte Reload
	movq	-16488(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-15432(%rbp), %rax      # 8-byte Reload
	movq	-16592(%rbp), %rcx      # 8-byte Reload
	vmovsd	-16624(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp185:
	.loc	1 166 0                 # feature_extraction.c:166:0
	subq	$16, %rsp
	movq	-16568(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16280(%rbp), %rcx      # 8-byte Reload
	movq	-16312(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rdx      # 8-byte Reload
	movq	-16496(%rbp), %rcx      # 8-byte Reload
	movq	-16304(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16232(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16296(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16232(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16280(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -16640(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16568(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16248(%rbp), %rcx      # 8-byte Reload
	movq	-16288(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16272(%rbp), %rsi      # 8-byte Reload
	movq	-16640(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16280(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16640(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16240(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16248(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -16644(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16568(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16504(%rbp), %rcx      # 8-byte Reload
	movq	-16264(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16240(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16256(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16644(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16240(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16248(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16644(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-16560(%rbp), %rdi      # 8-byte Reload
	movq	-16512(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16504(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -16645(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16568(%rbp), %rdi      # 8-byte Reload
	movq	-16536(%rbp), %rsi      # 8-byte Reload
	movq	-16528(%rbp), %rdx      # 8-byte Reload
	movq	-16544(%rbp), %rcx      # 8-byte Reload
	movq	-16520(%rbp), %r8       # 8-byte Reload
	movl	-16548(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16584(%rbp), %rdi      # 8-byte Reload
	movq	-16496(%rbp), %rsi      # 8-byte Reload
	movq	-16496(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16576(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16520(%rbp), %rdi      # 8-byte Reload
	movq	-16496(%rbp), %rsi      # 8-byte Reload
	movq	-16496(%rbp), %rdx      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16528(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16645(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-16512(%rbp), %rdi      # 8-byte Reload
	movq	-16512(%rbp), %rsi      # 8-byte Reload
	movq	-16512(%rbp), %rcx      # 8-byte Reload
	movq	-16504(%rbp), %r8       # 8-byte Reload
	movq	-16496(%rbp), %r9       # 8-byte Reload
	movq	-16488(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16645(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-16640(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -16224(%rbp)      # 8-byte Spill
	jne	.LBB1_59
	jmp	.LBB1_58
.Ltmp186:
.LBB1_59:                               # %._crit_edge30
                                        #   in Loop: Header=BB1_56 Depth=1
	movabsq	$1, %rax
	leaq	.L.str469, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str441, %r8
	movabsq	$3, %r9
	leaq	.L.str430, %r10
	movabsq	$164, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str444, %r14
	leaq	.L.str470, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -16656(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -16664(%rbp)      # 8-byte Spill
	leaq	.L.str468, %rax
	movq	%rax, -16672(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -16680(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -16688(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -16696(%rbp)      # 8-byte Spill
	leaq	.L.str443, %rax
	movq	%rax, -16704(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -16712(%rbp)      # 8-byte Spill
	leaq	.L.str442, %rax
	movq	%rax, -16720(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -16728(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 164 0                 # feature_extraction.c:164:0
	subq	$16, %rsp
	movq	%rdi, -16736(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -16744(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -16752(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -16760(%rbp)      # 8-byte Spill
	movq	-16704(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -16768(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16760(%rbp), %rax      # 8-byte Reload
	movq	%r8, -16776(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -16784(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -16792(%rbp)      # 8-byte Spill
	movq	%r15, -16800(%rbp)      # 8-byte Spill
	movl	%r12d, -16804(%rbp)     # 4-byte Spill
	movq	%r13, -16816(%rbp)      # 8-byte Spill
	movq	%rbx, -16824(%rbp)      # 8-byte Spill
	movq	%r11, -16832(%rbp)      # 8-byte Spill
	movq	%r10, -16840(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16736(%rbp), %rdi      # 8-byte Reload
	movq	-16696(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rdx      # 8-byte Reload
	movq	-16752(%rbp), %rcx      # 8-byte Reload
	movq	-16728(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16656(%rbp), %rdi      # 8-byte Reload
	movq	-16696(%rbp), %rsi      # 8-byte Reload
	movq	-15760(%rbp), %rdx      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16720(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-15760(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-16816(%rbp), %rdi      # 8-byte Reload
	movq	-16696(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16704(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -16848(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16832(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16792(%rbp), %rdx      # 8-byte Reload
	movq	-16672(%rbp), %rcx      # 8-byte Reload
	movq	-16712(%rbp), %r8       # 8-byte Reload
	movl	-16804(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16656(%rbp), %rdi      # 8-byte Reload
	movq	-16696(%rbp), %rsi      # 8-byte Reload
	movq	-16848(%rbp), %rdx      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16704(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-16848(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16816(%rbp), %rdi      # 8-byte Reload
	movq	-16664(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16672(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -16852(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16832(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16792(%rbp), %rdx      # 8-byte Reload
	movq	-16768(%rbp), %rcx      # 8-byte Reload
	movq	-16688(%rbp), %r8       # 8-byte Reload
	movl	-16804(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-16736(%rbp), %rdi      # 8-byte Reload
	movq	-16664(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16680(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16852(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-16656(%rbp), %rdi      # 8-byte Reload
	movq	-16664(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16672(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16852(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-16816(%rbp), %rdi      # 8-byte Reload
	movq	-16656(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16768(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -16853(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16832(%rbp), %rdi      # 8-byte Reload
	movq	-16824(%rbp), %rsi      # 8-byte Reload
	movq	-16792(%rbp), %rdx      # 8-byte Reload
	movq	-16800(%rbp), %rcx      # 8-byte Reload
	movq	-16736(%rbp), %r8       # 8-byte Reload
	movl	-16804(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16784(%rbp), %rdi      # 8-byte Reload
	movq	-16752(%rbp), %rsi      # 8-byte Reload
	movq	-16752(%rbp), %rdx      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16840(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-16736(%rbp), %rdi      # 8-byte Reload
	movq	-16752(%rbp), %rsi      # 8-byte Reload
	movq	-16752(%rbp), %rdx      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16776(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16853(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-16656(%rbp), %rdi      # 8-byte Reload
	movq	-16656(%rbp), %rsi      # 8-byte Reload
	movq	-16656(%rbp), %rcx      # 8-byte Reload
	movq	-16768(%rbp), %r8       # 8-byte Reload
	movq	-16752(%rbp), %r9       # 8-byte Reload
	movq	-16744(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-16853(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-16848(%rbp), %rcx      # 8-byte Reload
	movq	-15432(%rbp), %rdx      # 8-byte Reload
	movl	-13388(%rbp), %r12d     # 4-byte Reload
	movq	%rcx, -15752(%rbp)      # 8-byte Spill
	movq	%rdx, -15208(%rbp)      # 8-byte Spill
	movl	%r12d, -15212(%rbp)     # 4-byte Spill
	jne	.LBB1_60
	jmp	.LBB1_56
.Ltmp187:
.LBB1_60:                               # %._crit_edge32
	movl	-15212(%rbp), %eax      # 4-byte Reload
	movq	-15208(%rbp), %rcx      # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str474, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str438, %r10
	movabsq	$3, %r11
	leaq	.L.str11, %rbx
	movabsq	$174, %r14
	leaq	.L.str50, %r15
	leaq	.L.str430, %r12
	leaq	.L.str475, %r13
	movl	%eax, -16860(%rbp)      # 4-byte Spill
.Ltmp188:
	#DEBUG_VALUE: process_data:n_time_sd <- [RBP+-16860]
	#DEBUG_VALUE: process_data:n_time_sd <- [RBP+-16860]
	movl	$1, %eax
	movq	%rcx, -16872(%rbp)      # 8-byte Spill
.Ltmp189:
	#DEBUG_VALUE: process_data:scaled_time_data <- [RBP+-16872]
	#DEBUG_VALUE: process_data:scaled_time_data <- [RBP+-16872]
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -16880(%rbp)      # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -16888(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rcx
	movq	%rcx, -16896(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -16904(%rbp)      # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -16912(%rbp)      # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, -16920(%rbp)      # 8-byte Spill
	leaq	.L.str473, %rcx
	.loc	1 173 0                 # feature_extraction.c:173:0
	subq	$16, %rsp
	movq	%rcx, -16928(%rbp)      # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str50, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, -16932(%rbp)      # 4-byte Spill
	movl	$.L.str430, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -16944(%rbp)      # 8-byte Spill
	movl	$.L.str471, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -16952(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -16960(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -16968(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -16976(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -16980(%rbp)      # 4-byte Spill
	movq	%rcx, %rsi
	movq	%rax, -16992(%rbp)      # 8-byte Spill
	movq	-16960(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -17000(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-16952(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17008(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-16968(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17016(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-16980(%rbp), %eax      # 4-byte Reload
	movq	%r9, -17024(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -17032(%rbp)      # 8-byte Spill
	movq	%r13, -17040(%rbp)      # 8-byte Spill
	movq	%r15, -17048(%rbp)      # 8-byte Spill
	movq	%r12, -17056(%rbp)      # 8-byte Spill
	movq	%rbx, -17064(%rbp)      # 8-byte Spill
	movq	%r11, -17072(%rbp)      # 8-byte Spill
	movq	%r10, -17080(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str444, (%rcx)
	movl	$.L.str431, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %edi
	movq	%rdi, -17088(%rbp)      # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -17096(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-17096(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -17104(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17088(%rbp), %r11      # 8-byte Reload
	movq	%rcx, -17112(%rbp)      # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str339, (%rcx)
	movl	$.L.str428, %eax
	movl	%eax, %r8d
	movq	-17088(%rbp), %rdi      # 8-byte Reload
	movq	-17104(%rbp), %rsi      # 8-byte Reload
	movq	-17096(%rbp), %rdx      # 8-byte Reload
	movq	-17088(%rbp), %rcx      # 8-byte Reload
	movq	-17088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str339, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-17104(%rbp), %rsi      # 8-byte Reload
	movq	-16872(%rbp), %rdx      # 8-byte Reload
	movq	-17088(%rbp), %r8       # 8-byte Reload
	movq	%rcx, -17120(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-16952(%rbp), %r8       # 8-byte Reload
	movq	-17096(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str472, %eax
	movl	%eax, %ecx
	movq	-16992(%rbp), %rdi      # 8-byte Reload
	movq	-17008(%rbp), %rsi      # 8-byte Reload
	movq	-16960(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -17128(%rbp)      # 8-byte Spill
	movq	-16968(%rbp), %r8       # 8-byte Reload
	movl	-16980(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str444, (%rcx)
	movl	$.L.str378, %eax
	movl	%eax, %r8d
	movl	$32, %eax
	movl	%eax, %ecx
	movq	-17112(%rbp), %rdi      # 8-byte Reload
	movq	%rcx, %rsi
	movq	-17096(%rbp), %rdx      # 8-byte Reload
	movq	-17088(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -17136(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str339, (%rcx)
	movl	$.L.str427, %eax
	movl	%eax, %r8d
	movq	-17088(%rbp), %rdi      # 8-byte Reload
	movq	-17136(%rbp), %rsi      # 8-byte Reload
	movq	-17096(%rbp), %rdx      # 8-byte Reload
	movq	-17088(%rbp), %rcx      # 8-byte Reload
	movq	-17088(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-16860(%rbp), %eax      # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str339, (%rcx)
	movq	-17120(%rbp), %rdi      # 8-byte Reload
	movq	-17136(%rbp), %rsi      # 8-byte Reload
	movq	-17088(%rbp), %rcx      # 8-byte Reload
	movq	-17128(%rbp), %r8       # 8-byte Reload
	movq	-17096(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str473, %eax
	movl	%eax, %ecx
	movl	$173, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-17008(%rbp), %rsi      # 8-byte Reload
	movq	-16960(%rbp), %rdx      # 8-byte Reload
	movl	-16980(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str325, %eax
	movl	%eax, %r8d
	movq	-17088(%rbp), %rdi      # 8-byte Reload
	movq	-17104(%rbp), %rsi      # 8-byte Reload
	movq	-11328(%rbp), %rdx      # 8-byte Reload
	movq	-17088(%rbp), %rcx      # 8-byte Reload
	movq	-17096(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11328(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-16880(%rbp), %rdi      # 8-byte Reload
	movq	-16920(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -17144(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-17144(%rbp), %rdx      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-16928(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- undef
.Ltmp190:
	#DEBUG_VALUE: i <- 0
	.loc	1 174 0                 # feature_extraction.c:174:0
	subq	$16, %rsp
	movq	-17032(%rbp), %rdi      # 8-byte Reload
	movq	-17048(%rbp), %rsi      # 8-byte Reload
	movq	-17056(%rbp), %rdx      # 8-byte Reload
	movq	-16944(%rbp), %rcx      # 8-byte Reload
	movq	-16912(%rbp), %r8       # 8-byte Reload
	movl	-16932(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17024(%rbp), %rdi      # 8-byte Reload
	movq	-16888(%rbp), %rsi      # 8-byte Reload
	movq	-16976(%rbp), %rdx      # 8-byte Reload
	movq	-16976(%rbp), %rcx      # 8-byte Reload
	movq	-16904(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-17000(%rbp), %rdi      # 8-byte Reload
	movq	-16888(%rbp), %rsi      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-16896(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-16880(%rbp), %rdi      # 8-byte Reload
	movq	-17000(%rbp), %rsi      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-16944(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -17145(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17032(%rbp), %rdi      # 8-byte Reload
	movq	-17048(%rbp), %rsi      # 8-byte Reload
	movq	-17056(%rbp), %rdx      # 8-byte Reload
	movq	-17040(%rbp), %rcx      # 8-byte Reload
	movq	-17024(%rbp), %r8       # 8-byte Reload
	movl	-16932(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17072(%rbp), %rdi      # 8-byte Reload
	movq	-16976(%rbp), %rsi      # 8-byte Reload
	movq	-16976(%rbp), %rdx      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-17064(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17024(%rbp), %rdi      # 8-byte Reload
	movq	-16976(%rbp), %rsi      # 8-byte Reload
	movq	-16976(%rbp), %rdx      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-17080(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17145(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-17000(%rbp), %rdi      # 8-byte Reload
	movq	-17000(%rbp), %rsi      # 8-byte Reload
	movq	-17000(%rbp), %rcx      # 8-byte Reload
	movq	-16944(%rbp), %r8       # 8-byte Reload
	movq	-16976(%rbp), %r9       # 8-byte Reload
	movq	-17016(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17145(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-17144(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -15600(%rbp)      # 8-byte Spill
	jne	.LBB1_61
	jmp	.LBB1_69
.Ltmp191:
.LBB1_61:                               # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str478, %r8
	leaq	.L.str8, %rdx
	movabsq	$174, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str11, %r9
	leaq	.L.str15, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str477, %r12
	.loc	1 179 0                 # feature_extraction.c:179:0
.Ltmp192:
	subq	$16, %rsp
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str50, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, -17160(%rbp)      # 8-byte Spill
	movl	$.L.str11, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -17168(%rbp)      # 8-byte Spill
	movl	$.L.str476, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -17176(%rbp)      # 8-byte Spill
	movl	$179, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -17184(%rbp)      # 8-byte Spill
	movl	$46, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -17192(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -17200(%rbp)      # 8-byte Spill
	movq	-17184(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17208(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -17212(%rbp)      # 4-byte Spill
	movq	%r13, %rsi
	movq	-17168(%rbp), %rax      # 8-byte Reload
	movq	%rdx, -17224(%rbp)      # 8-byte Spill
	movq	%rax, %rdx
	movq	-17176(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17232(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17192(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17240(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-17212(%rbp), %eax      # 4-byte Reload
	movq	%r9, -17248(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r14, -17256(%rbp)      # 8-byte Spill
	movl	%ebx, -17260(%rbp)      # 4-byte Spill
	movq	%r15, -17272(%rbp)      # 8-byte Spill
	movq	%r12, -17280(%rbp)      # 8-byte Spill
	movq	%r13, -17288(%rbp)      # 8-byte Spill
	movq	%r11, -17296(%rbp)      # 8-byte Spill
	movq	%r10, -17304(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	xorl	%eax, %eax
	movl	%eax, %edx
	movq	%rcx, %rsi
	movq	%rdx, -17312(%rbp)      # 8-byte Spill
	movq	-17312(%rbp), %r10      # 8-byte Reload
	movq	%rcx, -17320(%rbp)      # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-17320(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, -17328(%rbp)      # 8-byte Spill
	movq	-17312(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-136(%rbp), %eax        # 4-byte Reload
	testl	%eax, %eax
	setg	%al
.Ltmp193:
	.loc	1 183 0                 # feature_extraction.c:183:0
	movzbl	%al, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	-17328(%rbp), %rsi      # 8-byte Reload
	movq	-17328(%rbp), %rcx      # 8-byte Reload
	movq	-17176(%rbp), %r8       # 8-byte Reload
	movq	-17312(%rbp), %r9       # 8-byte Reload
	movb	%al, -17329(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str477, %ebx
	movl	%ebx, %ecx
	movl	$183, %ebx
	movl	%ebx, %edi
	movl	$39, %ebx
	movl	%ebx, %r8d
	movq	-17288(%rbp), %rsi      # 8-byte Reload
	movq	-17168(%rbp), %rdx      # 8-byte Reload
	movl	-17212(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-16860(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str472, %ebx
	movl	%ebx, %r8d
	movq	-17328(%rbp), %rdi      # 8-byte Reload
	movq	-17320(%rbp), %rsi      # 8-byte Reload
	movq	-17328(%rbp), %rcx      # 8-byte Reload
	movq	-17312(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-16860(%rbp), %ebx      # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp194:
	.loc	1 174 0                 # feature_extraction.c:174:0
	movq	-17256(%rbp), %rdi      # 8-byte Reload
	movq	-17272(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -17344(%rbp)     # 8-byte Spill
	movq	-17232(%rbp), %rdx      # 8-byte Reload
	movq	-17280(%rbp), %rcx      # 8-byte Reload
	movq	-17200(%rbp), %r8       # 8-byte Reload
	movq	-17224(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-17208(%rbp), %rdi      # 8-byte Reload
	movq	-17160(%rbp), %rsi      # 8-byte Reload
	movq	-17248(%rbp), %rdx      # 8-byte Reload
	movq	-17304(%rbp), %rcx      # 8-byte Reload
	movq	-17296(%rbp), %r8       # 8-byte Reload
	movl	-17260(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17232(%rbp), %rdi      # 8-byte Reload
	movq	-17200(%rbp), %rsi      # 8-byte Reload
	movq	-17200(%rbp), %rdx      # 8-byte Reload
	movq	-17232(%rbp), %rcx      # 8-byte Reload
	movq	-17240(%rbp), %r8       # 8-byte Reload
	movq	-17200(%rbp), %r9       # 8-byte Reload
	movq	-17224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17200(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -17352(%rbp)      # 8-byte Spill
.LBB1_62:                               # %.lr.ph22
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_63 Depth 2
                                        #       Child Loop BB1_65 Depth 3
	movq	-17352(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str487, %r8
	leaq	.L.str8, %rsi
	movabsq	$176, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str478, %r10
	leaq	.L.str486, %r11
	movabsq	$2, %rbx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str485, %r13
	movq	%rax, -17360(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -17368(%rbp)      # 8-byte Spill
	leaq	.L.str483, %rax
	movq	%rax, -17376(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -17384(%rbp)      # 8-byte Spill
	leaq	.L.str484, %rax
	movq	%rax, -17392(%rbp)      # 8-byte Spill
	leaq	.L.str482, %rax
	movq	%rax, -17400(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -17408(%rbp)      # 8-byte Spill
	movabsq	$178, %rax
	movq	%rax, -17416(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -17424(%rbp)      # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, -17432(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -17440(%rbp)      # 8-byte Spill
	leaq	.L.str11, %rax
	movq	%rax, -17448(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -17456(%rbp)      # 8-byte Spill
	leaq	.L.str480, %rax
	movq	%rax, -17464(%rbp)      # 8-byte Spill
	leaq	.L.str481, %rax
	movq	%rax, -17472(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -17480(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 178 0                 # feature_extraction.c:178:0
.Ltmp195:
	subq	$16, %rsp
	movq	%rax, -17488(%rbp)      # 8-byte Spill
	movq	-17480(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17496(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -17504(%rbp)      # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -17512(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	-17432(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17520(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17488(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17528(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17536(%rbp)       # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -17540(%rbp)     # 4-byte Spill
	movq	%r15, -17552(%rbp)      # 8-byte Spill
	movq	%rbx, -17560(%rbp)      # 8-byte Spill
	movq	%r12, -17568(%rbp)      # 8-byte Spill
	movq	%r13, -17576(%rbp)      # 8-byte Spill
	movq	%r11, -17584(%rbp)      # 8-byte Spill
	movq	%r10, -17592(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17560(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	-17512(%rbp), %rdx      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17464(%rbp), %r8       # 8-byte Reload
	movq	-17520(%rbp), %r9       # 8-byte Reload
	movq	-17472(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	-17512(%rbp), %rdx      # 8-byte Reload
	movq	-17512(%rbp), %rcx      # 8-byte Reload
	movq	-17456(%rbp), %r8       # 8-byte Reload
	movq	-17520(%rbp), %r9       # 8-byte Reload
	movq	-17448(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17552(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	-17360(%rbp), %rdx      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17432(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17448(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17592(%rbp), %rdx      # 8-byte Reload
	movq	-17400(%rbp), %rcx      # 8-byte Reload
	movq	-17440(%rbp), %r8       # 8-byte Reload
	movl	-17540(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	-17360(%rbp), %rdx      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17432(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17360(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17552(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17400(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -17596(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17416(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17592(%rbp), %rdx      # 8-byte Reload
	movq	-17376(%rbp), %rcx      # 8-byte Reload
	movq	-17424(%rbp), %r8       # 8-byte Reload
	movl	-17540(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-17560(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17408(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17596(%rbp), %r14d     # 4-byte Reload
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17400(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17596(%rbp), %r14d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r14d
.Ltmp196:
	.loc	1 176 0                 # feature_extraction.c:176:0
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-17552(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17376(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -17600(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17496(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17592(%rbp), %rdx      # 8-byte Reload
	movq	-17392(%rbp), %rcx      # 8-byte Reload
	movq	-17384(%rbp), %r8       # 8-byte Reload
	movl	-17540(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-17600(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17376(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17600(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-17552(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17392(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17608(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17496(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17592(%rbp), %rdx      # 8-byte Reload
	movq	-17576(%rbp), %rcx      # 8-byte Reload
	movq	-17384(%rbp), %r8       # 8-byte Reload
	movl	-17540(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-17600(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17368(%rbp), %rsi      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17376(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-17600(%rbp), %r14d     # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-17552(%rbp), %rdi      # 8-byte Reload
	movq	-17568(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17576(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17616(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17496(%rbp), %rdi      # 8-byte Reload
	movq	-17536(%rbp), %rsi      # 8-byte Reload
	movq	-17592(%rbp), %rdx      # 8-byte Reload
	movq	-17584(%rbp), %rcx      # 8-byte Reload
	movq	-17560(%rbp), %r8       # 8-byte Reload
	movl	-17540(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17520(%rbp), %rdi      # 8-byte Reload
	movq	-17512(%rbp), %rsi      # 8-byte Reload
	movq	-17512(%rbp), %rdx      # 8-byte Reload
	movq	-17520(%rbp), %rcx      # 8-byte Reload
	movq	-17528(%rbp), %r8       # 8-byte Reload
	movq	-17512(%rbp), %r9       # 8-byte Reload
	movq	-17504(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17360(%rbp), %rax      # 8-byte Reload
	movq	%rax, -17624(%rbp)      # 8-byte Spill
.LBB1_63:                               #   Parent Loop BB1_62 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB1_65 Depth 3
	movq	-17624(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str476, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str490, %r9
	movabsq	$3, %r10
	leaq	.L.str495, %r11
	movabsq	$179, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str487, %r15
	leaq	.L.str494, %r12
	movl	$1, %r13d
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, -17632(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -17640(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -17648(%rbp)      # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, -17656(%rbp)      # 8-byte Spill
	movabsq	$178, %rax
	movq	%rax, -17664(%rbp)      # 8-byte Spill
	leaq	.L.str493, %rax
	movq	%rax, -17672(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -17680(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -17688(%rbp)      # 8-byte Spill
	leaq	.L.str473, %rax
	movq	%rax, -17696(%rbp)      # 8-byte Spill
	leaq	.L.str491, %rax
	movq	%rax, -17704(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -17712(%rbp)      # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, -17720(%rbp)      # 8-byte Spill
	leaq	.L.str485, %rax
	movq	%rax, -17728(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -17736(%rbp)      # 8-byte Spill
	leaq	.L.str478, %rax
	movq	%rax, -17744(%rbp)      # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, -17752(%rbp)      # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, -17760(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -17768(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 178 0                 # feature_extraction.c:178:0
.Ltmp197:
	subq	$16, %rsp
	movq	%rax, -17776(%rbp)      # 8-byte Spill
	movq	-17768(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -17784(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -17792(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -17800(%rbp)      # 8-byte Spill
	movq	%r15, %rdx
	movq	-17720(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17808(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17776(%rbp), %rax      # 8-byte Reload
	movq	%r8, -17816(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -17824(%rbp)       # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r15, -17832(%rbp)      # 8-byte Spill
	movq	%r14, -17840(%rbp)      # 8-byte Spill
	movq	%r12, -17848(%rbp)      # 8-byte Spill
	movl	%r13d, -17852(%rbp)     # 4-byte Spill
	vmovsd	%xmm0, -17864(%rbp)     # 8-byte Spill
	movq	%rbx, -17872(%rbp)      # 8-byte Spill
	movq	%r10, -17880(%rbp)      # 8-byte Spill
	movq	%r11, -17888(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17784(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17800(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17760(%rbp), %r8       # 8-byte Reload
	movq	-17808(%rbp), %r9       # 8-byte Reload
	movq	-17824(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17800(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17752(%rbp), %r8       # 8-byte Reload
	movq	-17808(%rbp), %r9       # 8-byte Reload
	movq	-17744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17688(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17632(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17720(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17744(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17664(%rbp), %rdi      # 8-byte Reload
	movq	-17840(%rbp), %rsi      # 8-byte Reload
	movq	-17832(%rbp), %rdx      # 8-byte Reload
	movq	-17704(%rbp), %rcx      # 8-byte Reload
	movq	-17736(%rbp), %r8       # 8-byte Reload
	movl	-17852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17784(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17616(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17728(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17632(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17720(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17632(%rbp), %rax      # 8-byte Reload
	movq	-17616(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-17688(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17704(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -17896(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17664(%rbp), %rdi      # 8-byte Reload
	movq	-17840(%rbp), %rsi      # 8-byte Reload
	movq	-17832(%rbp), %rdx      # 8-byte Reload
	movq	-17656(%rbp), %rcx      # 8-byte Reload
	movq	-17712(%rbp), %r8       # 8-byte Reload
	movl	-17852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17784(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17896(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17704(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17144(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17696(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17896(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-17144(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-17688(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-17808(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -17904(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-17656(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17664(%rbp), %rdi      # 8-byte Reload
	movq	-17840(%rbp), %rsi      # 8-byte Reload
	movq	-17832(%rbp), %rdx      # 8-byte Reload
	movq	-17672(%rbp), %rcx      # 8-byte Reload
	movq	-17680(%rbp), %r8       # 8-byte Reload
	movl	-17852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17784(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	movq	-17904(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17656(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17640(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17864(%rbp), %xmm0     # 8-byte Reload
	movq	-17800(%rbp), %rdx      # 8-byte Reload
	movq	-17648(%rbp), %rcx      # 8-byte Reload
	movq	-17800(%rbp), %r8       # 8-byte Reload
	movq	-17792(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17144(%rbp), %rax      # 8-byte Reload
	movq	-17896(%rbp), %rcx      # 8-byte Reload
	vmovsd	-17864(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp198:
	#DEBUG_VALUE: k <- 0
	.loc	1 179 0                 # feature_extraction.c:179:0
	subq	$16, %rsp
	movq	-17872(%rbp), %rdi      # 8-byte Reload
	movq	-17840(%rbp), %rsi      # 8-byte Reload
	movq	-17832(%rbp), %rdx      # 8-byte Reload
	movq	-17848(%rbp), %rcx      # 8-byte Reload
	movq	-17784(%rbp), %r8       # 8-byte Reload
	movl	-17852(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17880(%rbp), %rdi      # 8-byte Reload
	movq	-17800(%rbp), %rsi      # 8-byte Reload
	movq	-17800(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17888(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17784(%rbp), %rdi      # 8-byte Reload
	movq	-17800(%rbp), %rsi      # 8-byte Reload
	movq	-17800(%rbp), %rdx      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17824(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17329(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-17808(%rbp), %rdi      # 8-byte Reload
	movq	-17808(%rbp), %rsi      # 8-byte Reload
	movq	-17808(%rbp), %rcx      # 8-byte Reload
	movq	-17816(%rbp), %r8       # 8-byte Reload
	movq	-17800(%rbp), %r9       # 8-byte Reload
	movq	-17792(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-17329(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_64
	jmp	.LBB1_67
.LBB1_64:                               # %.lr.ph
                                        #   in Loop: Header=BB1_63 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str501, %r8
	leaq	.L.str8, %rdx
	movabsq	$179, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str495, %r9
	leaq	.L.str500, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str499, %r12
	movabsq	$32, %r13
	movq	%rax, -17912(%rbp)      # 8-byte Spill
	leaq	.L.str497, %rax
	movq	%rax, -17920(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -17928(%rbp)      # 8-byte Spill
	leaq	.L.str498, %rax
	movq	%rax, -17936(%rbp)      # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, -17944(%rbp)      # 8-byte Spill
	movabsq	$181, %rax
	movq	%rax, -17952(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -17960(%rbp)      # 8-byte Spill
	leaq	.L.str496, %rax
	movq	%rax, -17968(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -17976(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -17984(%rbp)      # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, -17992(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 181 0                 # feature_extraction.c:181:0
.Ltmp199:
	subq	$16, %rsp
	movq	%rax, -18000(%rbp)      # 8-byte Spill
	movq	-17952(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -18008(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-18008(%rbp), %rax      # 8-byte Reload
	movq	%rsi, -18016(%rbp)      # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -18024(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-17968(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18032(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18000(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18040(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18048(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, -18056(%rbp)      # 8-byte Spill
	movl	%ebx, -18060(%rbp)      # 4-byte Spill
	movq	%r15, -18072(%rbp)      # 8-byte Spill
	movq	%r12, -18080(%rbp)      # 8-byte Spill
	movq	%r13, -18088(%rbp)      # 8-byte Spill
	movq	%r11, -18096(%rbp)      # 8-byte Spill
	movq	%r10, -18104(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18032(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-17632(%rbp), %rdx      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17992(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17632(%rbp), %rax      # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18056(%rbp), %rdi      # 8-byte Reload
	movq	-18088(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17968(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -18108(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17952(%rbp), %rdi      # 8-byte Reload
	movq	-18008(%rbp), %rsi      # 8-byte Reload
	movq	-18048(%rbp), %rdx      # 8-byte Reload
	movq	-17920(%rbp), %rcx      # 8-byte Reload
	movq	-17984(%rbp), %r8       # 8-byte Reload
	movl	-18060(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-18096(%rbp), %rdi      # 8-byte Reload
	movq	-18088(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17976(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18108(%rbp), %ebx      # 4-byte Reload
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18032(%rbp), %rdi      # 8-byte Reload
	movq	-18088(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17968(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18108(%rbp), %ebx      # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18056(%rbp), %rdi      # 8-byte Reload
	movq	-18088(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17920(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -18112(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-17952(%rbp), %rdi      # 8-byte Reload
	movq	-18008(%rbp), %rsi      # 8-byte Reload
	movq	-18048(%rbp), %rdx      # 8-byte Reload
	movq	-17936(%rbp), %rcx      # 8-byte Reload
	movq	-17960(%rbp), %r8       # 8-byte Reload
	movl	-18060(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18032(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	-17904(%rbp), %rdx      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17944(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17904(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
.Ltmp200:
	.loc	1 179 0                 # feature_extraction.c:179:0
	movq	-18056(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18120(%rbp)     # 8-byte Spill
	movq	-18032(%rbp), %rdx      # 8-byte Reload
	movq	-17936(%rbp), %rcx      # 8-byte Reload
	movq	-17912(%rbp), %r8       # 8-byte Reload
	movq	-18024(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18008(%rbp), %rsi      # 8-byte Reload
	movq	-18048(%rbp), %rdx      # 8-byte Reload
	movq	-18080(%rbp), %rcx      # 8-byte Reload
	movq	-17928(%rbp), %r8       # 8-byte Reload
	movl	-18060(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-18112(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-18032(%rbp), %rdi      # 8-byte Reload
	movq	-18088(%rbp), %rsi      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-17920(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18112(%rbp), %ebx      # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-18056(%rbp), %rdi      # 8-byte Reload
	movq	-18072(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-18080(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18128(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18016(%rbp), %rdi      # 8-byte Reload
	movq	-18008(%rbp), %rsi      # 8-byte Reload
	movq	-18048(%rbp), %rdx      # 8-byte Reload
	movq	-18104(%rbp), %rcx      # 8-byte Reload
	movq	-18096(%rbp), %r8       # 8-byte Reload
	movl	-18060(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18032(%rbp), %rdi      # 8-byte Reload
	movq	-17912(%rbp), %rsi      # 8-byte Reload
	movq	-17912(%rbp), %rdx      # 8-byte Reload
	movq	-18032(%rbp), %rcx      # 8-byte Reload
	movq	-18040(%rbp), %r8       # 8-byte Reload
	movq	-17912(%rbp), %r9       # 8-byte Reload
	movq	-18024(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17912(%rbp), %rax      # 8-byte Reload
	.loc	1 181 0                 # feature_extraction.c:181:0
.Ltmp201:
	vmovsd	-18120(%rbp), %xmm0     # 8-byte Reload
	movq	%rax, -18136(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -18144(%rbp)     # 8-byte Spill
.LBB1_65:                               #   Parent Loop BB1_62 Depth=1
                                        #     Parent Loop BB1_63 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	-18144(%rbp), %xmm0     # 8-byte Reload
	movq	-18136(%rbp), %rax      # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str501, %r9
	movabsq	$3, %r10
	leaq	.L.str512, %r11
	movabsq	$179, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str511, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -18152(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -18160(%rbp)      # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, -18168(%rbp)      # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -18176(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -18184(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -18192(%rbp)      # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, -18200(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -18208(%rbp)      # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -18216(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -18224(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -18232(%rbp)      # 8-byte Spill
	leaq	.L.str503, %rax
	movq	%rax, -18240(%rbp)      # 8-byte Spill
	leaq	.L.str502, %rax
	movq	%rax, -18248(%rbp)      # 8-byte Spill
	leaq	.L.str510, %rax
	movq	%rax, -18256(%rbp)      # 8-byte Spill
	movabsq	$181, %rax
	movq	%rax, -18264(%rbp)      # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -18272(%rbp)      # 8-byte Spill
	leaq	.L.str506, %rax
	movq	%rax, -18280(%rbp)      # 8-byte Spill
	leaq	.L.str509, %rax
	movq	%rax, -18288(%rbp)      # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -18296(%rbp)      # 8-byte Spill
	leaq	.L.str508, %rax
	movq	%rax, -18304(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -18312(%rbp)      # 8-byte Spill
	leaq	.L.str471, %rax
	movq	%rax, -18320(%rbp)      # 8-byte Spill
	leaq	.L.str507, %rax
	movq	%rax, -18328(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -18336(%rbp)      # 8-byte Spill
	leaq	.L.str499, %rax
	movq	%rax, -18344(%rbp)      # 8-byte Spill
	leaq	.L.str505, %rax
	movq	%rax, -18352(%rbp)      # 8-byte Spill
	leaq	.L.str504, %rax
	movq	%rax, -18360(%rbp)      # 8-byte Spill
	leaq	.L.str484, %rax
	movq	%rax, -18368(%rbp)      # 8-byte Spill
	leaq	.L.str495, %rax
	movq	%rax, -18376(%rbp)      # 8-byte Spill
	leaq	.L.str498, %rax
	movq	%rax, -18384(%rbp)      # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -18392(%rbp)      # 8-byte Spill
	movabsq	$-1, %rax
	subq	$16, %rsp
	movq	%rdi, -18400(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -18408(%rbp)      # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -18416(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-18216(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18424(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18392(%rbp), %rax      # 8-byte Reload
	movq	%r8, -18432(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18440(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, -18448(%rbp)     # 8-byte Spill
	movq	%r13, -18456(%rbp)      # 8-byte Spill
	movq	%r14, -18464(%rbp)      # 8-byte Spill
	movq	%r15, -18472(%rbp)      # 8-byte Spill
	movl	%r12d, -18476(%rbp)     # 4-byte Spill
	movq	%rbx, -18488(%rbp)      # 8-byte Spill
	movq	%r11, -18496(%rbp)      # 8-byte Spill
	movq	%r10, -18504(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18424(%rbp), %r9       # 8-byte Reload
	movq	-18440(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18408(%rbp), %rcx      # 8-byte Reload
	movq	-18224(%rbp), %r8       # 8-byte Reload
	movq	-18424(%rbp), %r9       # 8-byte Reload
	movq	-18376(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18376(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18248(%rbp), %rcx      # 8-byte Reload
	movq	-18392(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18240(%rbp), %r8       # 8-byte Reload
	movq	-18424(%rbp), %r9       # 8-byte Reload
	movq	-18440(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18384(%rbp), %r8       # 8-byte Reload
	movq	-18424(%rbp), %r9       # 8-byte Reload
	movq	-18376(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18448(%rbp), %xmm0     # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18248(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18376(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18360(%rbp), %rcx      # 8-byte Reload
	movq	-18232(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-17608(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18368(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18152(%rbp), %rax      # 8-byte Reload
	movq	-17608(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18360(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18512(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18352(%rbp), %rcx      # 8-byte Reload
	movq	-18336(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18512(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18360(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-16872(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18320(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18512(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-16872(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18424(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18520(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18352(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18312(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18520(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18352(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16872(%rbp), %rax      # 8-byte Reload
	movq	-18512(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18528(%rbp)     # 8-byte Spill
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18328(%rbp), %rcx      # 8-byte Reload
	movq	-18232(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18128(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18344(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18152(%rbp), %rax      # 8-byte Reload
	movq	-18128(%rbp), %rcx      # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18328(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18536(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18304(%rbp), %rcx      # 8-byte Reload
	movq	-18336(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18536(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18328(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-16872(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18320(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18536(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-16872(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18424(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18544(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18304(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18288(%rbp), %rcx      # 8-byte Reload
	movq	-18312(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18544(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18304(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-16872(%rbp), %rax      # 8-byte Reload
	movq	-18536(%rbp), %rcx      # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -18552(%rbp)     # 8-byte Spill
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18288(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18256(%rbp), %rcx      # 8-byte Reload
	movq	-18296(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18552(%rbp), %xmm0     # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18288(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18528(%rbp), %xmm0     # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18280(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-18528(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-18552(%rbp), %xmm1     # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18256(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -18560(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18264(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18240(%rbp), %rcx      # 8-byte Reload
	movq	-18272(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18560(%rbp), %xmm0     # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18256(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18448(%rbp), %xmm0     # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18248(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-18448(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-18560(%rbp), %xmm1     # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp202:
	.loc	1 179 0                 # feature_extraction.c:179:0
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18240(%rbp), %rcx      # 8-byte Reload
	movq	-18408(%rbp), %r8       # 8-byte Reload
	movq	-18400(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -18568(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18488(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18200(%rbp), %rcx      # 8-byte Reload
	movq	-18232(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rdx      # 8-byte Reload
	movq	-18408(%rbp), %rcx      # 8-byte Reload
	movq	-18224(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18152(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18216(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18152(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -18576(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18488(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18168(%rbp), %rcx      # 8-byte Reload
	movq	-18208(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18192(%rbp), %rsi      # 8-byte Reload
	movq	-18576(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18200(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-18576(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18168(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -18580(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18488(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18416(%rbp), %rcx      # 8-byte Reload
	movq	-18184(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-136(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18176(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18580(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18160(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18168(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-18580(%rbp), %r12d     # 4-byte Reload
	movl	-136(%rbp), %esi        # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-18456(%rbp), %rdi      # 8-byte Reload
	movq	-18424(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18416(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -18581(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18488(%rbp), %rdi      # 8-byte Reload
	movq	-18464(%rbp), %rsi      # 8-byte Reload
	movq	-18440(%rbp), %rdx      # 8-byte Reload
	movq	-18472(%rbp), %rcx      # 8-byte Reload
	movq	-18432(%rbp), %r8       # 8-byte Reload
	movl	-18476(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18504(%rbp), %rdi      # 8-byte Reload
	movq	-18408(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18496(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18432(%rbp), %rdi      # 8-byte Reload
	movq	-18408(%rbp), %rsi      # 8-byte Reload
	movq	-18408(%rbp), %rdx      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18440(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18581(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18424(%rbp), %rdi      # 8-byte Reload
	movq	-18424(%rbp), %rsi      # 8-byte Reload
	movq	-18424(%rbp), %rcx      # 8-byte Reload
	movq	-18416(%rbp), %r8       # 8-byte Reload
	movq	-18408(%rbp), %r9       # 8-byte Reload
	movq	-18400(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-18581(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-18576(%rbp), %rcx      # 8-byte Reload
	.loc	1 181 0                 # feature_extraction.c:181:0
.Ltmp203:
	vmovsd	-18568(%rbp), %xmm0     # 8-byte Reload
.Ltmp204:
	.loc	1 179 0                 # feature_extraction.c:179:0
	movq	%rcx, -18136(%rbp)      # 8-byte Spill
	vmovsd	%xmm0, -18144(%rbp)     # 8-byte Spill
	jne	.LBB1_66
	jmp	.LBB1_65
.LBB1_66:                               # %._crit_edge
                                        #   in Loop: Header=BB1_63 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str490, %r8
	leaq	.L.str8, %rdx
	movabsq	$179, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str512, %r9
	leaq	.L.str514, %r10
	movabsq	$2, %r11
	movl	$1, %ebx
	movabsq	$64, %r14
	leaq	.L.str503, %r15
	leaq	.L.str492, %r12
	movabsq	$181, %r13
	movq	%rax, -18592(%rbp)      # 8-byte Spill
	leaq	.L.str513, %rax
	movq	%rax, -18600(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	.loc	1 181 0                 # feature_extraction.c:181:0
.Ltmp205:
	subq	$16, %rsp
	movq	%rdi, -18608(%rbp)      # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, -18616(%rbp)      # 8-byte Spill
	movq	%rdx, -18624(%rbp)      # 8-byte Spill
	movq	%r9, %rdx
	movq	-18600(%rbp), %r13      # 8-byte Reload
	movq	%rcx, -18632(%rbp)      # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, -18640(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -18648(%rbp)       # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebx, -18652(%rbp)      # 4-byte Spill
	movq	%r11, -18664(%rbp)      # 8-byte Spill
	movq	%r14, -18672(%rbp)      # 8-byte Spill
	movq	%r12, -18680(%rbp)      # 8-byte Spill
	movq	%r15, -18688(%rbp)      # 8-byte Spill
	movq	%r10, -18696(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18664(%rbp), %rdi      # 8-byte Reload
	movq	-18672(%rbp), %rsi      # 8-byte Reload
	movq	-17904(%rbp), %rdx      # 8-byte Reload
	movq	-18592(%rbp), %rcx      # 8-byte Reload
	movq	-18680(%rbp), %r8       # 8-byte Reload
	movq	-18632(%rbp), %r9       # 8-byte Reload
	movq	-18624(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18592(%rbp), %rdi      # 8-byte Reload
	movq	-18672(%rbp), %rsi      # 8-byte Reload
	vmovsd	-18568(%rbp), %xmm0     # 8-byte Reload
	movq	-18592(%rbp), %rdx      # 8-byte Reload
	movq	-18688(%rbp), %rcx      # 8-byte Reload
	movq	-18632(%rbp), %r8       # 8-byte Reload
	movq	-18624(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17904(%rbp), %rax      # 8-byte Reload
	vmovsd	-18568(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp206:
	.loc	1 179 0                 # feature_extraction.c:179:0
	subq	$16, %rsp
	movq	-18608(%rbp), %rdi      # 8-byte Reload
	movq	-18616(%rbp), %rsi      # 8-byte Reload
	movq	-18648(%rbp), %rdx      # 8-byte Reload
	movq	-18696(%rbp), %rcx      # 8-byte Reload
	movq	-18664(%rbp), %r8       # 8-byte Reload
	movl	-18652(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18592(%rbp), %rdi      # 8-byte Reload
	movq	-18632(%rbp), %rsi      # 8-byte Reload
	movq	-18632(%rbp), %rdx      # 8-byte Reload
	movq	-18592(%rbp), %rcx      # 8-byte Reload
	movq	-18640(%rbp), %r8       # 8-byte Reload
	movq	-18632(%rbp), %r9       # 8-byte Reload
	movq	-18624(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp207:
.LBB1_67:                               #   in Loop: Header=BB1_63 Depth=2
	movabsq	$1, %rax
	leaq	.L.str526, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str487, %r8
	movabsq	$3, %r9
	leaq	.L.str481, %r10
	movabsq	$176, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str490, %r14
	leaq	.L.str527, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -18704(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -18712(%rbp)      # 8-byte Spill
	leaq	.L.str525, %rax
	movq	%rax, -18720(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -18728(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -18736(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -18744(%rbp)      # 8-byte Spill
	leaq	.L.str489, %rax
	movq	%rax, -18752(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -18760(%rbp)      # 8-byte Spill
	leaq	.L.str488, %rax
	movq	%rax, -18768(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -18776(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -18784(%rbp)      # 8-byte Spill
	leaq	.L.str516, %rax
	movq	%rax, -18792(%rbp)      # 8-byte Spill
	leaq	.L.str523, %rax
	movq	%rax, -18800(%rbp)      # 8-byte Spill
	movabsq	$185, %rax
	movq	%rax, -18808(%rbp)      # 8-byte Spill
	leaq	.L.str524, %rax
	movq	%rax, -18816(%rbp)      # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -18824(%rbp)      # 8-byte Spill
	leaq	.L.str473, %rax
	movq	%rax, -18832(%rbp)      # 8-byte Spill
	leaq	.L.str522, %rax
	movq	%rax, -18840(%rbp)      # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -18848(%rbp)      # 8-byte Spill
	leaq	.L.str521, %rax
	movq	%rax, -18856(%rbp)      # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -18864(%rbp)      # 8-byte Spill
	leaq	.L.str519, %rax
	movq	%rax, -18872(%rbp)      # 8-byte Spill
	leaq	.L.str520, %rax
	movq	%rax, -18880(%rbp)      # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, -18888(%rbp)      # 8-byte Spill
	leaq	.L.str518, %rax
	movq	%rax, -18896(%rbp)      # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -18904(%rbp)      # 8-byte Spill
	leaq	.L.str492, %rax
	movq	%rax, -18912(%rbp)      # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, -18920(%rbp)      # 8-byte Spill
	leaq	.L.str517, %rax
	movq	%rax, -18928(%rbp)      # 8-byte Spill
	leaq	.L.str515, %rax
	movq	%rax, -18936(%rbp)      # 8-byte Spill
	leaq	.L.str477, %rax
	movq	%rax, -18944(%rbp)      # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, -18952(%rbp)      # 8-byte Spill
	movabsq	$27, %rax
	.loc	1 183 0                 # feature_extraction.c:183:0
	subq	$16, %rsp
	movq	%rax, -18960(%rbp)      # 8-byte Spill
	movq	-18920(%rbp), %rax      # 8-byte Reload
	movq	%rdi, -18968(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -18976(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -18984(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	-18936(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -18992(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18960(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19000(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -19008(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -19016(%rbp)      # 8-byte Spill
	movq	%r15, -19024(%rbp)      # 8-byte Spill
	movl	%r12d, -19028(%rbp)     # 4-byte Spill
	movq	%r13, -19040(%rbp)      # 8-byte Spill
	movq	%rbx, -19048(%rbp)      # 8-byte Spill
	movq	%r11, -19056(%rbp)      # 8-byte Spill
	movq	%r10, -19064(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17904(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18912(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-17904(%rbp), %rax      # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovsd	%xmm0, -19072(%rbp)     # 8-byte Spill
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18936(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18920(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18792(%rbp), %rcx      # 8-byte Reload
	movq	-18952(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovsd	-17344(%rbp), %xmm0     # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18944(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovsd	-19072(%rbp), %xmm0     # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18936(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-19072(%rbp), %xmm0     # 8-byte Reload
	vmovsd	-17344(%rbp), %xmm1     # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18792(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	vmovsd	%xmm2, -19080(%rbp)     # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-18920(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18928(%rbp), %rcx      # 8-byte Reload
	movq	-18824(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17904(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18912(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovsd	-19080(%rbp), %xmm0     # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18792(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17904(%rbp), %rax      # 8-byte Reload
	vmovsd	-19080(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	1 185 0                 # feature_extraction.c:185:0
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18896(%rbp), %rcx      # 8-byte Reload
	movq	-18760(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17632(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18768(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17632(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18896(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -19084(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18872(%rbp), %rcx      # 8-byte Reload
	movq	-18904(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18728(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19084(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18896(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19084(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	imull	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18872(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -19088(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18880(%rbp), %rcx      # 8-byte Reload
	movq	-18760(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17360(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18888(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17360(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18880(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -19092(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18856(%rbp), %rcx      # 8-byte Reload
	movq	-18784(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-19092(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18880(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19088(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18872(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19088(%rbp), %r12d     # 4-byte Reload
	movl	-19092(%rbp), %esi      # 4-byte Reload
	addl	%esi, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18856(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -19096(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18840(%rbp), %rcx      # 8-byte Reload
	movq	-18864(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-19096(%rbp), %r9d      # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18856(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19096(%rbp), %r12d     # 4-byte Reload
	movslq	%r12d, %rax
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18840(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19104(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18800(%rbp), %rcx      # 8-byte Reload
	movq	-18848(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-19104(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18840(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17144(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18832(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-19104(%rbp), %rax      # 8-byte Reload
	shlq	$3, %rax
	movq	-17144(%rbp), %rcx      # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	%rcx, %rdx
	movq	-18704(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19112(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-18800(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18808(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18816(%rbp), %rcx      # 8-byte Reload
	movq	-18824(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-19112(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18800(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	vmovsd	-19080(%rbp), %xmm0     # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18792(%rbp), %rcx      # 8-byte Reload
	movq	-18984(%rbp), %r8       # 8-byte Reload
	movq	-18976(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_double
	movq	-17144(%rbp), %rax      # 8-byte Reload
	movq	-19104(%rbp), %rcx      # 8-byte Reload
	vmovsd	-19080(%rbp), %xmm0     # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp208:
	.loc	1 176 0                 # feature_extraction.c:176:0
	subq	$16, %rsp
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18752(%rbp), %rcx      # 8-byte Reload
	movq	-18784(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rdx      # 8-byte Reload
	movq	-18984(%rbp), %rcx      # 8-byte Reload
	movq	-18776(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-17632(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18768(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17632(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18752(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19120(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18720(%rbp), %rcx      # 8-byte Reload
	movq	-18760(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18744(%rbp), %rsi      # 8-byte Reload
	movq	-19120(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18752(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19120(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18720(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -19124(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-18992(%rbp), %rcx      # 8-byte Reload
	movq	-18736(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18728(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19124(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18712(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18720(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19124(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-19040(%rbp), %rdi      # 8-byte Reload
	movq	-18704(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18992(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -19125(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19056(%rbp), %rdi      # 8-byte Reload
	movq	-19048(%rbp), %rsi      # 8-byte Reload
	movq	-19016(%rbp), %rdx      # 8-byte Reload
	movq	-19024(%rbp), %rcx      # 8-byte Reload
	movq	-18968(%rbp), %r8       # 8-byte Reload
	movl	-19028(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19008(%rbp), %rdi      # 8-byte Reload
	movq	-18984(%rbp), %rsi      # 8-byte Reload
	movq	-18984(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-19064(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-18968(%rbp), %rdi      # 8-byte Reload
	movq	-18984(%rbp), %rsi      # 8-byte Reload
	movq	-18984(%rbp), %rdx      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-19000(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19125(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-18704(%rbp), %rdi      # 8-byte Reload
	movq	-18704(%rbp), %rsi      # 8-byte Reload
	movq	-18704(%rbp), %rcx      # 8-byte Reload
	movq	-18992(%rbp), %r8       # 8-byte Reload
	movq	-18984(%rbp), %r9       # 8-byte Reload
	movq	-18976(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19125(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-19120(%rbp), %rcx      # 8-byte Reload
	movq	%rcx, -17624(%rbp)      # 8-byte Spill
	jne	.LBB1_68
	jmp	.LBB1_63
.Ltmp209:
.LBB1_68:                               # %._crit_edge23
                                        #   in Loop: Header=BB1_62 Depth=1
	movabsq	$1, %rax
	leaq	.L.str529, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str478, %r8
	movabsq	$3, %r9
	leaq	.L.str438, %r10
	movabsq	$174, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str481, %r14
	leaq	.L.str530, %r15
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, -19136(%rbp)      # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -19144(%rbp)      # 8-byte Spill
	leaq	.L.str528, %rax
	movq	%rax, -19152(%rbp)      # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -19160(%rbp)      # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -19168(%rbp)      # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -19176(%rbp)      # 8-byte Spill
	leaq	.L.str480, %rax
	movq	%rax, -19184(%rbp)      # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -19192(%rbp)      # 8-byte Spill
	leaq	.L.str479, %rax
	movq	%rax, -19200(%rbp)      # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -19208(%rbp)      # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 174 0                 # feature_extraction.c:174:0
	subq	$16, %rsp
	movq	%rdi, -19216(%rbp)      # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -19224(%rbp)      # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -19232(%rbp)      # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -19240(%rbp)      # 8-byte Spill
	movq	-19184(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19248(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19240(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19256(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -19264(%rbp)       # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -19272(%rbp)      # 8-byte Spill
	movq	%r15, -19280(%rbp)      # 8-byte Spill
	movl	%r12d, -19284(%rbp)     # 4-byte Spill
	movq	%r13, -19296(%rbp)      # 8-byte Spill
	movq	%rbx, -19304(%rbp)      # 8-byte Spill
	movq	%r11, -19312(%rbp)      # 8-byte Spill
	movq	%r10, -19320(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19216(%rbp), %rdi      # 8-byte Reload
	movq	-19176(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rdx      # 8-byte Reload
	movq	-19232(%rbp), %rcx      # 8-byte Reload
	movq	-19208(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19136(%rbp), %rdi      # 8-byte Reload
	movq	-19176(%rbp), %rsi      # 8-byte Reload
	movq	-17360(%rbp), %rdx      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19200(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-17360(%rbp), %rax      # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-19296(%rbp), %rdi      # 8-byte Reload
	movq	-19176(%rbp), %rsi      # 8-byte Reload
	movq	%rax, %rdx
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19184(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -19328(%rbp)      # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19312(%rbp), %rdi      # 8-byte Reload
	movq	-19304(%rbp), %rsi      # 8-byte Reload
	movq	-19272(%rbp), %rdx      # 8-byte Reload
	movq	-19152(%rbp), %rcx      # 8-byte Reload
	movq	-19192(%rbp), %r8       # 8-byte Reload
	movl	-19284(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19136(%rbp), %rdi      # 8-byte Reload
	movq	-19176(%rbp), %rsi      # 8-byte Reload
	movq	-19328(%rbp), %rdx      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19184(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-19328(%rbp), %rax      # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19296(%rbp), %rdi      # 8-byte Reload
	movq	-19144(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19152(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -19332(%rbp)     # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19312(%rbp), %rdi      # 8-byte Reload
	movq	-19304(%rbp), %rsi      # 8-byte Reload
	movq	-19272(%rbp), %rdx      # 8-byte Reload
	movq	-19248(%rbp), %rcx      # 8-byte Reload
	movq	-19168(%rbp), %r8       # 8-byte Reload
	movl	-19284(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-19216(%rbp), %rdi      # 8-byte Reload
	movq	-19144(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19160(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19332(%rbp), %r12d     # 4-byte Reload
	movl	%r12d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-19136(%rbp), %rdi      # 8-byte Reload
	movq	-19144(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19152(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %rax      # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-19332(%rbp), %r12d     # 4-byte Reload
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	%esi, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-19296(%rbp), %rdi      # 8-byte Reload
	movq	-19136(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19248(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -19333(%rbp)       # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19312(%rbp), %rdi      # 8-byte Reload
	movq	-19304(%rbp), %rsi      # 8-byte Reload
	movq	-19272(%rbp), %rdx      # 8-byte Reload
	movq	-19280(%rbp), %rcx      # 8-byte Reload
	movq	-19216(%rbp), %r8       # 8-byte Reload
	movl	-19284(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19264(%rbp), %rdi      # 8-byte Reload
	movq	-19232(%rbp), %rsi      # 8-byte Reload
	movq	-19232(%rbp), %rdx      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19320(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19216(%rbp), %rdi      # 8-byte Reload
	movq	-19232(%rbp), %rsi      # 8-byte Reload
	movq	-19232(%rbp), %rdx      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19256(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19333(%rbp), %al       # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-19136(%rbp), %rdi      # 8-byte Reload
	movq	-19136(%rbp), %rsi      # 8-byte Reload
	movq	-19136(%rbp), %rcx      # 8-byte Reload
	movq	-19248(%rbp), %r8       # 8-byte Reload
	movq	-19232(%rbp), %r9       # 8-byte Reload
	movq	-19224(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-19333(%rbp), %al       # 1-byte Reload
	testb	$1, %al
	movq	-19328(%rbp), %rcx      # 8-byte Reload
	movq	-17144(%rbp), %rdx      # 8-byte Reload
	movq	%rcx, -17352(%rbp)      # 8-byte Spill
	movq	%rdx, -15600(%rbp)      # 8-byte Spill
	jne	.LBB1_69
	jmp	.LBB1_62
.Ltmp210:
.LBB1_69:                               # %._crit_edge26
	movq	-15600(%rbp), %rax      # 8-byte Reload
	movl	$0, %ecx
	movabsq	$0, %rdx
	movabsq	$5, %rdi
	movabsq	$64, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$4, %r10
	movabsq	$1, %r11
	movabsq	$3, %rbx
	leaq	.L.str534, %r14
	movabsq	$2, %r15
	leaq	.L.str531, %r12
	movabsq	$32, %r13
	movq	%rax, -19344(%rbp)      # 8-byte Spill
.Ltmp211:
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- [RBP+-19344]
	#DEBUG_VALUE: process_data:time_xcorr_matrix <- [RBP+-19344]
	leaq	.L.str9, %rax
	movq	%rax, -19352(%rbp)      # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -19360(%rbp)      # 8-byte Spill
	leaq	rs, %rax
	movq	%rax, -19368(%rbp)      # 8-byte Spill
	leaq	.L.str329, %rax
	movq	%rax, -19376(%rbp)      # 8-byte Spill
	movabsq	$191, %rax
	movq	%rax, -19384(%rbp)      # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -19392(%rbp)      # 8-byte Spill
	leaq	.L.str438, %rax
	movq	%rax, -19400(%rbp)      # 8-byte Spill
	leaq	.L.str533, %rax
	movq	%rax, -19408(%rbp)      # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, -19412(%rbp)      # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, -19424(%rbp)      # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -19432(%rbp)      # 8-byte Spill
	leaq	.L.str532, %rax
	.loc	1 190 0                 # feature_extraction.c:190:0
	subq	$16, %rsp
	movq	%rax, -19440(%rbp)      # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%ecx, -19444(%rbp)      # 4-byte Spill
	movl	$.L.str438, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rsi, -19456(%rbp)      # 8-byte Spill
	movl	$.L.str531, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -19464(%rbp)      # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -19472(%rbp)      # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -19480(%rbp)      # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, -19488(%rbp)      # 8-byte Spill
	movq	%rax, %rdi
	movq	-19472(%rbp), %rax      # 8-byte Reload
	movl	%esi, -19492(%rbp)      # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -19504(%rbp)      # 8-byte Spill
	movq	%rcx, %rdx
	movq	-19464(%rbp), %rax      # 8-byte Reload
	movq	%rcx, -19512(%rbp)      # 8-byte Spill
	movq	%rax, %rcx
	movq	-19480(%rbp), %rax      # 8-byte Reload
	movq	%r8, -19520(%rbp)       # 8-byte Spill
	movq	%rax, %r8
	movl	-19492(%rbp), %eax      # 4-byte Reload
	movq	%r9, -19528(%rbp)       # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -19536(%rbp)      # 8-byte Spill
	movq	%r15, -19544(%rbp)      # 8-byte Spill
	movq	%r12, -19552(%rbp)      # 8-byte Spill
	movq	%r14, -19560(%rbp)      # 8-byte Spill
	movq	%rbx, -19568(%rbp)      # 8-byte Spill
	movq	%r11, -19576(%rbp)      # 8-byte Spill
	movq	%r10, -19584(%rbp)      # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str481, (%rcx)
	movl	$.L.str473, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %edx
	xorl	%eax, %eax
	movl	%eax, %esi
	movl	$1, %eax
	movl	%eax, %r8d
	movq	%rsi, -19592(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-19592(%rbp), %r10      # 8-byte Reload
	movq	%rdx, -19600(%rbp)      # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, -19608(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	-19608(%rbp), %r11      # 8-byte Reload
	movq	%r8, -19616(%rbp)       # 8-byte Spill
	movq	%r11, %r8
	movq	-19616(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str430, (%rcx)
	movl	$2, %eax
	movl	%eax, %edi
	movq	-19600(%rbp), %rsi      # 8-byte Reload
	movq	-19592(%rbp), %rdx      # 8-byte Reload
	movq	-19616(%rbp), %rcx      # 8-byte Reload
	movq	-19608(%rbp), %r8       # 8-byte Reload
	movq	-19616(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str435, (%rcx)
	movl	$.L.str436, %eax
	movl	%eax, %r8d
	movq	-19616(%rbp), %rdi      # 8-byte Reload
	movq	-19600(%rbp), %rsi      # 8-byte Reload
	movq	-19592(%rbp), %rdx      # 8-byte Reload
	movq	-19616(%rbp), %rcx      # 8-byte Reload
	movq	-19616(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str435, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	-19600(%rbp), %rsi      # 8-byte Reload
	movq	-19344(%rbp), %rdx      # 8-byte Reload
	movq	-19616(%rbp), %rcx      # 8-byte Reload
	movq	-19464(%rbp), %r8       # 8-byte Reload
	movq	-19592(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str532, %eax
	movl	%eax, %ecx
	movl	$190, %eax
	movl	%eax, %edi
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-19472(%rbp), %rsi      # 8-byte Reload
	movq	-19512(%rbp), %rdx      # 8-byte Reload
	movl	-19492(%rbp), %r9d      # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str326, %eax
	movl	%eax, %r8d
	movq	-19616(%rbp), %rdi      # 8-byte Reload
	movq	-19600(%rbp), %rsi      # 8-byte Reload
	movq	-11176(%rbp), %rdx      # 8-byte Reload
	movq	-19616(%rbp), %rcx      # 8-byte Reload
	movq	-19592(%rbp), %r9       # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-11176(%rbp), %rcx      # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-19432(%rbp), %rdi      # 8-byte Reload
	movq	-19456(%rbp), %rdx      # 8-byte Reload
	movq	%rsi, -19624(%rbp)      # 8-byte Spill
	movq	%rdx, %rsi
	movq	-19624(%rbp), %rdx      # 8-byte Reload
	movq	-19576(%rbp), %rcx      # 8-byte Reload
	movq	-19440(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp212:
	#DEBUG_VALUE: process_data:time_eigenvalues <- [RBP+-19624]
	.loc	1 191 0                 # feature_extraction.c:191:0
	subq	$16, %rsp
	movq	-19384(%rbp), %rdi      # 8-byte Reload
	movq	-19392(%rbp), %rsi      # 8-byte Reload
	movq	-19400(%rbp), %rdx      # 8-byte Reload
	movq	-19408(%rbp), %rcx      # 8-byte Reload
	movq	-19424(%rbp), %r8       # 8-byte Reload
	movl	-19444(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19360(%rbp), %rdi      # 8-byte Reload
	movq	-19456(%rbp), %rsi      # 8-byte Reload
	movq	-19368(%rbp), %rdx      # 8-byte Reload
	movq	-19576(%rbp), %rcx      # 8-byte Reload
	movq	-19376(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-19576(%rbp), %rdi      # 8-byte Reload
	movq	-19536(%rbp), %rsi      # 8-byte Reload
	movq	-19576(%rbp), %rcx      # 8-byte Reload
	movq	-19352(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19544(%rbp), %rdi      # 8-byte Reload
	movq	-19456(%rbp), %rsi      # 8-byte Reload
	movq	-19344(%rbp), %rdx      # 8-byte Reload
	movq	-19576(%rbp), %rcx      # 8-byte Reload
	movq	-19552(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19568(%rbp), %rdi      # 8-byte Reload
	movq	-19456(%rbp), %rsi      # 8-byte Reload
	movq	-19624(%rbp), %rdx      # 8-byte Reload
	movq	-19576(%rbp), %rcx      # 8-byte Reload
	movq	-19560(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19584(%rbp), %rdi      # 8-byte Reload
	movq	-19576(%rbp), %rsi      # 8-byte Reload
	movq	-19504(%rbp), %rdx      # 8-byte Reload
	movq	-19504(%rbp), %rcx      # 8-byte Reload
	movq	-19520(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19488(%rbp), %rdi      # 8-byte Reload
	movq	-19456(%rbp), %rsi      # 8-byte Reload
	movq	-19504(%rbp), %rdx      # 8-byte Reload
	movq	-19504(%rbp), %rcx      # 8-byte Reload
	movq	-19520(%rbp), %r8       # 8-byte Reload
	movq	-19504(%rbp), %r9       # 8-byte Reload
	movq	-19528(%rbp), %r10      # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-68(%rbp), %edi         # 4-byte Reload
	movq	-19344(%rbp), %rsi      # 8-byte Reload
	movq	-19624(%rbp), %rdx      # 8-byte Reload
	movl	-19412(%rbp), %ecx      # 4-byte Reload
	movq	-19504(%rbp), %r8       # 8-byte Reload
	callq	rs
	movabsq	$198, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str438, %rdx
	leaq	.L.str535, %rcx
	movabsq	$1, %r8
	movl	$1, %r9d
	movabsq	$19134, %r10            # imm = 0x4ABE
	movabsq	$32, %r11
	leaq	.L.str533, %rbx
	movabsq	$0, %r14
	leaq	.L.str8, %r15
	.loc	1 198 0                 # feature_extraction.c:198:0
	movl	%eax, %eax
	movl	%eax, %r12d
	subq	$16, %rsp
	movq	%rdi, -19632(%rbp)      # 8-byte Spill
	movq	%r10, %rdi
	movq	%rsi, -19640(%rbp)      # 8-byte Spill
	movq	%r11, %rsi
	movq	%rdx, -19648(%rbp)      # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, -19656(%rbp)      # 8-byte Spill
	movq	%r8, %rcx
	movq	%r8, -19664(%rbp)       # 8-byte Spill
	movq	%rbx, %r8
	movl	%r9d, -19668(%rbp)      # 4-byte Spill
	movq	%r14, %r9
	movq	%r15, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-19632(%rbp), %rdi      # 8-byte Reload
	movq	-19640(%rbp), %rsi      # 8-byte Reload
	movq	-19648(%rbp), %rdx      # 8-byte Reload
	movq	-19656(%rbp), %rcx      # 8-byte Reload
	movq	-19664(%rbp), %r8       # 8-byte Reload
	movl	-19668(%rbp), %r9d      # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
.Ltmp213:
	ret
.Ltmp214:
.Ltmp215:
	.size	process_data, .Ltmp215-process_data
.Lfunc_end1:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI2_0:
	.quad	-4616189618054758400    # double -1
.LCPI2_1:
	.quad	4621819117588971520     # double 10
	.text
	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	1 200 0                 # feature_extraction.c:200:0
# BB#0:
	pushq	%rbp
.Ltmp223:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp224:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp225:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp226:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp227:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp228:
	.cfi_def_cfa_offset 56
	subq	$2232, %rsp             # imm = 0x8B8
.Ltmp229:
	.cfi_def_cfa_offset 2288
.Ltmp230:
	.cfi_offset %rbx, -56
.Ltmp231:
	.cfi_offset %r12, -48
.Ltmp232:
	.cfi_offset %r13, -40
.Ltmp233:
	.cfi_offset %r14, -32
.Ltmp234:
	.cfi_offset %r15, -24
.Ltmp235:
	.cfi_offset %rbp, -16
	leaq	.L.str553, %rdi
	movabsq	$1617, %rsi             # imm = 0x651
	.loc	1 202 0 prologue_end    # feature_extraction.c:202:0
.Ltmp236:
	callq	trace_logger_write_labelmap
	movabsq	$1, %rsi
	movabsq	$64, %rdi
	movabsq	$6000, %rdx             # imm = 0x1770
	movabsq	$0, %rax
	leaq	.L.str7, %r8
	leaq	.L.str8, %rcx
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str537, %r11
	movabsq	$202, %rbx
	leaq	.L.str536, %r14
	leaq	.L.str5, %r15
	leaq	.L.str6, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 2224(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, 2216(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 2212(%rsp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2200(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 2192(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 2184(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 2176(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 2168(%rsp)        # 8-byte Spill
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	movq	%r10, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2176(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2160(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2200(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2160(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6000, %ebp             # imm = 0x1770
	movl	%ebp, %edi
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	movabsq	$6000, %rsi             # imm = 0x1770
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	malloc, %r11
	leaq	.L.str537, %rbx
	movabsq	$203, %r14
	leaq	.L.str536, %r15
	leaq	.L.str5, %r12
	leaq	.L.str20, %r13
	movabsq	$49, %rbp
	movq	%rsi, 2144(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2140(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$202, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2080(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 2076(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2064(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 2056(%rsp)        # 8-byte Spill
	movq	2104(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2048(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2040(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 2032(%rsp)        # 8-byte Spill
	movq	%r12, 2024(%rsp)        # 8-byte Spill
	movq	%r13, 2016(%rsp)        # 8-byte Spill
	movq	%rbp, 2008(%rsp)        # 8-byte Spill
	movq	%r14, 2000(%rsp)        # 8-byte Spill
	movq	%rbx, 1992(%rsp)        # 8-byte Spill
	movq	%r10, 1984(%rsp)        # 8-byte Spill
	movq	%r11, 1976(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	2120(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp237:
	#DEBUG_VALUE: main:time_data <- [RSP+1968]
	.loc	1 203 0                 # feature_extraction.c:203:0
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2064(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2048(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$6000, %esi             # imm = 0x1770
	movl	%esi, %edi
	callq	malloc
.Ltmp238:
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdi
	movabsq	$206, %r9
	leaq	.L.str536, %r10
	leaq	.L.str5, %r11
	leaq	.L.str538, %rbx
	movabsq	$2, %r14
	movl	$0, %esi
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str24, %r13
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$203, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 1936(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 1932(%rsp)        # 4-byte Spill
	movq	%r12, %rsi
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1912(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1912(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1952(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1896(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1904(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1888(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1884(%rsp)        # 4-byte Spill
	movq	%r15, 1872(%rsp)        # 8-byte Spill
	movq	%r12, 1864(%rsp)        # 8-byte Spill
	movq	%r13, 1856(%rsp)        # 8-byte Spill
	movq	%r14, 1848(%rsp)        # 8-byte Spill
	movq	%r10, 1840(%rsp)        # 8-byte Spill
	movq	%r11, 1832(%rsp)        # 8-byte Spill
	movq	%rbx, 1824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1864(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp239:
	#DEBUG_VALUE: main:freq_data <- [RSP+1816]
	#DEBUG_VALUE: j <- 0
	.loc	1 206 0                 # feature_extraction.c:206:0
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1904(%rsp), %r9         # 8-byte Reload
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1808(%rsp)        # 8-byte Spill
.Ltmp240:
.LBB2_1:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movq	1808(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str542, %r8
	leaq	.L.str8, %rsi
	movabsq	$208, %rdi
	leaq	.L.str536, %r9
	leaq	.L.str16, %r10
	leaq	.L.str22, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str25, %r13
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str539, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$210, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str540, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str541, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 210 0                 # feature_extraction.c:210:0
.Ltmp241:
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1712(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1704(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1696(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1720(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1680(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1672(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1668(%rsp)       # 4-byte Spill
	movq	%r15, 1656(%rsp)        # 8-byte Spill
	movl	%ebp, 1652(%rsp)        # 4-byte Spill
	movq	%r12, 1640(%rsp)        # 8-byte Spill
	movq	%r13, 1632(%rsp)        # 8-byte Spill
	movq	%rbx, 1624(%rsp)        # 8-byte Spill
	movq	%r10, 1616(%rsp)        # 8-byte Spill
	movq	%r11, 1608(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1736(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rax        # 8-byte Reload
	imulq	$50, %rax, %rcx
.Ltmp242:
	.loc	1 208 0                 # feature_extraction.c:208:0
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movl	1652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1592(%rsp)        # 8-byte Spill
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1592(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str542, %r9
	movabsq	$3, %r10
	leaq	.L.str541, %r11
	movabsq	$208, %rbx
	leaq	.L.str536, %r14
	leaq	.L.str546, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	vmovsd	.LCPI2_0, %xmm0
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movabsq	$211, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str545, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	movabsq	$210, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str544, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	cos, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str543, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$10, %rax
	vmovsd	.LCPI2_1, %xmm1
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	.loc	1 210 0                 # feature_extraction.c:210:0
.Ltmp243:
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str536, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1336(%rsp)        # 8-byte Spill
	movl	$.L.str542, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1328(%rsp)        # 8-byte Spill
	movl	$.L.str29, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1320(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 1304(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 1296(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1312(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1292(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1292(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1256(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm1, 1248(%rsp)       # 8-byte Spill
	movl	%r12d, 1244(%rsp)       # 4-byte Spill
	movq	%r13, 1232(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1224(%rsp)       # 8-byte Spill
	movl	%ebp, 1220(%rsp)        # 4-byte Spill
	movq	%r15, 1208(%rsp)        # 8-byte Spill
	movq	%r10, 1200(%rsp)        # 8-byte Spill
	movq	%r11, 1192(%rsp)        # 8-byte Spill
	movq	%rbx, 1184(%rsp)        # 8-byte Spill
	movq	%r14, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str542, (%rcx)
	movl	$.L.str30, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	1292(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	1168(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str16, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str16, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %ecx
	movl	$210, %eax
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 1136(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movl	1292(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movl	$32, %ebp
	movl	%ebp, %esi
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	movl	%eax, 1108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movl	1292(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1160(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	1108(%rsp), %eax        # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1096(%rsp)       # 8-byte Spill
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1088(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	callq	cos
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1080(%rsp)       # 8-byte Spill
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1096(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1080(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1072(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1968(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1056(%rsp)        # 8-byte Spill
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	1 211 0                 # feature_extraction.c:211:0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1064(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1816(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1048(%rsp)        # 8-byte Spill
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1296(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp244:
	.loc	1 208 0                 # feature_extraction.c:208:0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1584(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1040(%rsp), %rcx        # 8-byte Reload
	cmpq	$50, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1039(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1256(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1200(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1336(%rsp), %r9         # 8-byte Reload
	movq	1296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	jne	.LBB2_3
	jmp	.LBB2_2
.Ltmp245:
.LBB2_3:                                #   in Loop: Header=BB2_1 Depth=1
	movabsq	$1, %rax
	leaq	.L.str547, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str16, %r8
	movabsq	$3, %r9
	leaq	.L.str549, %r10
	movabsq	$206, %r11
	leaq	.L.str536, %rbx
	leaq	.L.str541, %r14
	leaq	.L.str548, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str540, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$15, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str539, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 206 0                 # feature_extraction.c:206:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 960(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 952(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 912(%rsp)         # 8-byte Spill
	movl	%ebp, 908(%rsp)         # 4-byte Spill
	movl	%r12d, 904(%rsp)        # 4-byte Spill
	movq	%r13, 896(%rsp)         # 8-byte Spill
	movq	%r14, 888(%rsp)         # 8-byte Spill
	movq	%rbx, 880(%rsp)         # 8-byte Spill
	movq	%r10, 872(%rsp)         # 8-byte Spill
	movq	%r11, 864(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1800(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rax         # 8-byte Reload
	cmpq	$15, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 855(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	jne	.LBB2_4
	jmp	.LBB2_1
.Ltmp246:
.LBB2_4:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$0, %rcx
	leaq	.L.str7, %rdx
	leaq	.L.str8, %rsi
	movabsq	$3, %r8
	movabsq	$2, %r9
	movabsq	$32, %r10
	movabsq	$1, %r11
	movabsq	$50, %rbx
	movabsq	$5, %r14
	leaq	kiss_fft_alloc, %r15
	leaq	.L.str550, %r12
	movabsq	$218, %r13
	leaq	.L.str536, %rbp
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str70, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 812(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 218 0                 # feature_extraction.c:218:0
	movq	%rdi, 800(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 796(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	832(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 784(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	824(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 768(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	812(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 760(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r14, 744(%rsp)         # 8-byte Spill
	movq	%r15, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	movq	%r10, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	xorl	%ebp, %ebp
	movl	%ebp, %eax
	movl	$50, %edi
	movl	%ebp, %esi
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	kiss_fft_alloc
	movabsq	$5, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str70, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	movabsq	$15, %r14
	leaq	.L.str7, %r15
	movabsq	$3, %r12
	movabsq	$50, %r13
	movabsq	$2, %rsi
	leaq	.L.str24, %rbp
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	process_data, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$221, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str536, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str551, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 628(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rdi, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 604(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 592(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 576(%rsp)          # 8-byte Spill
	movq	%r9, 568(%rsp)          # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%rbp, 560(%rsp)         # 8-byte Spill
	movq	%r13, 552(%rsp)         # 8-byte Spill
	movq	%r12, 544(%rsp)         # 8-byte Spill
	movq	%r15, 536(%rsp)         # 8-byte Spill
	movq	%r14, 528(%rsp)         # 8-byte Spill
	movq	%r10, 520(%rsp)         # 8-byte Spill
	movq	%r11, 512(%rsp)         # 8-byte Spill
	movq	%rbx, 504(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp247:
	#DEBUG_VALUE: main:cfg <- [RSP+704]
	.loc	1 221 0                 # feature_extraction.c:221:0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	628(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$50, %edx
	movl	$15, %ecx
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1816(%rsp), %rsi        # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	callq	process_data
.Ltmp248:
	movabsq	$4, %rdi
	movabsq	$32, %rax
	movabsq	$15, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$3, %r10
	movabsq	$50, %r11
	movabsq	$2, %rbx
	movabsq	$64, %r14
	movabsq	$1, %r15
	leaq	.L.str24, %r12
                                        # implicit-def: R13
	movabsq	$5, %rbp
	leaq	test_stores, %rcx
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str4, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$235, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str536, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str549, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 444(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 235 0                 # feature_extraction.c:235:0
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 408(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 392(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	444(%rsp), %eax         # 4-byte Reload
	movq	%r9, 384(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 376(%rsp)         # 8-byte Spill
	movq	%r13, 368(%rsp)         # 8-byte Spill
	movq	%rbp, 360(%rsp)         # 8-byte Spill
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r14, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$50, %edx
	movl	$15, %ecx
                                        # implicit-def: RDI
	movq	1816(%rsp), %rsi        # 8-byte Reload
	callq	test_stores
	movabsq	$2, %rdi
	movabsq	$64, %rsi
	leaq	.L.str3, %rdx
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str74, %rbx
	movabsq	$3, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$240, %r13
	leaq	.L.str536, %rbp
	leaq	.L.str549, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str76, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 300(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$237, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str71, %rcx
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r12, 168(%rsp)         # 8-byte Spill
	movq	%rbp, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%r10, 128(%rsp)         # 8-byte Spill
	movq	%r11, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp249:
	#DEBUG_VALUE: main:num_failures <- 0
	.loc	1 237 0                 # feature_extraction.c:237:0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp250:
	.loc	1 240 0                 # feature_extraction.c:240:0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 104(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str3, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movl	$0, %esi
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$242, %r10
	leaq	.L.str536, %r11
	leaq	.L.str549, %rbx
	leaq	.L.str552, %r14
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str76, %r12
	.loc	1 242 0                 # feature_extraction.c:242:0
	movl	%eax, %eax
	movl	%eax, %r13d
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r15, %r9
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	92(%rsp), %eax          # 4-byte Reload
	addq	$2232, %rsp             # imm = 0x8B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp251:
.Ltmp252:
	.size	main, .Ltmp252-main
.Lfunc_end2:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_0:
	.quad	-4604611780675359464    # double -6.2831853071795862
.LCPI3_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	kiss_fft_alloc
	.align	16, 0x90
	.type	kiss_fft_alloc,@function
kiss_fft_alloc:                         # @kiss_fft_alloc
	.cfi_startproc
.Lfunc_begin3:
	.loc	2 348 0                 # kiss_fft.c:348:0
# BB#0:
	pushq	%rbp
.Ltmp260:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp261:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp262:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp263:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp264:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp265:
	.cfi_def_cfa_offset 56
	subq	$3176, %rsp             # imm = 0xC68
.Ltmp266:
	.cfi_def_cfa_offset 3232
.Ltmp267:
	.cfi_offset %rbx, -56
.Ltmp268:
	.cfi_offset %r12, -48
.Ltmp269:
	.cfi_offset %r13, -40
.Ltmp270:
	.cfi_offset %r14, -32
.Ltmp271:
	.cfi_offset %r15, -24
.Ltmp272:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str9563, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %r10
	movabsq	$2, %r11
	leaq	.L.str13567, %rbx
	movabsq	$3, %r14
	leaq	.L.str12566, %r15
	movabsq	$353, %r12              # imm = 0x161
	leaq	.L.str554, %r13
	leaq	.L.str1555, %rbp
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str11565, %rax
	movl	%esi, 3164(%rsp)        # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 3160(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str10564, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	movabsq	$280, %rax              # imm = 0x118
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$350, %rax              # imm = 0x15E
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str5559, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str20574, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str42596, %rax
	.loc	2 347 0 prologue_end    # kiss_fft.c:347:0
.Ltmp273:
	movl	%esi, 2988(%rsp)        # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movq	3000(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2972(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3040(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2960(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2952(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3016(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2928(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 2920(%rsp)        # 8-byte Spill
	movq	%rbp, 2912(%rsp)        # 8-byte Spill
	movq	%r13, 2904(%rsp)        # 8-byte Spill
	movq	%r15, 2896(%rsp)        # 8-byte Spill
	movq	%r14, 2888(%rsp)        # 8-byte Spill
	movq	%rbx, 2880(%rsp)        # 8-byte Spill
	movq	%r10, 2872(%rsp)        # 8-byte Spill
	movq	%r11, 2864(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	3164(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_alloc:nfft <- [RSP+2972]
	#DEBUG_VALUE: kiss_fft_alloc:inverse_fft <- [RSP+3164]
	#DEBUG_VALUE: kiss_fft_alloc:mem <- [RSP+2952]
	#DEBUG_VALUE: kiss_fft_alloc:lenmem <- [RSP+2944]
	.loc	2 350 0                 # kiss_fft.c:350:0
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %esi        # 4-byte Reload
	addl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2860(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3040(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2860(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2848(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2848(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	3088(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rax        # 8-byte Reload
	addq	$280, %rax              # imm = 0x118
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp274:
	#DEBUG_VALUE: kiss_fft_alloc:memneeded <- [RSP+2832]
	.loc	2 353 0                 # kiss_fft.c:353:0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3136(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2831(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2831(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	movq	2872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2831(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_1
	jmp	.LBB3_2
.Ltmp275:
.LBB3_1:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str8562, %r8
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	malloc, %r9
	leaq	.L.str15569, %r10
	movabsq	$354, %r11              # imm = 0x162
	leaq	.L.str554, %rbx
	leaq	.L.str12566, %r14
	leaq	.L.str14568, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 354 0                 # kiss_fft.c:354:0
.Ltmp276:
	movq	%rdi, 2816(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2808(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2800(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 2792(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 2784(%rsp)         # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 2776(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movq	%r10, 2760(%rsp)        # 8-byte Spill
	movl	%r13d, 2756(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2800(%rsp), %r9         # 8-byte Reload
	movq	2808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2792(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	2800(%rsp), %r9         # 8-byte Reload
	movq	2808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18572, %r8
	leaq	.L.str4558, %rsi
	movabsq	$355, %rdi              # imm = 0x163
	leaq	.L.str554, %r9
	leaq	.L.str12566, %r10
	leaq	.L.str17571, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str16570, %r12
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str14568, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$354, %rax              # imm = 0x162
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 2720(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, 2712(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movq	2744(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2696(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	movq	2736(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2680(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2672(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 2668(%rsp)       # 4-byte Spill
	movq	%r14, 2656(%rsp)        # 8-byte Spill
	movl	%ebp, 2652(%rsp)        # 4-byte Spill
	movq	%r15, 2640(%rsp)        # 8-byte Spill
	movq	%r12, 2632(%rsp)        # 8-byte Spill
	movq	%rbx, 2624(%rsp)        # 8-byte Spill
	movq	%r10, 2616(%rsp)        # 8-byte Spill
	movq	%r11, 2608(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2616(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rax        # 8-byte Reload
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp277:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2600]
	.loc	2 355 0                 # kiss_fft.c:355:0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2616(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2652(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2688(%rsp), %rdi        # 8-byte Reload
	movq	2696(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2696(%rsp), %r9         # 8-byte Reload
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	jmp	.LBB3_6
.Ltmp278:
.LBB3_2:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str19573, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str23577, %r8
	movabsq	$3, %r9
	leaq	.L.str22576, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str554, %rbx
	leaq	.L.str13567, %r14
	leaq	.L.str21575, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	leaq	.L.str20574, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 356 0                 # kiss_fft.c:356:0
.Ltmp279:
	movq	%rdi, 2552(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2544(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2536(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	movq	2536(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2528(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2496(%rsp)        # 8-byte Spill
	movl	%ebp, 2492(%rsp)        # 4-byte Spill
	movl	%r12d, 2488(%rsp)       # 4-byte Spill
	movq	%r13, 2480(%rsp)        # 8-byte Spill
	movq	%r14, 2472(%rsp)        # 8-byte Spill
	movq	%rbx, 2464(%rsp)        # 8-byte Spill
	movq	%r10, 2456(%rsp)        # 8-byte Spill
	movq	%r11, 2448(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2576(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2447(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2448(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movl	2492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2447(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2447(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2432(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#3:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str25579, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str27581, %r8
	movabsq	$3, %r9
	leaq	.L.str22576, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str554, %rbx
	leaq	.L.str23577, %r14
	leaq	.L.str26580, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str10564, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rdi, 2376(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2368(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2360(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2352(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2336(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2328(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2320(%rsp)        # 8-byte Spill
	movl	%ebp, 2316(%rsp)        # 4-byte Spill
	movl	%r12d, 2312(%rsp)       # 4-byte Spill
	movq	%r13, 2304(%rsp)        # 8-byte Spill
	movq	%r14, 2296(%rsp)        # 8-byte Spill
	movq	%rbx, 2288(%rsp)        # 8-byte Spill
	movq	%r10, 2280(%rsp)        # 8-byte Spill
	movq	%r11, 2272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2264(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2272(%rsp), %rdi        # 8-byte Reload
	movq	2288(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2264(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2263(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2272(%rsp), %rdi        # 8-byte Reload
	movq	2288(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2263(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2424(%rsp), %r9         # 8-byte Reload
	movq	2368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2263(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2432(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#4:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str22576, %r8
	leaq	.L.str4558, %rdx
	movabsq	$357, %rsi              # imm = 0x165
	leaq	.L.str554, %rdi
	leaq	.L.str27581, %r9
	leaq	.L.str29583, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str20574, %r12
	leaq	.L.str28582, %r13
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	.loc	2 357 0                 # kiss_fft.c:357:0
	movq	%rdi, 2240(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2224(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2216(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2208(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2232(%rsp), %r13        # 8-byte Reload
	movq	%r8, 2200(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 2192(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2188(%rsp)        # 4-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movq	%r12, 2168(%rsp)        # 8-byte Spill
	movq	%r14, 2160(%rsp)        # 8-byte Spill
	movl	%ebx, 2156(%rsp)        # 4-byte Spill
	movq	%r10, 2144(%rsp)        # 8-byte Spill
	movq	%r11, 2136(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2248(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rax        # 8-byte Reload
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp280:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2128]
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2192(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movl	2156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2248(%rsp), %rdi        # 8-byte Reload
	movq	2208(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movq	2208(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2432(%rsp)        # 8-byte Spill
.Ltmp281:
.LBB3_5:
	movq	2432(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18572, %r8
	leaq	.L.str4558, %rsi
	movabsq	$-1, %rdi
	leaq	.L.str554, %r9
	leaq	.L.str22576, %r10
	leaq	.L.str32586, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$64, %r15
	leaq	.L.str8562, %r12
	leaq	.L.str10564, %r13
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	movabsq	$358, %rax              # imm = 0x166
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str31585, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str30584, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str27581, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str20574, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str23577, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str13567, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 358 0                 # kiss_fft.c:358:0
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%rsi, 2016(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2008(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1984(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1976(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1972(%rsp)       # 4-byte Spill
	movq	%r15, 1960(%rsp)        # 8-byte Spill
	movl	%ebp, 1956(%rsp)        # 4-byte Spill
	movq	%r12, 1944(%rsp)        # 8-byte Spill
	movq	%r13, 1936(%rsp)        # 8-byte Spill
	movq	%rbx, 1928(%rsp)        # 8-byte Spill
	movq	%r10, 1920(%rsp)        # 8-byte Spill
	movq	%r11, 1912(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1992(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movl	1956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2944(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rax        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	1976(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1928(%rsp), %r8         # 8-byte Reload
	movl	1956(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2592(%rsp)        # 8-byte Spill
.Ltmp282:
.LBB3_6:
	movq	2592(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str34588, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str37591, %r9
	movabsq	$3, %r10
	leaq	.L.str36590, %r11
	movabsq	$360, %rbx              # imm = 0x168
	leaq	.L.str554, %r14
	leaq	.L.str18572, %r15
	leaq	.L.str35589, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str33587, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str12566, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str30584, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str22576, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 360 0                 # kiss_fft.c:360:0
.Ltmp283:
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1800(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1792(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1880(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1776(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1768(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1760(%rsp)        # 8-byte Spill
	movq	%r12, 1752(%rsp)        # 8-byte Spill
	movl	%ebp, 1748(%rsp)        # 4-byte Spill
	movl	%r13d, 1744(%rsp)       # 4-byte Spill
	movq	%r14, 1736(%rsp)        # 8-byte Spill
	movq	%rbx, 1728(%rsp)        # 8-byte Spill
	movq	%r10, 1720(%rsp)        # 8-byte Spill
	movq	%r11, 1712(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1748(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1711(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	1748(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1800(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1711(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1800(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1711(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_13
# BB#7:
	movabsq	$1, %rax
	leaq	.L.str43597, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str46600, %r8
	movabsq	$3, %r9
	leaq	.L.str45599, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str554, %rbx
	leaq	.L.str37591, %r14
	leaq	.L.str44598, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str5559, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str42596, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$363, %rax              # imm = 0x16B
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str41595, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str33587, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$362, %rax              # imm = 0x16A
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str39593, %rax
	.loc	2 362 0                 # kiss_fft.c:362:0
.Ltmp284:
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movq	1584(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1520(%rsp)        # 8-byte Spill
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	movl	%r12d, 1512(%rsp)       # 4-byte Spill
	movq	%r13, 1504(%rsp)        # 8-byte Spill
	movq	%r14, 1496(%rsp)        # 8-byte Spill
	movq	%rbx, 1488(%rsp)        # 8-byte Spill
	movq	%r10, 1480(%rsp)        # 8-byte Spill
	movq	%r11, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1584(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax)
	.loc	2 363 0                 # kiss_fft.c:363:0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rax        # 8-byte Reload
	movl	3164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 4(%rax)
.Ltmp285:
	#DEBUG_VALUE: i <- 0
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2972(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1463(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1463(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1552(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1463(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_8
	jmp	.LBB3_12
.LBB3_8:                                # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str49603, %r8
	leaq	.L.str4558, %rdx
	movabsq	$365, %rdi              # imm = 0x16D
	leaq	.L.str554, %rsi
	leaq	.L.str45599, %r9
	leaq	.L.str48602, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str47601, %r12
	.loc	2 367 0                 # kiss_fft.c:367:0
.Ltmp286:
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str554, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movl	$.L.str45599, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1440(%rsp)        # 8-byte Spill
	movl	$.L.str47601, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1432(%rsp)        # 8-byte Spill
	movl	$367, %esi              # imm = 0x16F
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1424(%rsp)        # 8-byte Spill
	movl	$39, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1416(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1400(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1396(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	1440(%rsp), %r13        # 8-byte Reload
	movq	%rdx, 1384(%rsp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1416(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1368(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1396(%rsp), %r13d       # 4-byte Reload
	movq	%r9, 1360(%rsp)         # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, 1352(%rsp)        # 8-byte Spill
	movl	%ebp, 1348(%rsp)        # 4-byte Spill
	movq	%r15, 1336(%rsp)        # 8-byte Spill
	movq	%r12, 1328(%rsp)        # 8-byte Spill
	movl	%ebx, 1324(%rsp)        # 4-byte Spill
	movq	%r10, 1312(%rsp)        # 8-byte Spill
	movq	%r11, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str5559, %ebx
	movl	%ebx, %r8d
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	1396(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %r9d
	movq	%rax, %rdi
	movq	%rax, %rcx
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	2972(%rsp), %ebx        # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp287:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	1336(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1296(%rsp)       # 8-byte Spill
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1384(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1288(%rsp)        # 8-byte Spill
.LBB3_9:                                # =>This Inner Loop Header: Depth=1
	movq	1288(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str58612, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str60614, %r9
	movabsq	$3, %r10
	leaq	.L.str52606, %r11
	movabsq	$368, %rbx              # imm = 0x170
	leaq	.L.str554, %r14
	leaq	.L.str49603, %r15
	leaq	.L.str59613, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str57611, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str55609, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$367, %rax              # imm = 0x16F
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI3_0, %xmm0
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 366 0                 # kiss_fft.c:366:0
.Ltmp288:
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str554, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1152(%rsp)        # 8-byte Spill
	movl	$.L.str49603, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1144(%rsp)        # 8-byte Spill
	movl	$.L.str50604, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1128(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1108(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1144(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1096(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1108(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1072(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	%r12, 1056(%rsp)        # 8-byte Spill
	movl	%ebp, 1052(%rsp)        # 4-byte Spill
	movl	%r13d, 1048(%rsp)       # 4-byte Spill
	movq	%r15, 1040(%rsp)        # 8-byte Spill
	movq	%r14, 1032(%rsp)        # 8-byte Spill
	movq	%r10, 1024(%rsp)        # 8-byte Spill
	movq	%r11, 1016(%rsp)        # 8-byte Spill
	movq	%rbx, 1008(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str52606, (%rcx)
	movl	$.L.str51605, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	1108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, 1000(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, 992(%rsp)         # 8-byte Spill
	movq	1000(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45599, (%rcx)
	movl	$.L.str3557, %eax
	movl	%eax, %r8d
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45599, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp289:
	#DEBUG_VALUE: pi <- 3.141593e+00
	.loc	2 367 0                 # kiss_fft.c:367:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str53607, %eax
	movl	%eax, %ecx
	movl	$367, %eax              # imm = 0x16F
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 968(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movl	1108(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str4558, (%rsi)
	movl	$32, %ebp
	movl	%ebp, %esi
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	%rsi, 952(%rsp)         # 8-byte Spill
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	movl	%eax, 940(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54608, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movl	1108(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	992(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	940(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 928(%rsp)        # 8-byte Spill
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 920(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	920(%rsp), %xmm0        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	920(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 912(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp290:
	#DEBUG_VALUE: phase <- [RSP+912]
	.loc	2 368 0                 # kiss_fft.c:368:0
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 908(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	908(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	908(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 907(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1032(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	907(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1088(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	907(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	jne	.LBB3_11
.Ltmp291:
# BB#10:                                #   in Loop: Header=BB3_9 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str52606, %r8
	leaq	.L.str4558, %rdx
	movabsq	$369, %rsi              # imm = 0x171
	leaq	.L.str554, %rdi
	leaq	.L.str60614, %r9
	leaq	.L.str62616, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str61615, %r12
	movabsq	$-1, %r13
	vmovsd	.LCPI3_1, %xmm0
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 369 0                 # kiss_fft.c:369:0
	movq	%rdi, 864(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 848(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%r8, 824(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 816(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 808(%rsp)         # 8-byte Spill
	movq	%r14, 800(%rsp)         # 8-byte Spill
	movq	%r12, 792(%rsp)         # 8-byte Spill
	movq	%r13, 784(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 776(%rsp)        # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r10, 760(%rsp)         # 8-byte Spill
	movq	%r11, 752(%rsp)         # 8-byte Spill
	movl	%ebx, 748(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	912(%rsp), %xmm0        # 8-byte Reload
	vmovsd	776(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 736(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp292:
	#DEBUG_VALUE: phase <- [RSP+736]
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	832(%rsp), %r9          # 8-byte Reload
	movq	840(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	736(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
.Ltmp293:
.LBB3_11:                               #   in Loop: Header=BB3_9 Depth=1
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str73627, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str49603, %r8
	movabsq	$3, %r9
	leaq	.L.str46600, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str554, %rbx
	leaq	.L.str52606, %r14
	leaq	.L.str74628, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str72626, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str5559, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str51605, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str50604, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str68622, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str70624, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$370, %rax              # imm = 0x172
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str71625, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str33587, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str63617, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	sin, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str69623, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$102, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str64618, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str66620, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str67621, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	cos, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str65619, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str60614, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str61615, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 370 0                 # kiss_fft.c:370:0
.Ltmp294:
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 448(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	568(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%r8, 416(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 408(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 400(%rsp)        # 8-byte Spill
	movq	%r15, 392(%rsp)         # 8-byte Spill
	movl	%ebp, 388(%rsp)         # 4-byte Spill
	movl	%r12d, 384(%rsp)        # 4-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%rbx, 360(%rsp)         # 8-byte Spill
	movq	%r10, 352(%rsp)         # 8-byte Spill
	movq	%r11, 344(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	callq	cos
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 336(%rsp)        # 8-byte Spill
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 328(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rax         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	callq	sin
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 320(%rsp)        # 8-byte Spill
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	312(%rsp), %rax         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp295:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1280(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 304(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	2972(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 299(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	388(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	jne	.LBB3_12
	jmp	.LBB3_9
.Ltmp296:
.LBB3_12:                               # %._crit_edge
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str75629, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4558, %r8
	movabsq	$32, %r9
	leaq	.L.str5559, %r10
	movabsq	$3, %r11
	leaq	kf_factor, %rbx
	leaq	.L.str77631, %r14
	movabsq	$373, %r15              # imm = 0x175
	leaq	.L.str554, %r12
	leaq	.L.str46600, %r13
	leaq	.L.str76630, %rbp
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 280(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 276(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str33587, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	.loc	2 373 0                 # kiss_fft.c:373:0
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 220(%rsp)         # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	276(%rsp), %eax         # 4-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 168(%rsp)         # 8-byte Spill
	movq	%r12, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	movq	%r10, 120(%rsp)         # 8-byte Spill
	movq	%r11, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movl	276(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2972(%rsp), %edi        # 4-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	kf_factor
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str36590, %r8
	leaq	.L.str4558, %rsi
	movabsq	$374, %rdi              # imm = 0x176
	leaq	.L.str554, %r9
	leaq	.L.str46600, %r10
	leaq	.L.str78632, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	.loc	2 374 0                 # kiss_fft.c:374:0
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 72(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	96(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp297:
.LBB3_13:
	movabsq	$1, %rax
	movabsq	$64, %rsi
	leaq	.L.str33587, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %rcx
	movabsq	$375, %rdi              # imm = 0x177
	leaq	.L.str554, %rdx
	leaq	.L.str36590, %r10
	leaq	.L.str79633, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 375 0                 # kiss_fft.c:375:0
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	1904(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rax        # 8-byte Reload
	addq	$3176, %rsp             # imm = 0xC68
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp298:
.Ltmp299:
	.size	kiss_fft_alloc, .Ltmp299-kiss_fft_alloc
.Lfunc_end3:
	.cfi_endproc

	.globl	kiss_fft_stride
	.align	16, 0x90
	.type	kiss_fft_stride,@function
kiss_fft_stride:                        # @kiss_fft_stride
	.cfi_startproc
.Lfunc_begin4:
	.loc	2 380 0                 # kiss_fft.c:380:0
# BB#0:
	pushq	%rbp
.Ltmp307:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp308:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp309:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp310:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp311:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp312:
	.cfi_def_cfa_offset 56
	subq	$376, %rsp              # imm = 0x178
.Ltmp313:
	.cfi_def_cfa_offset 432
.Ltmp314:
	.cfi_offset %rbx, -56
.Ltmp315:
	.cfi_offset %r12, -48
.Ltmp316:
	.cfi_offset %r13, -40
.Ltmp317:
	.cfi_offset %r14, -32
.Ltmp318:
	.cfi_offset %r15, -24
.Ltmp319:
	.cfi_offset %rbp, -16
	leaq	360(%rsp), %rax
	leaq	368(%rsp), %r8
	movabsq	$1, %r9
	movabsq	$6, %r10
	movabsq	$64, %r11
	leaq	.L.str115669, %rbx
	movabsq	$0, %r14
	leaq	.L.str4558, %r15
	movabsq	$5, %r12
	leaq	.L.str7561, %r13
	movabsq	$4, %rbp
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str118672, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str112666, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str114668, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$391, %rax              # imm = 0x187
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str110664, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str116670, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str113667, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str111665, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$26, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rsi
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movq	%r9, %rcx
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r14, %r9
	movq	%r15, (%rsp)
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	.loc	2 379 0 prologue_end    # kiss_fft.c:379:0
.Ltmp320:
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_stride:st <- [RSP+144]
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+136]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, 368(%rsp)
.Ltmp321:
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+104]
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+120]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rax, 360(%rsp)
.Ltmp322:
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+352]
	#DEBUG_VALUE: kiss_fft_stride:in_stride <- [RSP+236]
	.loc	2 391 0                 # kiss_fft.c:391:0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movl	236(%rsp), %ecx         # 4-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	kf_work
	movabsq	$392, %rdi              # imm = 0x188
	leaq	.L.str110664, %rsi
	leaq	.L.str1555, %rdx
	leaq	.L.str119673, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 392 0                 # kiss_fft.c:392:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$376, %rsp              # imm = 0x178
.Ltmp323:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp324:
.Ltmp325:
	.size	kiss_fft_stride, .Ltmp325-kiss_fft_stride
.Lfunc_end4:
	.cfi_endproc

	.globl	kiss_fft
	.align	16, 0x90
	.type	kiss_fft,@function
kiss_fft:                               # @kiss_fft
	.cfi_startproc
.Lfunc_begin5:
	.loc	2 395 0                 # kiss_fft.c:395:0
# BB#0:
	pushq	%rbp
.Ltmp333:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp334:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp335:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp336:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp337:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp338:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp339:
	.cfi_def_cfa_offset 288
.Ltmp340:
	.cfi_offset %rbx, -56
.Ltmp341:
	.cfi_offset %r12, -48
.Ltmp342:
	.cfi_offset %r13, -40
.Ltmp343:
	.cfi_offset %r14, -32
.Ltmp344:
	.cfi_offset %r15, -24
.Ltmp345:
	.cfi_offset %rbp, -16
	movabsq	$4, %rax
	movabsq	$32, %rcx
	movabsq	$1, %r8
	movabsq	$0, %r9
	leaq	.L.str3557, %r10
	leaq	.L.str4558, %r11
	movabsq	$3, %rbx
	movabsq	$64, %r14
	leaq	.L.str114668, %r15
	movabsq	$2, %r12
	leaq	.L.str112666, %r13
	leaq	.L.str176730, %rbp
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	kiss_fft_stride, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str110664, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$396, %rax              # imm = 0x18C
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str174728, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str175729, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	2 394 0 prologue_end    # kiss_fft.c:394:0
.Ltmp346:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movq	%r14, %rsi
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rbp, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	%r11, (%rsp)
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r12, 64(%rsp)          # 8-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r10, 32(%rsp)          # 8-byte Spill
	movq	%r11, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft:cfg <- [RSP+136]
	#DEBUG_VALUE: kiss_fft:fin <- [RSP+160]
	#DEBUG_VALUE: kiss_fft:fout <- [RSP+112]
	.loc	2 396 0                 # kiss_fft.c:396:0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	156(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ecx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	callq	kiss_fft_stride
.Ltmp347:
	movabsq	$397, %rdi              # imm = 0x18D
	leaq	.L.str174728, %rsi
	leaq	.L.str1555, %rdx
	leaq	.L.str83637, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 397 0                 # kiss_fft.c:397:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp348:
.Ltmp349:
	.size	kiss_fft, .Ltmp349-kiss_fft
.Lfunc_end5:
	.cfi_endproc

	.globl	kiss_fft_cleanup
	.align	16, 0x90
	.type	kiss_fft_cleanup,@function
kiss_fft_cleanup:                       # @kiss_fft_cleanup
	.cfi_startproc
.Lfunc_begin6:
	.loc	2 401 0                 # kiss_fft.c:401:0
# BB#0:
	subq	$24, %rsp
.Ltmp351:
	.cfi_def_cfa_offset 32
	movabsq	$403, %rdi              # imm = 0x193
	leaq	.L.str177731, %rsi
	leaq	.L.str1555, %rdx
	leaq	.L.str178732, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 403 0 prologue_end    # kiss_fft.c:403:0
.Ltmp352:
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$24, %rsp
	ret
.Ltmp353:
.Ltmp354:
	.size	kiss_fft_cleanup, .Ltmp354-kiss_fft_cleanup
.Lfunc_end6:
	.cfi_endproc

	.globl	kiss_fft_next_fast_size
	.align	16, 0x90
	.type	kiss_fft_next_fast_size,@function
kiss_fft_next_fast_size:                # @kiss_fft_next_fast_size
	.cfi_startproc
.Lfunc_begin7:
	.loc	2 406 0                 # kiss_fft.c:406:0
# BB#0:
	pushq	%rbp
.Ltmp362:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp363:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp364:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp365:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp366:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp367:
	.cfi_def_cfa_offset 56
	subq	$1832, %rsp             # imm = 0x728
.Ltmp368:
	.cfi_def_cfa_offset 1888
.Ltmp369:
	.cfi_offset %rbx, -56
.Ltmp370:
	.cfi_offset %r12, -48
.Ltmp371:
	.cfi_offset %r13, -40
.Ltmp372:
	.cfi_offset %r14, -32
.Ltmp373:
	.cfi_offset %r15, -24
.Ltmp374:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str181735, %r8
	leaq	.L.str4558, %rdx
	movabsq	$407, %rsi              # imm = 0x197
	leaq	.L.str179733, %r9
	leaq	.L.str1555, %r10
	leaq	.L.str180734, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$24601, %r15            # imm = 0x6019
	movabsq	$32, %r12
	leaq	.L.str80634, %r13
	.loc	2 405 0 prologue_end    # kiss_fft.c:405:0
.Ltmp375:
	movq	%rsi, 1824(%rsp)        # 8-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movl	%edi, 1820(%rsp)        # 4-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 1808(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	1808(%rsp), %r15        # 8-byte Reload
	movq	%rdx, 1800(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 1784(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	1792(%rsp), %r12        # 8-byte Reload
	movq	%r9, 1776(%rsp)         # 8-byte Spill
	movq	%r12, %r9
	movq	1800(%rsp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movl	%r14d, 1772(%rsp)       # 4-byte Spill
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movl	%ebp, 1756(%rsp)        # 4-byte Spill
	movq	%r11, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+1820]
	.loc	2 407 0                 # kiss_fft.c:407:0
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1728(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1756(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1792(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1792(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
.Ltmp376:
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_2 Depth 2
                                        #     Child Loop BB7_4 Depth 2
                                        #     Child Loop BB7_6 Depth 2
	movl	1724(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str7561, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str184738, %r9
	movabsq	$3, %r10
	leaq	.L.str92646, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str179733, %r14
	leaq	.L.str181735, %r15
	leaq	.L.str183737, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str182736, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str80634, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str34588, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str86640, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 408 0                 # kiss_fft.c:408:0
.Ltmp377:
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1600(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1592(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1584(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1576(%rsp)         # 8-byte Spill
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1568(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1564(%rsp)        # 4-byte Spill
	movq	%r15, 1552(%rsp)        # 8-byte Spill
	movq	%r12, 1544(%rsp)        # 8-byte Spill
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movl	%r13d, 1536(%rsp)       # 4-byte Spill
	movq	%r14, 1528(%rsp)        # 8-byte Spill
	movq	%rbx, 1520(%rsp)        # 8-byte Spill
	movq	%r10, 1512(%rsp)        # 8-byte Spill
	movq	%r11, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp378:
	#DEBUG_VALUE: m <- [RSP+1564]
	.loc	2 409 0                 # kiss_fft.c:409:0
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1500(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1499(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
	jmp	.LBB7_3
.Ltmp379:
.LBB7_2:                                # %.lr.ph
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str123677, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str184738, %r9
	movabsq	$3, %r10
	leaq	.L.str92646, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str179733, %r14
	leaq	.L.str186740, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rcx
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 1456(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rcx
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movl	%eax, 1436(%rsp)        # 4-byte Spill
	movl	$2, %eax
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str185739, %rcx
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str182736, %rcx
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str181735, %rcx
	movq	%rcx, 1392(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1368(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1360(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1332(%rsp)        # 4-byte Spill
	movq	%r15, 1320(%rsp)        # 8-byte Spill
	movl	%ebp, 1316(%rsp)        # 4-byte Spill
	movl	%r12d, 1312(%rsp)       # 4-byte Spill
	movq	%r13, 1304(%rsp)        # 8-byte Spill
	movq	%r14, 1296(%rsp)        # 8-byte Spill
	movq	%rbx, 1288(%rsp)        # 8-byte Spill
	movq	%r10, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1332(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1268(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp380:
	#DEBUG_VALUE: m <- [RSP+1268]
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1264(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1263(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1268(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
.Ltmp381:
.LBB7_3:                                # %.loopexit
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str16570, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str190744, %r9
	movabsq	$3, %r10
	leaq	.L.str189743, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str179733, %r14
	leaq	.L.str184738, %r15
	leaq	.L.str188742, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str14568, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 1212(%rsp)        # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str187741, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str181735, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str182736, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str92646, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 410 0                 # kiss_fft.c:410:0
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1128(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1092(%rsp)        # 4-byte Spill
	movq	%r15, 1080(%rsp)        # 8-byte Spill
	movq	%r12, 1072(%rsp)        # 8-byte Spill
	movl	%ebp, 1068(%rsp)        # 4-byte Spill
	movl	%r13d, 1064(%rsp)       # 4-byte Spill
	movq	%r14, 1056(%rsp)        # 8-byte Spill
	movq	%rbx, 1048(%rsp)        # 8-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1092(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1028(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1027(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1212(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
	jmp	.LBB7_5
.LBB7_4:                                # %.lr.ph4
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str103657, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str190744, %r9
	movabsq	$3, %r10
	leaq	.L.str189743, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str179733, %r14
	leaq	.L.str192746, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str19573, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 980(%rsp)         # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str102656, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	.L.str191745, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str187741, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	leaq	.L.str184738, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 896(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 872(%rsp)          # 8-byte Spill
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	%r9, 864(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movq	%r15, 848(%rsp)         # 8-byte Spill
	movl	%ebp, 844(%rsp)         # 4-byte Spill
	movl	%r12d, 840(%rsp)        # 4-byte Spill
	movq	%r13, 832(%rsp)         # 8-byte Spill
	movq	%r14, 824(%rsp)         # 8-byte Spill
	movq	%rbx, 816(%rsp)         # 8-byte Spill
	movq	%r10, 808(%rsp)         # 8-byte Spill
	movq	%r11, 800(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 796(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp382:
	#DEBUG_VALUE: m <- [RSP+796]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 792(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 791(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	796(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
.Ltmp383:
.LBB7_5:                                # %.loopexit2
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str25579, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str86640, %r9
	movabsq	$3, %r10
	leaq	.L.str195749, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str179733, %r14
	leaq	.L.str190744, %r15
	leaq	.L.str194748, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str24578, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 740(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str193747, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str184738, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str187741, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str102656, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str189743, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 411 0                 # kiss_fft.c:411:0
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 648(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 640(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 632(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 624(%rsp)          # 8-byte Spill
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	%r9, 616(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 612(%rsp)         # 4-byte Spill
	movq	%r15, 600(%rsp)         # 8-byte Spill
	movq	%r12, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r13d, 584(%rsp)        # 4-byte Spill
	movq	%r14, 576(%rsp)         # 8-byte Spill
	movq	%rbx, 568(%rsp)         # 8-byte Spill
	movq	%r10, 560(%rsp)         # 8-byte Spill
	movq	%r11, 552(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	cltd
	movl	612(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 548(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 547(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	740(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
	jmp	.LBB7_7
.LBB7_6:                                # %.lr.ph7
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str108662, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str86640, %r9
	movabsq	$3, %r10
	leaq	.L.str195749, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str179733, %r14
	leaq	.L.str197751, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rcx
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 500(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str105659, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	leaq	.L.str196750, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	leaq	.L.str193747, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str190744, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 408(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 372(%rsp)         # 4-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp384:
	#DEBUG_VALUE: m <- [RSP+308]
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 304(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 303(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
.Ltmp385:
.LBB7_7:                                # %._crit_edge
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str130684, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str181735, %r9
	movabsq	$3, %r10
	leaq	.L.str37591, %r11
	movabsq	$412, %rbx              # imm = 0x19C
	leaq	.L.str179733, %r14
	leaq	.L.str86640, %r15
	leaq	.L.str199753, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str34588, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str182736, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$414, %rcx              # imm = 0x19E
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str198752, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str190744, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str193747, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str105659, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str195749, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 412 0                 # kiss_fft.c:412:0
.Ltmp386:
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 144(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 124(%rsp)         # 4-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	movl	%r13d, 96(%rsp)         # 4-byte Spill
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	setl	%al
.Ltmp387:
	.loc	2 414 0                 # kiss_fft.c:414:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 63(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	240(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 56(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp388:
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+56]
	.loc	2 412 0                 # kiss_fft.c:412:0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movl	56(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
	jne	.LBB7_8
	jmp	.LBB7_1
.Ltmp389:
.LBB7_8:
	movabsq	$1, %rax
	movabsq	$32, %rsi
	leaq	.L.str182736, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %rcx
	movabsq	$416, %rdi              # imm = 0x1A0
	leaq	.L.str179733, %rdx
	leaq	.L.str37591, %r10
	leaq	.L.str39593, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 416 0                 # kiss_fft.c:416:0
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movl	1564(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	addq	$1832, %rsp             # imm = 0x728
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp390:
.Ltmp391:
	.size	kiss_fft_next_fast_size, .Ltmp391-kiss_fft_next_fast_size
.Lfunc_end7:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_factor,@function
kf_factor:                              # @kf_factor
	.cfi_startproc
.Lfunc_begin8:
	.loc	2 318 0                 # kiss_fft.c:318:0
# BB#0:
	pushq	%rbp
.Ltmp399:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp400:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp401:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp402:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp403:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp404:
	.cfi_def_cfa_offset 56
	subq	$1608, %rsp             # imm = 0x648
.Ltmp405:
	.cfi_def_cfa_offset 1664
.Ltmp406:
	.cfi_offset %rbx, -56
.Ltmp407:
	.cfi_offset %r12, -48
.Ltmp408:
	.cfi_offset %r13, -40
.Ltmp409:
	.cfi_offset %r14, -32
.Ltmp410:
	.cfi_offset %r15, -24
.Ltmp411:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: kf_factor:facbuf <- RSI
	#DEBUG_VALUE: kf_factor:n <- EDI
	movl	$4, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str84638, %r8
	leaq	.L.str4558, %r9
	movabsq	$324, %r10              # imm = 0x144
	leaq	.L.str77631, %r11
	leaq	.L.str1555, %rbx
	leaq	.L.str83637, %r14
	movabsq	$2, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	leaq	floor, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str82636, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	movabsq	$321, %rcx              # imm = 0x141
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str81635, %rcx
	.loc	2 317 0 prologue_end    # kiss_fft.c:317:0
.Ltmp412:
	movl	%eax, 1524(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str80634, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1504(%rsp)        # 8-byte Spill
.Ltmp413:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+1504]
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%edi, 1460(%rsp)        # 4-byte Spill
.Ltmp414:
	#DEBUG_VALUE: kf_factor:n <- [RSP+1460]
	movq	%rax, %rdi
	movq	1488(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1456(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1424(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1420(%rsp)       # 4-byte Spill
	movq	%r13, 1408(%rsp)        # 8-byte Spill
	movq	%r15, 1400(%rsp)        # 8-byte Spill
	movl	%ebp, 1396(%rsp)        # 4-byte Spill
	movq	%r14, 1384(%rsp)        # 8-byte Spill
	movq	%rbx, 1376(%rsp)        # 8-byte Spill
	movq	%r10, 1368(%rsp)        # 8-byte Spill
	movq	%r11, 1360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp415:
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str87641, %ebp
	movl	%ebp, %r8d
	movl	$64, %ebp
	movl	%ebp, %esi
	movq	1496(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
.Ltmp416:
	#DEBUG_VALUE: kf_factor:p <- 4
	.loc	2 321 0                 # kiss_fft.c:321:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str77631, %ebp
	movl	%ebp, %esi
	movl	$.L.str1555, %ebp
	movl	%ebp, %edx
	movl	$.L.str2556, %ebp
	movl	%ebp, %ecx
	movl	$321, %ebp              # imm = 0x141
	movl	%ebp, %edi
	movl	$39, %ebp
	movl	%ebp, %r8d
	movl	1456(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	1460(%rsp), %ebp        # 4-byte Reload
	vcvtsi2sdl	%ebp, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1344(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1568(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1344(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
                                        # implicit-def: XMM0
	vmovsd	1344(%rsp), %xmm1       # 8-byte Reload
	vroundsd	$1, %xmm1, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1336(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp417:
	#DEBUG_VALUE: kf_factor:floor_sqrt <- [RSP+1336]
	.loc	2 324 0                 # kiss_fft.c:324:0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	1524(%rsp), %ebp        # 4-byte Reload
	movl	1460(%rsp), %r12d       # 4-byte Reload
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r12d, 1320(%rsp)       # 4-byte Spill
.Ltmp418:
.LBB8_1:                                # %.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_2 Depth 2
	movl	1320(%rsp), %eax        # 4-byte Reload
	movl	1324(%rsp), %ecx        # 4-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movabsq	$1, %rsi
	leaq	.L.str9563, %rdi
	movabsq	$0, %r8
	leaq	.L.str4558, %r9
	movabsq	$2, %r10
	leaq	.L.str92646, %r11
	movabsq	$3, %rbx
	leaq	.L.str86640, %r14
	movabsq	$325, %r15              # imm = 0x145
	leaq	.L.str77631, %r12
	leaq	.L.str84638, %r13
	leaq	.L.str91645, %rbp
	movl	%eax, 1316(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1312(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 1304(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 1296(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rdx
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rdx
	movq	%rdx, 1272(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str90644, %rdx
	movq	%rdx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str88642, %rdx
	movq	%rdx, 1248(%rsp)        # 8-byte Spill
	movabsq	$18, %rdx
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rdx
	movq	%rdx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str80634, %rdx
	movq	%rdx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str25579, %rdx
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 1200(%rsp)        # 8-byte Spill
	movabsq	$4, %rdx
	movq	%rdx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str89643, %rdx
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str85639, %rdx
	movq	%rdx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str87641, %rdx
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str28582, %rdx
	.loc	2 325 0                 # kiss_fft.c:325:0
.Ltmp419:
	movq	%rdx, 1152(%rsp)        # 8-byte Spill
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 1144(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 1128(%rsp)         # 8-byte Spill
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 1124(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	movl	1312(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1104(%rsp)        # 8-byte Spill
	movq	%r12, 1096(%rsp)        # 8-byte Spill
	movq	%r13, 1088(%rsp)        # 8-byte Spill
	movq	%rbp, 1080(%rsp)        # 8-byte Spill
	movq	%r14, 1072(%rsp)        # 8-byte Spill
	movq	%rbx, 1064(%rsp)        # 8-byte Spill
	movq	%r10, 1056(%rsp)        # 8-byte Spill
	movq	%r11, 1048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1460(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1124(%rsp), %esi        # 4-byte Reload
	idivl	%esi
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1044(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1043(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
.LBB8_2:                                # %.lr.ph
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1036(%rsp), %eax        # 4-byte Reload
	movl	$2, %ecx
	.loc	2 326 0                 # kiss_fft.c:326:0
.Ltmp420:
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str77631, %esi
	movl	%esi, %edx
	movl	$.L.str92646, %esi
	movl	%esi, %edi
	movl	$.L.str93647, %esi
	movl	%esi, %r8d
	movl	$48, %esi
	movl	%esi, %r9d
	movq	$-1, %r10
	xorl	%esi, %esi
	movq	%rdi, 1024(%rsp)        # 8-byte Spill
	movq	%r10, %rdi
	movl	%esi, 1020(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1024(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 1004(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	%r8, 992(%rsp)          # 8-byte Spill
	movq	%r9, %r8
	movl	1020(%rsp), %r9d        # 4-byte Reload
	movl	%eax, 988(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str84638, (%rcx)
	movl	$.L.str88642, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	1020(%rsp), %eax        # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, 976(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 968(%rsp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	968(%rsp), %r10         # 8-byte Reload
	movq	%rdx, 960(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	976(%rsp), %r11         # 8-byte Reload
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str95649, (%rcx)
	movl	$.L.str94648, %eax
	movl	%eax, %r8d
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str95649, %eax
	movl	%eax, %r8d
	movl	988(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str95649, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	976(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	992(%rsp), %r10         # 8-byte Reload
	movq	%r8, 936(%rsp)          # 8-byte Spill
	movq	%r10, %r8
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str96650, %eax
	movl	%eax, %ecx
	movl	$326, %eax              # imm = 0x146
	movl	%eax, %edi
	movl	$3, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 928(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	1020(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movl	$.L.str97651, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movl	$.L.str3557, %eax
	movl	%eax, %ecx
	movl	$5, %eax
	movl	%eax, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movl	$4, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movl	$.L.str98652, %eax
	movl	%eax, %r8d
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$4, %eax
	movl	$2, %ebx
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%ebx, 904(%rsp)         # 4-byte Spill
	je	.LBB8_5
	jmp	.LBB8_8
.LBB8_8:                                # %.lr.ph
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 900(%rsp)         # 4-byte Spill
	jne	.LBB8_4
	jmp	.LBB8_3
.LBB8_3:                                #   in Loop: Header=BB8_2 Depth=2
	movl	$3, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str95649, %r8
	leaq	.L.str4558, %rsi
	movabsq	$328, %rdi              # imm = 0x148
	leaq	.L.str77631, %r9
	leaq	.L.str97651, %r10
	leaq	.L.str99653, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
.Ltmp421:
	#DEBUG_VALUE: kf_factor:p <- 3
	.loc	2 328 0                 # kiss_fft.c:328:0
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movl	%r14d, 856(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	888(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	860(%rsp), %eax         # 4-byte Reload
	movl	%eax, 904(%rsp)         # 4-byte Spill
	jmp	.LBB8_5
.LBB8_4:                                #   in Loop: Header=BB8_2 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str95649, %r8
	leaq	.L.str4558, %rdx
	movabsq	$329, %rsi              # imm = 0x149
	leaq	.L.str77631, %rdi
	leaq	.L.str98652, %r9
	leaq	.L.str100654, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str16570, %r12
	leaq	.L.str93647, %r13
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 329 0                 # kiss_fft.c:329:0
	movq	%rdi, 832(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movq	832(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 776(%rsp)         # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r13, 744(%rsp)         # 8-byte Spill
	movl	%ebx, 740(%rsp)         # 4-byte Spill
	movq	%r10, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	addl	$2, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 716(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp422:
	#DEBUG_VALUE: kf_factor:p <- [RSP+716]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movl	740(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	716(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, 904(%rsp)         # 4-byte Spill
.Ltmp423:
.LBB8_5:                                # %.backedge
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	904(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str24578, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str92646, %r9
	movabsq	$3, %r10
	leaq	.L.str86640, %r11
	movabsq	$325, %rbx              # imm = 0x145
	leaq	.L.str77631, %r14
	leaq	.L.str95649, %r15
	leaq	.L.str104658, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str103657, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str90644, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	leaq	.L.str94648, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	leaq	.L.str19573, %rcx
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	leaq	.L.str101655, %rcx
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movabsq	$331, %rcx              # imm = 0x14B
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	leaq	.L.str102656, %rcx
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	leaq	.L.str7561, %rcx
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movabsq	$47, %rcx
	.loc	2 331 0                 # kiss_fft.c:331:0
.Ltmp424:
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str77631, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, 572(%rsp)         # 4-byte Spill
	movl	$.L.str95649, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$.L.str101655, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 544(%rsp)         # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 536(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 524(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 512(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	552(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	524(%rsp), %eax         # 4-byte Reload
	movq	%r9, 488(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movq	%r15, 480(%rsp)         # 8-byte Spill
	movl	%r13d, 476(%rsp)        # 4-byte Spill
	movq	%r12, 464(%rsp)         # 8-byte Spill
	movl	%ebp, 460(%rsp)         # 4-byte Spill
	movq	%r14, 448(%rsp)         # 8-byte Spill
	movq	%rbx, 440(%rsp)         # 8-byte Spill
	movq	%r10, 432(%rsp)         # 8-byte Spill
	movq	%r11, 424(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str92646, (%rcx)
	movl	$.L.str3557, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movl	%eax, %edx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$2, %eax
	movl	%eax, %edi
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r8d
	movl	$1, %r9d
	movl	%r9d, %r10d
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	416(%rsp), %r11         # 8-byte Reload
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %rbx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r10, %r9
	movq	%r10, 376(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str97651, (%rcx)
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str98652, (%rcx)
	movl	$.L.str16570, %eax
	movl	%eax, %r8d
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	572(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	%rsp, %rdx
	movq	$.L.str98652, (%rdx)
	movl	$19134, %ebp            # imm = 0x4ABE
	movl	%ebp, %edi
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str102656, %eax
	movl	%eax, %ecx
	movl	$331, %eax              # imm = 0x14B
	movl	%eax, %edi
	movl	$39, %eax
	movl	%eax, %r8d
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movl	524(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4558, (%rcx)
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	572(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 360(%rsp)        # 8-byte Spill
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	2 332 0                 # kiss_fft.c:332:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 359(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
.Ltmp425:
	#DEBUG_VALUE: kf_factor:p <- [RSP+1316]
	.loc	2 331 0                 # kiss_fft.c:331:0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	572(%rsp), %r13d        # 4-byte Reload
	cmovel	%r13d, %ebp
.Ltmp426:
	.loc	2 325 0                 # kiss_fft.c:325:0
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 352(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	352(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	352(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 348(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 347(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	352(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
	jmp	.LBB8_2
.Ltmp427:
.LBB8_6:                                # %._crit_edge
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	1036(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str108662, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str18572, %r9
	movabsq	$3, %r10
	leaq	.L.str84638, %r11
	movabsq	$337, %rbx              # imm = 0x151
	leaq	.L.str77631, %r14
	leaq	.L.str86640, %r15
	leaq	.L.str109663, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	leaq	.L.str25579, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	leaq	.L.str105659, %rcx
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$336, %rcx              # imm = 0x150
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str107661, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	leaq	.L.str85639, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str89643, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$335, %rcx              # imm = 0x14F
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str106660, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str90644, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$334, %rcx              # imm = 0x14E
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str88642, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	.L.str94648, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str95649, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 334 0                 # kiss_fft.c:334:0
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	%r15, 88(%rsp)          # 8-byte Spill
	movq	%r12, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r13d, 72(%rsp)         # 4-byte Spill
	movq	%r14, 64(%rsp)          # 8-byte Spill
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movq	%r11, 40(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	100(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 36(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp428:
	#DEBUG_VALUE: kf_factor:n <- [RSP+36]
	.loc	2 335 0                 # kiss_fft.c:335:0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp429:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+24]
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rcx)
	.loc	2 336 0                 # kiss_fft.c:336:0
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp430:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+16]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, 4(%rcx)
	.loc	2 337 0                 # kiss_fft.c:337:0
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	100(%rsp), %ebp         # 4-byte Reload
	movl	36(%rsp), %r13d         # 4-byte Reload
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r13d, 1320(%rsp)       # 4-byte Spill
	jne	.LBB8_1
.Ltmp431:
# BB#7:
	movabsq	$338, %rdi              # imm = 0x152
	leaq	.L.str77631, %rsi
	leaq	.L.str18572, %rdx
	leaq	.L.str35589, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 338 0                 # kiss_fft.c:338:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$1608, %rsp             # imm = 0x648
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp432:
.Ltmp433:
	.size	kf_factor, .Ltmp433-kf_factor
.Lfunc_end8:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_work,@function
kf_work:                                # @kf_work
	.cfi_startproc
.Lfunc_begin9:
	.loc	2 252 0                 # kiss_fft.c:252:0
# BB#0:
	pushq	%rbp
.Ltmp441:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp442:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp443:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp444:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp445:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp446:
	.cfi_def_cfa_offset 56
	subq	$3256, %rsp             # imm = 0xCB8
.Ltmp447:
	.cfi_def_cfa_offset 3312
.Ltmp448:
	.cfi_offset %rbx, -56
.Ltmp449:
	.cfi_offset %r12, -48
.Ltmp450:
	.cfi_offset %r13, -40
.Ltmp451:
	.cfi_offset %r14, -32
.Ltmp452:
	.cfi_offset %r15, -24
.Ltmp453:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str19573, %r10
	movabsq	$0, %r11
	leaq	.L.str4558, %rbx
	movabsq	$2, %r14
	leaq	.L.str126680, %r15
	movabsq	$3, %r12
	leaq	.L.str125679, %r13
	movabsq	$283, %rbp              # imm = 0x11B
	movq	%rax, 3248(%rsp)        # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 3240(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 3232(%rsp)        # 8-byte Spill
	leaq	.L.str124678, %rax
	movl	%ecx, 3228(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3224(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3216(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3208(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3176(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	movabsq	$257, %rax              # imm = 0x101
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str14568, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$256, %rax              # imm = 0x100
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str122676, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$255, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str121675, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$254, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$253, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str118672, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	.loc	2 245 0 prologue_end    # kiss_fft.c:245:0
.Ltmp454:
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2960(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2952(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 2948(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3016(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2928(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 2920(%rsp)        # 8-byte Spill
	movq	%rbx, 2912(%rsp)        # 8-byte Spill
	movq	%r14, 2904(%rsp)        # 8-byte Spill
	movq	%r15, 2896(%rsp)        # 8-byte Spill
	movq	%r12, 2888(%rsp)        # 8-byte Spill
	movq	%rbp, 2880(%rsp)        # 8-byte Spill
	movq	%r10, 2872(%rsp)        # 8-byte Spill
	movq	%r11, 2864(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kf_work:Fout <- [RSP+2968]
	#DEBUG_VALUE: kf_work:f <- [RSP+2960]
	#DEBUG_VALUE: kf_work:fstride <- [RSP+2952]
	#DEBUG_VALUE: kf_work:in_stride <- [RSP+3228]
	#DEBUG_VALUE: kf_work:factors <- [RSP+2936]
	#DEBUG_VALUE: kf_work:st <- [RSP+2928]
	.loc	2 253 0                 # kiss_fft.c:253:0
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2856(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp455:
	#DEBUG_VALUE: kf_work:Fout_beg <- [RSP+2856]
	.loc	2 254 0                 # kiss_fft.c:254:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2848(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp456:
	#DEBUG_VALUE: kf_work:f_beg <- [RSP+2848]
	.loc	2 255 0                 # kiss_fft.c:255:0
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp457:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2840]
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2836(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp458:
	#DEBUG_VALUE: kf_work:p <- [RSP+2836]
	.loc	2 256 0                 # kiss_fft.c:256:0
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2936(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp459:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2824]
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2936(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2820(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp460:
	#DEBUG_VALUE: kf_work:m <- [RSP+2820]
	.loc	2 257 0                 # kiss_fft.c:257:0
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2836(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	2836(%rsp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2816(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2816(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2816(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3160(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2808(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	2856(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2800(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp461:
	#DEBUG_VALUE: kf_work:Fout_end <- [RSP+2800]
	.loc	2 283 0                 # kiss_fft.c:283:0
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	3240(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2864(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2864(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2799(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_2
.Ltmp462:
# BB#1:                                 # %.preheader1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str129683, %r8
	leaq	.L.str4558, %rdx
	movabsq	$294, %rsi              # imm = 0x126
	leaq	.L.str117671, %rdi
	leaq	.L.str126680, %r9
	leaq	.L.str128682, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str28582, %r12
	movabsq	$32, %r13
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	movabsq	$296, %rax              # imm = 0x128
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	leaq	.L.str25579, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$295, %rax              # imm = 0x127
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str118672, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp463:
	movq	%rdi, 2688(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movq	2688(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2672(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2664(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2760(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2648(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2640(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2632(%rsp)        # 8-byte Spill
	movl	%ebp, 2628(%rsp)        # 4-byte Spill
	movq	%r15, 2616(%rsp)        # 8-byte Spill
	movq	%r12, 2608(%rsp)        # 8-byte Spill
	movq	%r13, 2600(%rsp)        # 8-byte Spill
	movl	%ebx, 2596(%rsp)        # 4-byte Spill
	movq	%r10, 2584(%rsp)        # 8-byte Spill
	movq	%r11, 2576(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2836(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2552(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2752(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2600(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2640(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2656(%rsp), %r9         # 8-byte Reload
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_4
.Ltmp464:
.LBB9_2:                                # %.preheader
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str132686, %r8
	leaq	.L.str4558, %rdx
	movabsq	$285, %rdi              # imm = 0x11D
	leaq	.L.str117671, %rsi
	leaq	.L.str125679, %r9
	leaq	.L.str131685, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str130684, %r12
	leaq	.L.str108662, %r13
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	leaq	.L.str118672, %rax
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	2 286 0                 # kiss_fft.c:286:0
.Ltmp465:
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	movq	2512(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2472(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2464(%rsp)        # 8-byte Spill
	movq	%rdx, 2456(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2448(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2480(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2440(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2432(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2424(%rsp)        # 8-byte Spill
	movl	%ebp, 2420(%rsp)        # 4-byte Spill
	movq	%r15, 2408(%rsp)        # 8-byte Spill
	movq	%r13, 2400(%rsp)        # 8-byte Spill
	movq	%r12, 2392(%rsp)        # 8-byte Spill
	movl	%ebx, 2388(%rsp)        # 4-byte Spill
	movq	%r10, 2376(%rsp)        # 8-byte Spill
	movq	%r11, 2368(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	3228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2496(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2504(%rsp), %r8         # 8-byte Reload
	movl	2388(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	2360(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2360(%rsp), %rax        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 285 0                 # kiss_fft.c:285:0
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2408(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2388(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2448(%rsp), %r9         # 8-byte Reload
	movq	2456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.LBB9_3:                                # =>This Inner Loop Header: Depth=1
	movabsq	$1, %rax
	leaq	.L.str55609, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str132686, %r8
	movabsq	$3, %r9
	leaq	.L.str140694, %r10
	movabsq	$287, %r11              # imm = 0x11F
	leaq	.L.str117671, %rbx
	leaq	.L.str139693, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str138692, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str53607, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str136690, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str121675, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str137691, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str135689, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	movabsq	$285, %rax              # imm = 0x11D
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str134688, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movq	2136(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2080(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2072(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2056(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2048(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2044(%rsp)        # 4-byte Spill
	movl	%r15d, 2040(%rsp)       # 4-byte Spill
	movq	%r12, 2032(%rsp)        # 8-byte Spill
	movq	%r13, 2024(%rsp)        # 8-byte Spill
	movq	%r14, 2016(%rsp)        # 8-byte Spill
	movq	%rbx, 2008(%rsp)        # 8-byte Spill
	movq	%r10, 2000(%rsp)        # 8-byte Spill
	movq	%r11, 1992(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1984(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1976(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2176(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2192(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
	.loc	2 286 0                 # kiss_fft.c:286:0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1952(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	1952(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 287 0                 # kiss_fft.c:287:0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1936(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1936(%rsp), %rax        # 8-byte Reload
	addq	$16, %rax
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	2800(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	2072(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2072(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2344(%rsp), %rsi        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2072(%rsp), %r9         # 8-byte Reload
	movq	2080(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_3
.Ltmp466:
.LBB9_4:                                # =>This Inner Loop Header: Depth=1
	movabsq	$6, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str115669, %r8
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$5, %r9
	leaq	.L.str9563, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	leaq	.L.str118672, %r14
	movabsq	$3, %r15
	leaq	.L.str24578, %r12
	movabsq	$2, %r13
	leaq	.L.str121675, %rbp
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$294, %rax              # imm = 0x126
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str129683, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str141695, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1848(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1844(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp467:
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1880(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1820(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1792(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1844(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1784(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1776(%rsp)        # 8-byte Spill
	movq	%r15, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%r12, 1752(%rsp)        # 8-byte Spill
	movq	%r13, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	movq	%r11, 1720(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	1888(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movl	3228(%rsp), %ecx        # 4-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2928(%rsp), %r9         # 8-byte Reload
	callq	kf_work
	movabsq	$1, %rdx
	leaq	.L.str145699, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4558, %r8
	movabsq	$2, %r9
	leaq	.L.str129683, %r10
	movabsq	$3, %r11
	leaq	.L.str140694, %rbx
	movabsq	$296, %r14              # imm = 0x128
	leaq	.L.str117671, %r15
	leaq	.L.str146700, %rcx
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str61615, %rcx
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str102656, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str144698, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str143697, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str28582, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str58612, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str121675, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$295, %rcx              # imm = 0x127
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str142696, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str57611, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str105659, %rcx
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1576(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1568(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1560(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1552(%rsp)         # 8-byte Spill
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1544(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movq	%r12, 1528(%rsp)        # 8-byte Spill
	movq	%r13, 1520(%rsp)        # 8-byte Spill
	movl	%eax, 1516(%rsp)        # 4-byte Spill
	movq	%r15, 1504(%rsp)        # 8-byte Spill
	movq	%r10, 1496(%rsp)        # 8-byte Spill
	movq	%r11, 1488(%rsp)        # 8-byte Spill
	movq	%rbx, 1480(%rsp)        # 8-byte Spill
	movq	%r14, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2544(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1464(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2536(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1448(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1440(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1439(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_4
.Ltmp468:
.LBB9_5:                                # %.loopexit
	.loc	2 299 0                 # kiss_fft.c:299:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str117671, %ecx
	movl	%ecx, %eax
	movl	$.L.str140694, %ecx
	movl	%ecx, %edx
	movl	$.L.str147701, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	$299, %esi              # imm = 0x12B
	movl	%esi, %edi
	movl	$28, %esi
	movl	%esi, %r8d
	xorl	%esi, %esi
	movl	%esi, 1432(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	%r8, 1416(%rsp)         # 8-byte Spill
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str120674, %r9d
	movl	%r9d, %r8d
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movq	%rax, %rdi
	movq	%rsi, 1400(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	2968(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1392(%rsp), %r11        # 8-byte Reload
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str2556, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 300 0                 # kiss_fft.c:300:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str148702, %ebx
	movl	%ebx, %ecx
	movl	$300, %ebx              # imm = 0x12C
	movl	%ebx, %edi
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str121675, %r9d
	movl	%r9d, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str6560, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2848(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2960(%rsp), %rax        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 303 0                 # kiss_fft.c:303:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str149703, %ebx
	movl	%ebx, %ecx
	movl	$303, %ebx              # imm = 0x12F
	movl	%ebx, %edi
	movl	$3, %ebx
	movl	%ebx, %edx
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str150704, %r9d
	movl	%r9d, %r8d
	movl	$10, %r9d
	movl	%r9d, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str3557, %ebx
	movl	%ebx, %eax
	movl	$9, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %ecx
	movl	$5, %ebx
	movl	%ebx, %edx
	movq	%rcx, %rsi
	movq	%rdx, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str36590, %ebx
	movl	%ebx, %r8d
	movl	$8, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$7, %ebx
	movl	%ebx, %edi
	movl	$4, %ebx
	movl	%ebx, %eax
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str151705, %ebx
	movl	%ebx, %r8d
	movl	$6, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str152706, %ebx
	movl	%ebx, %r8d
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str153707, %ebx
	movl	%ebx, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rax
	movq	$.L.str4558, (%rax)
	movl	$.L.str8562, %ebp
	movl	%ebp, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	addl	$-2, %ebx
	movl	%ebx, %eax
	subl	$3, %ebx
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebx, 1324(%rsp)        # 4-byte Spill
	ja	.LBB9_10
# BB#12:                                # %.loopexit
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	.LJTI9_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB9_6:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str123677, %r8
	movabsq	$0, %rcx
	leaq	.L.str4558, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str115669, %r11
	movabsq	$2, %rbx
	leaq	.L.str127681, %r14
	leaq	.L.str66620, %r15
	movabsq	$5, %r12
	leaq	kf_bfly2, %r13
	leaq	.L.str155709, %rbp
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$304, %rax              # imm = 0x130
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str152706, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str154708, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1272(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1268(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 304 0                 # kiss_fft.c:304:0
.Ltmp469:
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1296(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1220(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1268(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1176(%rsp)        # 8-byte Spill
	movq	%r13, 1168(%rsp)        # 8-byte Spill
	movq	%r14, 1160(%rsp)        # 8-byte Spill
	movq	%r15, 1152(%rsp)        # 8-byte Spill
	movq	%r12, 1144(%rsp)        # 8-byte Spill
	movq	%rbx, 1136(%rsp)        # 8-byte Spill
	movq	%r10, 1128(%rsp)        # 8-byte Spill
	movq	%r11, 1120(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1268(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly2
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157711, %r8
	leaq	.L.str4558, %rdi
	movabsq	$304, %r9               # imm = 0x130
	leaq	.L.str117671, %r10
	leaq	.L.str152706, %r11
	leaq	.L.str156710, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 1104(%rsp)        # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 1096(%rsp)        # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1076(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_7:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str75629, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %r8
	movabsq	$3, %r9
	leaq	.L.str115669, %r10
	movabsq	$2, %r11
	leaq	.L.str127681, %rbx
	leaq	.L.str70624, %r14
	movabsq	$5, %r15
	leaq	kf_bfly3, %r12
	leaq	.L.str159713, %r13
	movabsq	$305, %rbp              # imm = 0x131
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str151705, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str158712, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1032(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1028(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 305 0                 # kiss_fft.c:305:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movq	1056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 956(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	1048(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1028(%rsp), %eax        # 4-byte Reload
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 912(%rsp)         # 8-byte Spill
	movq	%r15, 904(%rsp)         # 8-byte Spill
	movq	%r12, 896(%rsp)         # 8-byte Spill
	movq	%r13, 888(%rsp)         # 8-byte Spill
	movq	%r14, 880(%rsp)         # 8-byte Spill
	movq	%rbx, 872(%rsp)         # 8-byte Spill
	movq	%r10, 864(%rsp)         # 8-byte Spill
	movq	%r11, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly3
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str157711, %r8
	leaq	.L.str4558, %rsi
	movabsq	$305, %rdi              # imm = 0x131
	leaq	.L.str117671, %r9
	leaq	.L.str151705, %r10
	leaq	.L.str160714, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 824(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 808(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 804(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_8:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str162716, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %r8
	movabsq	$3, %r9
	leaq	.L.str115669, %r10
	movabsq	$2, %r11
	leaq	.L.str127681, %rbx
	leaq	.L.str161715, %r14
	movabsq	$5, %r15
	leaq	kf_bfly4, %r12
	leaq	.L.str163717, %r13
	movabsq	$306, %rbp              # imm = 0x132
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str36590, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str79633, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 760(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 756(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 306 0                 # kiss_fft.c:306:0
	movq	%rdi, 696(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movl	%esi, 684(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	776(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	%r8, 656(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	756(%rsp), %eax         # 4-byte Reload
	movq	%r9, 648(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 640(%rsp)         # 8-byte Spill
	movq	%r15, 632(%rsp)         # 8-byte Spill
	movq	%r12, 624(%rsp)         # 8-byte Spill
	movq	%r13, 616(%rsp)         # 8-byte Spill
	movq	%r14, 608(%rsp)         # 8-byte Spill
	movq	%rbx, 600(%rsp)         # 8-byte Spill
	movq	%r10, 592(%rsp)         # 8-byte Spill
	movq	%r11, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 576(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2820(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly4
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str157711, %r8
	leaq	.L.str4558, %rsi
	movabsq	$306, %rdi              # imm = 0x132
	leaq	.L.str117671, %r9
	leaq	.L.str36590, %r10
	leaq	.L.str164718, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 532(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	552(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	552(%rsp), %r9          # 8-byte Reload
	movq	560(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_9:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str123677, %r8
	movabsq	$0, %rcx
	leaq	.L.str4558, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str115669, %r11
	movabsq	$2, %rbx
	leaq	.L.str127681, %r14
	leaq	.L.str165719, %r15
	movabsq	$5, %r12
	leaq	kf_bfly5, %r13
	leaq	.L.str167721, %rbp
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movabsq	$307, %rax              # imm = 0x133
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str150704, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str166720, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 307 0                 # kiss_fft.c:307:0
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	504(%rsp), %rax         # 8-byte Reload
	movl	%esi, 428(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	496(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 400(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 392(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 384(%rsp)         # 8-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movq	%r12, 352(%rsp)         # 8-byte Spill
	movq	%rbx, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	480(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly5
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157711, %r8
	leaq	.L.str4558, %rdi
	movabsq	$307, %r9               # imm = 0x133
	leaq	.L.str117671, %r10
	leaq	.L.str150704, %r11
	leaq	.L.str168722, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 312(%rsp)         # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 304(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 288(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 284(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	296(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_10:
	movabsq	$5, %rdi
	movabsq	$32, %rax
	movabsq	$1, %rcx
	leaq	.L.str8562, %r8
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$4, %r9
	leaq	.L.str123677, %r10
	movabsq	$3, %r11
	movabsq	$64, %rbx
	leaq	.L.str115669, %r14
	movabsq	$2, %r15
	leaq	.L.str127681, %r12
	leaq	.L.str169723, %r13
	movabsq	$6, %rbp
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	kf_bfly_generic, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str171725, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$308, %rax              # imm = 0x134
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str117671, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str153707, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	.L.str170724, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 212(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 308 0                 # kiss_fft.c:308:0
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	%esi, 164(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	212(%rsp), %eax         # 4-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 120(%rsp)         # 8-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r12, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	212(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2836(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	2952(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movl	2820(%rsp), %ecx        # 4-byte Reload
	movl	2836(%rsp), %r8d        # 4-byte Reload
	callq	kf_bfly_generic
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str157711, %r8
	leaq	.L.str4558, %rdi
	movabsq	$308, %r9               # imm = 0x134
	leaq	.L.str117671, %r10
	leaq	.L.str153707, %r11
	leaq	.L.str172726, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp470:
.LBB9_11:
	movabsq	$310, %rdi              # imm = 0x136
	leaq	.L.str117671, %rsi
	leaq	.L.str157711, %rdx
	leaq	.L.str173727, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 310 0                 # kiss_fft.c:310:0
	movl	$1, (%rsp)
	movl	%eax, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3256, %rsp             # imm = 0xCB8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp471:
.Ltmp472:
	.size	kf_work, .Ltmp472-kf_work
.Lfunc_end9:
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI9_0:
	.quad	.LBB9_6
	.quad	.LBB9_7
	.quad	.LBB9_8
	.quad	.LBB9_9

	.text
	.align	16, 0x90
	.type	kf_bfly_generic,@function
kf_bfly_generic:                        # @kf_bfly_generic
	.cfi_startproc
.Lfunc_begin10:
	.loc	2 211 0                 # kiss_fft.c:211:0
# BB#0:
	pushq	%rbp
.Ltmp480:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp481:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp482:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp483:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp484:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp485:
	.cfi_def_cfa_offset 56
	subq	$3448, %rsp             # imm = 0xD78
.Ltmp486:
	.cfi_def_cfa_offset 3504
.Ltmp487:
	.cfi_offset %rbx, -56
.Ltmp488:
	.cfi_offset %r12, -48
.Ltmp489:
	.cfi_offset %r13, -40
.Ltmp490:
	.cfi_offset %r14, -32
.Ltmp491:
	.cfi_offset %r15, -24
.Ltmp492:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$64, %r9
	leaq	.L.str8562, %r10
	movabsq	$0, %r11
	leaq	.L.str4558, %rbx
	movabsq	$2, %r14
	leaq	malloc, %r15
	leaq	.L.str15569, %r12
	movabsq	$217, %r13
	leaq	.L.str171725, %rbp
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 3420(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3416(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	leaq	.L.str394948, %rax
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	movabsq	$215, %rax
	movq	%rax, 3320(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3280(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 3272(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 3264(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	.loc	2 205 0 prologue_end    # kiss_fft.c:205:0
.Ltmp493:
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3280(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3240(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3232(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3440(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3228(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movl	%r8d, 3224(%rsp)        # 4-byte Spill
	movq	%rax, %r8
	movq	%r9, 3216(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 3208(%rsp)        # 8-byte Spill
	movq	%r14, 3200(%rsp)        # 8-byte Spill
	movq	%r15, 3192(%rsp)        # 8-byte Spill
	movq	%r12, 3184(%rsp)        # 8-byte Spill
	movq	%rbp, 3176(%rsp)        # 8-byte Spill
	movq	%rbx, 3168(%rsp)        # 8-byte Spill
	movq	%r10, 3160(%rsp)        # 8-byte Spill
	movq	%r11, 3152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3420(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3272(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly_generic:Fout <- [RSP+3248]
	#DEBUG_VALUE: kf_bfly_generic:fstride <- [RSP+3240]
	#DEBUG_VALUE: kf_bfly_generic:st <- [RSP+3232]
	#DEBUG_VALUE: kf_bfly_generic:m <- [RSP+3420]
	#DEBUG_VALUE: kf_bfly_generic:p <- [RSP+3224]
	.loc	2 215 0                 # kiss_fft.c:215:0
	movq	3320(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3296(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3152(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3152(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3320(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3336(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 3148(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp494:
	#DEBUG_VALUE: kf_bfly_generic:Norig <- [RSP+3148]
	.loc	2 217 0                 # kiss_fft.c:217:0
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3360(%rsp), %rsi        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3160(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3384(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3208(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3432(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movl	3416(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3216(%rsp), %rsi        # 8-byte Reload
	movq	3128(%rsp), %rdx        # 8-byte Reload
	movq	3440(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	3168(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3128(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp495:
	movabsq	$1, %rcx
	leaq	.L.str14568, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r8
	leaq	.L.str396950, %r9
	movabsq	$3, %r10
	leaq	.L.str395949, %r11
	movabsq	$219, %rbx
	leaq	.L.str171725, %r14
	leaq	.L.str1555, %r15
	leaq	.L.str119673, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$217, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	movq	3112(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3032(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3024(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3120(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3016(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 3008(%rsp)        # 8-byte Spill
	movq	3056(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3000(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	3024(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2992(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 2984(%rsp)        # 8-byte Spill
	movq	%r12, 2976(%rsp)        # 8-byte Spill
	movl	%ebp, 2972(%rsp)        # 4-byte Spill
	movl	%r13d, 2968(%rsp)       # 4-byte Spill
	movq	%r14, 2960(%rsp)        # 8-byte Spill
	movq	%rbx, 2952(%rsp)        # 8-byte Spill
	movq	%r10, 2944(%rsp)        # 8-byte Spill
	movq	%r11, 2936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3120(%rsp), %rax        # 8-byte Reload
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp496:
	#DEBUG_VALUE: kf_bfly_generic:scratch <- [RSP+2928]
	#DEBUG_VALUE: kf_bfly_generic:u <- 0
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movl	2972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3024(%rsp), %r9         # 8-byte Reload
	movq	3032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_1
	jmp	.LBB10_10
.Ltmp497:
.LBB10_1:                               # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str398952, %r8
	leaq	.L.str4558, %rdx
	movabsq	$219, %rdi
	leaq	.L.str171725, %rsi
	leaq	.L.str395949, %r9
	leaq	.L.str397951, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str24578, %r12
	movabsq	$32, %r13
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	leaq	.L.str394948, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	movabsq	$231, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	movabsq	$228, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	movabsq	$221, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp498:
	movq	%rdi, 2808(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2800(%rsp)        # 8-byte Spill
	movq	%rdx, 2792(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2816(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2784(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2776(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2768(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2760(%rsp)        # 8-byte Spill
	movl	%ebp, 2756(%rsp)        # 4-byte Spill
	movq	%r14, 2744(%rsp)        # 8-byte Spill
	movq	%r12, 2736(%rsp)        # 8-byte Spill
	movq	%r15, 2728(%rsp)        # 8-byte Spill
	movl	%ebx, 2724(%rsp)        # 4-byte Spill
	movq	%r10, 2712(%rsp)        # 8-byte Spill
	movq	%r11, 2704(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp499:
	.loc	2 228 0                 # kiss_fft.c:228:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2703(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
	.loc	2 231 0                 # kiss_fft.c:231:0
.Ltmp500:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2702(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3224(%rsp), %ebx        # 4-byte Reload
	cmpl	$1, %ebx
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2784(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2701(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3420(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
.Ltmp501:
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2808(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movl	2724(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2912(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2912(%rsp), %r9         # 8-byte Reload
	movq	2792(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
.LBB10_2:                               # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
                                        #     Child Loop BB10_5 Depth 2
                                        #       Child Loop BB10_7 Depth 3
	movq	2672(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16570, %r8
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str184738, %r9
	movabsq	$3, %r10
	leaq	.L.str92646, %r11
	movabsq	$221, %rbx
	leaq	.L.str171725, %r14
	leaq	.L.str398952, %r15
	leaq	.L.str402956, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str399953, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str395949, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str400954, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str401955, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp502:
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2584(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2576(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2568(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	2640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2552(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2544(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2536(%rsp)        # 8-byte Spill
	movq	%r12, 2528(%rsp)        # 8-byte Spill
	movq	%r14, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r13d, 2512(%rsp)       # 4-byte Spill
	movq	%rbx, 2504(%rsp)        # 8-byte Spill
	movq	%r10, 2496(%rsp)        # 8-byte Spill
	movq	%r11, 2488(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2568(%rsp), %r9         # 8-byte Reload
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	2568(%rsp), %r9         # 8-byte Reload
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2520(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2584(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2496(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2488(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2703(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	movq	2576(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2703(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	movq	%rdx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB10_3
	jmp	.LBB10_4
.LBB10_3:                               # %.lr.ph
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2472(%rsp), %rax        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str73627, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4558, %r8
	movabsq	$2, %r9
	leaq	.L.str92646, %r10
	movabsq	$3, %r11
	leaq	.L.str184738, %rbx
	movabsq	$221, %r14
	leaq	.L.str171725, %r15
	leaq	.L.str186740, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str72626, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str394948, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str404958, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str406960, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str405959, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str403957, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str108662, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str135689, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$222, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str96650, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str25579, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str399953, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str398952, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 222 0                 # kiss_fft.c:222:0
.Ltmp503:
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2184(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2176(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2168(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2360(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2160(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2152(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2144(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2136(%rsp)        # 8-byte Spill
	movq	%r12, 2128(%rsp)        # 8-byte Spill
	movl	%ebp, 2124(%rsp)        # 4-byte Spill
	movl	%r13d, 2120(%rsp)       # 4-byte Spill
	movq	%r14, 2112(%rsp)        # 8-byte Spill
	movq	%rbx, 2104(%rsp)        # 8-byte Spill
	movq	%r10, 2096(%rsp)        # 8-byte Spill
	movq	%r11, 2088(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2096(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2160(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	2928(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2080(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2464(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3248(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2080(%rsp), %rax        # 8-byte Reload
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2056(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2328(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2336(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2368(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, (%rdx)
	movq	8(%rax), %rcx
	movq	%rcx, 8(%rdx)
.Ltmp504:
	.loc	2 221 0                 # kiss_fft.c:221:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2464(%rsp), %rax        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2424(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	3224(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movl	2124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	movq	%rdx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB10_4
	jmp	.LBB10_3
.Ltmp505:
.LBB10_4:                               # %.loopexit
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str102656, %r8
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str401955, %r9
	movabsq	$3, %r10
	leaq	.L.str407961, %r11
	movabsq	$228, %rbx
	leaq	.L.str171725, %r14
	leaq	.L.str184738, %r15
	leaq	.L.str188742, %r12
	movl	$1, %ebp
	.loc	2 228 0                 # kiss_fft.c:228:0
.Ltmp506:
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 2016(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2008(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 2000(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	2024(%rsp), %rbx        # 8-byte Reload
	movq	%r8, 1992(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 1984(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1980(%rsp)        # 4-byte Spill
	movq	%r10, 1968(%rsp)        # 8-byte Spill
	movq	%r11, 1960(%rsp)        # 8-byte Spill
	movl	%ebp, 1956(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	2008(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2702(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %eax
	movl	%eax, %edx
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	2008(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2702(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movl	1980(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movl	%eax, 1940(%rsp)        # 4-byte Spill
	jne	.LBB10_5
	jmp	.LBB10_9
.LBB10_5:                               # %.lr.ph8
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_7 Depth 3
	movl	1940(%rsp), %eax        # 4-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str19573, %r8
	movabsq	$0, %rsi
	leaq	.L.str4558, %rdi
	movabsq	$2, %r9
	leaq	.L.str410964, %r10
	movabsq	$3, %r11
	leaq	.L.str414968, %rbx
	movabsq	$231, %r14
	leaq	.L.str171725, %r15
	leaq	.L.str407961, %r12
	leaq	.L.str413967, %r13
	movl	$0, %ebp
	movl	%eax, 1936(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1928(%rsp)        # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 1912(%rsp)        # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 1904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1896(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 1888(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1880(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rcx
	movq	%rcx, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str34588, %rcx
	movq	%rcx, 1856(%rsp)        # 8-byte Spill
	movabsq	$6, %rcx
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str135689, %rcx
	movq	%rcx, 1840(%rsp)        # 8-byte Spill
	movabsq	$230, %rcx
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str412966, %rcx
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	movabsq	$104, %rcx
	movq	%rcx, 1816(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str130684, %rcx
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movabsq	$44, %rcx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rcx
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str408962, %rcx
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str411965, %rcx
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str222776, %rcx
	movq	%rcx, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str184738, %rcx
	movq	%rcx, 1744(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1736(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str409963, %rcx
	movq	%rcx, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str399953, %rcx
	.loc	2 229 0                 # kiss_fft.c:229:0
.Ltmp507:
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1704(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1696(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1688(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1680(%rsp)         # 8-byte Spill
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1672(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1668(%rsp)        # 4-byte Spill
	movq	%r15, 1656(%rsp)        # 8-byte Spill
	movq	%r12, 1648(%rsp)        # 8-byte Spill
	movq	%r14, 1640(%rsp)        # 8-byte Spill
	movq	%r13, 1632(%rsp)        # 8-byte Spill
	movl	%ebp, 1628(%rsp)        # 4-byte Spill
	movq	%rbx, 1616(%rsp)        # 8-byte Spill
	movq	%r10, 1608(%rsp)        # 8-byte Spill
	movq	%r11, 1600(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1688(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp508:
	#DEBUG_VALUE: twidx <- 0
	.loc	2 230 0                 # kiss_fft.c:230:0
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3248(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1592(%rsp)        # 8-byte Spill
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1584(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1880(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1896(%rsp), %rsi        # 8-byte Reload
	movq	1888(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, (%rsi)
	movq	8(%rcx), %rdx
	movq	%rdx, 8(%rsi)
.Ltmp509:
	#DEBUG_VALUE: kf_bfly_generic:q <- 1
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1656(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1628(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1696(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2701(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1696(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2701(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_6
	jmp	.LBB10_8
.LBB10_6:                               # %.lr.ph5
                                        #   in Loop: Header=BB10_5 Depth=2
	movabsq	$1, %rax
	movl	$0, %ecx
	movabsq	$0, %rdx
	leaq	.L.str416970, %r8
	leaq	.L.str4558, %rsi
	movabsq	$231, %rdi
	leaq	.L.str171725, %r9
	leaq	.L.str414968, %r10
	leaq	.L.str415969, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str40594, %r12
	leaq	.L.str120674, %r13
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str408962, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$235, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$232, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp510:
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1472(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1464(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1452(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1440(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1452(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1432(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1424(%rsp)        # 8-byte Spill
	movq	%r15, 1416(%rsp)        # 8-byte Spill
	movl	%ebp, 1412(%rsp)        # 4-byte Spill
	movq	%r12, 1400(%rsp)        # 8-byte Spill
	movq	%r13, 1392(%rsp)        # 8-byte Spill
	movq	%rbx, 1384(%rsp)        # 8-byte Spill
	movq	%r10, 1376(%rsp)        # 8-byte Spill
	movq	%r11, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	.loc	2 235 0                 # kiss_fft.c:235:0
.Ltmp511:
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1528(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3248(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
.Ltmp512:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1456(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1456(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movl	1452(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	movl	%eax, 1340(%rsp)        # 4-byte Spill
.LBB10_7:                               #   Parent Loop BB10_2 Depth=1
                                        #     Parent Loop BB10_5 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	1340(%rsp), %eax        # 4-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str424978, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4558, %r8
	movabsq	$2, %r9
	leaq	.L.str416970, %r10
	movabsq	$3, %r11
	leaq	.L.str410964, %rbx
	movabsq	$231, %r14
	leaq	.L.str171725, %r15
	leaq	.L.str425979, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1320(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str423977, %rcx
	movq	%rcx, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str394948, %rcx
	movq	%rcx, 1296(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1288(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str418972, %rcx
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str417971, %rcx
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rcx
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str221775, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	movabsq	$235, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str422976, %rcx
	movq	%rcx, 1208(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str169723, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str218772, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str219773, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str421975, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str165719, %rcx
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str217771, %rcx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str162716, %rcx
	movq	%rcx, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str161715, %rcx
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movabsq	$234, %rcx
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str61615, %rcx
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str66620, %rcx
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str57611, %rcx
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str70624, %rcx
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str145699, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str75629, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str68622, %rcx
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rcx
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str58612, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str64618, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	leaq	.L.str123677, %rcx
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	leaq	.L.str143697, %rcx
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str420974, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	.L.str56610, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str53607, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str55609, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	movabsq	$233, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	leaq	.L.str54608, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	leaq	.L.str6560, %rcx
	movq	%rcx, 896(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	leaq	.L.str136690, %rcx
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movabsq	$232, %rcx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	leaq	.L.str47601, %rcx
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	leaq	.L.str133687, %rcx
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	leaq	.L.str419973, %rcx
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	movabsq	$34, %rcx
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	leaq	.L.str414968, %rcx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp513:
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 808(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 800(%rsp)         # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 792(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 784(%rsp)          # 8-byte Spill
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	%r9, 776(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 772(%rsp)         # 4-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movl	%ebp, 748(%rsp)         # 4-byte Spill
	movl	%r13d, 744(%rsp)        # 4-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	696(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 692(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp514:
	#DEBUG_VALUE: twidx <- [RSP+692]
	.loc	2 233 0                 # kiss_fft.c:233:0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3148(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	3148(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 691(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3148(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	691(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	691(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	748(%rsp), %ebp         # 4-byte Reload
	movl	3148(%rsp), %r13d       # 4-byte Reload
	cmovel	%r13d, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 684(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	684(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	692(%rsp), %eax         # 4-byte Reload
	movl	684(%rsp), %ebp         # 4-byte Reload
	subl	%ebp, %eax
.Ltmp515:
	.loc	2 234 0                 # kiss_fft.c:234:0
	movl	%eax, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 680(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2928(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	672(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 664(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	680(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	680(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	656(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	648(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 640(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	vmovsd	640(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1328(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2928(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	624(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 616(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1000(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3232(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	656(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 600(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	600(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	vmovsd	600(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	592(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 584(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	600(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	vmovsd	600(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	616(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	vmovsd	616(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	576(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	568(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	568(%rsp), %xmm0        # 8-byte Reload
	vmovsd	576(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp516:
	.loc	2 235 0                 # kiss_fft.c:235:0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 560(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 552(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	584(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	vmovsd	584(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1592(%rsp), %rcx        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1352(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 536(%rsp)        # 8-byte Spill
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	560(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	536(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	536(%rsp), %xmm0        # 8-byte Reload
	vmovsd	560(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1352(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1352(%rsp), %rcx        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp517:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1280(%rsp), %rsi        # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	3224(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1320(%rsp), %rdi        # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 515(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	748(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	680(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1344(%rsp)        # 8-byte Spill
	movl	%ebp, 1340(%rsp)        # 4-byte Spill
	jne	.LBB10_8
	jmp	.LBB10_7
.Ltmp518:
.LBB10_8:                               # %._crit_edge
                                        #   in Loop: Header=BB10_5 Depth=2
	movabsq	$1, %rax
	leaq	.L.str426980, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str407961, %r8
	movabsq	$3, %r9
	leaq	.L.str401955, %r10
	movabsq	$228, %r11
	leaq	.L.str171725, %rbx
	leaq	.L.str410964, %r14
	leaq	.L.str427981, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str222776, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str394948, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str409963, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str408962, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str411965, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	.loc	2 228 0                 # kiss_fft.c:228:0
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1936(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp519:
	#DEBUG_VALUE: kf_bfly_generic:q1 <- [RSP+308]
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 296(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3224(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	3224(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 295(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	296(%rsp), %rcx         # 8-byte Reload
	movl	308(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movl	%ebp, 1940(%rsp)        # 4-byte Spill
	jne	.LBB10_9
	jmp	.LBB10_5
.Ltmp520:
.LBB10_9:                               # %._crit_edge9
                                        #   in Loop: Header=BB10_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str429983, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str398952, %r8
	movabsq	$3, %r9
	leaq	.L.str396950, %r10
	movabsq	$219, %r11
	leaq	.L.str171725, %rbx
	leaq	.L.str401955, %r14
	leaq	.L.str430984, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	.L.str428982, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str400954, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str399953, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	%rdi, 200(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 160(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movl	%r12d, 136(%rsp)        # 4-byte Spill
	movq	%r13, 128(%rsp)         # 8-byte Spill
	movq	%r14, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movq	%r11, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 84(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3420(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	3420(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 83(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	jne	.LBB10_10
	jmp	.LBB10_2
.Ltmp521:
.LBB10_10:                              # %._crit_edge11
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str9563, %r8
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	free, %r9
	leaq	.L.str432986, %r10
	movabsq	$240, %r11
	leaq	.L.str171725, %rbx
	leaq	.L.str396950, %r14
	leaq	.L.str431985, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 240 0                 # kiss_fft.c:240:0
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movl	%r13d, 12(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3120(%rsp), %rdi        # 8-byte Reload
	callq	free
	movabsq	$241, %rdi
	leaq	.L.str171725, %rsi
	leaq	.L.str396950, %rdx
	leaq	.L.str433987, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %ebp
	.loc	2 241 0                 # kiss_fft.c:241:0
	movl	$1, (%rsp)
	movl	%ebp, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3448, %rsp             # imm = 0xD78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp522:
.Ltmp523:
	.size	kf_bfly_generic, .Ltmp523-kf_bfly_generic
.Lfunc_end10:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI11_0:
	.quad	-9223372036854775808    # double -0
	.text
	.align	16, 0x90
	.type	kf_bfly5,@function
kf_bfly5:                               # @kf_bfly5
	.cfi_startproc
.Lfunc_begin11:
	.loc	2 142 0                 # kiss_fft.c:142:0
# BB#0:
	pushq	%rbp
.Ltmp531:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp532:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp533:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp534:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp535:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp536:
	.cfi_def_cfa_offset 56
	subq	$3976, %rsp             # imm = 0xF88
.Ltmp537:
	.cfi_def_cfa_offset 4032
.Ltmp538:
	.cfi_offset %rbx, -56
.Ltmp539:
	.cfi_offset %r12, -48
.Ltmp540:
	.cfi_offset %r13, -40
.Ltmp541:
	.cfi_offset %r14, -32
.Ltmp542:
	.cfi_offset %r15, -24
.Ltmp543:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str25579, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %r10
	movabsq	$2, %r11
	leaq	.L.str46600, %rbx
	movabsq	$3, %r14
	leaq	.L.str45599, %r15
	movabsq	$161, %r12
	leaq	.L.str167721, %r13
	leaq	.L.str1555, %rbp
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str124678, %rax
	movl	%ecx, 3964(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3960(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	movabsq	$152, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3832(%rsp)        # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 3824(%rsp)        # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 3808(%rsp)        # 8-byte Spill
	leaq	.L.str14568, %rax
	movq	%rax, 3800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3792(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	.loc	2 137 0 prologue_end    # kiss_fft.c:137:0
.Ltmp544:
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	movq	3712(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3904(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3688(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3696(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3680(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3968(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3676(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3704(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3664(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3656(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 3648(%rsp)        # 8-byte Spill
	movq	%r15, 3640(%rsp)        # 8-byte Spill
	movq	%r12, 3632(%rsp)        # 8-byte Spill
	movq	%rbp, 3624(%rsp)        # 8-byte Spill
	movq	%r14, 3616(%rsp)        # 8-byte Spill
	movq	%rbx, 3608(%rsp)        # 8-byte Spill
	movq	%r10, 3600(%rsp)        # 8-byte Spill
	movq	%r11, 3592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3964(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3712(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly5:Fout <- [RSP+3696]
	#DEBUG_VALUE: kf_bfly5:fstride <- [RSP+3688]
	#DEBUG_VALUE: kf_bfly5:st <- [RSP+3680]
	#DEBUG_VALUE: kf_bfly5:m <- [RSP+3964]
	.loc	2 150 0                 # kiss_fft.c:150:0
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3964(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3744(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3728(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3576(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3576(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3568(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3568(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3560(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3760(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3576(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3744(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3576(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3752(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3552(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3552(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 152 0                 # kiss_fft.c:152:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3544(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3800(%rsp), %rcx        # 8-byte Reload
	movq	3776(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3784(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3688(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3848(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3536(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3808(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3584(%rsp), %rax        # 8-byte Reload
	movq	3536(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3528(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3520(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3520(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3512(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3832(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3840(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3528(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3880(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3896(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	movq	3504(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3504(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 154 0                 # kiss_fft.c:154:0
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3904(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3496(%rsp)       # 8-byte Spill
	movq	3968(%rsp), %rdx        # 8-byte Reload
	movq	3896(%rsp), %rcx        # 8-byte Reload
	movq	3656(%rsp), %r8         # 8-byte Reload
	movq	3600(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp545:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+3696]
	#DEBUG_VALUE: kf_bfly5:Fout1 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout2 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout3 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout4 <- undef
	#DEBUG_VALUE: kf_bfly5:u <- 0
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3664(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3936(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3928(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3944(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3495(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3648(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movl	3960(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3656(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3640(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3592(%rsp), %rdi        # 8-byte Reload
	movq	3656(%rsp), %rsi        # 8-byte Reload
	movq	3656(%rsp), %rdx        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3495(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3968(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3968(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movq	3656(%rsp), %r9         # 8-byte Reload
	movq	3600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3495(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_1
	jmp	.LBB11_3
.Ltmp546:
.LBB11_1:                               # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str296850, %r8
	leaq	.L.str4558, %rdx
	movabsq	$161, %rdi
	leaq	.L.str167721, %rsi
	leaq	.L.str45599, %r9
	leaq	.L.str48602, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str136690, %r12
	leaq	.L.str120674, %r13
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movabsq	$155, %rax
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 3416(%rsp)        # 8-byte Spill
	movabsq	$156, %rax
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str34588, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movabsq	$158, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	leaq	.L.str108662, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 3320(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	%rax, 3280(%rsp)        # 8-byte Spill
	movq	3360(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3272(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3264(%rsp)        # 8-byte Spill
	movq	%rdx, 3256(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3320(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 3224(%rsp)        # 8-byte Spill
	movl	%ebp, 3220(%rsp)        # 4-byte Spill
	movq	%r15, 3208(%rsp)        # 8-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r12, 3192(%rsp)        # 8-byte Spill
	movl	%ebx, 3188(%rsp)        # 4-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	shll	$2, %ebx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 3164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	imull	$3, %ebx, %ebp
	.loc	2 156 0                 # kiss_fft.c:156:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 3160(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3964(%rsp), %ebx        # 4-byte Reload
	shll	$1, %ebx
	.loc	2 158 0                 # kiss_fft.c:158:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 3156(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3360(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3368(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3164(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3164(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3160(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3160(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3156(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3156(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3360(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3144(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3144(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3120(%rsp)        # 8-byte Spill
.Ltmp547:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+3120]
	movq	%rax, %rcx
	movq	3376(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3112(%rsp)        # 8-byte Spill
.Ltmp548:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+3112]
	movq	%rax, %rcx
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3128(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3128(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 155 0                 # kiss_fft.c:155:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
.Ltmp549:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+3104]
	movq	%rax, %rcx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3584(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3584(%rsp), %rax        # 8-byte Reload
	shlq	$4, %rax
	movq	3696(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp550:
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3096(%rsp)        # 8-byte Spill
.Ltmp551:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+3096]
	movq	%rax, %rcx
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp552:
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	3224(%rsp), %rdi        # 8-byte Reload
	movq	3208(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3192(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3272(%rsp), %rdi        # 8-byte Reload
	movq	3264(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3168(%rsp), %r8         # 8-byte Reload
	movl	3188(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3480(%rsp), %rsi        # 8-byte Reload
	movq	3480(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3480(%rsp), %r9         # 8-byte Reload
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3480(%rsp), %rax        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rsi        # 8-byte Reload
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	%rdx, 3072(%rsp)        # 8-byte Spill
	movq	%rsi, 3064(%rsp)        # 8-byte Spill
	movq	%rdi, 3056(%rsp)        # 8-byte Spill
	movq	%r8, 3048(%rsp)         # 8-byte Spill
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
	movq	3048(%rsp), %rax        # 8-byte Reload
	movq	3056(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movabsq	$1, %r9
	leaq	.L.str73627, %r10
	movabsq	$0, %r11
	leaq	.L.str4558, %rbx
	movabsq	$2, %r14
	leaq	.L.str296850, %r15
	movabsq	$3, %r12
	leaq	.L.str46600, %r13
	movabsq	$161, %rbp
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str167721, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str393947, %rax
	movq	%rsi, 3024(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 3020(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str72626, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str51605, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str50604, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str306860, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	leaq	.L.str305859, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movabsq	$199, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	leaq	.L.str304858, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	leaq	.L.str303857, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	leaq	.L.str302856, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str301855, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	leaq	.L.str300854, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	leaq	.L.str299853, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	leaq	.L.str298852, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	leaq	.L.str297851, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str391945, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	leaq	.L.str282836, %rax
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	leaq	.L.str392946, %rax
	movq	%rax, 2792(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	leaq	.L.str378932, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	leaq	.L.str384938, %rax
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	leaq	.L.str389943, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	leaq	.L.str269823, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str390944, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str374928, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str381935, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str387941, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str244798, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$196, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str388942, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str385939, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str231785, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str386940, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str382936, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str383937, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$194, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str339893, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str335889, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str380934, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str379933, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$193, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str340894, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str336890, %rax
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	leaq	.L.str377931, %rax
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	leaq	.L.str376930, %rax
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	movabsq	$192, %rax
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	leaq	.L.str338892, %rax
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	leaq	.L.str61615, %rax
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	leaq	.L.str375929, %rax
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	leaq	.L.str334888, %rax
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	leaq	.L.str373927, %rax
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str372926, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$191, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	leaq	.L.str337891, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str58612, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str371925, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str333887, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str369923, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str324878, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$189, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str370924, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str355909, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str362916, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str367921, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str315869, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	.L.str368922, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str358912, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str351905, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str365919, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str218772, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$188, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str366920, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str363917, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str68622, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str364918, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str360914, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str361915, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$186, %rax
	vmovsd	.LCPI11_0, %xmm0
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str359913, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str357911, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str356910, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movabsq	$185, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str354908, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str353907, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str352906, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str350904, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str349903, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	movabsq	$182, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str348902, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str346900, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str143697, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	movabsq	$180, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str347901, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str345899, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str344898, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str342896, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str57611, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$179, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str343897, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str341895, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str253807, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str311865, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$177, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str263817, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str258812, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$176, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str226780, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str332886, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$175, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str222776, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str329883, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movabsq	$174, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str331885, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str330884, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str322876, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str325879, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str316870, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str327881, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str323877, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str328882, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str326880, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str320874, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str314868, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str321875, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str319873, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str318872, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str317871, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str313867, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str312866, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str136690, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$10, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str292846, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str256810, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$171, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str280834, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str284838, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str307861, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str288842, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str309863, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str310864, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str286840, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str276830, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str268822, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str278832, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str274828, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str308862, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	movabsq	$12884901888, %rax      # imm = 0x300000000
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str266820, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str265819, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str255809, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str257811, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str241795, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str216770, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str232786, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str246800, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str243797, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str262816, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str215769, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str238792, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str229783, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str240794, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str237791, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str235789, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str234788, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str228782, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str227781, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str224778, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str223777, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	movabsq	$169, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str161715, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str165719, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str70624, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str169723, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str162716, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str221775, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str219773, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str75629, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str66620, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str217771, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str64618, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str145699, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str55609, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str45599, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str47601, %rax
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp553:
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movq	1264(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3032(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1220(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	2936(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3020(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 1176(%rsp)        # 8-byte Spill
	movq	%r13, 1168(%rsp)        # 8-byte Spill
	movq	%rbp, 1160(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1152(%rsp)       # 8-byte Spill
	movq	%r15, 1144(%rsp)        # 8-byte Spill
	movq	%r14, 1136(%rsp)        # 8-byte Spill
	movq	%r10, 1128(%rsp)        # 8-byte Spill
	movq	%r11, 1120(%rsp)        # 8-byte Spill
	movq	%rbx, 1112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1144(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rcx        # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1080(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1096(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1072(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	.loc	2 169 0                 # kiss_fft.c:169:0
.Ltmp554:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rcx        # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1040(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1040(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1032(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	1024(%rsp), %rdx        # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1048(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 992(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	992(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 984(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	1024(%rsp), %rdx        # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	976(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	976(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 968(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	vmovsd	968(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 960(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	960(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 952(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	968(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 944(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	984(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	984(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	944(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	vmovsd	944(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp555:
	.loc	2 170 0                 # kiss_fft.c:170:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2664(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 904(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	904(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 896(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 892(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	892(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	892(%rsp), %eax         # 4-byte Reload
	shll	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 888(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	888(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	888(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	872(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 856(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	856(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 848(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 840(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 832(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	872(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	824(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	vmovsd	816(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	808(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	848(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	848(%rsp), %xmm0        # 8-byte Reload
	vmovsd	808(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	896(%rsp), %xmm0        # 8-byte Reload
	vmovsd	816(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 792(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	832(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	856(%rsp), %xmm0        # 8-byte Reload
	vmovsd	832(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 784(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	792(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	784(%rsp), %xmm0        # 8-byte Reload
	vmovsd	792(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp556:
	.loc	2 171 0                 # kiss_fft.c:171:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 776(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 752(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	752(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	752(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 744(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movabsq	$12884901888, %rcx      # imm = 0x300000000
	movq	1192(%rsp), %rdx        # 8-byte Reload
	imulq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	736(%rsp), %rcx         # 8-byte Reload
	sarq	$32, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	720(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	712(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 704(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	vmovsd	704(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	760(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 688(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	688(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 680(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	720(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	672(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 664(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	656(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	664(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	680(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmovsd	680(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	640(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp557:
	.loc	2 172 0                 # kiss_fft.c:172:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 624(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rcx         # 8-byte Reload
	sarq	$4, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 600(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 592(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 588(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	588(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	588(%rsp), %eax         # 4-byte Reload
	shll	$2, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 584(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	584(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	584(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	3688(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	568(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 560(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	560(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 552(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	vmovsd	552(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	608(%rsp), %rcx         # 8-byte Reload
	shlq	$4, %rcx
	movq	3696(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 536(%rsp)         # 8-byte Spill
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 528(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3680(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3680(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	568(%rsp), %rdx         # 8-byte Reload
	shlq	$4, %rdx
	addq	%rdx, %rcx
	addq	$8, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 512(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	512(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	vmovsd	512(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	504(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	544(%rsp), %xmm0        # 8-byte Reload
	vmovsd	504(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	512(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	592(%rsp), %xmm0        # 8-byte Reload
	vmovsd	512(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	528(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	552(%rsp), %xmm0        # 8-byte Reload
	vmovsd	528(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	488(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	vmovsd	488(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp558:
	.loc	2 174 0                 # kiss_fft.c:174:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp559:
	.loc	2 175 0                 # kiss_fft.c:175:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 456(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 448(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	928(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp560:
	.loc	2 176 0                 # kiss_fft.c:176:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	648(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 432(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	624(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp561:
	.loc	2 177 0                 # kiss_fft.c:177:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 424(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	800(%rsp), %xmm0        # 8-byte Reload
	vmovsd	648(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 416(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	624(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp562:
	.loc	2 179 0                 # kiss_fft.c:179:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 408(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 400(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	400(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	400(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rcx        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 180 0                 # kiss_fft.c:180:0
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 376(%rsp)        # 8-byte Spill
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	384(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	384(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 182 0                 # kiss_fft.c:182:0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	360(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 183 0                 # kiss_fft.c:183:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	424(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 312(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	312(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 185 0                 # kiss_fft.c:185:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	440(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 296(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 288(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	296(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	vmovsd	296(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 186 0                 # kiss_fft.c:186:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	448(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	448(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1152(%rsp), %xmm0       # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	vmovq	%xmm0, %rcx
	movabsq	$-9223372036854775808, %rdx # imm = 0x8000000000000000
	xorq	%rdx, %rcx
	vmovq	%rcx, %xmm1
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	vmovsd	256(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 188 0                 # kiss_fft.c:188:0
.Ltmp563:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	280(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rcx        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	992(%rsp), %rcx         # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp564:
	.loc	2 189 0                 # kiss_fft.c:189:0
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2352(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp565:
	.loc	2 191 0                 # kiss_fft.c:191:0
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	464(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	208(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 192(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	vmovsd	200(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 192 0                 # kiss_fft.c:192:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	456(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3512(%rsp), %xmm0       # 8-byte Reload
	vmovsd	456(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	vmovsd	176(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3560(%rsp), %xmm0       # 8-byte Reload
	vmovsd	424(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	.loc	2 193 0                 # kiss_fft.c:193:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	440(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	144(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 194 0                 # kiss_fft.c:194:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	448(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	448(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3544(%rsp), %xmm0       # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2632(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 196 0                 # kiss_fft.c:196:0
.Ltmp566:
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 96(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	904(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	904(%rsp), %rcx         # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 88(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp567:
	.loc	2 197 0                 # kiss_fft.c:197:0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	752(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	752(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2768(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	vmovsd	104(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 72(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2792(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1112(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp568:
	.loc	2 199 0                 # kiss_fft.c:199:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2832(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1224(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp569:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+64]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3024(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp570:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+56]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp571:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+48]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1200(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2880(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp572:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+40]
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	3040(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3040(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp573:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+32]
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1192(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2960(%rsp), %rsi        # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3964(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	2992(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	3964(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	1144(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	3020(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1176(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1184(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movq	%rdx, 3080(%rsp)        # 8-byte Spill
	movq	%rsi, 3072(%rsp)        # 8-byte Spill
	movq	%rdi, 3064(%rsp)        # 8-byte Spill
	movq	%r8, 3056(%rsp)         # 8-byte Spill
	movq	%r9, 3048(%rsp)         # 8-byte Spill
	jne	.LBB11_3
	jmp	.LBB11_2
.Ltmp574:
.LBB11_3:                               # %._crit_edge
	movabsq	$201, %rdi
	leaq	.L.str167721, %rsi
	leaq	.L.str46600, %rdx
	leaq	.L.str76630, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 201 0                 # kiss_fft.c:201:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3976, %rsp             # imm = 0xF88
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp575:
.Ltmp576:
	.size	kf_bfly5, .Ltmp576-kf_bfly5
.Lfunc_end11:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly4,@function
kf_bfly4:                               # @kf_bfly4
	.cfi_startproc
.Lfunc_begin12:
	.loc	2 50 0                  # kiss_fft.c:50:0
# BB#0:
	pushq	%rbp
.Ltmp584:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp585:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp586:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp587:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp588:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp589:
	.cfi_def_cfa_offset 56
	subq	$2936, %rsp             # imm = 0xB78
.Ltmp590:
	.cfi_def_cfa_offset 2992
.Ltmp591:
	.cfi_offset %rbx, -56
.Ltmp592:
	.cfi_offset %r12, -48
.Ltmp593:
	.cfi_offset %r13, -40
.Ltmp594:
	.cfi_offset %r14, -32
.Ltmp595:
	.cfi_offset %r15, -24
.Ltmp596:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str251805, %r9
	leaq	.L.str4558, %r10
	movabsq	$60, %r11
	leaq	.L.str163717, %rbx
	leaq	.L.str1555, %r14
	leaq	.L.str250804, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str14568, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$77, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2848(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 2840(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2832(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2824(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2792(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	movabsq	$58, %rax
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$55, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movabsq	$54, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	.loc	2 45 0 prologue_end     # kiss_fft.c:45:0
.Ltmp597:
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movq	2696(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2680(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2672(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2680(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2664(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2688(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2648(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2648(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2640(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 2636(%rsp)        # 4-byte Spill
	movq	%r15, 2624(%rsp)        # 8-byte Spill
	movq	%r12, 2616(%rsp)        # 8-byte Spill
	movl	%r13d, 2612(%rsp)       # 4-byte Spill
	movq	%r14, 2600(%rsp)        # 8-byte Spill
	movq	%rbx, 2592(%rsp)        # 8-byte Spill
	movq	%r10, 2584(%rsp)        # 8-byte Spill
	movq	%r11, 2576(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+2680]
	#DEBUG_VALUE: kf_bfly4:fstride <- [RSP+2672]
	#DEBUG_VALUE: kf_bfly4:st <- [RSP+2664]
	#DEBUG_VALUE: kf_bfly4:m <- [RSP+2656]
.Ltmp598:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+2656]
	.loc	2 54 0                  # kiss_fft.c:54:0
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp599:
	#DEBUG_VALUE: kf_bfly4:m2 <- [RSP+2568]
	.loc	2 55 0                  # kiss_fft.c:55:0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp600:
	#DEBUG_VALUE: kf_bfly4:m3 <- [RSP+2560]
	.loc	2 58 0                  # kiss_fft.c:58:0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2760(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp601:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+2552]
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+2552]
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+2552]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2776(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2784(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2832(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2808(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	.loc	2 77 0                  # kiss_fft.c:77:0
.Ltmp602:
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2536(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2896(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2864(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2664(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2524(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2616(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2888(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2524(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2524(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	sete	%al
.Ltmp603:
	.loc	2 60 0                  # kiss_fft.c:60:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2928(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2523(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2600(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2636(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2648(%rsp), %rsi        # 8-byte Reload
	movq	2648(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2648(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %rdx        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2512(%rsp)        # 8-byte Spill
	movq	%rdx, 2504(%rsp)        # 8-byte Spill
	movq	%rsi, 2496(%rsp)        # 8-byte Spill
	movq	%rdi, 2488(%rsp)        # 8-byte Spill
	movq	%r8, 2480(%rsp)         # 8-byte Spill
.Ltmp604:
.LBB12_1:                               # =>This Inner Loop Header: Depth=1
	movq	2480(%rsp), %rax        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2504(%rsp), %rsi        # 8-byte Reload
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movabsq	$1, %r8
	leaq	.L.str16570, %r9
	movabsq	$0, %r10
	leaq	.L.str4558, %r11
	movabsq	$2, %rbx
	leaq	.L.str273827, %r14
	movabsq	$3, %r15
	leaq	.L.str272826, %r12
	movabsq	$77, %r13
	leaq	.L.str163717, %rbp
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str251805, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	leaq	.L.str271825, %rax
	movq	%rsi, 2456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str269823, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str232786, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	movabsq	$75, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str270824, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str243797, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str268822, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str266820, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str228782, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str267821, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str241795, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str265819, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str253807, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str252806, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str255809, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str213767, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str257811, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str204758, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$72, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	leaq	.L.str263817, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str57611, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	movabsq	$71, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str264818, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str262816, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str246800, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str136690, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str261815, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str215769, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str216770, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str227781, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$70, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str244798, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str223777, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	movabsq	$69, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str240794, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$68, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str260814, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str70624, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str238792, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str237791, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str259813, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str64618, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str229783, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str235789, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str234788, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movabsq	$67, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str182736, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str231785, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str226780, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str224778, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$65, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str162716, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str219773, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str217771, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str221775, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str218772, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str222776, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str169723, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str165719, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str161715, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str75629, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str68622, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str66620, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str55609, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str58612, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str53607, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str61615, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str145699, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str143697, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str25579, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str108662, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str34588, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str258812, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str254808, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str214768, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str256810, %rax
	.loc	2 63 0                  # kiss_fft.c:63:0
.Ltmp605:
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movq	1576(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1536(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1532(%rsp)        # 4-byte Spill
	movq	%rbp, %rsi
	movq	2464(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1520(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1568(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1504(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	2452(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1496(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1488(%rsp)        # 8-byte Spill
	movq	%r12, 1480(%rsp)        # 8-byte Spill
	movq	%r13, 1472(%rsp)        # 8-byte Spill
	movq	%rbp, 1464(%rsp)        # 8-byte Spill
	movq	%r14, 1456(%rsp)        # 8-byte Spill
	movq	%rbx, 1448(%rsp)        # 8-byte Spill
	movq	%r10, 1440(%rsp)        # 8-byte Spill
	movq	%r11, 1432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2680(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1608(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2656(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1416(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1408(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1408(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2656(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1392(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1384(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1368(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1368(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1360(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1400(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1360(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1368(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1344(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1384(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1384(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1336(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1344(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1344(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp606:
	.loc	2 64 0                  # kiss_fft.c:64:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1328(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2568(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1320(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1312(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1304(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1304(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2568(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2568(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1288(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1280(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1264(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1264(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1264(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1256(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1296(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1256(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1248(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1264(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1264(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1240(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1280(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1304(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1280(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1232(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1240(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1232(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1232(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1240(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp607:
	.loc	2 65 0                  # kiss_fft.c:65:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1224(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2560(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1208(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1200(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1200(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2560(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2472(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1184(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1176(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1536(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1160(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1160(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1160(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1152(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1192(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1192(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1152(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1160(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1160(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1136(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1176(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1200(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1176(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1128(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1136(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1128(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1128(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1136(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp608:
	.loc	2 67 0                  # kiss_fft.c:67:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1120(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1112(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1104(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1088(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1088(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1224(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp609:
	.loc	2 68 0                  # kiss_fft.c:68:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1080(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1072(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	1072(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1224(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1064(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp610:
	.loc	2 69 0                  # kiss_fft.c:69:0
	movq	2064(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1144(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1144(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2064(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1120(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1120(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp611:
	.loc	2 70 0                  # kiss_fft.c:70:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1040(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1144(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1144(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1120(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1120(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp612:
	.loc	2 71 0                  # kiss_fft.c:71:0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1016(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1048(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1008(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1000(%rsp)       # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2200(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1288(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
.Ltmp613:
	.loc	2 72 0                  # kiss_fft.c:72:0
	movq	2208(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1512(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 984(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp614:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+984]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2456(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2544(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	2456(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 976(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp615:
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+976]
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2280(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2536(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1536(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 968(%rsp)         # 8-byte Spill
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp616:
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+968]
	.loc	2 75 0                  # kiss_fft.c:75:0
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 960(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	960(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 952(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 944(%rsp)        # 8-byte Spill
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	944(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	vmovsd	944(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 936(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	2408(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	2432(%rsp), %rsi        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rcx        # 8-byte Reload
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp617:
	.loc	2 77 0                  # kiss_fft.c:77:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	2452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2523(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1440(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2523(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB12_3
.Ltmp618:
# BB#2:                                 #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str254808, %r8
	leaq	.L.str4558, %rdx
	movabsq	$82, %rdi
	leaq	.L.str163717, %rsi
	leaq	.L.str273827, %r9
	leaq	.L.str281835, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str280834, %r12
	leaq	.L.str235789, %r13
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str244798, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str278832, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str75629, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$80, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str279833, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str231785, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str216770, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str276830, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movabsq	$79, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str277831, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	leaq	.L.str274828, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$78, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str275829, %rax
	.loc	2 78 0                  # kiss_fft.c:78:0
.Ltmp619:
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 768(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 760(%rsp)         # 8-byte Spill
	movq	%rdx, 752(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	800(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%r8, 736(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 728(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 720(%rsp)         # 8-byte Spill
	movl	%ebp, 716(%rsp)         # 4-byte Spill
	movq	%r15, 704(%rsp)         # 8-byte Spill
	movq	%r13, 696(%rsp)         # 8-byte Spill
	movq	%r12, 688(%rsp)         # 8-byte Spill
	movl	%ebx, 684(%rsp)         # 4-byte Spill
	movq	%r10, 672(%rsp)         # 8-byte Spill
	movq	%r11, 664(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1424(%rsp), %rax        # 8-byte Reload
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 79 0                  # kiss_fft.c:79:0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1392(%rsp), %rax        # 8-byte Reload
	vmovsd	648(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 80 0                  # kiss_fft.c:80:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rax        # 8-byte Reload
	vmovsd	640(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 81 0                  # kiss_fft.c:81:0
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	.loc	2 82 0                  # kiss_fft.c:82:0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	752(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	684(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	632(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 624(%rsp)        # 8-byte Spill
	jmp	.LBB12_4
.Ltmp620:
.LBB12_3:                               #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str254808, %r8
	leaq	.L.str4558, %rdx
	movabsq	$-1, %rdi
	leaq	.L.str163717, %rsi
	leaq	.L.str272826, %r9
	leaq	.L.str289843, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str288842, %r12
	leaq	.L.str235789, %r13
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str244798, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str286840, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str75629, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$85, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str287841, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str231785, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str216770, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str284838, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$84, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str285839, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str282836, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$83, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str283837, %rax
	.loc	2 83 0                  # kiss_fft.c:83:0
.Ltmp621:
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 456(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movq	%rdx, 440(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%r8, 424(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 416(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 408(%rsp)         # 8-byte Spill
	movl	%ebp, 404(%rsp)         # 4-byte Spill
	movq	%r15, 392(%rsp)         # 8-byte Spill
	movq	%r13, 384(%rsp)         # 8-byte Spill
	movq	%r12, 376(%rsp)         # 8-byte Spill
	movl	%ebx, 372(%rsp)         # 4-byte Spill
	movq	%r10, 360(%rsp)         # 8-byte Spill
	movq	%r11, 352(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1424(%rsp), %rax        # 8-byte Reload
	vmovsd	344(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 84 0                  # kiss_fft.c:84:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1392(%rsp), %rax        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 85 0                  # kiss_fft.c:85:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	movq	1216(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rax        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	2 86 0                  # kiss_fft.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	408(%rsp), %rdi         # 8-byte Reload
	movq	392(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	440(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movl	372(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 624(%rsp)        # 8-byte Spill
.Ltmp622:
.LBB12_4:                               #   in Loop: Header=BB12_1 Depth=1
	vmovsd	624(%rsp), %xmm0        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str292846, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4558, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251805, %r8
	movabsq	$3, %r9
	leaq	.L.str294848, %r10
	movabsq	$89, %r11
	leaq	.L.str163717, %rbx
	leaq	.L.str254808, %r14
	leaq	.L.str293847, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 312(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str256810, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str214768, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str258812, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str182736, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$88, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str290844, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str165719, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str291845, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str272826, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str288842, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str280834, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str273827, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 81 0                  # kiss_fft.c:81:0
.Ltmp623:
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movq	264(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	312(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rax        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp624:
	.loc	2 88 0                  # kiss_fft.c:88:0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2472(%rsp), %rax        # 8-byte Reload
	addq	$16, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp625:
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+24]
	.loc	2 89 0                  # kiss_fft.c:89:0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp626:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+16]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %rdx         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%rcx, 2512(%rsp)        # 8-byte Spill
	movq	%rdx, 2504(%rsp)        # 8-byte Spill
	movq	%rsi, 2496(%rsp)        # 8-byte Spill
	movq	%rdi, 2488(%rsp)        # 8-byte Spill
	movq	%r8, 2480(%rsp)         # 8-byte Spill
	jne	.LBB12_5
	jmp	.LBB12_1
.Ltmp627:
.LBB12_5:
	movabsq	$90, %rdi
	leaq	.L.str163717, %rsi
	leaq	.L.str294848, %rdx
	leaq	.L.str295849, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 90 0                  # kiss_fft.c:90:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$2936, %rsp             # imm = 0xB78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp628:
.Ltmp629:
	.size	kf_bfly4, .Ltmp629-kf_bfly4
.Lfunc_end12:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.align	16, 0x90
	.type	kf_bfly3,@function
kf_bfly3:                               # @kf_bfly3
	.cfi_startproc
.Lfunc_begin13:
	.loc	2 98 0                  # kiss_fft.c:98:0
# BB#0:
	pushq	%rbp
.Ltmp637:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp638:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp639:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp640:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp641:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp642:
	.cfi_def_cfa_offset 56
	subq	$1864, %rsp             # imm = 0x748
.Ltmp643:
	.cfi_def_cfa_offset 1920
.Ltmp644:
	.cfi_offset %rbx, -56
.Ltmp645:
	.cfi_offset %r12, -48
.Ltmp646:
	.cfi_offset %r13, -40
.Ltmp647:
	.cfi_offset %r14, -32
.Ltmp648:
	.cfi_offset %r15, -24
.Ltmp649:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str212766, %r9
	leaq	.L.str4558, %r10
	movabsq	$108, %r11
	leaq	.L.str159713, %rbx
	leaq	.L.str1555, %r14
	leaq	.L.str211765, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movabsq	$106, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$100, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	.loc	2 93 0 prologue_end     # kiss_fft.c:93:0
.Ltmp650:
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movq	1656(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1640(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1624(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1608(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1608(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1600(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r15, 1584(%rsp)        # 8-byte Spill
	movq	%r12, 1576(%rsp)        # 8-byte Spill
	movl	%r13d, 1572(%rsp)       # 4-byte Spill
	movq	%r14, 1560(%rsp)        # 8-byte Spill
	movq	%rbx, 1552(%rsp)        # 8-byte Spill
	movq	%r10, 1544(%rsp)        # 8-byte Spill
	movq	%r11, 1536(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+1640]
	#DEBUG_VALUE: kf_bfly3:fstride <- [RSP+1632]
	#DEBUG_VALUE: kf_bfly3:st <- [RSP+1624]
	#DEBUG_VALUE: kf_bfly3:m <- [RSP+1616]
.Ltmp651:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+1616]
	.loc	2 100 0                 # kiss_fft.c:100:0
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp652:
	#DEBUG_VALUE: kf_bfly3:m2 <- [RSP+1528]
	.loc	2 104 0                 # kiss_fft.c:104:0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rax        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1520(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1520(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	addq	%rcx, %rax
	addq	$8, %rax
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	.loc	2 106 0                 # kiss_fft.c:106:0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1504(%rsp)       # 8-byte Spill
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp653:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+1496]
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+1496]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
.Ltmp654:
	.loc	2 108 0                 # kiss_fft.c:108:0
	movq	1848(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1552(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1608(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
.Ltmp655:
.LBB13_1:                               # =>This Inner Loop Header: Depth=1
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str246800, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %r10
	movabsq	$2, %r11
	leaq	.L.str212766, %rbx
	movabsq	$3, %r14
	leaq	.L.str248802, %r15
	movabsq	$133, %r12
	leaq	.L.str159713, %r13
	leaq	.L.str247801, %rbp
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1444(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str215769, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str214768, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str216770, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str182736, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$132, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str244798, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str25579, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$130, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str245799, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str226780, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str243797, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str241795, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$129, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str242796, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str240794, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str227781, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str238792, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str55609, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$127, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str239793, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str237791, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str235789, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$126, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str236790, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str234788, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str232786, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str221775, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$124, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str233787, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str70624, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str231785, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str229783, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str218772, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str230784, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str228782, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str68622, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str8562, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str217771, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$122, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str75629, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str224778, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str225779, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str222776, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str223777, %rax
	vmovsd	.LCPI13_0, %xmm0
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str169723, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$119, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str220774, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str165719, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str219773, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str162716, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str213767, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str161715, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str204758, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$116, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str66620, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$115, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str34588, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str61615, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$114, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str64618, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str145699, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	movabsq	$112, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str53607, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str58612, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str143697, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str57611, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str136690, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movabsq	$111, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str108662, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str9563, %rax
	.loc	2 111 0                 # kiss_fft.c:111:0
.Ltmp656:
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movq	1376(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 568(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 564(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	896(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1444(%rsp), %eax        # 4-byte Reload
	movq	%r9, 528(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 520(%rsp)         # 8-byte Spill
	movq	%r13, 512(%rsp)         # 8-byte Spill
	movq	%rbp, 504(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 496(%rsp)        # 8-byte Spill
	movq	%r15, 488(%rsp)         # 8-byte Spill
	movq	%r14, 480(%rsp)         # 8-byte Spill
	movq	%r10, 472(%rsp)         # 8-byte Spill
	movq	%r11, 464(%rsp)         # 8-byte Spill
	movq	%rbx, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 448(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 440(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 432(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	vmovsd	432(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 424(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 408(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 392(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	vmovsd	392(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	384(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	424(%rsp), %xmm0        # 8-byte Reload
	vmovsd	384(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	392(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	440(%rsp), %xmm0        # 8-byte Reload
	vmovsd	392(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	408(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	432(%rsp), %xmm0        # 8-byte Reload
	vmovsd	408(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	368(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp657:
	.loc	2 112 0                 # kiss_fft.c:112:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 336(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 328(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 320(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$8, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 304(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1448(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 288(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	vmovsd	288(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	280(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	vmovsd	280(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	288(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	vmovsd	288(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	304(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	vmovsd	304(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	264(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	264(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp658:
	.loc	2 114 0                 # kiss_fft.c:114:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	272(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp659:
	.loc	2 115 0                 # kiss_fft.c:115:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	272(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	376(%rsp), %xmm0        # 8-byte Reload
	vmovsd	272(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	vmovsd	248(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
.Ltmp660:
	.loc	2 116 0                 # kiss_fft.c:116:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	552(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp661:
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+208]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	1448(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp662:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+200]
	.loc	2 119 0                 # kiss_fft.c:119:0
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 120 0                 # kiss_fft.c:120:0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 160(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	496(%rsp), %xmm0        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	496(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 122 0                 # kiss_fft.c:122:0
.Ltmp663:
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	224(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
.Ltmp664:
	.loc	2 124 0                 # kiss_fft.c:124:0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 120(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 104(%rsp)        # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	232(%rsp), %xmm0        # 8-byte Reload
	vmovsd	104(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 96(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovsd	96(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp665:
	.loc	2 126 0                 # kiss_fft.c:126:0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	88(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	344(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 127 0                 # kiss_fft.c:127:0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	136(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 64(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 129 0                 # kiss_fft.c:129:0
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 48(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rcx         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 130 0                 # kiss_fft.c:130:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	40(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	472(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	416(%rsp), %rcx         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	2 132 0                 # kiss_fft.c:132:0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	addq	$16, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp666:
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+24]
	.loc	2 133 0                 # kiss_fft.c:133:0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	544(%rsp), %rcx         # 8-byte Reload
	addq	$-1, %rcx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp667:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+16]
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	512(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	1444(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	480(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	472(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rdx, 1472(%rsp)        # 8-byte Spill
	movq	%rsi, 1464(%rsp)        # 8-byte Spill
	movq	%rdi, 1456(%rsp)        # 8-byte Spill
	jne	.LBB13_2
	jmp	.LBB13_1
.Ltmp668:
.LBB13_2:
	movabsq	$134, %rdi
	leaq	.L.str159713, %rsi
	leaq	.L.str248802, %rdx
	leaq	.L.str249803, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 134 0                 # kiss_fft.c:134:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$1864, %rsp             # imm = 0x748
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp669:
.Ltmp670:
	.size	kf_bfly3, .Ltmp670-kf_bfly3
.Lfunc_end13:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly2,@function
kf_bfly2:                               # @kf_bfly2
	.cfi_startproc
.Lfunc_begin14:
	.loc	2 27 0                  # kiss_fft.c:27:0
# BB#0:
	pushq	%rbp
.Ltmp678:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp679:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp680:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp681:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp682:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp683:
	.cfi_def_cfa_offset 56
	subq	$1160, %rsp             # imm = 0x488
.Ltmp684:
	.cfi_def_cfa_offset 1216
.Ltmp685:
	.cfi_offset %rbx, -56
.Ltmp686:
	.cfi_offset %r12, -48
.Ltmp687:
	.cfi_offset %r13, -40
.Ltmp688:
	.cfi_offset %r14, -32
.Ltmp689:
	.cfi_offset %r15, -24
.Ltmp690:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str202756, %r9
	leaq	.L.str4558, %r10
	movabsq	$32, %r11
	leaq	.L.str155709, %rbx
	leaq	.L.str1555, %r14
	leaq	.L.str201755, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str7561, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str6560, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movabsq	$31, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str115669, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str127681, %rax
	.loc	2 22 0 prologue_end     # kiss_fft.c:22:0
.Ltmp691:
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1008(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1000(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 996(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%r8, 984(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	984(%rsp), %rax         # 8-byte Reload
	movq	%r9, 976(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 972(%rsp)         # 4-byte Spill
	movq	%r15, 960(%rsp)         # 8-byte Spill
	movq	%r12, 952(%rsp)         # 8-byte Spill
	movl	%r13d, 948(%rsp)        # 4-byte Spill
	movq	%r14, 936(%rsp)         # 8-byte Spill
	movq	%rbx, 928(%rsp)         # 8-byte Spill
	movq	%r10, 920(%rsp)         # 8-byte Spill
	movq	%r11, 912(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	996(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+1016]
	#DEBUG_VALUE: kf_bfly2:fstride <- [RSP+1008]
	#DEBUG_VALUE: kf_bfly2:st <- [RSP+1000]
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+996]
	.loc	2 29 0                  # kiss_fft.c:29:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1000(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 904(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp692:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+904]
	.loc	2 31 0                  # kiss_fft.c:31:0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	996(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	912(%rsp), %rsi         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 896(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	896(%rsp), %rax         # 8-byte Reload
	shlq	$4, %rax
	movq	1016(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp693:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+888]
	.loc	2 32 0                  # kiss_fft.c:32:0
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	984(%rsp), %r9          # 8-byte Reload
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rax         # 8-byte Reload
	movq	904(%rsp), %rcx         # 8-byte Reload
	movl	996(%rsp), %ebp         # 4-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movl	%ebp, 868(%rsp)         # 4-byte Spill
	movq	%rdx, 856(%rsp)         # 8-byte Spill
.Ltmp694:
.LBB14_1:                               # =>This Inner Loop Header: Depth=1
	movq	856(%rsp), %rax         # 8-byte Reload
	movl	868(%rsp), %ecx         # 4-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str145699, %r8
	movabsq	$0, %r9
	leaq	.L.str4558, %r10
	movabsq	$2, %r11
	leaq	.L.str202756, %rbx
	movabsq	$3, %r14
	leaq	.L.str152706, %r15
	movabsq	$41, %r12
	leaq	.L.str155709, %r13
	leaq	.L.str210764, %rbp
	movl	%ecx, 852(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 848(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str61615, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str3557, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str205759, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 784(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str143697, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str182736, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str58612, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str203757, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$39, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str57611, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str47601, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$38, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str209763, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str34588, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str56610, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str55609, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str38592, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str208762, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str28582, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str54608, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str53607, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str19573, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str207761, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str136690, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str43597, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str9563, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str206760, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str40594, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str133687, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str204758, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str127681, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$36, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str130684, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str108662, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str16570, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str103657, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str123677, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str25579, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str102656, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str105659, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str24578, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str14568, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str1555, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str120674, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str200754, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str2556, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str7561, %rax
	.loc	2 35 0                  # kiss_fft.c:35:0
.Ltmp695:
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	368(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 320(%rsp)         # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	720(%rsp), %rax         # 8-byte Reload
	movl	%ecx, 308(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	360(%rsp), %rax         # 8-byte Reload
	movq	%r8, 296(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	848(%rsp), %eax         # 4-byte Reload
	movq	%r9, 288(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 280(%rsp)         # 8-byte Spill
	movq	%r12, 272(%rsp)         # 8-byte Spill
	movq	%r13, 264(%rsp)         # 8-byte Spill
	movq	%rbp, 256(%rsp)         # 8-byte Spill
	movq	%r14, 248(%rsp)         # 8-byte Spill
	movq	%rbx, 240(%rsp)         # 8-byte Spill
	movq	%r10, 232(%rsp)         # 8-byte Spill
	movq	%r11, 224(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	240(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	328(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 216(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 208(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	208(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 184(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	160(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 152(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	432(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	184(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 136(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	144(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	136(%rsp), %xmm0        # 8-byte Reload
	vmovsd	144(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
.Ltmp696:
	.loc	2 36 0                  # kiss_fft.c:36:0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1008(%rsp), %rcx        # 8-byte Reload
	shlq	$4, %rcx
	movq	312(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp697:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+120]
	.loc	2 37 0                  # kiss_fft.c:37:0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	vmovsd	152(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 96(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 88(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	88(%rsp), %xmm0         # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 80(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	192(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	320(%rsp), %rcx         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp698:
	.loc	2 38 0                  # kiss_fft.c:38:0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	152(%rsp), %xmm0        # 8-byte Reload
	vmovsd	72(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 64(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	8(%rcx), %xmm0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	56(%rsp), %xmm1         # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 48(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	232(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	840(%rsp), %rcx         # 8-byte Reload
	vmovsd	48(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 8(%rcx)
.Ltmp699:
	.loc	2 39 0                  # kiss_fft.c:39:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp700:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+40]
	.loc	2 40 0                  # kiss_fft.c:40:0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	840(%rsp), %rcx         # 8-byte Reload
	addq	$16, %rcx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp701:
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+32]
	.loc	2 41 0                  # kiss_fft.c:41:0
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	852(%rsp), %eax         # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 28(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp702:
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+28]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 27(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	240(%rsp), %rdx         # 8-byte Reload
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	848(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	232(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 868(%rsp)         # 4-byte Spill
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%rsi, 856(%rsp)         # 8-byte Spill
	jne	.LBB14_2
	jmp	.LBB14_1
.Ltmp703:
.LBB14_2:
	movabsq	$42, %rdi
	leaq	.L.str155709, %rsi
	leaq	.L.str152706, %rdx
	leaq	.L.str154708, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 42 0                  # kiss_fft.c:42:0
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$1160, %rsp             # imm = 0x488
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp704:
.Ltmp705:
	.size	kf_bfly2, .Ltmp705-kf_bfly2
.Lfunc_end14:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI15_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI15_1:
	.quad	4616189618054758400     # double 4
.LCPI15_2:
	.quad	4607182418800017408     # double 1
.LCPI15_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	pythag
	.align	16, 0x90
	.type	pythag,@function
pythag:                                 # @pythag
	.cfi_startproc
.Lfunc_begin15:
	.loc	5 70 0                  # eispack.c:70:0
# BB#0:
	pushq	%rbp
.Ltmp713:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp714:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp715:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp716:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp717:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp718:
	.cfi_def_cfa_offset 56
	subq	$1464, %rsp             # imm = 0x5B8
.Ltmp719:
	.cfi_def_cfa_offset 1520
.Ltmp720:
	.cfi_offset %rbx, -56
.Ltmp721:
	.cfi_offset %r12, -48
.Ltmp722:
	.cfi_offset %r13, -40
.Ltmp723:
	.cfi_offset %r14, -32
.Ltmp724:
	.cfi_offset %r15, -24
.Ltmp725:
	.cfi_offset %rbp, -16
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str91001, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	leaq	.L.str5997, %r9
	movabsq	$3, %r10
	leaq	r8_max, %r11
	leaq	.L.str121004, %rbx
	movabsq	$77, %r14
	leaq	.L.str3995, %r15
	leaq	.L.str4996, %r12
	leaq	.L.str111003, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1452(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str101002, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	5 11 0 prologue_end     # eispack.c:11:0
.Ltmp726:
	movq	%rdi, 1392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1388(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 1376(%rsp)       # 8-byte Spill
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	vmovsd	%xmm1, 1328(%rsp)       # 8-byte Spill
	movq	%r12, 1320(%rsp)        # 8-byte Spill
	movq	%r14, 1312(%rsp)        # 8-byte Spill
	movq	%r15, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbp, 1288(%rsp)        # 8-byte Spill
	movq	%rbx, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	movq	%r10, 1264(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	#DEBUG_VALUE: pythag:a <- [RSP+1376]
	#DEBUG_VALUE: pythag:b <- [RSP+1328]
	.loc	5 77 0                  # eispack.c:77:0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1376(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI15_0(%rip), %xmm0
	vmovsd	1376(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1256(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI15_0(%rip), %xmm0
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1248(%rsp)       # 8-byte Spill
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1264(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1392(%rsp), %r9         # 8-byte Reload
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1344(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_max
.Ltmp727:
	movabsq	$1, %rax
	leaq	.L.str131005, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str171009, %r8
	movabsq	$3, %r9
	leaq	.L.str161008, %r10
	movabsq	$79, %r11
	leaq	.L.str3995, %rbx
	leaq	.L.str4996, %r14
	leaq	.L.str151007, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str111003, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rdi, 1208(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1192(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 1184(%rsp)       # 8-byte Spill
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1152(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1148(%rsp)       # 4-byte Spill
	movq	%r15, 1136(%rsp)        # 8-byte Spill
	movl	%ebp, 1132(%rsp)        # 4-byte Spill
	movq	%r13, 1120(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1112(%rsp)       # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp728:
	#DEBUG_VALUE: pythag:p <- [RSP+1184]
	.loc	5 79 0                  # eispack.c:79:0
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1112(%rsp), %xmm0       # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	1240(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1112(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setne	%al
	setp	%cl
	orb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1079(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movl	1132(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	movq	1192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1079(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_1
	jmp	.LBB15_3
.Ltmp729:
.LBB15_1:
	movabsq	$2, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str91001, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %r8
	leaq	.L.str5997, %r9
	movabsq	$3, %r10
	leaq	r8_min, %r11
	leaq	.L.str191011, %rbx
	movabsq	$81, %r14
	leaq	.L.str3995, %r15
	leaq	.L.str161008, %r12
	leaq	.L.str181010, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1056(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1052(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 81 0                  # eispack.c:81:0
.Ltmp730:
	movq	%rdi, 1040(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movl	%esi, 1036(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1024(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 1008(%rsp)         # 8-byte Spill
	movq	%rbp, %r8
	movl	1052(%rsp), %ebp        # 4-byte Reload
	movq	%r9, 1000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 992(%rsp)         # 8-byte Spill
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movq	%r10, 976(%rsp)         # 8-byte Spill
	movq	%rbx, 968(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	movq	992(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	1056(%rsp), %r9         # 8-byte Reload
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	984(%rsp), %rsi         # 8-byte Reload
	vmovsd	1248(%rsp), %xmm0       # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1248(%rsp), %xmm1       # 8-byte Reload
	callq	r8_min
	movabsq	$1, %rax
	leaq	.L.str231015, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251017, %r8
	movabsq	$3, %r9
	leaq	.L.str171009, %r10
	movabsq	$88, %r11
	leaq	.L.str3995, %rbx
	leaq	.L.str161008, %r14
	leaq	.L.str241016, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	vmovsd	.LCPI15_1, %xmm1
	movq	%rax, 952(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str221014, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str211013, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str201012, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$82, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str181010, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str111003, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rdi, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 780(%rsp)        # 4-byte Spill
	movq	%r15, 768(%rsp)         # 8-byte Spill
	movl	%ebp, 764(%rsp)         # 4-byte Spill
	movq	%r13, 752(%rsp)         # 8-byte Spill
	vmovsd	%xmm1, 744(%rsp)        # 8-byte Spill
	movq	%r14, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r10, 720(%rsp)         # 8-byte Spill
	movq	%r11, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	1184(%rsp), %xmm0       # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 704(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp731:
	#DEBUG_VALUE: pythag:r <- [RSP+704]
	.loc	5 82 0                  # eispack.c:82:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	704(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 696(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp732:
	#DEBUG_VALUE: pythag:r <- [RSP+696]
	.loc	5 86 0                  # eispack.c:86:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	696(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp733:
	#DEBUG_VALUE: pythag:t <- [RSP+688]
	.loc	5 88 0                  # eispack.c:88:0
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	744(%rsp), %xmm0        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	movq	960(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	744(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movb	%cl, 687(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	712(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	764(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	808(%rsp), %r9          # 8-byte Reload
	movq	824(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	687(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	688(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm1       # 8-byte Reload
	vmovsd	696(%rsp), %xmm2        # 8-byte Reload
	vmovsd	1184(%rsp), %xmm3       # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_3
.Ltmp734:
.LBB15_2:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	vmovsd	656(%rsp), %xmm0        # 8-byte Reload
	vmovsd	664(%rsp), %xmm1        # 8-byte Reload
	vmovsd	672(%rsp), %xmm2        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str371029, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str251017, %r8
	movabsq	$3, %r9
	leaq	.L.str171009, %r10
	movabsq	$88, %r11
	leaq	.L.str3995, %rbx
	leaq	.L.str381030, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$4, %r13
	vmovsd	.LCPI15_1, %xmm3
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str271019, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str311023, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str301022, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$96, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str351027, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str321024, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str341026, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str291021, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str281020, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$95, %rax
	vmovsd	.LCPI15_2, %xmm4
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str331025, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$94, %rax
	vmovsd	.LCPI15_3, %xmm5
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str261018, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$93, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str211013, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str161008, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str111003, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str221014, %rax
	.loc	5 93 0                  # eispack.c:93:0
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movq	448(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 360(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 352(%rsp)        # 8-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 336(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 328(%rsp)        # 8-byte Spill
	vmovsd	%xmm5, 320(%rsp)        # 8-byte Spill
	movq	%r12, 312(%rsp)         # 8-byte Spill
	movl	%r15d, 308(%rsp)        # 4-byte Spill
	movq	%r10, 296(%rsp)         # 8-byte Spill
	movq	%r11, 288(%rsp)         # 8-byte Spill
	movq	%rbx, 280(%rsp)         # 8-byte Spill
	movq	%r14, 272(%rsp)         # 8-byte Spill
	movl	%ebp, 268(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	648(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	472(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	352(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp735:
	#DEBUG_VALUE: pythag:s <- [RSP+256]
	.loc	5 94 0                  # eispack.c:94:0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	320(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	320(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	248(%rsp), %xmm0        # 8-byte Reload
	vmovsd	328(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp736:
	#DEBUG_VALUE: pythag:u <- [RSP+240]
	.loc	5 95 0                  # eispack.c:95:0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp737:
	#DEBUG_VALUE: pythag:p <- [RSP+232]
	.loc	5 96 0                  # eispack.c:96:0
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	240(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	256(%rsp), %xmm0        # 8-byte Reload
	vmovsd	240(%rsp), %xmm1        # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	224(%rsp), %xmm0        # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	216(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	368(%rsp), %xmm0        # 8-byte Reload
	vmovsd	216(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp738:
	#DEBUG_VALUE: pythag:r <- [RSP+208]
	.loc	5 86 0                  # eispack.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	208(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp739:
	#DEBUG_VALUE: pythag:t <- [RSP+352]
	.loc	5 88 0                  # eispack.c:88:0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	336(%rsp), %xmm0        # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	336(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movb	%cl, 199(%rsp)          # 1-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	272(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	268(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	648(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	199(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	200(%rsp), %xmm0        # 8-byte Reload
	vmovsd	232(%rsp), %xmm1        # 8-byte Reload
	vmovsd	208(%rsp), %xmm2        # 8-byte Reload
	vmovsd	232(%rsp), %xmm3        # 8-byte Reload
	vmovsd	%xmm0, 672(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 664(%rsp)        # 8-byte Spill
	vmovsd	%xmm2, 656(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 1064(%rsp)       # 8-byte Spill
	jne	.LBB15_3
	jmp	.LBB15_2
.Ltmp740:
.LBB15_3:                               # %.loopexit
	vmovsd	1064(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str391031, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %r9
	movabsq	$99, %rdi
	leaq	.L.str3995, %r8
	leaq	.L.str171009, %r10
	leaq	.L.str401032, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str4996, %r15
	leaq	.L.str111003, %r12
	movabsq	$2, %r13
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str161008, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str291021, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str251017, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 99 0                  # eispack.c:99:0
	movq	%rax, 136(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 128(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	112(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 80(%rsp)         # 8-byte Spill
	movq	%r14, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movl	%ebx, 52(%rsp)          # 4-byte Spill
	movq	%r13, 40(%rsp)          # 8-byte Spill
	movl	%ebp, 36(%rsp)          # 4-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	64(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	52(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	80(%rsp), %xmm0         # 8-byte Reload
	addq	$1464, %rsp             # imm = 0x5B8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp741:
.Ltmp742:
	.size	pythag, .Ltmp742-pythag
.Lfunc_end15:
	.cfi_endproc

	.globl	r8_max
	.align	16, 0x90
	.type	r8_max,@function
r8_max:                                 # @r8_max
	.cfi_startproc
.Lfunc_begin16:
	.loc	5 169 0                 # eispack.c:169:0
# BB#0:
	pushq	%rbp
.Ltmp750:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp751:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp752:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp753:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp754:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp755:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp756:
	.cfi_def_cfa_offset 288
.Ltmp757:
	.cfi_offset %rbx, -56
.Ltmp758:
	.cfi_offset %r12, -48
.Ltmp759:
	.cfi_offset %r13, -40
.Ltmp760:
	.cfi_offset %r14, -32
.Ltmp761:
	.cfi_offset %r15, -24
.Ltmp762:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_max:y <- XMM1
	#DEBUG_VALUE: r8_max:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str431035, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$180, %r8
	leaq	.L.str121004, %r9
	leaq	.L.str4996, %r10
	leaq	.L.str441036, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 143 0 prologue_end    # eispack.c:143:0
.Ltmp763:
	movl	$.L.str411033, %r15d
	movl	%r15d, %r12d
	movl	$.L.str7999, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp764:
	#DEBUG_VALUE: r8_max:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp765:
	#DEBUG_VALUE: r8_max:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp766:
	movl	$.L.str421034, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	5 172 0                 # eispack.c:172:0
.Ltmp767:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str121004, %ebx
	movl	%ebx, %eax
	movl	$.L.str4996, %ebx
	movl	%ebx, %ecx
	movl	$.L.str5997, %ebx
	movl	%ebx, %edx
	movl	$172, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp768:
	.loc	5 143 0                 # eispack.c:143:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 172 0                 # eispack.c:172:0
.Ltmp769:
	seta	%al
	.loc	5 175 0                 # eispack.c:175:0
.Ltmp770:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str431035, %ebx
	movl	%ebx, %ecx
	movl	$175, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vmaxsd	%xmm1, %xmm0, %xmm2
.Ltmp771:
	.loc	5 180 0                 # eispack.c:180:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp772:
.Ltmp773:
	.size	r8_max, .Ltmp773-r8_max
.Lfunc_end16:
	.cfi_endproc

	.globl	r8_min
	.align	16, 0x90
	.type	r8_min,@function
r8_min:                                 # @r8_min
	.cfi_startproc
.Lfunc_begin17:
	.loc	5 210 0                 # eispack.c:210:0
# BB#0:
	pushq	%rbp
.Ltmp781:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp782:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp783:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp784:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp785:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp786:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp787:
	.cfi_def_cfa_offset 288
.Ltmp788:
	.cfi_offset %rbx, -56
.Ltmp789:
	.cfi_offset %r12, -48
.Ltmp790:
	.cfi_offset %r13, -40
.Ltmp791:
	.cfi_offset %r14, -32
.Ltmp792:
	.cfi_offset %r15, -24
.Ltmp793:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_min:y <- XMM1
	#DEBUG_VALUE: r8_min:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str451037, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$221, %r8
	leaq	.L.str191011, %r9
	leaq	.L.str4996, %r10
	leaq	.L.str441036, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 184 0 prologue_end    # eispack.c:184:0
.Ltmp794:
	movl	$.L.str411033, %r15d
	movl	%r15d, %r12d
	movl	$.L.str7999, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 192(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	216(%rsp), %rax         # 8-byte Reload
	movl	%esi, 180(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 168(%rsp)        # 8-byte Spill
.Ltmp795:
	#DEBUG_VALUE: r8_min:x <- [RSP+168]
	movq	208(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
.Ltmp796:
	#DEBUG_VALUE: r8_min:y <- [RSP+128]
	movq	%r12, 120(%rsp)         # 8-byte Spill
	movl	%ebp, 116(%rsp)         # 4-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r15, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movl	%ebx, 84(%rsp)          # 4-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	movq	%r10, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp797:
	movl	$.L.str421034, %ebx
	movl	%ebx, %eax
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	%rax, %rcx
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	.loc	5 213 0                 # eispack.c:213:0
.Ltmp798:
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str191011, %ebx
	movl	%ebx, %eax
	movl	$.L.str4996, %ebx
	movl	%ebx, %ecx
	movl	$.L.str5997, %ebx
	movl	%ebx, %edx
	movl	$213, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 48(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	48(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	180(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$2, %r9d
	movl	%r9d, %eax
	movq	%rax, %rdi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp799:
	.loc	5 184 0                 # eispack.c:184:0
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	vmovsd	128(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 213 0                 # eispack.c:213:0
.Ltmp800:
	seta	%al
	.loc	5 216 0                 # eispack.c:216:0
.Ltmp801:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str451037, %ebx
	movl	%ebx, %ecx
	movl	$216, %ebx
	movl	%ebx, %edi
	movl	$50, %ebx
	movl	%ebx, %r8d
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movl	180(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vminsd	%xmm1, %xmm0, %xmm2
.Ltmp802:
	.loc	5 221 0                 # eispack.c:221:0
	movq	104(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	136(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	72(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	84(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	192(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp803:
.Ltmp804:
	.size	r8_min, .Ltmp804-r8_min
.Lfunc_end17:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI18_0:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
	.text
	.globl	r8_epsilon
	.align	16, 0x90
	.type	r8_epsilon,@function
r8_epsilon:                             # @r8_epsilon
	.cfi_startproc
.Lfunc_begin18:
	.loc	5 135 0                 # eispack.c:135:0
# BB#0:
	pushq	%rbp
.Ltmp808:
	.cfi_def_cfa_offset 16
	pushq	%rbx
.Ltmp809:
	.cfi_def_cfa_offset 24
	subq	$72, %rsp
.Ltmp810:
	.cfi_def_cfa_offset 96
.Ltmp811:
	.cfi_offset %rbx, -24
.Ltmp812:
	.cfi_offset %rbp, -16
	vmovsd	.LCPI18_0, %xmm0
	movabsq	$1, %rax
	movabsq	$64, %rsi
	movabsq	$0, %rcx
	leaq	.L.str141006, %rdx
	leaq	.L.str7999, %r9
	movabsq	$138, %rdi
	leaq	.L.str461038, %r8
	leaq	.L.str4996, %r10
	leaq	.L.str471039, %r11
	movl	$0, %ebx
	movl	$1, %ebp
.Ltmp813:
	#DEBUG_VALUE: r8_epsilon:value <- 2.220446e-16
	.loc	5 138 0 prologue_end    # eispack.c:138:0
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%rax, %r8
	movq	%r9, 40(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 32(%rsp)         # 8-byte Spill
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	addq	$72, %rsp
	popq	%rbx
	popq	%rbp
	ret
.Ltmp814:
.Ltmp815:
	.size	r8_epsilon, .Ltmp815-r8_epsilon
.Lfunc_end18:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI19_0:
	.quad	-4616189618054758400    # double -1
.LCPI19_1:
	.quad	4607182418800017408     # double 1
	.text
	.globl	r8_sign
	.align	16, 0x90
	.type	r8_sign,@function
r8_sign:                                # @r8_sign
	.cfi_startproc
.Lfunc_begin19:
	.loc	5 251 0                 # eispack.c:251:0
# BB#0:
	pushq	%rbp
.Ltmp823:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp824:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp825:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp826:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp827:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp828:
	.cfi_def_cfa_offset 56
	subq	$248, %rsp
.Ltmp829:
	.cfi_def_cfa_offset 304
.Ltmp830:
	.cfi_offset %rbx, -56
.Ltmp831:
	.cfi_offset %r12, -48
.Ltmp832:
	.cfi_offset %r13, -40
.Ltmp833:
	.cfi_offset %r14, -32
.Ltmp834:
	.cfi_offset %r15, -24
.Ltmp835:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: r8_sign:x <- XMM0
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str491041, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$262, %r8               # imm = 0x106
	leaq	.L.str481040, %r9
	leaq	.L.str4996, %r10
	leaq	.L.str471039, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	.loc	5 225 0 prologue_end    # eispack.c:225:0
.Ltmp836:
	movl	$.L.str411033, %r15d
	movl	%r15d, %r12d
	movl	$.L.str7999, %r15d
	movl	%r15d, %r13d
	movl	$24601, %r15d           # imm = 0x6019
                                        # kill: R15<def> R15D<kill>
	movq	%rsi, 240(%rsp)         # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 232(%rsp)         # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 224(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, 208(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movq	232(%rsp), %r15         # 8-byte Reload
	movl	%esi, 204(%rsp)         # 4-byte Spill
	movq	%r15, %rsi
	vmovsd	%xmm0, 192(%rsp)        # 8-byte Spill
.Ltmp837:
	#DEBUG_VALUE: r8_sign:x <- [RSP+192]
	movq	224(%rsp), %r15         # 8-byte Reload
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 168(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 160(%rsp)          # 8-byte Spill
	movq	%r13, %r9
	movq	%r12, 152(%rsp)         # 8-byte Spill
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movq	%r14, 128(%rsp)         # 8-byte Spill
	movq	%r13, 120(%rsp)         # 8-byte Spill
	movl	%ebx, 116(%rsp)         # 4-byte Spill
	movq	%r11, 104(%rsp)         # 8-byte Spill
	movq	%r10, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp838:
	.loc	5 254 0                 # eispack.c:254:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str481040, %ebx
	movl	%ebx, %eax
	movl	$.L.str4996, %ebx
	movl	%ebx, %ecx
	movl	$.L.str5997, %ebx
	movl	%ebx, %edx
	movl	$254, %ebx
	movl	%ebx, %edi
	movl	$47, %ebx
	movl	%ebx, %r8d
	movq	%rax, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%rcx, %rdx
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r9, %rcx
	movl	204(%rsp), %r9d         # 4-byte Reload
	movq	%rax, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str141006, %r9d
	movl	%r9d, %eax
	movl	$2, %r9d
	movl	%r9d, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, %rdi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 64(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	%rax, 48(%rsp)          # 8-byte Spill
	callq	trace_logger_log_double
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	192(%rsp), %xmm0        # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	64(%rsp), %xmm0         # 8-byte Reload
	vmovsd	192(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	5 257 0                 # eispack.c:257:0
.Ltmp839:
	movzbl	%al, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	vmovsd	.LCPI19_0(%rip), %xmm2
	vmovsd	.LCPI19_1(%rip), %xmm3
	vmovaps	%xmm2, %xmm4
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	vmovsd	%xmm3, 24(%rsp)         # 8-byte Spill
	vmovsd	%xmm4, 16(%rsp)         # 8-byte Spill
	ja	.LBB19_2
# BB#1:
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, 16(%rsp)         # 8-byte Spill
.LBB19_2:
	vmovsd	16(%rsp), %xmm0         # 8-byte Reload
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %edi
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm0, 8(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str491041, %eax
	movl	%eax, %ecx
	movl	$257, %eax              # imm = 0x101
	movl	%eax, %edi
	movl	$50, %eax
	movl	%eax, %r8d
	movq	72(%rsp), %rsi          # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movl	204(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %eax
	movl	%eax, %edi
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	24(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	48(%rsp), %rcx          # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp840:
	.loc	5 262 0                 # eispack.c:262:0
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	116(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8(%rsp), %xmm0          # 8-byte Reload
	addq	$248, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp841:
.Ltmp842:
	.size	r8_sign, .Ltmp842-r8_sign
.Lfunc_end19:
	.cfi_endproc

	.globl	rs
	.align	16, 0x90
	.type	rs,@function
rs:                                     # @rs
	.cfi_startproc
.Lfunc_begin20:
	.loc	5 331 0                 # eispack.c:331:0
# BB#0:
	pushq	%rbp
.Ltmp846:
	.cfi_def_cfa_offset 16
.Ltmp847:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp848:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$1528, %rsp             # imm = 0x5F8
.Ltmp849:
	.cfi_offset %rbx, -56
.Ltmp850:
	.cfi_offset %r12, -48
.Ltmp851:
	.cfi_offset %r13, -40
.Ltmp852:
	.cfi_offset %r14, -32
.Ltmp853:
	.cfi_offset %r15, -24
	movb	%cl, %al
	#DEBUG_VALUE: rs:matz <- AL
	#DEBUG_VALUE: rs:z <- R8
	#DEBUG_VALUE: rs:w <- RDX
	#DEBUG_VALUE: rs:a <- RSI
	#DEBUG_VALUE: rs:n <- EDI
	movl	$0, %ecx
	movabsq	$1, %r9
	leaq	.L.str551047, %r10
	movabsq	$0, %r11
	leaq	.L.str7999, %rbx
	movabsq	$2, %r14
	leaq	.L.str541046, %r15
	movabsq	$3, %r12
	leaq	.L.str531045, %r13
	movb	%al, -41(%rbp)          # 1-byte Spill
.Ltmp854:
	#DEBUG_VALUE: rs:matz <- [RBP+-41]
	movabsq	$340, %rax              # imm = 0x154
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str501042, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str4996, %rax
	movq	%rax, -72(%rbp)         # 8-byte Spill
	leaq	.L.str521044, %rax
	movl	%ecx, -76(%rbp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -96(%rbp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str111003, %rax
	.loc	5 267 0 prologue_end    # eispack.c:267:0
.Ltmp855:
	movl	%ecx, -108(%rbp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	subq	$16, %rsp
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str7999, (%rax)
	movl	$.L.str511043, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -128(%rbp)        # 8-byte Spill
.Ltmp856:
	#DEBUG_VALUE: rs:a <- [RBP+-128]
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -136(%rbp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -144(%rbp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -152(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -160(%rbp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movq	-136(%rbp), %rax        # 8-byte Reload
	movl	%edi, -172(%rbp)        # 4-byte Spill
.Ltmp857:
	#DEBUG_VALUE: rs:n <- [RBP+-172]
	movq	%rax, %rdi
	movq	-144(%rbp), %rax        # 8-byte Reload
	movl	%esi, -176(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -184(%rbp)        # 8-byte Spill
.Ltmp858:
	#DEBUG_VALUE: rs:w <- [RBP+-184]
	movq	%rcx, %rdx
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -192(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%r8, -200(%rbp)         # 8-byte Spill
.Ltmp859:
	#DEBUG_VALUE: rs:z <- [RBP+-200]
	movq	%rax, %r8
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%r9, -208(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r14, -216(%rbp)        # 8-byte Spill
	movq	%rbx, -224(%rbp)        # 8-byte Spill
	movq	%r15, -232(%rbp)        # 8-byte Spill
	movq	%r12, -240(%rbp)        # 8-byte Spill
	movq	%r13, -248(%rbp)        # 8-byte Spill
	movq	%r11, -256(%rbp)        # 8-byte Spill
	movq	%r10, -264(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str7999, (%rax)
	movl	$.L.str81000, %esi
	movl	%esi, %r8d
	movl	$64, %esi
	movl	%esi, %eax
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	%rax, %rsi
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	movq	%rax, -272(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str7999, (%rax)
	movl	$.L.str581050, %esi
	movl	%esi, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	movzbl	%al, %eax
	movl	%eax, %ecx
	andq	$1, %rcx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movl	$.L.str551047, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-152(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$.L.str691061, %eax
	movl	%eax, %r8d
	movq	-136(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-200(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	5 334 0                 # eispack.c:334:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str501042, %eax
	movl	%eax, %ecx
	movl	$.L.str4996, %eax
	movl	%eax, %edx
	movl	$.L.str5997, %eax
	movl	%eax, %esi
	movl	$334, %eax              # imm = 0x14E
	movl	%eax, %edi
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdi, -280(%rbp)        # 8-byte Spill
	movq	%rsi, -288(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -296(%rbp)        # 8-byte Spill
	movq	-288(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -304(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-144(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str91001, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-280(%rbp), %rdi        # 8-byte Reload
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	%rdx, -320(%rbp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -328(%rbp)        # 8-byte Spill
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-192(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,8), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movq	-312(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %r8         # 8-byte Reload
	movq	%rsi, -336(%rbp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	-336(%rbp), %r9         # 8-byte Reload
	movq	%rdx, -344(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-328(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	5 335 0                 # eispack.c:335:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str111003, %eax
	movl	%eax, %ecx
	movl	$335, %eax              # imm = 0x14F
	movl	%eax, %edi
	movq	-304(%rbp), %rsi        # 8-byte Reload
	movq	-296(%rbp), %rdx        # 8-byte Reload
	movq	-320(%rbp), %r8         # 8-byte Reload
	movl	-176(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	-152(%rbp), %rdi        # 8-byte Reload
	movq	-272(%rbp), %rsi        # 8-byte Reload
	movq	-192(%rbp), %rdx        # 8-byte Reload
	movq	-152(%rbp), %rcx        # 8-byte Reload
	movq	-288(%rbp), %r8         # 8-byte Reload
	movq	-168(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-344(%rbp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-96(%rbp), %rdi         # 8-byte Reload
	movq	-104(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	-208(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -352(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-120(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp860:
	#DEBUG_VALUE: rs:fv2 <- [RBP+-352]
	#DEBUG_VALUE: rs:ierr <- 0
	.loc	5 340 0                 # eispack.c:340:0
	subq	$16, %rsp
	movq	-56(%rbp), %rdi         # 8-byte Reload
	movq	-64(%rbp), %rsi         # 8-byte Reload
	movq	-72(%rbp), %rdx         # 8-byte Reload
	movq	-88(%rbp), %rcx         # 8-byte Reload
	movq	-216(%rbp), %r8         # 8-byte Reload
	movl	-76(%rbp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-248(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movq	-256(%rbp), %rsi        # 8-byte Reload
	movq	-256(%rbp), %rdx        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-232(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-208(%rbp), %rsi        # 8-byte Reload
	movq	-208(%rbp), %rcx        # 8-byte Reload
	movq	-264(%rbp), %r8         # 8-byte Reload
	movq	-256(%rbp), %r9         # 8-byte Reload
	movq	-224(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-41(%rbp), %al          # 1-byte Reload
	testb	$1, %al
	movl	-76(%rbp), %eax         # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB20_3
.Ltmp861:
# BB#1:
	movabsq	$5, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str601052, %r8
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$4, %r9
	leaq	.L.str591051, %r10
	movabsq	$3, %r11
	leaq	.L.str581050, %rbx
	movabsq	$2, %r14
	leaq	.L.str81000, %r15
	movabsq	$32, %r12
	leaq	.L.str511043, %r13
	movq	%rax, -368(%rbp)        # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, -376(%rbp)        # 8-byte Spill
	leaq	tred1, %rax
	movq	%rax, -384(%rbp)        # 8-byte Spill
	leaq	.L.str571049, %rax
	movq	%rax, -392(%rbp)        # 8-byte Spill
	movabsq	$344, %rax              # imm = 0x158
	movq	%rax, -400(%rbp)        # 8-byte Spill
	leaq	.L.str501042, %rax
	movq	%rax, -408(%rbp)        # 8-byte Spill
	leaq	.L.str541046, %rax
	movq	%rax, -416(%rbp)        # 8-byte Spill
	leaq	.L.str561048, %rax
	movq	%rax, -424(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -432(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -436(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 344 0                 # eispack.c:344:0
.Ltmp862:
	subq	$16, %rsp
	movq	%rax, -448(%rbp)        # 8-byte Spill
	movq	-400(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -456(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-408(%rbp), %rax        # 8-byte Reload
	movl	%esi, -460(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -472(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-424(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -480(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%r8, -488(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-436(%rbp), %eax        # 4-byte Reload
	movq	%r9, -496(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -504(%rbp)        # 8-byte Spill
	movq	%r14, -512(%rbp)        # 8-byte Spill
	movq	%rbx, -520(%rbp)        # 8-byte Spill
	movq	%r15, -528(%rbp)        # 8-byte Spill
	movq	%r12, -536(%rbp)        # 8-byte Spill
	movq	%r11, -544(%rbp)        # 8-byte Spill
	movq	%r10, -552(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-376(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-384(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-480(%rbp), %rdi        # 8-byte Reload
	movq	-536(%rbp), %rsi        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-504(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-512(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-128(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-528(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-544(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-520(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-496(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-336(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-552(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-456(%rbp), %rdi        # 8-byte Reload
	movq	-368(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-480(%rbp), %rcx        # 8-byte Reload
	movq	-488(%rbp), %r8         # 8-byte Reload
	movq	-472(%rbp), %r9         # 8-byte Reload
	movq	-432(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-336(%rbp), %rcx        # 8-byte Reload
	movq	-352(%rbp), %r8         # 8-byte Reload
	callq	tred1
	movabsq	$3, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str601052, %r8
	movabsq	$0, %rsi
	leaq	.L.str7999, %r9
	movabsq	$2, %r10
	leaq	.L.str581050, %r11
	movabsq	$32, %rbx
	leaq	.L.str511043, %r14
	movabsq	$4, %r15
	leaq	tqlrat, %r12
	leaq	.L.str621054, %r13
	movabsq	$346, %rax              # imm = 0x15A
	movq	%rax, -560(%rbp)        # 8-byte Spill
	leaq	.L.str501042, %rax
	movq	%rax, -568(%rbp)        # 8-byte Spill
	leaq	.L.str541046, %rax
	movq	%rax, -576(%rbp)        # 8-byte Spill
	leaq	.L.str611053, %rax
	movq	%rax, -584(%rbp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -592(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -596(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 346 0                 # eispack.c:346:0
	subq	$16, %rsp
	movq	%rax, -608(%rbp)        # 8-byte Spill
	movq	-560(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -616(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-568(%rbp), %rax        # 8-byte Reload
	movl	%esi, -620(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-576(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -632(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-584(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-608(%rbp), %rax        # 8-byte Reload
	movq	%r8, -648(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-596(%rbp), %eax        # 4-byte Reload
	movq	%r9, -656(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, -664(%rbp)        # 8-byte Spill
	movq	%r12, -672(%rbp)        # 8-byte Spill
	movq	%r14, -680(%rbp)        # 8-byte Spill
	movq	%r13, -688(%rbp)        # 8-byte Spill
	movq	%rbx, -696(%rbp)        # 8-byte Spill
	movq	%r10, -704(%rbp)        # 8-byte Spill
	movq	%r11, -712(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-664(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-672(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-632(%rbp), %rdi        # 8-byte Reload
	movq	-696(%rbp), %rsi        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-680(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-704(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-184(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-712(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-616(%rbp), %rdi        # 8-byte Reload
	movq	-640(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	-648(%rbp), %r8         # 8-byte Reload
	movq	-592(%rbp), %r9         # 8-byte Reload
	movq	-656(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-172(%rbp), %edi        # 4-byte Reload
	movq	-184(%rbp), %rsi        # 8-byte Reload
	movq	-352(%rbp), %rdx        # 8-byte Reload
	callq	tqlrat
	movl	$0, %edi
	movabsq	$1, %rcx
	leaq	.L.str181010, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str641056, %r10
	movabsq	$3, %r11
	leaq	.L.str531045, %rbx
	movabsq	$348, %r14              # imm = 0x15C
	leaq	.L.str501042, %r15
	leaq	.L.str541046, %r12
	leaq	.L.str631055, %r13
	movl	%eax, -716(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -728(%rbp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -736(%rbp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -744(%rbp)        # 8-byte Spill
	leaq	.L.str611053, %rcx
	movq	%rcx, -752(%rbp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, -760(%rbp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, -764(%rbp)        # 4-byte Spill
	movl	-716(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -776(%rbp)        # 8-byte Spill
	movq	-736(%rbp), %rax        # 8-byte Reload
	movl	%edi, -780(%rbp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	-744(%rbp), %rax        # 8-byte Reload
	movq	%rsi, -792(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	-776(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -800(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-728(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -808(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-752(%rbp), %rax        # 8-byte Reload
	movq	%r8, -816(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	-792(%rbp), %rax        # 8-byte Reload
	movq	%r9, -824(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, -832(%rbp)        # 8-byte Spill
	movq	%r14, -840(%rbp)        # 8-byte Spill
	movq	%r15, -848(%rbp)        # 8-byte Spill
	movq	%r12, -856(%rbp)        # 8-byte Spill
	movq	%rbx, -864(%rbp)        # 8-byte Spill
	movq	%r11, -872(%rbp)        # 8-byte Spill
	movq	%r10, -880(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp863:
	#DEBUG_VALUE: rs:ierr <- [RBP+-716]
	.loc	5 348 0                 # eispack.c:348:0
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-800(%rbp), %rcx        # 8-byte Reload
	movq	-808(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-792(%rbp), %rcx        # 8-byte Reload
	movq	-760(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-744(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-752(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-736(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -881(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-840(%rbp), %rdi        # 8-byte Reload
	movq	-848(%rbp), %rsi        # 8-byte Reload
	movq	-856(%rbp), %rdx        # 8-byte Reload
	movq	-832(%rbp), %rcx        # 8-byte Reload
	movq	-824(%rbp), %r8         # 8-byte Reload
	movl	-780(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-872(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-864(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-792(%rbp), %rsi        # 8-byte Reload
	movq	-792(%rbp), %rdx        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-880(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-728(%rbp), %rdi        # 8-byte Reload
	movq	-728(%rbp), %rsi        # 8-byte Reload
	movq	-728(%rbp), %rcx        # 8-byte Reload
	movq	-800(%rbp), %r8         # 8-byte Reload
	movq	-792(%rbp), %r9         # 8-byte Reload
	movq	-816(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-881(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	movl	-780(%rbp), %eax        # 4-byte Reload
	movl	%eax, -356(%rbp)        # 4-byte Spill
	jne	.LBB20_3
.Ltmp864:
# BB#2:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str992, %rdx
	movabsq	$0, %rsi
	leaq	.L.str141006, %r8
	leaq	.L.str7999, %rdi
	movabsq	$2, %r9
	leaq	printf, %r10
	leaq	.L.str651057, %r11
	movabsq	$352, %rbx              # imm = 0x160
	leaq	.L.str501042, %r14
	leaq	.L.str641056, %r15
	leaq	.L.str211013, %r12
	movabsq	$49, %r13
	movq	%rsi, -896(%rbp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -900(%rbp)        # 4-byte Spill
	movl	$1, %esi
	.loc	5 352 0                 # eispack.c:352:0
.Ltmp865:
	subq	$16, %rsp
	movq	%rdi, -912(%rbp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, -916(%rbp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -928(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -936(%rbp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, -944(%rbp)         # 8-byte Spill
	movq	%r13, %r8
	movl	-900(%rbp), %r14d       # 4-byte Reload
	movq	%r9, -952(%rbp)         # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movq	%rax, -960(%rbp)        # 8-byte Spill
	movq	%r11, -968(%rbp)        # 8-byte Spill
	movq	%r10, -976(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-952(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-976(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-936(%rbp), %rsi        # 8-byte Reload
	movq	-928(%rbp), %rdx        # 8-byte Reload
	movq	-896(%rbp), %rcx        # 8-byte Reload
	movq	-944(%rbp), %r8         # 8-byte Reload
	movq	-896(%rbp), %r9         # 8-byte Reload
	movq	-912(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str992, %r14d
	movl	%r14d, %edi
	xorl	%r14d, %r14d
	movb	%r14b, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1993, %rsi
	movabsq	$0, %rdi
	leaq	.L.str141006, %r8
	leaq	.L.str7999, %r9
	movabsq	$2, %r10
	leaq	printf, %r11
	leaq	.L.str651057, %rbx
	movabsq	$353, %r15              # imm = 0x161
	leaq	.L.str501042, %r12
	leaq	.L.str641056, %r13
	leaq	.L.str221014, %r14
	movq	%rcx, -984(%rbp)        # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -988(%rbp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -992(%rbp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1000(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1008(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1016(%rbp)       # 8-byte Spill
	leaq	.L.str211013, %rcx
	.loc	5 353 0                 # eispack.c:353:0
	movl	%eax, -1020(%rbp)       # 4-byte Spill
	movl	-988(%rbp), %eax        # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1032(%rbp)       # 8-byte Spill
	movq	-1008(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1040(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1016(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1048(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1032(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1056(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-984(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -1064(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1064(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1072(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1040(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1080(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r14, -1088(%rbp)       # 8-byte Spill
	movq	%r15, -1096(%rbp)       # 8-byte Spill
	movq	%r12, -1104(%rbp)       # 8-byte Spill
	movq	%r13, -1112(%rbp)       # 8-byte Spill
	movq	%rbx, -1120(%rbp)       # 8-byte Spill
	movq	%r11, -1128(%rbp)       # 8-byte Spill
	movq	%r10, -1136(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1096(%rbp), %rdi       # 8-byte Reload
	movq	-1104(%rbp), %rsi       # 8-byte Reload
	movq	-1112(%rbp), %rdx       # 8-byte Reload
	movq	-1088(%rbp), %rcx       # 8-byte Reload
	movq	-1000(%rbp), %r8        # 8-byte Reload
	movl	-992(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1136(%rbp), %rdi       # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1128(%rbp), %rdx       # 8-byte Reload
	movq	-984(%rbp), %rcx        # 8-byte Reload
	movq	-1120(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-984(%rbp), %rdi        # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1048(%rbp), %rdx       # 8-byte Reload
	movq	-1040(%rbp), %rcx       # 8-byte Reload
	movq	-1072(%rbp), %r8        # 8-byte Reload
	movq	-1040(%rbp), %r9        # 8-byte Reload
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str1993, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str2994, %rdi
	movabsq	$0, %r8
	leaq	.L.str141006, %r9
	leaq	.L.str7999, %r10
	movabsq	$2, %r11
	leaq	printf, %rbx
	leaq	.L.str651057, %r14
	movabsq	$354, %r15              # imm = 0x162
	leaq	.L.str501042, %rsi
	leaq	.L.str641056, %r12
	leaq	.L.str231015, %r13
	movq	%rcx, -1144(%rbp)       # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, -1148(%rbp)       # 4-byte Spill
	movl	$0, %eax
	movl	%eax, -1152(%rbp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -1160(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -1168(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -1176(%rbp)       # 8-byte Spill
	leaq	.L.str221014, %rcx
	.loc	5 354 0                 # eispack.c:354:0
	movl	%eax, -1180(%rbp)       # 4-byte Spill
	movl	-1148(%rbp), %eax       # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rax, -1192(%rbp)       # 8-byte Spill
	movq	-1168(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -1200(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1176(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1208(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	-1192(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1216(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1144(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1224(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1224(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1232(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	-1232(%rbp), %rax       # 8-byte Reload
	movq	%r9, -1240(%rbp)        # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r13, -1248(%rbp)       # 8-byte Spill
	movq	%r15, -1256(%rbp)       # 8-byte Spill
	movq	%r12, -1264(%rbp)       # 8-byte Spill
	movq	%r14, -1272(%rbp)       # 8-byte Spill
	movq	%rbx, -1280(%rbp)       # 8-byte Spill
	movq	%r10, -1288(%rbp)       # 8-byte Spill
	movq	%r11, -1296(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1256(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1264(%rbp), %rdx       # 8-byte Reload
	movq	-1248(%rbp), %rcx       # 8-byte Reload
	movq	-1160(%rbp), %r8        # 8-byte Reload
	movl	-1152(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1296(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1280(%rbp), %rdx       # 8-byte Reload
	movq	-1144(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1144(%rbp), %rdi       # 8-byte Reload
	movq	-1216(%rbp), %rsi       # 8-byte Reload
	movq	-1200(%rbp), %rdx       # 8-byte Reload
	movq	-1232(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1232(%rbp), %r9        # 8-byte Reload
	movq	-1288(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	$.L.str2994, %esi
	movl	%esi, %edi
	xorl	%esi, %esi
	movb	%sil, %al
	callq	printf
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str531045, %r8
	leaq	.L.str7999, %rdi
	movabsq	$355, %r9               # imm = 0x163
	leaq	.L.str501042, %rsi
	leaq	.L.str641056, %r10
	leaq	.L.str661058, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$32, %r13
	movq	%rcx, -1304(%rbp)       # 8-byte Spill
	leaq	.L.str231015, %rcx
	.loc	5 355 0                 # eispack.c:355:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	subq	$16, %rsp
	movq	%rdi, -1312(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movq	%rsi, -1320(%rbp)       # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, -1328(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1304(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1336(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1336(%rbp), %r12       # 8-byte Reload
	movq	%r8, -1344(%rbp)        # 8-byte Spill
	movq	%r12, %r8
	movq	-1328(%rbp), %r13       # 8-byte Reload
	movq	%r9, -1352(%rbp)        # 8-byte Spill
	movq	%r13, %r9
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r15d, -1356(%rbp)      # 4-byte Spill
	movq	%r11, -1368(%rbp)       # 8-byte Spill
	movq	%rbx, -1376(%rbp)       # 8-byte Spill
	movl	%r14d, -1380(%rbp)      # 4-byte Spill
	movq	%r10, -1392(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1352(%rbp), %rdi       # 8-byte Reload
	movq	-1320(%rbp), %rsi       # 8-byte Reload
	movq	-1392(%rbp), %rdx       # 8-byte Reload
	movq	-1368(%rbp), %rcx       # 8-byte Reload
	movq	-1376(%rbp), %r8        # 8-byte Reload
	movl	-1380(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1304(%rbp), %rdi       # 8-byte Reload
	movq	-1328(%rbp), %rsi       # 8-byte Reload
	movq	-1328(%rbp), %rdx       # 8-byte Reload
	movq	-1304(%rbp), %rcx       # 8-byte Reload
	movq	-1344(%rbp), %r8        # 8-byte Reload
	movq	-1328(%rbp), %r9        # 8-byte Reload
	movq	-1312(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-716(%rbp), %r14d       # 4-byte Reload
	movl	%r14d, -356(%rbp)       # 4-byte Spill
.Ltmp866:
.LBB20_3:
	movl	-356(%rbp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str671059, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$363, %r9               # imm = 0x16B
	leaq	.L.str501042, %r10
	leaq	.L.str531045, %r11
	leaq	.L.str681060, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	leaq	.L.str641056, %r13
	movq	%rcx, -1400(%rbp)       # 8-byte Spill
	leaq	.L.str611053, %rcx
	movq	%rcx, -1408(%rbp)       # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, -1416(%rbp)       # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, -1424(%rbp)       # 8-byte Spill
	leaq	.L.str4996, %rcx
	movq	%rcx, -1432(%rbp)       # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, -1440(%rbp)       # 8-byte Spill
	leaq	.L.str541046, %rcx
	movq	%rcx, -1448(%rbp)       # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, -1456(%rbp)       # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 363 0                 # eispack.c:363:0
	subq	$16, %rsp
	movq	%rcx, -1464(%rbp)       # 8-byte Spill
	movq	-1456(%rbp), %rcx       # 8-byte Reload
	movq	%rdi, -1472(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -1480(%rbp)       # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, -1488(%rbp)       # 8-byte Spill
	movq	%r11, %rdx
	movq	-1480(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -1496(%rbp)        # 8-byte Spill
	movq	-1464(%rbp), %r8        # 8-byte Reload
	movq	%r9, -1504(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -1508(%rbp)       # 4-byte Spill
	movl	%r14d, -1512(%rbp)      # 4-byte Spill
	movl	%r15d, -1516(%rbp)      # 4-byte Spill
	movq	%r12, -1528(%rbp)       # 8-byte Spill
	movq	%r13, -1536(%rbp)       # 8-byte Spill
	movq	%rbx, -1544(%rbp)       # 8-byte Spill
	movq	%r11, -1552(%rbp)       # 8-byte Spill
	movq	%r10, -1560(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1440(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1416(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1472(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1432(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1472(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1408(%rbp), %r8        # 8-byte Reload
	movq	-1400(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-1528(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1504(%rbp), %rdi       # 8-byte Reload
	movq	-1560(%rbp), %rsi       # 8-byte Reload
	movq	-1552(%rbp), %rdx       # 8-byte Reload
	movq	-1544(%rbp), %rcx       # 8-byte Reload
	movq	-1400(%rbp), %r8        # 8-byte Reload
	movl	-1512(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1400(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1472(%rbp), %r9        # 8-byte Reload
	movq	-1496(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1508(%rbp), %eax       # 4-byte Reload
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp867:
.Ltmp868:
	.size	rs, .Ltmp868-rs
.Lfunc_end20:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI21_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI21_1:
	.quad	-9223372036854775808    # double -0
	.text
	.globl	tred1
	.align	16, 0x90
	.type	tred1,@function
tred1:                                  # @tred1
	.cfi_startproc
.Lfunc_begin21:
	.loc	5 767 0                 # eispack.c:767:0
# BB#0:
	pushq	%rbp
.Ltmp876:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp877:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp878:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp879:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp880:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp881:
	.cfi_def_cfa_offset 56
	subq	$11128, %rsp            # imm = 0x2B78
.Ltmp882:
	.cfi_def_cfa_offset 11184
.Ltmp883:
	.cfi_offset %rbx, -56
.Ltmp884:
	.cfi_offset %r12, -48
.Ltmp885:
	.cfi_offset %r13, -40
.Ltmp886:
	.cfi_offset %r14, -32
.Ltmp887:
	.cfi_offset %r15, -24
.Ltmp888:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str5997, %r9
	movabsq	$0, %r10
	leaq	.L.str7999, %r11
	movabsq	$2, %rbx
	leaq	.L.str721064, %r14
	movabsq	$3, %r15
	leaq	.L.str711063, %r12
	movabsq	$778, %r13              # imm = 0x30A
	leaq	.L.str571049, %rbp
	movq	%rax, 11120(%rsp)       # 8-byte Spill
	leaq	.L.str4996, %rax
	movq	%rax, 11112(%rsp)       # 8-byte Spill
	leaq	.L.str701062, %rax
	movq	%rsi, 11104(%rsp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 11100(%rsp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 11088(%rsp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 11080(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 11072(%rsp)       # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 11064(%rsp)       # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 11056(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 11048(%rsp)       # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 11040(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 11032(%rsp)       # 8-byte Spill
	leaq	.L.str1601152, %rax
	movq	%rax, 11024(%rsp)       # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 11016(%rsp)       # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 11008(%rsp)       # 8-byte Spill
	leaq	.L.str81000, %rax
	.loc	5 699 0 prologue_end    # eispack.c:699:0
.Ltmp889:
	movl	%esi, 11004(%rsp)       # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 10992(%rsp)       # 8-byte Spill
	movq	11040(%rsp), %rax       # 8-byte Reload
	movl	%edi, 10988(%rsp)       # 4-byte Spill
	movq	%rax, %rdi
	movq	11072(%rsp), %rax       # 8-byte Reload
	movq	%rsi, 10976(%rsp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	10976(%rsp), %rax       # 8-byte Reload
	movq	%rdx, 10968(%rsp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	11120(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10960(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	11064(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10952(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10944(%rsp)        # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%r15, 10936(%rsp)       # 8-byte Spill
	movq	%r12, 10928(%rsp)       # 8-byte Spill
	movq	%rbp, 10920(%rsp)       # 8-byte Spill
	movq	%r13, 10912(%rsp)       # 8-byte Spill
	movq	%r14, 10904(%rsp)       # 8-byte Spill
	movq	%rbx, 10896(%rsp)       # 8-byte Spill
	movq	%r10, 10888(%rsp)       # 8-byte Spill
	movq	%r11, 10880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10992(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11008(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11016(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11040(%rsp), %rdi       # 8-byte Reload
	movq	11032(%rsp), %rsi       # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11024(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tred1:n <- [RSP+10988]
	#DEBUG_VALUE: tred1:a <- [RSP+11104]
	#DEBUG_VALUE: tred1:d <- [RSP+10968]
	#DEBUG_VALUE: tred1:e <- [RSP+10960]
	#DEBUG_VALUE: tred1:e2 <- [RSP+10952]
.Ltmp890:
	#DEBUG_VALUE: tred1:j <- 0
	.loc	5 778 0                 # eispack.c:778:0
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	10944(%rsp), %rcx       # 8-byte Reload
	movq	11048(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	10888(%rsp), %rcx       # 8-byte Reload
	movq	11056(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11072(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	11064(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %esi       # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	11080(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10879(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10912(%rsp), %rdi       # 8-byte Reload
	movq	10920(%rsp), %rsi       # 8-byte Reload
	movq	11112(%rsp), %rdx       # 8-byte Reload
	movq	11088(%rsp), %rcx       # 8-byte Reload
	movq	10896(%rsp), %r8        # 8-byte Reload
	movl	11100(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10936(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10928(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10896(%rsp), %rdi       # 8-byte Reload
	movq	10888(%rsp), %rsi       # 8-byte Reload
	movq	10888(%rsp), %rdx       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10904(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	11120(%rsp), %rdi       # 8-byte Reload
	movq	11120(%rsp), %rsi       # 8-byte Reload
	movq	11120(%rsp), %rcx       # 8-byte Reload
	movq	10944(%rsp), %r8        # 8-byte Reload
	movq	10888(%rsp), %r9        # 8-byte Reload
	movq	10880(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10879(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_1
	jmp	.LBB21_36
.Ltmp891:
.LBB21_1:                               # %.lr.ph58
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str741066, %r8
	leaq	.L.str7999, %rdx
	movabsq	$778, %rdi              # imm = 0x30A
	leaq	.L.str571049, %rsi
	leaq	.L.str711063, %r9
	leaq	.L.str731065, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str91001, %r12
	leaq	.L.str511043, %r13
	movq	%rax, 10864(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10856(%rsp)       # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 10848(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10840(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 780 0                 # eispack.c:780:0
.Ltmp892:
	movq	%rax, 10832(%rsp)       # 8-byte Spill
	movq	10840(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10824(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10816(%rsp)       # 8-byte Spill
	movq	%rdx, 10808(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10800(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10832(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10792(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10784(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10776(%rsp)       # 8-byte Spill
	movl	%ebp, 10772(%rsp)       # 4-byte Spill
	movq	%r15, 10760(%rsp)       # 8-byte Spill
	movq	%r13, 10752(%rsp)       # 8-byte Spill
	movq	%r12, 10744(%rsp)       # 8-byte Spill
	movl	%ebx, 10740(%rsp)       # 4-byte Spill
	movq	%r10, 10728(%rsp)       # 8-byte Spill
	movq	%r11, 10720(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10720(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10856(%rsp), %rdx       # 8-byte Reload
	movq	10864(%rsp), %rcx       # 8-byte Reload
	movq	10848(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10752(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp893:
	.loc	5 778 0                 # eispack.c:778:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10776(%rsp), %rdi       # 8-byte Reload
	movq	10760(%rsp), %rsi       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10744(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10716(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10824(%rsp), %rdi       # 8-byte Reload
	movq	10816(%rsp), %rsi       # 8-byte Reload
	movq	10784(%rsp), %rdx       # 8-byte Reload
	movq	10728(%rsp), %rcx       # 8-byte Reload
	movq	10720(%rsp), %r8        # 8-byte Reload
	movl	10740(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10800(%rsp), %rdi       # 8-byte Reload
	movq	10864(%rsp), %rsi       # 8-byte Reload
	movq	10864(%rsp), %rdx       # 8-byte Reload
	movq	10800(%rsp), %rcx       # 8-byte Reload
	movq	10792(%rsp), %r8        # 8-byte Reload
	movq	10864(%rsp), %r9        # 8-byte Reload
	movq	10808(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10864(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10704(%rsp)       # 8-byte Spill
	jmp	.LBB21_4
.Ltmp894:
.LBB21_2:                               # %.preheader53
	movabsq	$1, %rax
	leaq	.L.str111003, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721064, %r8
	movabsq	$3, %r9
	leaq	.L.str771069, %r10
	movabsq	$783, %r11              # imm = 0x30F
	leaq	.L.str571049, %rbx
	leaq	.L.str751067, %r14
	leaq	.L.str761068, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10696(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10688(%rsp)       # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 10680(%rsp)       # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 10672(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 783 0                 # eispack.c:783:0
.Ltmp895:
	movq	%rdi, 10664(%rsp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 10656(%rsp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 10648(%rsp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 10640(%rsp)       # 8-byte Spill
	movq	%r8, 10632(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10624(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10616(%rsp)       # 8-byte Spill
	movq	%r15, 10608(%rsp)       # 8-byte Spill
	movl	%ebp, 10604(%rsp)       # 4-byte Spill
	movl	%r12d, 10600(%rsp)      # 4-byte Spill
	movq	%r13, 10592(%rsp)       # 8-byte Spill
	movq	%rbx, 10584(%rsp)       # 8-byte Spill
	movq	%r11, 10576(%rsp)       # 8-byte Spill
	movq	%r10, 10568(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10648(%rsp), %rcx       # 8-byte Reload
	movq	10672(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10688(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10680(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	10592(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 10567(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	10576(%rsp), %rdi       # 8-byte Reload
	movq	10584(%rsp), %rsi       # 8-byte Reload
	movq	10616(%rsp), %rdx       # 8-byte Reload
	movq	10608(%rsp), %rcx       # 8-byte Reload
	movq	10664(%rsp), %r8        # 8-byte Reload
	movl	10604(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10624(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10568(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10664(%rsp), %rdi       # 8-byte Reload
	movq	10648(%rsp), %rsi       # 8-byte Reload
	movq	10648(%rsp), %rdx       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10632(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10696(%rsp), %rdi       # 8-byte Reload
	movq	10696(%rsp), %rsi       # 8-byte Reload
	movq	10696(%rsp), %rcx       # 8-byte Reload
	movq	10640(%rsp), %r8        # 8-byte Reload
	movq	10648(%rsp), %r9        # 8-byte Reload
	movq	10656(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	10567(%rsp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_3
	jmp	.LBB21_36
.LBB21_3:                               # %.lr.ph55
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str791071, %r8
	leaq	.L.str7999, %rdx
	movabsq	$783, %rdi              # imm = 0x30F
	leaq	.L.str571049, %rsi
	leaq	.L.str771069, %r9
	leaq	.L.str781070, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str131005, %r12
	leaq	.L.str511043, %r13
	movq	%rax, 10552(%rsp)       # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 10544(%rsp)       # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 10536(%rsp)       # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 10528(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 785 0                 # eispack.c:785:0
.Ltmp896:
	movq	%rax, 10520(%rsp)       # 8-byte Spill
	movq	10528(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10512(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10504(%rsp)       # 8-byte Spill
	movq	%rdx, 10496(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 10488(%rsp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	10520(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10480(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10472(%rsp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 10464(%rsp)       # 8-byte Spill
	movl	%ebp, 10460(%rsp)       # 4-byte Spill
	movq	%r15, 10448(%rsp)       # 8-byte Spill
	movq	%r13, 10440(%rsp)       # 8-byte Spill
	movq	%r12, 10432(%rsp)       # 8-byte Spill
	movl	%ebx, 10428(%rsp)       # 4-byte Spill
	movq	%r10, 10416(%rsp)       # 8-byte Spill
	movq	%r11, 10408(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10408(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10544(%rsp), %rdx       # 8-byte Reload
	movq	10552(%rsp), %rcx       # 8-byte Reload
	movq	10536(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10440(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	addl	$4294967295, %ebx       # imm = 0xFFFFFFFF
.Ltmp897:
	.loc	5 783 0                 # eispack.c:783:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	10464(%rsp), %rdi       # 8-byte Reload
	movq	10448(%rsp), %rsi       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10432(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 10404(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10512(%rsp), %rdi       # 8-byte Reload
	movq	10504(%rsp), %rsi       # 8-byte Reload
	movq	10472(%rsp), %rdx       # 8-byte Reload
	movq	10416(%rsp), %rcx       # 8-byte Reload
	movq	10408(%rsp), %r8        # 8-byte Reload
	movl	10428(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10488(%rsp), %rdi       # 8-byte Reload
	movq	10552(%rsp), %rsi       # 8-byte Reload
	movq	10552(%rsp), %rdx       # 8-byte Reload
	movq	10488(%rsp), %rcx       # 8-byte Reload
	movq	10480(%rsp), %r8        # 8-byte Reload
	movq	10552(%rsp), %r9        # 8-byte Reload
	movq	10496(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10552(%rsp), %rax       # 8-byte Reload
	movq	%rax, 10392(%rsp)       # 8-byte Spill
	jmp	.LBB21_7
.Ltmp898:
.LBB21_4:                               # =>This Inner Loop Header: Depth=1
	movq	10704(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str851077, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str741066, %r9
	movabsq	$3, %r10
	leaq	.L.str751067, %r11
	movabsq	$778, %rbx              # imm = 0x30A
	leaq	.L.str571049, %r14
	leaq	.L.str861078, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 10384(%rsp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 10376(%rsp)       # 8-byte Spill
	leaq	.L.str841076, %rax
	movq	%rax, 10368(%rsp)       # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 10360(%rsp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 10352(%rsp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 10344(%rsp)       # 8-byte Spill
	leaq	.L.str811073, %rax
	movq	%rax, 10336(%rsp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 10328(%rsp)       # 8-byte Spill
	leaq	.L.str801072, %rax
	movq	%rax, 10320(%rsp)       # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 10312(%rsp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 10304(%rsp)       # 8-byte Spill
	leaq	.L.str261018, %rax
	movq	%rax, 10296(%rsp)       # 8-byte Spill
	leaq	.L.str321024, %rax
	movq	%rax, 10288(%rsp)       # 8-byte Spill
	movabsq	$780, %rax              # imm = 0x30C
	movq	%rax, 10280(%rsp)       # 8-byte Spill
	leaq	.L.str831075, %rax
	movq	%rax, 10272(%rsp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 10264(%rsp)       # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 10256(%rsp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 10248(%rsp)       # 8-byte Spill
	leaq	.L.str231015, %rax
	movq	%rax, 10240(%rsp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 10232(%rsp)       # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 10224(%rsp)       # 8-byte Spill
	leaq	.L.str221014, %rax
	movq	%rax, 10216(%rsp)       # 8-byte Spill
	leaq	.L.str211013, %rax
	movq	%rax, 10208(%rsp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 10200(%rsp)       # 8-byte Spill
	leaq	.L.str91001, %rax
	movq	%rax, 10192(%rsp)       # 8-byte Spill
	leaq	.L.str201012, %rax
	movq	%rax, 10184(%rsp)       # 8-byte Spill
	leaq	.L.str181010, %rax
	movq	%rax, 10176(%rsp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 10168(%rsp)       # 8-byte Spill
	leaq	.L.str711063, %rax
	movq	%rax, 10160(%rsp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 10152(%rsp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 780 0                 # eispack.c:780:0
.Ltmp899:
	movq	%rax, 10144(%rsp)       # 8-byte Spill
	movq	10152(%rsp), %rax       # 8-byte Reload
	movq	%rdi, 10136(%rsp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 10128(%rsp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 10120(%rsp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	10320(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10112(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10144(%rsp), %rax       # 8-byte Reload
	movq	%r8, 10104(%rsp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 10096(%rsp)        # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 10088(%rsp)       # 8-byte Spill
	movl	%ebp, 10084(%rsp)       # 4-byte Spill
	movl	%r12d, 10080(%rsp)      # 4-byte Spill
	movq	%r13, 10072(%rsp)       # 8-byte Spill
	movq	%r14, 10064(%rsp)       # 8-byte Spill
	movq	%rbx, 10056(%rsp)       # 8-byte Spill
	movq	%r10, 10048(%rsp)       # 8-byte Spill
	movq	%r11, 10040(%rsp)       # 8-byte Spill
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10096(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10112(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10160(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10176(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 10036(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10184(%rsp), %rcx       # 8-byte Reload
	movq	10168(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10176(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10036(%rsp), %ebp       # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10032(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10208(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10032(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10184(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10192(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10716(%rsp), %ebp       # 4-byte Reload
	movl	10032(%rsp), %r12d      # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 10028(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10216(%rsp), %rcx       # 8-byte Reload
	movq	10200(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10028(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10208(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10028(%rsp), %ebp       # 4-byte Reload
	movslq	%ebp, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 10016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_int
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10240(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10016(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10216(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10224(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10016(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 10008(%rsp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10232(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10008(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10240(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	10016(%rsp), %rcx       # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, 10000(%rsp)      # 8-byte Spill
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10288(%rsp), %rcx       # 8-byte Reload
	movq	10248(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10256(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10384(%rsp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	10112(%rsp), %rax       # 8-byte Reload
	movq	%rcx, 9992(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	10280(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10272(%rsp), %rcx       # 8-byte Reload
	movq	10264(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9992(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10288(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10296(%rsp), %rcx       # 8-byte Reload
	movq	10128(%rsp), %r8        # 8-byte Reload
	movq	10136(%rsp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	10384(%rsp), %rcx       # 8-byte Reload
	vmovsd	10000(%rsp), %xmm0      # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp900:
	.loc	5 778 0                 # eispack.c:778:0
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10336(%rsp), %rcx       # 8-byte Reload
	movq	10304(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rdx       # 8-byte Reload
	movq	10128(%rsp), %rcx       # 8-byte Reload
	movq	10312(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	10384(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10320(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	10384(%rsp), %rax       # 8-byte Reload
	addq	$1, %rax
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9984(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10368(%rsp), %rcx       # 8-byte Reload
	movq	10328(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10344(%rsp), %rsi       # 8-byte Reload
	movq	9984(%rsp), %rdx        # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10336(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9984(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9980(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10120(%rsp), %rcx       # 8-byte Reload
	movq	10352(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10360(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10376(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10368(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9980(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	10072(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9979(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	10056(%rsp), %rdi       # 8-byte Reload
	movq	10064(%rsp), %rsi       # 8-byte Reload
	movq	10096(%rsp), %rdx       # 8-byte Reload
	movq	10088(%rsp), %rcx       # 8-byte Reload
	movq	10104(%rsp), %r8        # 8-byte Reload
	movl	10084(%rsp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	10048(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10040(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	10104(%rsp), %rdi       # 8-byte Reload
	movq	10128(%rsp), %rsi       # 8-byte Reload
	movq	10128(%rsp), %rdx       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10096(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	10112(%rsp), %rdi       # 8-byte Reload
	movq	10112(%rsp), %rsi       # 8-byte Reload
	movq	10112(%rsp), %rcx       # 8-byte Reload
	movq	10120(%rsp), %r8        # 8-byte Reload
	movq	10128(%rsp), %r9        # 8-byte Reload
	movq	10136(%rsp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9979(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10704(%rsp)       # 8-byte Spill
	jne	.LBB21_2
	jmp	.LBB21_4
.Ltmp901:
.LBB21_5:                               # %.preheader47
	movabsq	$1, %rax
	leaq	.L.str331025, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721064, %r8
	movabsq	$3, %r9
	leaq	.L.str891081, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str571049, %rbx
	leaq	.L.str871079, %r14
	leaq	.L.str881080, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9968(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9960(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 9952(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 9944(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 788 0                 # eispack.c:788:0
.Ltmp902:
	movq	%rdi, 9936(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9928(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9920(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9912(%rsp)        # 8-byte Spill
	movq	%r8, 9904(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9896(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9888(%rsp)        # 8-byte Spill
	movq	%r15, 9880(%rsp)        # 8-byte Spill
	movl	%ebp, 9876(%rsp)        # 4-byte Spill
	movl	%r12d, 9872(%rsp)       # 4-byte Spill
	movq	%r13, 9864(%rsp)        # 8-byte Spill
	movq	%rbx, 9856(%rsp)        # 8-byte Spill
	movq	%r11, 9848(%rsp)        # 8-byte Spill
	movq	%r10, 9840(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9920(%rsp), %rcx        # 8-byte Reload
	movq	9944(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9960(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9952(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebp       # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9864(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9839(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9848(%rsp), %rdi        # 8-byte Reload
	movq	9856(%rsp), %rsi        # 8-byte Reload
	movq	9888(%rsp), %rdx        # 8-byte Reload
	movq	9880(%rsp), %rcx        # 8-byte Reload
	movq	9936(%rsp), %r8         # 8-byte Reload
	movl	9876(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9896(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9840(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9936(%rsp), %rdi        # 8-byte Reload
	movq	9920(%rsp), %rsi        # 8-byte Reload
	movq	9920(%rsp), %rdx        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9904(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9968(%rsp), %rdi        # 8-byte Reload
	movq	9968(%rsp), %rsi        # 8-byte Reload
	movq	9968(%rsp), %rcx        # 8-byte Reload
	movq	9912(%rsp), %r8         # 8-byte Reload
	movq	9920(%rsp), %r9         # 8-byte Reload
	movq	9928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9839(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_6
	jmp	.LBB21_36
.LBB21_6:                               # %.lr.ph51
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str911083, %r8
	leaq	.L.str7999, %rdx
	movabsq	$788, %rdi              # imm = 0x314
	leaq	.L.str571049, %rsi
	leaq	.L.str891081, %r9
	leaq	.L.str901082, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str341026, %r12
	movabsq	$32, %r13
	movq	%rax, 9824(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 9816(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9808(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9800(%rsp)        # 8-byte Spill
	movq	9808(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9792(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9784(%rsp)        # 8-byte Spill
	movq	%rdx, 9776(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 9768(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	9800(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9760(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9752(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9744(%rsp)        # 8-byte Spill
	movl	%ebp, 9740(%rsp)        # 4-byte Spill
	movq	%r15, 9728(%rsp)        # 8-byte Spill
	movq	%r13, 9720(%rsp)        # 8-byte Spill
	movq	%r12, 9712(%rsp)        # 8-byte Spill
	movl	%ebx, 9708(%rsp)        # 4-byte Spill
	movq	%r10, 9696(%rsp)        # 8-byte Spill
	movq	%r11, 9688(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9720(%rsp), %rsi        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9816(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	movq	9744(%rsp), %rdi        # 8-byte Reload
	movq	9728(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9712(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9680(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9792(%rsp), %rdi        # 8-byte Reload
	movq	9784(%rsp), %rsi        # 8-byte Reload
	movq	9752(%rsp), %rdx        # 8-byte Reload
	movq	9696(%rsp), %rcx        # 8-byte Reload
	movq	9688(%rsp), %r8         # 8-byte Reload
	movl	9708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9824(%rsp), %rdi        # 8-byte Reload
	movq	9768(%rsp), %rsi        # 8-byte Reload
	movq	9768(%rsp), %rdx        # 8-byte Reload
	movq	9824(%rsp), %rcx        # 8-byte Reload
	movq	9760(%rsp), %r8         # 8-byte Reload
	movq	9768(%rsp), %r9         # 8-byte Reload
	movq	9776(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9680(%rsp), %rax        # 8-byte Reload
	movl	10988(%rsp), %ebx       # 4-byte Reload
	movl	10988(%rsp), %ebp       # 4-byte Reload
	movq	%rax, 9672(%rsp)        # 8-byte Spill
	movl	%ebx, 9668(%rsp)        # 4-byte Spill
	movl	%ebp, 9664(%rsp)        # 4-byte Spill
	jmp	.LBB21_8
.Ltmp903:
.LBB21_7:                               # =>This Inner Loop Header: Depth=1
	movq	10392(%rsp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1011093, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str791071, %r9
	movabsq	$3, %r10
	leaq	.L.str871079, %r11
	movabsq	$783, %rbx              # imm = 0x30F
	leaq	.L.str571049, %r14
	leaq	.L.str1021094, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9656(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9648(%rsp)        # 8-byte Spill
	leaq	.L.str1001092, %rax
	movq	%rax, 9640(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 9632(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 9624(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 9616(%rsp)        # 8-byte Spill
	leaq	.L.str931085, %rax
	movq	%rax, 9608(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 9600(%rsp)        # 8-byte Spill
	leaq	.L.str921084, %rax
	movq	%rax, 9592(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 9584(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 9576(%rsp)        # 8-byte Spill
	leaq	.L.str951087, %rax
	movq	%rax, 9568(%rsp)        # 8-byte Spill
	leaq	.L.str981090, %rax
	movq	%rax, 9560(%rsp)        # 8-byte Spill
	movabsq	$785, %rax              # imm = 0x311
	movq	%rax, 9552(%rsp)        # 8-byte Spill
	leaq	.L.str991091, %rax
	movq	%rax, 9544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 9536(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 9528(%rsp)        # 8-byte Spill
	leaq	.L.str971089, %rax
	movq	%rax, 9520(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 9512(%rsp)        # 8-byte Spill
	leaq	.L.str961088, %rax
	movq	%rax, 9504(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 9496(%rsp)        # 8-byte Spill
	leaq	.L.str131005, %rax
	movq	%rax, 9488(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 9480(%rsp)        # 8-byte Spill
	leaq	.L.str941086, %rax
	movq	%rax, 9472(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 9464(%rsp)        # 8-byte Spill
	leaq	.L.str371029, %rax
	movq	%rax, 9456(%rsp)        # 8-byte Spill
	leaq	.L.str271019, %rax
	movq	%rax, 9448(%rsp)        # 8-byte Spill
	leaq	.L.str311023, %rax
	movq	%rax, 9440(%rsp)        # 8-byte Spill
	leaq	.L.str351027, %rax
	movq	%rax, 9432(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 9424(%rsp)        # 8-byte Spill
	leaq	.L.str771069, %rax
	movq	%rax, 9416(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 9408(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 785 0                 # eispack.c:785:0
.Ltmp904:
	movq	%rax, 9400(%rsp)        # 8-byte Spill
	movq	9408(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 9392(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 9384(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 9376(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	9592(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9368(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9400(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 9344(%rsp)        # 8-byte Spill
	movl	%ebp, 9340(%rsp)        # 4-byte Spill
	movl	%r12d, 9336(%rsp)       # 4-byte Spill
	movq	%r13, 9328(%rsp)        # 8-byte Spill
	movq	%r14, 9320(%rsp)        # 8-byte Spill
	movq	%rbx, 9312(%rsp)        # 8-byte Spill
	movq	%r10, 9304(%rsp)        # 8-byte Spill
	movq	%r11, 9296(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9352(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9368(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9416(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9432(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9292(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9480(%rsp), %rcx        # 8-byte Reload
	movq	9424(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9432(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9292(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9288(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9440(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9448(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9284(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9440(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9288(%rsp), %ebp        # 4-byte Reload
	movl	9284(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9280(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9456(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9280(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9448(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9280(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9272(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9472(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9272(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9456(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9272(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9464(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9264(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9472(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9272(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 9256(%rsp)       # 8-byte Spill
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9504(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9288(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9480(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9488(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	10404(%rsp), %ebp       # 4-byte Reload
	movl	9288(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 9252(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9520(%rsp), %rcx        # 8-byte Reload
	movq	9496(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9252(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9504(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9252(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9560(%rsp), %rcx        # 8-byte Reload
	movq	9512(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9240(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9520(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9528(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9240(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9552(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9544(%rsp), %rcx        # 8-byte Reload
	movq	9536(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9232(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9560(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9568(%rsp), %rcx        # 8-byte Reload
	movq	9384(%rsp), %r8         # 8-byte Reload
	movq	9392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	9240(%rsp), %rcx        # 8-byte Reload
	vmovsd	9256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp905:
	.loc	5 783 0                 # eispack.c:783:0
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9608(%rsp), %rcx        # 8-byte Reload
	movq	9576(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rdx        # 8-byte Reload
	movq	9384(%rsp), %rcx        # 8-byte Reload
	movq	9584(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9656(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9592(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9656(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 9224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9640(%rsp), %rcx        # 8-byte Reload
	movq	9600(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9616(%rsp), %rsi        # 8-byte Reload
	movq	9224(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9608(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	9224(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 9220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9376(%rsp), %rcx        # 8-byte Reload
	movq	9624(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9632(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9648(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9640(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9220(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9219(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9312(%rsp), %rdi        # 8-byte Reload
	movq	9320(%rsp), %rsi        # 8-byte Reload
	movq	9352(%rsp), %rdx        # 8-byte Reload
	movq	9344(%rsp), %rcx        # 8-byte Reload
	movq	9360(%rsp), %r8         # 8-byte Reload
	movl	9340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9296(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9360(%rsp), %rdi        # 8-byte Reload
	movq	9384(%rsp), %rsi        # 8-byte Reload
	movq	9384(%rsp), %rdx        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9352(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9368(%rsp), %rdi        # 8-byte Reload
	movq	9368(%rsp), %rsi        # 8-byte Reload
	movq	9368(%rsp), %rcx        # 8-byte Reload
	movq	9376(%rsp), %r8         # 8-byte Reload
	movq	9384(%rsp), %r9         # 8-byte Reload
	movq	9392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9219(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9224(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 10392(%rsp)       # 8-byte Spill
	jne	.LBB21_5
	jmp	.LBB21_7
.Ltmp906:
.LBB21_8:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB21_9 Depth 2
                                        #     Child Loop BB21_13 Depth 2
                                        #     Child Loop BB21_16 Depth 2
                                        #     Child Loop BB21_18 Depth 2
                                        #     Child Loop BB21_20 Depth 2
                                        #     Child Loop BB21_22 Depth 2
                                        #       Child Loop BB21_24 Depth 3
                                        #     Child Loop BB21_27 Depth 2
                                        #     Child Loop BB21_29 Depth 2
                                        #     Child Loop BB21_31 Depth 2
                                        #       Child Loop BB21_32 Depth 3
                                        #     Child Loop BB21_35 Depth 2
	movl	9664(%rsp), %eax        # 4-byte Reload
	movl	9668(%rsp), %ecx        # 4-byte Reload
	movq	9672(%rsp), %rdx        # 8-byte Reload
	movabsq	$0, %rsi
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdi
	leaq	.L.str1111103, %r8
	leaq	.L.str7999, %r9
	movabsq	$2, %r10
	leaq	.L.str1141106, %r11
	movabsq	$3, %rbx
	leaq	.L.str1131105, %r14
	movabsq	$796, %r15              # imm = 0x31C
	leaq	.L.str571049, %r12
	leaq	.L.str911083, %r13
	leaq	.L.str1121104, %rbp
	movl	%eax, 9212(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 9208(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 9200(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 9192(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 9184(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rdx
	movq	%rdx, 9176(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rdx
	movq	%rdx, 9168(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 9160(%rsp)        # 8-byte Spill
	leaq	.L.str1081100, %rdx
	movq	%rdx, 9152(%rsp)        # 8-byte Spill
	movabsq	$4294967294, %rdx       # imm = 0xFFFFFFFE
	movq	%rdx, 9144(%rsp)        # 8-byte Spill
	movabsq	$790, %rdx              # imm = 0x316
	movq	%rdx, 9136(%rsp)        # 8-byte Spill
	movabsq	$8, %rdx
	movq	%rdx, 9128(%rsp)        # 8-byte Spill
	leaq	.L.str1091101, %rdx
	movq	%rdx, 9120(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rdx       # imm = 0xFFFFFFFF
	movq	%rdx, 9112(%rsp)        # 8-byte Spill
	movabsq	$788, %rdx              # imm = 0x314
	movq	%rdx, 9104(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rdx
	movq	%rdx, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str1031095, %rdx
	movq	%rdx, 9080(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 9072(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rdx
	movq	%rdx, 9064(%rsp)        # 8-byte Spill
	leaq	.L.str1061098, %rdx
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	leaq	.L.str891081, %rdx
	movq	%rdx, 9048(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rdx
	movq	%rdx, 9040(%rsp)        # 8-byte Spill
	leaq	.L.str1051097, %rdx
	movq	%rdx, 9032(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 9024(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rdx
	.loc	5 788 0                 # eispack.c:788:0
.Ltmp907:
	movq	%rdx, 9016(%rsp)        # 8-byte Spill
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 9008(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 9000(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 8992(%rsp)         # 8-byte Spill
	movq	9080(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 8988(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	%eax, 8984(%rsp)        # 4-byte Spill
	movl	9208(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8976(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8968(%rsp)        # 8-byte Spill
	movq	%r12, 8960(%rsp)        # 8-byte Spill
	movq	%r13, 8952(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8944(%rsp)       # 8-byte Spill
	movq	%rbp, 8936(%rsp)        # 8-byte Spill
	movq	%r14, 8928(%rsp)        # 8-byte Spill
	movq	%rbx, 8920(%rsp)        # 8-byte Spill
	movq	%r10, 8912(%rsp)        # 8-byte Spill
	movq	%r11, 8904(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9016(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9152(%rsp), %rcx        # 8-byte Reload
	movq	9024(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	10988(%rsp), %eax       # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9008(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	9048(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9064(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9056(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8988(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9064(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8900(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9088(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9072(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9200(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9200(%rsp), %rcx        # 8-byte Reload
	addq	$-1, %rcx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	9008(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9120(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9112(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	.loc	5 790 0                 # eispack.c:790:0
.Ltmp908:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8884(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	9136(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	9176(%rsp), %rcx        # 8-byte Reload
	movq	9128(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9144(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9212(%rsp), %eax        # 4-byte Reload
	addl	$4294967294, %eax       # imm = 0xFFFFFFFE
	movl	%eax, %esi
	movl	%esi, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8880(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp909:
	#DEBUG_VALUE: tred1:l <- [RSP+8880]
	#DEBUG_VALUE: tred1:h <- 0.000000e+00
	#DEBUG_VALUE: tred1:scale <- 0.000000e+00
	#DEBUG_VALUE: tred1:k <- 0
	.loc	5 796 0                 # eispack.c:796:0
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8992(%rsp), %rcx        # 8-byte Reload
	movq	9160(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9000(%rsp), %rcx        # 8-byte Reload
	movq	9168(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	9176(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9192(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8879(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8968(%rsp), %rdi        # 8-byte Reload
	movq	8960(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rdx        # 8-byte Reload
	movq	8936(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movl	9208(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8920(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8928(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8912(%rsp), %rdi        # 8-byte Reload
	movq	9000(%rsp), %rsi        # 8-byte Reload
	movq	9000(%rsp), %rdx        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9008(%rsp), %rdi        # 8-byte Reload
	movq	9008(%rsp), %rsi        # 8-byte Reload
	movq	9008(%rsp), %rcx        # 8-byte Reload
	movq	8992(%rsp), %r8         # 8-byte Reload
	movq	9000(%rsp), %r9         # 8-byte Reload
	movq	8976(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8879(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9000(%rsp), %rcx        # 8-byte Reload
	vmovsd	8944(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB21_14
.Ltmp910:
.LBB21_9:                               # %.lr.ph
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	8856(%rsp), %xmm0       # 8-byte Reload
	movq	8864(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231115, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str1141106, %r9
	movabsq	$3, %r10
	leaq	.L.str1251117, %r11
	movabsq	$796, %rbx              # imm = 0x31C
	leaq	.L.str571049, %r14
	leaq	.L.str1241116, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8848(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8840(%rsp)        # 8-byte Spill
	leaq	.L.str1221114, %rax
	movq	%rax, 8832(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 8824(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8816(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8808(%rsp)        # 8-byte Spill
	leaq	.L.str1161108, %rax
	movq	%rax, 8800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8792(%rsp)        # 8-byte Spill
	leaq	.L.str1151107, %rax
	movq	%rax, 8784(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 8776(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8768(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 8760(%rsp)        # 8-byte Spill
	leaq	.L.str1171109, %rax
	movq	%rax, 8752(%rsp)        # 8-byte Spill
	leaq	.L.str1211113, %rax
	movq	%rax, 8744(%rsp)        # 8-byte Spill
	movabsq	$798, %rax              # imm = 0x31E
	movq	%rax, 8736(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 8728(%rsp)        # 8-byte Spill
	leaq	.L.str1201112, %rax
	movq	%rax, 8720(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 8712(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rax
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str1191111, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str911083, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 798 0                 # eispack.c:798:0
.Ltmp911:
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	movq	8648(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8632(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8624(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8616(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8784(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8600(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8592(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8584(%rsp)       # 8-byte Spill
	movl	%ebp, 8580(%rsp)        # 4-byte Spill
	movl	%r12d, 8576(%rsp)       # 4-byte Spill
	movq	%r13, 8568(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 8560(%rsp)       # 8-byte Spill
	movq	%r15, 8552(%rsp)        # 8-byte Spill
	movq	%r14, 8544(%rsp)        # 8-byte Spill
	movq	%r10, 8536(%rsp)        # 8-byte Spill
	movq	%r11, 8528(%rsp)        # 8-byte Spill
	movq	%rbx, 8520(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8648(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8560(%rsp), %xmm0       # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8656(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8760(%rsp), %r8         # 8-byte Reload
	movq	8608(%rsp), %r9         # 8-byte Reload
	movq	8592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8664(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8848(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8512(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8848(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8504(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8696(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8704(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8504(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8720(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI21_0(%rip), %xmm0
	vmovsd	8504(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8496(%rsp)       # 8-byte Spill
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8728(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8496(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8752(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8584(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8760(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movq	8632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 8488(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp912:
	#DEBUG_VALUE: tred1:scale <- [RSP+8488]
	.loc	5 796 0                 # eispack.c:796:0
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8800(%rsp), %rcx        # 8-byte Reload
	movq	8768(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rdx        # 8-byte Reload
	movq	8624(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8848(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8784(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8848(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8832(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8808(%rsp), %rsi        # 8-byte Reload
	movq	8480(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8800(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8476(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8816(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8476(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8568(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8475(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8520(%rsp), %rdi        # 8-byte Reload
	movq	8544(%rsp), %rsi        # 8-byte Reload
	movq	8592(%rsp), %rdx        # 8-byte Reload
	movq	8552(%rsp), %rcx        # 8-byte Reload
	movq	8600(%rsp), %r8         # 8-byte Reload
	movl	8580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8536(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8528(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8624(%rsp), %rsi        # 8-byte Reload
	movq	8624(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8592(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8608(%rsp), %rdi        # 8-byte Reload
	movq	8608(%rsp), %rsi        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8616(%rsp), %r8         # 8-byte Reload
	movq	8624(%rsp), %r9         # 8-byte Reload
	movq	8632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8475(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8480(%rsp), %rcx        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8856(%rsp)       # 8-byte Spill
	jne	.LBB21_10
	jmp	.LBB21_9
.Ltmp913:
.LBB21_10:                              # %._crit_edge
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str1261118, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1301122, %r8
	movabsq	$3, %r9
	leaq	.L.str1291121, %r10
	movabsq	$801, %r11              # imm = 0x321
	leaq	.L.str571049, %rbx
	leaq	.L.str1251117, %r14
	leaq	.L.str1281120, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8464(%rsp)        # 8-byte Spill
	leaq	.L.str1271119, %rax
	movq	%rax, 8456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8448(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 8440(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 8432(%rsp)        # 8-byte Spill
	movabsq	$803, %rax              # imm = 0x323
	movq	%rax, 8424(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8416(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8408(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 8400(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	.loc	5 801 0                 # eispack.c:801:0
.Ltmp914:
	movq	%rdi, 8392(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8384(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8376(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8368(%rsp)        # 8-byte Spill
	movq	%r8, 8360(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8352(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8344(%rsp)        # 8-byte Spill
	movl	%ebp, 8340(%rsp)        # 4-byte Spill
	movl	%r12d, 8336(%rsp)       # 4-byte Spill
	movq	%r13, 8328(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8320(%rsp)       # 8-byte Spill
	movq	%r14, 8312(%rsp)        # 8-byte Spill
	movq	%rbx, 8304(%rsp)        # 8-byte Spill
	movq	%r10, 8296(%rsp)        # 8-byte Spill
	movq	%r11, 8288(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8320(%rsp), %xmm0       # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8432(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8408(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	8464(%rsp), %rdx        # 8-byte Reload
	movq	8400(%rsp), %rcx        # 8-byte Reload
	movq	8376(%rsp), %r8         # 8-byte Reload
	movq	8384(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8320(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	.loc	5 803 0                 # eispack.c:803:0
.Ltmp915:
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %r8         # 8-byte Reload
	movb	%cl, 8287(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8456(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	8432(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8448(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8440(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
.Ltmp916:
	.loc	5 801 0                 # eispack.c:801:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	8328(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8456(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8286(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8288(%rsp), %rdi        # 8-byte Reload
	movq	8304(%rsp), %rsi        # 8-byte Reload
	movq	8312(%rsp), %rdx        # 8-byte Reload
	movq	8344(%rsp), %rcx        # 8-byte Reload
	movq	8392(%rsp), %r8         # 8-byte Reload
	movl	8340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8352(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8296(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8392(%rsp), %rdi        # 8-byte Reload
	movq	8376(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8464(%rsp), %rdi        # 8-byte Reload
	movq	8464(%rsp), %rsi        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8368(%rsp), %r8         # 8-byte Reload
	movq	8376(%rsp), %r9         # 8-byte Reload
	movq	8384(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8287(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB21_11
	jmp	.LBB21_12
.LBB21_11:                              # %.preheader43
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1271119, %r8
	leaq	.L.str7999, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1321124, %rdi
	movabsq	$3, %r9
	leaq	.L.str1131105, %r10
	movabsq	$803, %r11              # imm = 0x323
	leaq	.L.str571049, %rbx
	leaq	.L.str1291121, %r14
	leaq	.L.str1311123, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	5 803 0                 # eispack.c:803:0
.Ltmp917:
	movq	%rdi, 8272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8248(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8264(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8240(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 8224(%rsp)        # 8-byte Spill
	movq	%r10, 8216(%rsp)        # 8-byte Spill
	movl	%r12d, 8212(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8232(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8216(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8264(%rsp), %rdi        # 8-byte Reload
	movq	8224(%rsp), %rsi        # 8-byte Reload
	movq	8224(%rsp), %rdx        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8248(%rsp), %rdi        # 8-byte Reload
	movq	8248(%rsp), %rsi        # 8-byte Reload
	movq	8248(%rsp), %rcx        # 8-byte Reload
	movq	8240(%rsp), %r8         # 8-byte Reload
	movq	8224(%rsp), %r9         # 8-byte Reload
	movq	8256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8224(%rsp), %rax        # 8-byte Reload
	movq	%rax, 8200(%rsp)        # 8-byte Spill
	jne	.LBB21_14
	jmp	.LBB21_13
.Ltmp918:
.LBB21_12:                              # %.preheader
                                        #   in Loop: Header=BB21_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1271119, %r8
	leaq	.L.str7999, %rdx
	movabsq	$2, %rsi
	leaq	.L.str1351127, %rdi
	movabsq	$3, %r9
	leaq	.L.str1341126, %r10
	movabsq	$815, %r11              # imm = 0x32F
	leaq	.L.str571049, %rbx
	leaq	.L.str1301122, %r14
	leaq	.L.str1331125, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	5 815 0                 # eispack.c:815:0
.Ltmp919:
	movq	%rdi, 8192(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 8184(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 8176(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 8168(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	8184(%rsp), %r11        # 8-byte Reload
	movq	%r8, 8160(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 8152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 8144(%rsp)       # 8-byte Spill
	movq	%rax, 8136(%rsp)        # 8-byte Spill
	movq	%r10, 8128(%rsp)        # 8-byte Spill
	movl	%r12d, 8124(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	8152(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8136(%rsp), %rsi        # 8-byte Reload
	movq	8136(%rsp), %rdx        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8192(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	8168(%rsp), %rdi        # 8-byte Reload
	movq	8168(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rcx        # 8-byte Reload
	movq	8160(%rsp), %r8         # 8-byte Reload
	movq	8136(%rsp), %r9         # 8-byte Reload
	movq	8176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	8286(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	movq	8136(%rsp), %rax        # 8-byte Reload
	vmovsd	8144(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 8112(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
	jmp	.LBB21_16
.Ltmp920:
.LBB21_13:                              # %.lr.ph45
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8200(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1541146, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str1321124, %r9
	movabsq	$3, %r10
	leaq	.L.str1131105, %r11
	movabsq	$803, %rbx              # imm = 0x323
	leaq	.L.str571049, %r14
	leaq	.L.str1551147, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8088(%rsp)        # 8-byte Spill
	leaq	.L.str1531145, %rax
	movq	%rax, 8080(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 8072(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8064(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8056(%rsp)        # 8-byte Spill
	leaq	.L.str1371129, %rax
	movq	%rax, 8048(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8040(%rsp)        # 8-byte Spill
	leaq	.L.str1361128, %rax
	movq	%rax, 8032(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 8024(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str1491141, %rax
	movq	%rax, 8008(%rsp)        # 8-byte Spill
	movabsq	$807, %rax              # imm = 0x327
	movq	%rax, 8000(%rsp)        # 8-byte Spill
	leaq	.L.str1521144, %rax
	movq	%rax, 7992(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str1501142, %rax
	movq	%rax, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str1421134, %rax
	movq	%rax, 7968(%rsp)        # 8-byte Spill
	movabsq	$806, %rax              # imm = 0x326
	movq	%rax, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str1511143, %rax
	movq	%rax, 7952(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7944(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 7936(%rsp)        # 8-byte Spill
	leaq	.L.str1481140, %rax
	movq	%rax, 7928(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7920(%rsp)        # 8-byte Spill
	leaq	.L.str1471139, %rax
	movq	%rax, 7912(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 7904(%rsp)        # 8-byte Spill
	leaq	.L.str1391131, %rax
	movq	%rax, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str1461138, %rax
	movq	%rax, 7888(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str1431135, %rax
	movq	%rax, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str1441136, %rax
	movq	%rax, 7864(%rsp)        # 8-byte Spill
	movabsq	$805, %rax              # imm = 0x325
	movq	%rax, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str1451137, %rax
	movq	%rax, 7848(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str1411133, %rax
	movq	%rax, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str1401132, %rax
	movq	%rax, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str1381130, %rax
	movq	%rax, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 7800(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str1291121, %rax
	movq	%rax, 7784(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7776(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 805 0                 # eispack.c:805:0
.Ltmp921:
	movq	%rax, 7768(%rsp)        # 8-byte Spill
	movq	7776(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7760(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7752(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 7744(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7768(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7728(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7720(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 7716(%rsp)        # 4-byte Spill
	movl	%r12d, 7712(%rsp)       # 4-byte Spill
	movq	%r13, 7704(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7696(%rsp)       # 8-byte Spill
	movq	%r15, 7688(%rsp)        # 8-byte Spill
	movq	%r14, 7680(%rsp)        # 8-byte Spill
	movq	%r10, 7672(%rsp)        # 8-byte Spill
	movq	%r11, 7664(%rsp)        # 8-byte Spill
	movq	%rbx, 7656(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7736(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7720(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7652(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7896(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7800(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7808(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7652(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7648(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7832(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7644(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7644(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7632(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7624(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7616(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7840(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7856(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7872(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	8096(%rsp), %rcx        # 8-byte Reload
	vmovsd	7616(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 806 0                 # eispack.c:806:0
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7604(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7912(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7604(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7648(%rsp), %ebp        # 4-byte Reload
	movl	7604(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 7600(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7928(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7600(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7912(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7600(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7592(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8008(%rsp), %rcx        # 8-byte Reload
	movq	7920(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7592(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7936(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7592(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7736(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7944(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7576(%rsp)       # 8-byte Spill
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7960(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7624(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7968(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7632(%rsp), %rcx        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 807 0                 # eispack.c:807:0
	movq	8000(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7992(%rsp), %rcx        # 8-byte Reload
	movq	7984(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7584(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8008(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	8024(%rsp), %rcx        # 8-byte Reload
	movq	7752(%rsp), %r8         # 8-byte Reload
	movq	7760(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	7592(%rsp), %rcx        # 8-byte Reload
	vmovsd	7696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp922:
	.loc	5 803 0                 # eispack.c:803:0
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8048(%rsp), %rcx        # 8-byte Reload
	movq	8016(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	8024(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8032(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 7568(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	8080(%rsp), %rcx        # 8-byte Reload
	movq	8040(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8056(%rsp), %rsi        # 8-byte Reload
	movq	7568(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8048(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7568(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7564(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7744(%rsp), %rcx        # 8-byte Reload
	movq	8064(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8072(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	8088(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	8080(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7564(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7704(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7563(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7656(%rsp), %rdi        # 8-byte Reload
	movq	7680(%rsp), %rsi        # 8-byte Reload
	movq	7720(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movl	7716(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7672(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7728(%rsp), %rdi        # 8-byte Reload
	movq	7752(%rsp), %rsi        # 8-byte Reload
	movq	7752(%rsp), %rdx        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7736(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7736(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7752(%rsp), %r9         # 8-byte Reload
	movq	7760(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7563(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	7568(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8200(%rsp)        # 8-byte Spill
	jne	.LBB21_14
	jmp	.LBB21_13
.Ltmp923:
.LBB21_14:                              # %._crit_edge46
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str1051097, %r8
	leaq	.L.str7999, %rdx
	movabsq	$812, %rdi              # imm = 0x32C
	leaq	.L.str571049, %rsi
	leaq	.L.str1131105, %r9
	leaq	.L.str1621154, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str141006, %r15
	leaq	.L.str1591151, %r12
	movabsq	$811, %r13              # imm = 0x32B
	movq	%rax, 7552(%rsp)        # 8-byte Spill
	leaq	.L.str1611153, %rax
	movq	%rax, 7544(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7536(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 7528(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rax
	movq	%rax, 7520(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 7512(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 7504(%rsp)        # 8-byte Spill
	leaq	.L.str1561148, %rax
	movq	%rax, 7496(%rsp)        # 8-byte Spill
	movabsq	$810, %rax              # imm = 0x32A
	movq	%rax, 7488(%rsp)        # 8-byte Spill
	leaq	.L.str1581150, %rax
	movq	%rax, 7480(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	.loc	5 810 0                 # eispack.c:810:0
	movq	%rax, 7472(%rsp)        # 8-byte Spill
	movq	7488(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7464(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7456(%rsp)        # 8-byte Spill
	movq	%rdx, 7448(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7496(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7424(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 7416(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7408(%rsp)       # 8-byte Spill
	movq	%r15, 7400(%rsp)        # 8-byte Spill
	movq	%r13, 7392(%rsp)        # 8-byte Spill
	movq	%r12, 7384(%rsp)        # 8-byte Spill
	movl	%ebp, 7380(%rsp)        # 4-byte Spill
	movq	%r10, 7368(%rsp)        # 8-byte Spill
	movq	%r11, 7360(%rsp)        # 8-byte Spill
	movl	%ebx, 7356(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7472(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7344(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7488(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7480(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7344(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7496(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 811 0                 # eispack.c:811:0
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7520(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	7552(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7392(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7544(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7360(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	movq	7336(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7384(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7416(%rsp), %rsi        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7400(%rsp), %rcx        # 8-byte Reload
	movq	7440(%rsp), %r8         # 8-byte Reload
	movq	7448(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	7408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 812 0                 # eispack.c:812:0
	movq	7464(%rsp), %rdi        # 8-byte Reload
	movq	7456(%rsp), %rsi        # 8-byte Reload
	movq	7424(%rsp), %rdx        # 8-byte Reload
	movq	7368(%rsp), %rcx        # 8-byte Reload
	movq	7360(%rsp), %r8         # 8-byte Reload
	movl	7356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7552(%rsp), %rdi        # 8-byte Reload
	movq	7440(%rsp), %rsi        # 8-byte Reload
	movq	7440(%rsp), %rdx        # 8-byte Reload
	movq	7552(%rsp), %rcx        # 8-byte Reload
	movq	7432(%rsp), %r8         # 8-byte Reload
	movq	7440(%rsp), %r9         # 8-byte Reload
	movq	7448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.Ltmp924:
.LBB21_15:                              # %.backedge
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$1, %rax
	leaq	.L.str1641156, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str721064, %r8
	movabsq	$3, %r9
	leaq	.L.str911083, %r10
	movabsq	$788, %r11              # imm = 0x314
	leaq	.L.str571049, %rbx
	leaq	.L.str1051097, %r14
	leaq	.L.str1651157, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7328(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7320(%rsp)        # 8-byte Spill
	leaq	.L.str1631155, %rax
	movq	%rax, 7312(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 7304(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7296(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7288(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 7280(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	5 788 0                 # eispack.c:788:0
	movq	%rdi, 7272(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 7264(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 7256(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 7248(%rsp)        # 8-byte Spill
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7240(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7248(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7232(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7224(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7216(%rsp)        # 8-byte Spill
	movl	%ebp, 7212(%rsp)        # 4-byte Spill
	movl	%r12d, 7208(%rsp)       # 4-byte Spill
	movq	%r13, 7200(%rsp)        # 8-byte Spill
	movq	%r14, 7192(%rsp)        # 8-byte Spill
	movq	%rbx, 7184(%rsp)        # 8-byte Spill
	movq	%r10, 7176(%rsp)        # 8-byte Spill
	movq	%r11, 7168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7288(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7280(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 7164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7240(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7256(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7312(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	7164(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	7200(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7163(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7168(%rsp), %rdi        # 8-byte Reload
	movq	7184(%rsp), %rsi        # 8-byte Reload
	movq	7192(%rsp), %rdx        # 8-byte Reload
	movq	7216(%rsp), %rcx        # 8-byte Reload
	movq	7272(%rsp), %r8         # 8-byte Reload
	movl	7212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7256(%rsp), %rsi        # 8-byte Reload
	movq	7256(%rsp), %rdx        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7232(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7328(%rsp), %rsi        # 8-byte Reload
	movq	7328(%rsp), %rcx        # 8-byte Reload
	movq	7240(%rsp), %r8         # 8-byte Reload
	movq	7256(%rsp), %r9         # 8-byte Reload
	movq	7264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7163(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movl	8900(%rsp), %ebp        # 4-byte Reload
	movl	8884(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 9672(%rsp)        # 8-byte Spill
	movl	%ebp, 9668(%rsp)        # 4-byte Spill
	movl	%r12d, 9664(%rsp)       # 4-byte Spill
	jne	.LBB21_8
	jmp	.LBB21_36
.LBB21_16:                              # %.lr.ph4
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	8112(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1731165, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str1351127, %r9
	movabsq	$3, %r10
	leaq	.L.str1751167, %r11
	movabsq	$815, %rbx              # imm = 0x32F
	leaq	.L.str571049, %r14
	leaq	.L.str1741166, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str1721164, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str1671159, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	leaq	.L.str1661158, %rax
	movq	%rax, 7088(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 7080(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 7072(%rsp)        # 8-byte Spill
	leaq	.L.str1701162, %rax
	movq	%rax, 7064(%rsp)        # 8-byte Spill
	leaq	.L.str1681160, %rax
	movq	%rax, 7056(%rsp)        # 8-byte Spill
	movabsq	$817, %rax              # imm = 0x331
	movq	%rax, 7048(%rsp)        # 8-byte Spill
	leaq	.L.str1711163, %rax
	movq	%rax, 7040(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 7032(%rsp)        # 8-byte Spill
	leaq	.L.str1691161, %rax
	movq	%rax, 7024(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 7016(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 7008(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 7000(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 6992(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6984(%rsp)        # 8-byte Spill
	leaq	.L.str1301122, %rax
	movq	%rax, 6976(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6968(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 817 0                 # eispack.c:817:0
.Ltmp925:
	movq	%rax, 6960(%rsp)        # 8-byte Spill
	movq	6968(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6952(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6944(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6936(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6928(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6960(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6920(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6912(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6904(%rsp)        # 8-byte Spill
	movl	%ebp, 6900(%rsp)        # 4-byte Spill
	movl	%r12d, 6896(%rsp)       # 4-byte Spill
	movq	%r13, 6888(%rsp)        # 8-byte Spill
	movq	%r14, 6880(%rsp)        # 8-byte Spill
	movq	%rbx, 6872(%rsp)        # 8-byte Spill
	movq	%r10, 6864(%rsp)        # 8-byte Spill
	movq	%r11, 6856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6976(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6928(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7056(%rsp), %rcx        # 8-byte Reload
	movq	6984(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6992(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7152(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6928(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	7000(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6840(%rsp)       # 8-byte Spill
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	7008(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7016(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7024(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8488(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	7048(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7040(%rsp), %rcx        # 8-byte Reload
	movq	7032(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6848(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	7064(%rsp), %rcx        # 8-byte Reload
	movq	6944(%rsp), %r8         # 8-byte Reload
	movq	6952(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	7152(%rsp), %rcx        # 8-byte Reload
	vmovsd	6832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp926:
	.loc	5 815 0                 # eispack.c:815:0
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7104(%rsp), %rcx        # 8-byte Reload
	movq	7072(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rdx        # 8-byte Reload
	movq	6944(%rsp), %rcx        # 8-byte Reload
	movq	7080(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	7152(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7088(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7152(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6824(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7112(%rsp), %rsi        # 8-byte Reload
	movq	6824(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6824(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	7144(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	7136(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6820(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6888(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6819(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6872(%rsp), %rdi        # 8-byte Reload
	movq	6880(%rsp), %rsi        # 8-byte Reload
	movq	6912(%rsp), %rdx        # 8-byte Reload
	movq	6904(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movl	6900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6864(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6856(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6920(%rsp), %rdi        # 8-byte Reload
	movq	6944(%rsp), %rsi        # 8-byte Reload
	movq	6944(%rsp), %rdx        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6928(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6928(%rsp), %rcx        # 8-byte Reload
	movq	6936(%rsp), %r8         # 8-byte Reload
	movq	6944(%rsp), %r9         # 8-byte Reload
	movq	6952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6819(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8112(%rsp)        # 8-byte Spill
	jne	.LBB21_17
	jmp	.LBB21_16
.Ltmp927:
.LBB21_17:                              # %.loopexit
                                        #   in Loop: Header=BB21_8 Depth=1
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1761168, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1781170, %r8
	movabsq	$3, %r9
	leaq	.L.str1341126, %r10
	movabsq	$820, %r11              # imm = 0x334
	leaq	.L.str571049, %rbx
	leaq	.L.str1751167, %r14
	leaq	.L.str1771169, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6808(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6800(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 6792(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 6784(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 820 0                 # eispack.c:820:0
.Ltmp928:
	movq	%rdi, 6776(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6768(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6760(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6752(%rsp)        # 8-byte Spill
	movq	6760(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6752(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6736(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6728(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6720(%rsp)       # 8-byte Spill
	movq	%r15, 6712(%rsp)        # 8-byte Spill
	movl	%ebp, 6708(%rsp)        # 4-byte Spill
	movl	%r12d, 6704(%rsp)       # 4-byte Spill
	movq	%r13, 6696(%rsp)        # 8-byte Spill
	movq	%r14, 6688(%rsp)        # 8-byte Spill
	movq	%rbx, 6680(%rsp)        # 8-byte Spill
	movq	%r10, 6672(%rsp)        # 8-byte Spill
	movq	%r11, 6664(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6808(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6800(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6792(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	6696(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6663(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6664(%rsp), %rdi        # 8-byte Reload
	movq	6680(%rsp), %rsi        # 8-byte Reload
	movq	6688(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6776(%rsp), %r8         # 8-byte Reload
	movl	6708(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6672(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6808(%rsp), %rsi        # 8-byte Reload
	movq	6808(%rsp), %rdx        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6744(%rsp), %rdi        # 8-byte Reload
	movq	6744(%rsp), %rsi        # 8-byte Reload
	movq	6744(%rsp), %rcx        # 8-byte Reload
	movq	6760(%rsp), %r8         # 8-byte Reload
	movq	6808(%rsp), %r9         # 8-byte Reload
	movq	6768(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6663(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6808(%rsp), %rcx        # 8-byte Reload
	vmovsd	6720(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6720(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
.LBB21_18:                              # %.lr.ph7
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	6640(%rsp), %xmm0       # 8-byte Reload
	movq	6648(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1871179, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str1781170, %r9
	movabsq	$3, %r10
	leaq	.L.str1341126, %r11
	movabsq	$820, %rbx              # imm = 0x334
	leaq	.L.str571049, %r14
	leaq	.L.str1881180, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6632(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6624(%rsp)        # 8-byte Spill
	leaq	.L.str1861178, %rax
	movq	%rax, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 6608(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6600(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str1801172, %rax
	movq	%rax, 6584(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 6576(%rsp)        # 8-byte Spill
	leaq	.L.str1791171, %rax
	movq	%rax, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 6560(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 6552(%rsp)        # 8-byte Spill
	leaq	.L.str1821174, %rax
	movq	%rax, 6544(%rsp)        # 8-byte Spill
	leaq	.L.str1811173, %rax
	movq	%rax, 6536(%rsp)        # 8-byte Spill
	leaq	.L.str1851177, %rax
	movq	%rax, 6528(%rsp)        # 8-byte Spill
	movabsq	$822, %rax              # imm = 0x336
	movq	%rax, 6520(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 6512(%rsp)        # 8-byte Spill
	leaq	.L.str1841176, %rax
	movq	%rax, 6504(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6496(%rsp)        # 8-byte Spill
	leaq	.L.str1831175, %rax
	movq	%rax, 6488(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6480(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 6472(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6464(%rsp)        # 8-byte Spill
	leaq	.L.str1751167, %rax
	movq	%rax, 6456(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6448(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 822 0                 # eispack.c:822:0
.Ltmp929:
	movq	%rax, 6440(%rsp)        # 8-byte Spill
	movq	6448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6432(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 6424(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6416(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	6568(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6440(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6400(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6392(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 6384(%rsp)       # 8-byte Spill
	movl	%ebp, 6380(%rsp)        # 4-byte Spill
	movl	%r12d, 6376(%rsp)       # 4-byte Spill
	movq	%r13, 6368(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 6360(%rsp)       # 8-byte Spill
	movq	%r15, 6352(%rsp)        # 8-byte Spill
	movq	%r14, 6344(%rsp)        # 8-byte Spill
	movq	%r10, 6336(%rsp)        # 8-byte Spill
	movq	%r11, 6328(%rsp)        # 8-byte Spill
	movq	%rbx, 6320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6456(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6440(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6360(%rsp), %xmm0       # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6560(%rsp), %rcx        # 8-byte Reload
	movq	6408(%rsp), %r8         # 8-byte Reload
	movq	6456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6408(%rsp), %r9         # 8-byte Reload
	movq	6392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6392(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6472(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6632(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6408(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6480(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6312(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6488(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	6632(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6304(%rsp)       # 8-byte Spill
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6496(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6504(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6304(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 6296(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6512(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6296(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6528(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	6384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6296(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6424(%rsp), %r8         # 8-byte Reload
	movq	6432(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 6288(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp930:
	#DEBUG_VALUE: tred1:h <- [RSP+6288]
	.loc	5 820 0                 # eispack.c:820:0
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6584(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rdx        # 8-byte Reload
	movq	6424(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6632(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6632(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 6280(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6616(%rsp), %rcx        # 8-byte Reload
	movq	6576(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6592(%rsp), %rsi        # 8-byte Reload
	movq	6280(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6280(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6624(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6276(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6368(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6275(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6320(%rsp), %rdi        # 8-byte Reload
	movq	6344(%rsp), %rsi        # 8-byte Reload
	movq	6392(%rsp), %rdx        # 8-byte Reload
	movq	6352(%rsp), %rcx        # 8-byte Reload
	movq	6400(%rsp), %r8         # 8-byte Reload
	movl	6380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6336(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6400(%rsp), %rdi        # 8-byte Reload
	movq	6424(%rsp), %rsi        # 8-byte Reload
	movq	6424(%rsp), %rdx        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6408(%rsp), %rsi        # 8-byte Reload
	movq	6408(%rsp), %rcx        # 8-byte Reload
	movq	6416(%rsp), %r8         # 8-byte Reload
	movq	6424(%rsp), %r9         # 8-byte Reload
	movq	6432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6275(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6280(%rsp), %rcx        # 8-byte Reload
	vmovsd	6288(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6288(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 6640(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8104(%rsp)       # 8-byte Spill
	jne	.LBB21_19
	jmp	.LBB21_18
.Ltmp931:
.LBB21_19:                              # %._crit_edge8
                                        #   in Loop: Header=BB21_8 Depth=1
	vmovsd	8104(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str1961188, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	r8_sign, %r9
	leaq	.L.str481040, %r10
	movabsq	$827, %r11              # imm = 0x33B
	leaq	.L.str571049, %rbx
	leaq	.L.str1341126, %r14
	leaq	.L.str1991191, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 6264(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 6256(%rsp)        # 8-byte Spill
	leaq	.L.str1971189, %rax
	movq	%rax, 6248(%rsp)        # 8-byte Spill
	leaq	.L.str1891181, %rax
	movq	%rax, 6240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 6232(%rsp)        # 8-byte Spill
	leaq	.L.str1981190, %rax
	movq	%rax, 6224(%rsp)        # 8-byte Spill
	leaq	.L.str1951187, %rax
	movq	%rax, 6216(%rsp)        # 8-byte Spill
	movabsq	$826, %rax              # imm = 0x33A
	movq	%rax, 6208(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 6200(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 6192(%rsp)        # 8-byte Spill
	leaq	.L.str1941186, %rax
	movq	%rax, 6184(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 6176(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6168(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 6160(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str1911183, %rax
	movq	%rax, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str1921184, %rax
	movq	%rax, 6136(%rsp)        # 8-byte Spill
	movabsq	$825, %rax              # imm = 0x339
	movq	%rax, 6128(%rsp)        # 8-byte Spill
	leaq	.L.str1931185, %rax
	movq	%rax, 6120(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 6112(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rax
	movq	%rax, 6104(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 6096(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str1901182, %rax
	movq	%rax, 6080(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str1751167, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str1821174, %rax
	movq	%rax, 6048(%rsp)        # 8-byte Spill
	leaq	.L.str1781170, %rax
	movq	%rax, 6040(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 6032(%rsp)        # 8-byte Spill
	leaq	.L.str1301122, %rax
	movq	%rax, 6024(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 6016(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 825 0                 # eispack.c:825:0
	movq	%rax, 6008(%rsp)        # 8-byte Spill
	movq	6016(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 6000(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5992(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5984(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	6240(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5968(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5960(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 5952(%rsp)       # 8-byte Spill
	movq	%r12, 5944(%rsp)        # 8-byte Spill
	movl	%ebp, 5940(%rsp)        # 4-byte Spill
	movl	%r13d, 5936(%rsp)       # 4-byte Spill
	vmovsd	%xmm1, 5928(%rsp)       # 8-byte Spill
	movq	%r15, 5920(%rsp)        # 8-byte Spill
	movq	%r14, 5912(%rsp)        # 8-byte Spill
	movq	%r10, 5904(%rsp)        # 8-byte Spill
	movq	%r11, 5896(%rsp)        # 8-byte Spill
	movq	%rbx, 5888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6032(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6024(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	6264(%rsp), %r9         # 8-byte Reload
	movq	6040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5928(%rsp), %xmm0       # 8-byte Reload
	movq	5992(%rsp), %rdx        # 8-byte Reload
	movq	6056(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6064(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5880(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5880(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6080(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6088(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5880(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5872(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6136(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10952(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6104(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10952(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5864(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6120(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10952(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5872(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 826 0                 # eispack.c:826:0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6184(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	6168(%rsp), %rsi        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6216(%rsp), %rcx        # 8-byte Reload
	movq	6176(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5856(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6184(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6192(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5856(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6216(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5840(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp932:
	#DEBUG_VALUE: tred1:f <- [RSP+5840]
	.loc	5 827 0                 # eispack.c:827:0
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	6232(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	6224(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp933:
	movq	6256(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5832(%rsp)       # 8-byte Spill
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	6248(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5896(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	5912(%rsp), %rdx        # 8-byte Reload
	movq	5920(%rsp), %rcx        # 8-byte Reload
	movq	5944(%rsp), %r8         # 8-byte Reload
	movl	5940(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	movq	5960(%rsp), %rdx        # 8-byte Reload
	movq	6264(%rsp), %rcx        # 8-byte Reload
	movq	5904(%rsp), %r8         # 8-byte Reload
	movq	5992(%rsp), %r9         # 8-byte Reload
	movq	6000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	6264(%rsp), %rdi        # 8-byte Reload
	movq	5976(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	6264(%rsp), %rdx        # 8-byte Reload
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	5992(%rsp), %r8         # 8-byte Reload
	movq	6000(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2091201, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1051097, %r8
	movabsq	$3, %r9
	leaq	.L.str2111203, %r10
	movabsq	$832, %r11              # imm = 0x340
	leaq	.L.str571049, %rbx
	leaq	.L.str1341126, %r14
	leaq	.L.str2101202, %r15
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movq	%rax, 5824(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5816(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 5808(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 5800(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 5792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5776(%rsp)        # 8-byte Spill
	leaq	.L.str2071199, %rax
	movq	%rax, 5768(%rsp)        # 8-byte Spill
	leaq	.L.str1951187, %rax
	movq	%rax, 5760(%rsp)        # 8-byte Spill
	movabsq	$830, %rax              # imm = 0x33E
	movq	%rax, 5752(%rsp)        # 8-byte Spill
	leaq	.L.str2081200, %rax
	movq	%rax, 5744(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5736(%rsp)        # 8-byte Spill
	leaq	.L.str1961188, %rax
	movq	%rax, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str2001192, %rax
	movq	%rax, 5720(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str2061198, %rax
	movq	%rax, 5704(%rsp)        # 8-byte Spill
	leaq	.L.str1891181, %rax
	movq	%rax, 5696(%rsp)        # 8-byte Spill
	leaq	.L.str2051197, %rax
	movq	%rax, 5688(%rsp)        # 8-byte Spill
	movabsq	$829, %rax              # imm = 0x33D
	movq	%rax, 5680(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str2011193, %rax
	movq	%rax, 5664(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5656(%rsp)        # 8-byte Spill
	leaq	.L.str2021194, %rax
	movq	%rax, 5648(%rsp)        # 8-byte Spill
	leaq	.L.str2031195, %rax
	movq	%rax, 5640(%rsp)        # 8-byte Spill
	movabsq	$828, %rax              # imm = 0x33C
	movq	%rax, 5632(%rsp)        # 8-byte Spill
	leaq	.L.str2041196, %rax
	movq	%rax, 5624(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 5616(%rsp)        # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 5608(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5600(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	vmovsd	.LCPI21_1, %xmm1
	movq	%rax, 5592(%rsp)        # 8-byte Spill
	movabsq	$827, %rax              # imm = 0x33B
	movq	%rax, 5584(%rsp)        # 8-byte Spill
	leaq	.L.str1971189, %rax
	movq	%rax, 5576(%rsp)        # 8-byte Spill
	leaq	.L.str1991191, %rax
	movq	%rdi, 5568(%rsp)        # 8-byte Spill
	movq	%r12, %rdi
	movq	%rax, 5560(%rsp)        # 8-byte Spill
	movq	5776(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 5552(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	vmovsd	%xmm0, 5544(%rsp)       # 8-byte Spill
	movq	%rdx, 5536(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	5560(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%r9, 5512(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r13d, 5508(%rsp)       # 4-byte Spill
	movq	%r15, 5496(%rsp)        # 8-byte Spill
	movl	%ebp, 5492(%rsp)        # 4-byte Spill
	movq	%r12, 5480(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5472(%rsp)       # 8-byte Spill
	movq	%r14, 5464(%rsp)        # 8-byte Spill
	movq	%rbx, 5456(%rsp)        # 8-byte Spill
	movq	%r10, 5448(%rsp)        # 8-byte Spill
	movq	%r11, 5440(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5544(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5560(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5576(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5544(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5432(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5584(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5472(%rsp), %xmm0       # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5792(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	vmovq	%xmm0, %rax
	movabsq	$-9223372036854775808, %rcx # imm = 0x8000000000000000
	xorq	%rcx, %rax
	vmovq	%rax, %xmm1
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 5424(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp934:
	#DEBUG_VALUE: tred1:g <- [RSP+5424]
	.loc	5 828 0                 # eispack.c:828:0
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5592(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5600(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5608(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5632(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5624(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5408(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5648(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	8888(%rsp), %rcx        # 8-byte Reload
	vmovsd	5416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 829 0                 # eispack.c:829:0
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5424(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5664(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5424(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5400(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5680(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5672(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5400(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5688(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5952(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5400(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5704(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5392(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp935:
	#DEBUG_VALUE: tred1:h <- [RSP+5392]
	.loc	5 830 0                 # eispack.c:830:0
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5432(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5720(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5728(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5840(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5432(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 5384(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5752(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5744(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5760(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5768(%rsp), %rcx        # 8-byte Reload
	movq	5824(%rsp), %r8         # 8-byte Reload
	movq	5552(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	vmovsd	5384(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 832 0                 # eispack.c:832:0
.Ltmp936:
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5536(%rsp), %rcx        # 8-byte Reload
	movq	5784(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5800(%rsp), %rdx        # 8-byte Reload
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	5792(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5816(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5808(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$-1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	5480(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5383(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5440(%rsp), %rdi        # 8-byte Reload
	movq	5456(%rsp), %rsi        # 8-byte Reload
	movq	5464(%rsp), %rdx        # 8-byte Reload
	movq	5496(%rsp), %rcx        # 8-byte Reload
	movq	5568(%rsp), %r8         # 8-byte Reload
	movl	5492(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5512(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5448(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5568(%rsp), %rdi        # 8-byte Reload
	movq	5824(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5528(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5536(%rsp), %r8         # 8-byte Reload
	movq	5824(%rsp), %r9         # 8-byte Reload
	movq	5552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5383(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5824(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB21_20
	jmp	.LBB21_15
.Ltmp937:
.LBB21_20:                              # %.lr.ph13
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	5368(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2171209, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str2111203, %r9
	movabsq	$3, %r10
	leaq	.L.str2191211, %r11
	movabsq	$837, %rbx              # imm = 0x345
	leaq	.L.str571049, %r14
	leaq	.L.str2181210, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str2161208, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str2131205, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str2121204, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str2141206, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$839, %rax              # imm = 0x347
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str2151207, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str1341126, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 839 0                 # eispack.c:839:0
.Ltmp938:
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movq	5216(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5200(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5192(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5184(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	5296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5176(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5208(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5168(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5160(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 5156(%rsp)        # 4-byte Spill
	movl	%r12d, 5152(%rsp)       # 4-byte Spill
	movq	%r13, 5144(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5136(%rsp)       # 8-byte Spill
	movq	%r15, 5128(%rsp)        # 8-byte Spill
	movq	%r14, 5120(%rsp)        # 8-byte Spill
	movq	%r10, 5112(%rsp)        # 8-byte Spill
	movq	%r11, 5104(%rsp)        # 8-byte Spill
	movq	%rbx, 5096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5176(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5272(%rsp), %rcx        # 8-byte Reload
	movq	5232(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5240(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5360(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5264(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5256(%rsp), %rcx        # 8-byte Reload
	movq	5248(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5088(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5200(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	5360(%rsp), %rcx        # 8-byte Reload
	vmovsd	5136(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp939:
	.loc	5 837 0                 # eispack.c:837:0
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rdx        # 8-byte Reload
	movq	5192(%rsp), %rcx        # 8-byte Reload
	movq	5288(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5360(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5296(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5360(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 5080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5320(%rsp), %rsi        # 8-byte Reload
	movq	5080(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5312(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	5080(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5076(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5184(%rsp), %rcx        # 8-byte Reload
	movq	5328(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5336(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5352(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5344(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5076(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5075(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5096(%rsp), %rdi        # 8-byte Reload
	movq	5120(%rsp), %rsi        # 8-byte Reload
	movq	5160(%rsp), %rdx        # 8-byte Reload
	movq	5128(%rsp), %rcx        # 8-byte Reload
	movq	5168(%rsp), %r8         # 8-byte Reload
	movl	5156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5112(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5104(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5168(%rsp), %rdi        # 8-byte Reload
	movq	5192(%rsp), %rsi        # 8-byte Reload
	movq	5192(%rsp), %rdx        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5176(%rsp), %rdi        # 8-byte Reload
	movq	5176(%rsp), %rsi        # 8-byte Reload
	movq	5176(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5192(%rsp), %r9         # 8-byte Reload
	movq	5200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5075(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5080(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 5368(%rsp)        # 8-byte Spill
	jne	.LBB21_21
	jmp	.LBB21_20
.Ltmp940:
.LBB21_21:                              # %.loopexit11
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2201212, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2221214, %r8
	movabsq	$3, %r9
	leaq	.L.str1051097, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str571049, %rbx
	leaq	.L.str2191211, %r14
	leaq	.L.str2211213, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 5064(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5056(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 5048(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 5040(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 842 0                 # eispack.c:842:0
.Ltmp941:
	movq	%rdi, 5032(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 5024(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 5016(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 5008(%rsp)        # 8-byte Spill
	movq	5016(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5008(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4992(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4984(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4976(%rsp)        # 8-byte Spill
	movl	%ebp, 4972(%rsp)        # 4-byte Spill
	movl	%r12d, 4968(%rsp)       # 4-byte Spill
	movq	%r13, 4960(%rsp)        # 8-byte Spill
	movq	%r14, 4952(%rsp)        # 8-byte Spill
	movq	%rbx, 4944(%rsp)        # 8-byte Spill
	movq	%r10, 4936(%rsp)        # 8-byte Spill
	movq	%r11, 4928(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5056(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5048(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4928(%rsp), %rdi        # 8-byte Reload
	movq	4944(%rsp), %rsi        # 8-byte Reload
	movq	4952(%rsp), %rdx        # 8-byte Reload
	movq	4976(%rsp), %rcx        # 8-byte Reload
	movq	5032(%rsp), %r8         # 8-byte Reload
	movl	4972(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4984(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4936(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5032(%rsp), %rdi        # 8-byte Reload
	movq	5064(%rsp), %rsi        # 8-byte Reload
	movq	5064(%rsp), %rdx        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	4992(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5000(%rsp), %rdi        # 8-byte Reload
	movq	5000(%rsp), %rsi        # 8-byte Reload
	movq	5000(%rsp), %rcx        # 8-byte Reload
	movq	5016(%rsp), %r8         # 8-byte Reload
	movq	5064(%rsp), %r9         # 8-byte Reload
	movq	5024(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	5064(%rsp), %rcx        # 8-byte Reload
	movq	5000(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.LBB21_22:                              # %.lr.ph22
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_24 Depth 3
	movq	4904(%rsp), %rax        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str2421234, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str2251217, %r10
	movabsq	$3, %r11
	leaq	.L.str2441236, %rbx
	movabsq	$847, %r14              # imm = 0x34F
	leaq	.L.str571049, %r15
	leaq	.L.str2221214, %r12
	leaq	.L.str2431235, %r13
	movl	$0, %ebp
	movq	%rsi, 4896(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, 4888(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 4880(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4872(%rsp)        # 8-byte Spill
	leaq	.L.str2411233, %rax
	movq	%rax, 4864(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 4856(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4840(%rsp)        # 8-byte Spill
	leaq	.L.str2231215, %rax
	movq	%rax, 4832(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4824(%rsp)        # 8-byte Spill
	leaq	.L.str2241216, %rax
	movq	%rax, 4816(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 4808(%rsp)        # 8-byte Spill
	movabsq	$842, %rax              # imm = 0x34A
	movq	%rax, 4800(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str2401232, %rax
	movq	%rax, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str2311223, %rax
	movq	%rax, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str2391231, %rax
	movq	%rax, 4768(%rsp)        # 8-byte Spill
	movabsq	$845, %rax              # imm = 0x34D
	movq	%rax, 4760(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str2291221, %rax
	movq	%rax, 4744(%rsp)        # 8-byte Spill
	leaq	.L.str2381230, %rax
	movq	%rax, 4736(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 4728(%rsp)        # 8-byte Spill
	leaq	.L.str2371229, %rax
	movq	%rax, 4720(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 4704(%rsp)        # 8-byte Spill
	leaq	.L.str2361228, %rax
	movq	%rax, 4696(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str2351227, %rax
	movq	%rax, 4680(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str2331225, %rax
	movq	%rax, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str2341226, %rax
	movq	%rax, 4656(%rsp)        # 8-byte Spill
	leaq	.L.str2321224, %rax
	movq	%rax, 4648(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 4640(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 4632(%rsp)        # 8-byte Spill
	leaq	.L.str2301222, %rax
	movq	%rax, 4624(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 4616(%rsp)        # 8-byte Spill
	leaq	.L.str2281220, %rax
	movq	%rax, 4608(%rsp)        # 8-byte Spill
	movabsq	$844, %rax              # imm = 0x34C
	movq	%rax, 4600(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 4592(%rsp)        # 8-byte Spill
	leaq	.L.str2261218, %rax
	movq	%rax, 4584(%rsp)        # 8-byte Spill
	leaq	.L.str2271219, %rax
	movq	%rax, 4576(%rsp)        # 8-byte Spill
	leaq	.L.str2191211, %rax
	movq	%rax, 4568(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4560(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 844 0                 # eispack.c:844:0
.Ltmp942:
	movq	%rax, 4552(%rsp)        # 8-byte Spill
	movq	4560(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4544(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 4540(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 4528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	4832(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4520(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4552(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4512(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4504(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4496(%rsp)        # 8-byte Spill
	movq	%r12, 4488(%rsp)        # 8-byte Spill
	movq	%r13, 4480(%rsp)        # 8-byte Spill
	movl	%ebp, 4476(%rsp)        # 4-byte Spill
	movq	%r14, 4464(%rsp)        # 8-byte Spill
	movq	%rbx, 4456(%rsp)        # 8-byte Spill
	movq	%r10, 4448(%rsp)        # 8-byte Spill
	movq	%r11, 4440(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4560(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4584(%rsp), %rcx        # 8-byte Reload
	movq	4552(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4568(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4576(%rsp), %r8         # 8-byte Reload
	movq	4528(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4584(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4448(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4608(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4592(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4432(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4600(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4432(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4424(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp943:
	#DEBUG_VALUE: tred1:f <- [RSP+4424]
	.loc	5 845 0                 # eispack.c:845:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4624(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4520(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4624(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4520(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4408(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4648(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4404(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4632(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4404(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %esi       # 4-byte Reload
	imull	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4400(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4396(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4396(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4656(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4664(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebp        # 4-byte Reload
	movl	4396(%rsp), %esi        # 4-byte Reload
	addl	%esi, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 4392(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4696(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	4392(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4680(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4392(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4720(%rsp), %rcx        # 8-byte Reload
	movq	4688(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4384(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4704(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4384(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4528(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4376(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4712(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4376(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4368(%rsp)       # 8-byte Spill
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4728(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4368(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4736(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4744(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4368(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4360(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4360(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4408(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4360(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4544(%rsp), %r8         # 8-byte Reload
	movq	4512(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4352(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp944:
	#DEBUG_VALUE: tred1:g <- [RSP+4352]
	.loc	5 842 0                 # eispack.c:842:0
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4816(%rsp), %rcx        # 8-byte Reload
	movq	4792(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rdx        # 8-byte Reload
	movq	4544(%rsp), %rcx        # 8-byte Reload
	movq	4808(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	.loc	5 847 0                 # eispack.c:847:0
.Ltmp945:
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4864(%rsp), %rcx        # 8-byte Reload
	movq	4824(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4520(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4832(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4520(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4340(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4896(%rsp), %rcx        # 8-byte Reload
	movq	4848(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4856(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4872(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4864(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4340(%rsp), %ebp        # 4-byte Reload
	movl	8880(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4339(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4464(%rsp), %rdi        # 8-byte Reload
	movq	4496(%rsp), %rsi        # 8-byte Reload
	movq	4488(%rsp), %rdx        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	movq	4504(%rsp), %r8         # 8-byte Reload
	movl	4476(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4440(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4504(%rsp), %rdi        # 8-byte Reload
	movq	4544(%rsp), %rsi        # 8-byte Reload
	movq	4544(%rsp), %rdx        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4528(%rsp), %rdi        # 8-byte Reload
	movq	4528(%rsp), %rsi        # 8-byte Reload
	movq	4528(%rsp), %rcx        # 8-byte Reload
	movq	4896(%rsp), %r8         # 8-byte Reload
	movq	4544(%rsp), %r9         # 8-byte Reload
	movq	4512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4339(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 4328(%rsp)       # 8-byte Spill
	jne	.LBB21_23
	jmp	.LBB21_25
.Ltmp946:
.LBB21_23:                              # %.lr.ph17
                                        #   in Loop: Header=BB21_22 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str2471239, %r8
	leaq	.L.str7999, %rdx
	movabsq	$847, %rsi              # imm = 0x34F
	leaq	.L.str571049, %rdi
	leaq	.L.str2441236, %r9
	leaq	.L.str2461238, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str2451237, %r12
	movabsq	$32, %r13
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	leaq	.L.str2331225, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rdi, 4304(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movq	4304(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 4288(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 4280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 4272(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4264(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4256(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 4248(%rsp)        # 8-byte Spill
	movl	%ebp, 4244(%rsp)        # 4-byte Spill
	movq	%r15, 4232(%rsp)        # 8-byte Spill
	movq	%r12, 4224(%rsp)        # 8-byte Spill
	movq	%r13, 4216(%rsp)        # 8-byte Spill
	movl	%ebx, 4212(%rsp)        # 4-byte Spill
	movq	%r10, 4200(%rsp)        # 8-byte Spill
	movq	%r11, 4192(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	4400(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4216(%rsp), %rsi        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4400(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4232(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4224(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4288(%rsp), %rdi        # 8-byte Reload
	movq	4304(%rsp), %rsi        # 8-byte Reload
	movq	4256(%rsp), %rdx        # 8-byte Reload
	movq	4200(%rsp), %rcx        # 8-byte Reload
	movq	4192(%rsp), %r8         # 8-byte Reload
	movl	4212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4320(%rsp), %rdi        # 8-byte Reload
	movq	4272(%rsp), %rsi        # 8-byte Reload
	movq	4272(%rsp), %rdx        # 8-byte Reload
	movq	4320(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	vmovsd	4352(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
.LBB21_24:                              #   Parent Loop BB21_8 Depth=1
                                        #     Parent Loop BB21_22 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	4168(%rsp), %xmm0       # 8-byte Reload
	movq	4176(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2641256, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str2471239, %r9
	movabsq	$3, %r10
	leaq	.L.str2251217, %r11
	movabsq	$847, %rbx              # imm = 0x34F
	leaq	.L.str571049, %r14
	leaq	.L.str2651257, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4160(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4152(%rsp)        # 8-byte Spill
	leaq	.L.str2631255, %rax
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 4136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str2491241, %rax
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4104(%rsp)        # 8-byte Spill
	leaq	.L.str2481240, %rax
	movq	%rax, 4096(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 4088(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4080(%rsp)        # 8-byte Spill
	leaq	.L.str2611253, %rax
	movq	%rax, 4072(%rsp)        # 8-byte Spill
	leaq	.L.str2581250, %rax
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movabsq	$850, %rax              # imm = 0x352
	movq	%rax, 4056(%rsp)        # 8-byte Spill
	leaq	.L.str2621254, %rax
	movq	%rax, 4048(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4040(%rsp)        # 8-byte Spill
	leaq	.L.str2601252, %rax
	movq	%rax, 4032(%rsp)        # 8-byte Spill
	leaq	.L.str2591251, %rax
	movq	%rax, 4024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 4016(%rsp)        # 8-byte Spill
	leaq	.L.str2291221, %rax
	movq	%rax, 4008(%rsp)        # 8-byte Spill
	leaq	.L.str2541246, %rax
	movq	%rax, 4000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 3992(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3984(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 3976(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3968(%rsp)        # 8-byte Spill
	leaq	.L.str2511243, %rax
	movq	%rax, 3960(%rsp)        # 8-byte Spill
	leaq	.L.str2501242, %rax
	movq	%rax, 3952(%rsp)        # 8-byte Spill
	leaq	.L.str2571249, %rax
	movq	%rax, 3944(%rsp)        # 8-byte Spill
	movabsq	$849, %rax              # imm = 0x351
	movq	%rax, 3936(%rsp)        # 8-byte Spill
	leaq	.L.str2561248, %rax
	movq	%rax, 3928(%rsp)        # 8-byte Spill
	leaq	.L.str2551247, %rax
	movq	%rax, 3920(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 3912(%rsp)        # 8-byte Spill
	leaq	.L.str2531245, %rax
	movq	%rax, 3904(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 3896(%rsp)        # 8-byte Spill
	leaq	.L.str2521244, %rax
	movq	%rax, 3888(%rsp)        # 8-byte Spill
	leaq	.L.str2451237, %rax
	movq	%rax, 3880(%rsp)        # 8-byte Spill
	leaq	.L.str2401232, %rax
	movq	%rax, 3872(%rsp)        # 8-byte Spill
	leaq	.L.str2441236, %rax
	movq	%rax, 3864(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3856(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 3848(%rsp)        # 8-byte Spill
	leaq	.L.str2261218, %rax
	.loc	5 849 0                 # eispack.c:849:0
.Ltmp947:
	movq	%rax, 3840(%rsp)        # 8-byte Spill
	movq	3856(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3832(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3824(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 3816(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3808(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3848(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3800(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3792(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3784(%rsp)       # 8-byte Spill
	movq	%r15, 3776(%rsp)        # 8-byte Spill
	movl	%ebp, 3772(%rsp)        # 4-byte Spill
	movl	%r12d, 3768(%rsp)       # 4-byte Spill
	movq	%r13, 3760(%rsp)        # 8-byte Spill
	movq	%r14, 3752(%rsp)        # 8-byte Spill
	movq	%rbx, 3744(%rsp)        # 8-byte Spill
	movq	%r10, 3736(%rsp)        # 8-byte Spill
	movq	%r11, 3728(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3840(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3856(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3848(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3872(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	3808(%rsp), %r9         # 8-byte Reload
	movq	3792(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3792(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4184(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3880(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	movq	4184(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3904(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3720(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3888(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3896(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3720(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3712(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3904(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	3720(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3704(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3696(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3696(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3920(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3688(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3688(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3928(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3688(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3680(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3680(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3944(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3952(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3680(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3960(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3672(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp948:
	#DEBUG_VALUE: tred1:g <- [RSP+3672]
	.loc	5 850 0                 # eispack.c:850:0
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4064(%rsp), %rcx        # 8-byte Reload
	movq	3968(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3976(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4160(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3808(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3664(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3984(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3656(%rsp)       # 8-byte Spill
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3992(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3704(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4000(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4008(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4424(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3704(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3648(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	4016(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3656(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4024(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4032(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3648(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3656(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3640(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4056(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4048(%rsp), %rcx        # 8-byte Reload
	movq	4040(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3664(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4064(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	4072(%rsp), %rcx        # 8-byte Reload
	movq	3824(%rsp), %r8         # 8-byte Reload
	movq	3832(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	4160(%rsp), %rcx        # 8-byte Reload
	vmovsd	3640(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp949:
	.loc	5 847 0                 # eispack.c:847:0
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4080(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rdx        # 8-byte Reload
	movq	3824(%rsp), %rcx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	4160(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4096(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4160(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4112(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3628(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3816(%rsp), %rcx        # 8-byte Reload
	movq	4128(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4136(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	4152(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	4144(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3760(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3627(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3744(%rsp), %rdi        # 8-byte Reload
	movq	3752(%rsp), %rsi        # 8-byte Reload
	movq	3792(%rsp), %rdx        # 8-byte Reload
	movq	3776(%rsp), %rcx        # 8-byte Reload
	movq	3800(%rsp), %r8         # 8-byte Reload
	movl	3772(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3736(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3800(%rsp), %rdi        # 8-byte Reload
	movq	3824(%rsp), %rsi        # 8-byte Reload
	movq	3824(%rsp), %rdx        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3792(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3808(%rsp), %rdi        # 8-byte Reload
	movq	3808(%rsp), %rsi        # 8-byte Reload
	movq	3808(%rsp), %rcx        # 8-byte Reload
	movq	3816(%rsp), %r8         # 8-byte Reload
	movq	3824(%rsp), %r9         # 8-byte Reload
	movq	3832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3627(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3632(%rsp), %rcx        # 8-byte Reload
	vmovsd	3672(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3672(%rsp), %xmm1       # 8-byte Reload
	movq	%rcx, 4176(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 4168(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 4328(%rsp)       # 8-byte Spill
	jne	.LBB21_25
	jmp	.LBB21_24
.Ltmp950:
.LBB21_25:                              # %._crit_edge18
                                        #   in Loop: Header=BB21_22 Depth=2
	vmovsd	4328(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str2691261, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2221214, %r8
	movabsq	$3, %r9
	leaq	.L.str2711263, %r10
	movabsq	$842, %r11              # imm = 0x34A
	leaq	.L.str571049, %rbx
	leaq	.L.str2251217, %r14
	leaq	.L.str2701262, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	leaq	.L.str2681260, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str2241216, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	leaq	.L.str2271219, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	leaq	.L.str2261218, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	leaq	.L.str2661258, %rax
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	leaq	.L.str2301222, %rax
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$852, %rax              # imm = 0x354
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	leaq	.L.str2671259, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str2401232, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str2511243, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str2471239, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 852 0                 # eispack.c:852:0
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movq	3456(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3440(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3432(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3424(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	3520(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3448(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3408(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3400(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	%r15, 3384(%rsp)        # 8-byte Spill
	movl	%ebp, 3380(%rsp)        # 4-byte Spill
	movl	%r12d, 3376(%rsp)       # 4-byte Spill
	movq	%r13, 3368(%rsp)        # 8-byte Spill
	movq	%r14, 3360(%rsp)        # 8-byte Spill
	movq	%rbx, 3352(%rsp)        # 8-byte Spill
	movq	%r10, 3344(%rsp)        # 8-byte Spill
	movq	%r11, 3336(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3616(%rsp), %r9         # 8-byte Reload
	movq	3408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3408(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3496(%rsp), %rcx        # 8-byte Reload
	movq	3488(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4416(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3520(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3432(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4416(%rsp), %rax        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp951:
	.loc	5 842 0                 # eispack.c:842:0
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4888(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4888(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3600(%rsp), %rcx        # 8-byte Reload
	movq	3560(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3576(%rsp), %rsi        # 8-byte Reload
	movq	4344(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4344(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 3324(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3416(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3600(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3324(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3368(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3323(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3336(%rsp), %rdi        # 8-byte Reload
	movq	3352(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movl	3380(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3400(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3616(%rsp), %rdi        # 8-byte Reload
	movq	3616(%rsp), %rsi        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	movq	3432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3323(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, 4904(%rsp)        # 8-byte Spill
	jne	.LBB21_26
	jmp	.LBB21_22
.Ltmp952:
.LBB21_26:                              # %.loopexit20
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rcx
	leaq	.L.str2721264, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2741266, %r8
	movabsq	$3, %r9
	leaq	.L.str1051097, %r10
	movabsq	$858, %r11              # imm = 0x35A
	leaq	.L.str571049, %rbx
	leaq	.L.str2711263, %r14
	leaq	.L.str2731265, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3304(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 3296(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 3288(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 858 0                 # eispack.c:858:0
.Ltmp953:
	movq	%rdi, 3280(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 3272(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 3264(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 3256(%rsp)        # 8-byte Spill
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3256(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 3224(%rsp)       # 8-byte Spill
	movq	%r15, 3216(%rsp)        # 8-byte Spill
	movl	%ebp, 3212(%rsp)        # 4-byte Spill
	movl	%r12d, 3208(%rsp)       # 4-byte Spill
	movq	%r13, 3200(%rsp)        # 8-byte Spill
	movq	%r14, 3192(%rsp)        # 8-byte Spill
	movq	%rbx, 3184(%rsp)        # 8-byte Spill
	movq	%r10, 3176(%rsp)        # 8-byte Spill
	movq	%r11, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3312(%rsp), %rcx        # 8-byte Reload
	movq	3288(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3304(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3167(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3168(%rsp), %rdi        # 8-byte Reload
	movq	3184(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3216(%rsp), %rcx        # 8-byte Reload
	movq	3280(%rsp), %r8         # 8-byte Reload
	movl	3212(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3232(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3176(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3240(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3248(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rcx        # 8-byte Reload
	movq	3264(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	movq	3272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3167(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	3312(%rsp), %rcx        # 8-byte Reload
	vmovsd	3224(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB21_15
.LBB21_27:                              # %.lr.ph25
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3152(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str2871279, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str2741266, %r9
	movabsq	$3, %r10
	leaq	.L.str2891281, %r11
	movabsq	$858, %rbx              # imm = 0x35A
	leaq	.L.str571049, %r14
	leaq	.L.str2881280, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str2861278, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str2761268, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str2751267, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str2781270, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str2771269, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str2851277, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$861, %rax              # imm = 0x35D
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	leaq	.L.str2811273, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str2841276, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str2831275, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str2791271, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$860, %rax              # imm = 0x35C
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str2821274, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str2801272, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str2061198, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	leaq	.L.str2711263, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 860 0                 # eispack.c:860:0
.Ltmp954:
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movq	2880(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2864(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2856(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2848(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	3072(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2832(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2824(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2816(%rsp)       # 8-byte Spill
	movl	%ebp, 2812(%rsp)        # 4-byte Spill
	movl	%r12d, 2808(%rsp)       # 4-byte Spill
	movq	%r13, 2800(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 2792(%rsp)       # 8-byte Spill
	movq	%r15, 2784(%rsp)        # 8-byte Spill
	movq	%r14, 2776(%rsp)        # 8-byte Spill
	movq	%r10, 2768(%rsp)        # 8-byte Spill
	movq	%r11, 2760(%rsp)        # 8-byte Spill
	movq	%rbx, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movq	2888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2824(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2736(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5392(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2728(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2936(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 861 0                 # eispack.c:861:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3136(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2720(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2712(%rsp)       # 8-byte Spill
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2712(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3008(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2728(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2712(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2704(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2704(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2816(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2704(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2864(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2696(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp955:
	#DEBUG_VALUE: tred1:f <- [RSP+2696]
	.loc	5 858 0                 # eispack.c:858:0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3136(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3136(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	3120(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2684(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3128(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2684(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2800(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2683(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2784(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movl	2812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2856(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2683(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2688(%rsp), %rcx        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3144(%rsp)       # 8-byte Spill
	jne	.LBB21_28
	jmp	.LBB21_27
.Ltmp956:
.LBB21_28:                              # %._crit_edge26
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str2921284, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str2941286, %r8
	movabsq	$3, %r9
	leaq	.L.str1051097, %r10
	movabsq	$868, %r11              # imm = 0x364
	leaq	.L.str571049, %rbx
	leaq	.L.str2891281, %r14
	leaq	.L.str2931285, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str2911283, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str2781270, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str2901282, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$864, %rax              # imm = 0x360
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str2061198, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	.loc	5 864 0                 # eispack.c:864:0
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2568(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2560(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2552(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2536(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2528(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2520(%rsp)        # 8-byte Spill
	movl	%ebp, 2516(%rsp)        # 4-byte Spill
	movl	%r12d, 2512(%rsp)       # 4-byte Spill
	movq	%r13, 2504(%rsp)        # 8-byte Spill
	movq	%r14, 2496(%rsp)        # 8-byte Spill
	movq	%rbx, 2488(%rsp)        # 8-byte Spill
	movq	%r10, 2480(%rsp)        # 8-byte Spill
	movq	%r11, 2472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5392(%rsp), %xmm0       # 8-byte Reload
	vaddsd	%xmm0, %xmm0, %xmm1
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 2464(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2600(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2616(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2696(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2560(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2456(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp957:
	#DEBUG_VALUE: tred1:h <- [RSP+2456]
	#DEBUG_VALUE: tred1:j <- 0
	.loc	5 868 0                 # eispack.c:868:0
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	2504(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2455(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2488(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movl	2516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2672(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2672(%rsp), %r9         # 8-byte Reload
	movq	2560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2455(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.Ltmp958:
.LBB21_29:                              # %.lr.ph31
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2440(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3051297, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str2941286, %r9
	movabsq	$3, %r10
	leaq	.L.str3071299, %r11
	movabsq	$868, %rbx              # imm = 0x364
	leaq	.L.str571049, %r14
	leaq	.L.str3061298, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str3041296, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str2961288, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str2951287, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str3021294, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str2971289, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$870, %rax              # imm = 0x366
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str3031295, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str2981290, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str3011293, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str2911283, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str3001292, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str2991291, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str2891281, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 870 0                 # eispack.c:870:0
.Ltmp959:
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movq	2208(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2192(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2184(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2176(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2160(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2152(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2144(%rsp)        # 8-byte Spill
	movl	%ebp, 2140(%rsp)        # 4-byte Spill
	movl	%r12d, 2136(%rsp)       # 4-byte Spill
	movq	%r13, 2128(%rsp)        # 8-byte Spill
	movq	%r14, 2120(%rsp)        # 8-byte Spill
	movq	%rbx, 2112(%rsp)        # 8-byte Spill
	movq	%r10, 2104(%rsp)        # 8-byte Spill
	movq	%r11, 2096(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2168(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2152(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2088(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2080(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2432(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2072(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2064(%rsp)       # 8-byte Spill
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2064(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2280(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2064(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2056(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2056(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2080(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2056(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2048(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2328(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	vmovsd	2048(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp960:
	.loc	5 868 0                 # eispack.c:868:0
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2432(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2036(%rsp), %ebp        # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2035(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2112(%rsp), %rdi        # 8-byte Reload
	movq	2120(%rsp), %rsi        # 8-byte Reload
	movq	2152(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movl	2140(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2104(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2184(%rsp), %rdx        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2168(%rsp), %rdi        # 8-byte Reload
	movq	2168(%rsp), %rsi        # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2184(%rsp), %r9         # 8-byte Reload
	movq	2192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2035(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2440(%rsp)        # 8-byte Spill
	jne	.LBB21_30
	jmp	.LBB21_29
.Ltmp961:
.LBB21_30:                              # %.loopexit28
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str3081300, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3101302, %r8
	movabsq	$3, %r9
	leaq	.L.str1051097, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str571049, %rbx
	leaq	.L.str3071299, %r14
	leaq	.L.str3091301, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 875 0                 # eispack.c:875:0
.Ltmp962:
	movq	%rdi, 1992(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 1984(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1976(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1952(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1944(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1936(%rsp)        # 8-byte Spill
	movl	%ebp, 1932(%rsp)        # 4-byte Spill
	movl	%r12d, 1928(%rsp)       # 4-byte Spill
	movq	%r13, 1920(%rsp)        # 8-byte Spill
	movq	%r14, 1912(%rsp)        # 8-byte Spill
	movq	%rbx, 1904(%rsp)        # 8-byte Spill
	movq	%r10, 1896(%rsp)        # 8-byte Spill
	movq	%r11, 1888(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1887(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1888(%rsp), %rdi        # 8-byte Reload
	movq	1904(%rsp), %rsi        # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1960(%rsp), %rdi        # 8-byte Reload
	movq	1960(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	1984(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1887(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB21_15
.LBB21_31:                              # %.lr.ph34
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB21_32 Depth 3
	movq	1872(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str3221314, %r8
	leaq	.L.str7999, %rsi
	movabsq	$879, %rdi              # imm = 0x36F
	leaq	.L.str571049, %r9
	leaq	.L.str3101302, %r10
	leaq	.L.str3211313, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str3201312, %r13
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str3191311, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str3181310, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str3111303, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str3171309, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str3161308, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	movabsq	$878, %rax              # imm = 0x36E
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str3151307, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str3141306, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movabsq	$877, %rax              # imm = 0x36D
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str3131305, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str3121304, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str3071299, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 877 0                 # eispack.c:877:0
.Ltmp963:
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movq	1672(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1656(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1648(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1624(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1612(%rsp)       # 4-byte Spill
	movq	%r15, 1600(%rsp)        # 8-byte Spill
	movl	%ebp, 1596(%rsp)        # 4-byte Spill
	movq	%r12, 1584(%rsp)        # 8-byte Spill
	movq	%r13, 1576(%rsp)        # 8-byte Spill
	movq	%rbx, 1568(%rsp)        # 8-byte Spill
	movq	%r10, 1560(%rsp)        # 8-byte Spill
	movq	%r11, 1552(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1632(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1704(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1536(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp964:
	#DEBUG_VALUE: tred1:f <- [RSP+1536]
	.loc	5 878 0                 # eispack.c:878:0
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1520(%rsp)       # 8-byte Spill
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp965:
	#DEBUG_VALUE: tred1:g <- [RSP+1520]
	.loc	5 881 0                 # eispack.c:881:0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1516(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1824(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1516(%rsp), %ebp        # 4-byte Reload
	movl	10988(%rsp), %r14d      # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp966:
	.loc	5 879 0                 # eispack.c:879:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1512(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1840(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1512(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1512(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1656(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1632(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1496(%rsp)        # 8-byte Spill
.Ltmp967:
.LBB21_32:                              #   Parent Loop BB21_8 Depth=1
                                        #     Parent Loop BB21_31 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	1496(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3381330, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str3221314, %r9
	movabsq	$3, %r10
	leaq	.L.str3131305, %r11
	movabsq	$879, %rbx              # imm = 0x36F
	leaq	.L.str571049, %r14
	leaq	.L.str3391331, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str3371329, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str3241316, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str3231315, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str3351327, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str3261318, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$881, %rax              # imm = 0x371
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str3361328, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str3311323, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str3341326, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str3171309, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str3331325, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str3321324, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str3271319, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str3301322, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str3151307, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str3291321, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str3281320, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str3251317, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str3201312, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str3111303, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str3101302, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 881 0                 # eispack.c:881:0
.Ltmp968:
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1144(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1136(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1128(%rsp)        # 8-byte Spill
	movl	%ebp, 1124(%rsp)        # 4-byte Spill
	movl	%r12d, 1120(%rsp)       # 4-byte Spill
	movq	%r13, 1112(%rsp)        # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1056(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10960(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10960(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10960(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1040(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1040(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1040(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1032(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1032(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1056(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1032(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1024(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1016(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1000(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 992(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1176(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	vmovsd	992(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp969:
	.loc	5 879 0                 # eispack.c:879:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 980(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 979(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	979(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	jne	.LBB21_33
	jmp	.LBB21_32
.Ltmp970:
.LBB21_33:                              # %._crit_edge35
                                        #   in Loop: Header=BB21_31 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3411333, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3101302, %r8
	movabsq	$3, %r9
	leaq	.L.str3431335, %r10
	movabsq	$875, %r11              # imm = 0x36B
	leaq	.L.str571049, %rbx
	leaq	.L.str3131305, %r14
	leaq	.L.str3421334, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str3401332, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str3121304, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str3111303, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 875 0                 # eispack.c:875:0
	movq	%rdi, 888(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 880(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 872(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 864(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	864(%rsp), %rax         # 8-byte Reload
	movq	%r8, 848(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 840(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 832(%rsp)         # 8-byte Spill
	movl	%ebp, 828(%rsp)         # 4-byte Spill
	movl	%r12d, 824(%rsp)        # 4-byte Spill
	movq	%r13, 816(%rsp)         # 8-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%rbx, 800(%rsp)         # 8-byte Spill
	movq	%r10, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1864(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	772(%rsp), %ebp         # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 771(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	828(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	771(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1872(%rsp)        # 8-byte Spill
	jne	.LBB21_34
	jmp	.LBB21_31
.Ltmp971:
.LBB21_34:                              # %.preheader39
                                        #   in Loop: Header=BB21_8 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str3441336, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3461338, %r8
	movabsq	$3, %r9
	leaq	.L.str1051097, %r10
	movabsq	$886, %r11              # imm = 0x376
	leaq	.L.str571049, %rbx
	leaq	.L.str3431335, %r14
	leaq	.L.str3451337, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 886 0                 # eispack.c:886:0
.Ltmp972:
	movq	%rdi, 728(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 720(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movq	712(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%r8, 688(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 680(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 672(%rsp)         # 8-byte Spill
	movl	%ebp, 668(%rsp)         # 4-byte Spill
	movl	%r12d, 664(%rsp)        # 4-byte Spill
	movq	%r13, 656(%rsp)         # 8-byte Spill
	movq	%r14, 648(%rsp)         # 8-byte Spill
	movq	%rbx, 640(%rsp)         # 8-byte Spill
	movq	%r10, 632(%rsp)         # 8-byte Spill
	movq	%r11, 624(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8880(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	656(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 623(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	696(%rsp), %rsi         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	720(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	623(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB21_15
.LBB21_35:                              # %.lr.ph42
                                        #   Parent Loop BB21_8 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	608(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str3671359, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str3461338, %r9
	movabsq	$3, %r10
	leaq	.L.str1051097, %r11
	movabsq	$886, %rbx              # imm = 0x376
	leaq	.L.str571049, %r14
	leaq	.L.str3681360, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str3661358, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str1071099, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str3481340, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str3471339, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str3641356, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str3611353, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$891, %rax              # imm = 0x37B
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str3651357, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str3501342, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str3621354, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str3551347, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$890, %rax              # imm = 0x37A
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str3631355, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	leaq	.L.str3601352, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str3591351, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str3521344, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str3581350, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str1041096, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str3561348, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str3491341, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$889, %rax              # imm = 0x379
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str3571349, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str3541346, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str3531345, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str3511343, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$888, %rax              # imm = 0x378
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str3431335, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 888 0                 # eispack.c:888:0
.Ltmp973:
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%r8, 192(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 184(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 176(%rsp)         # 8-byte Spill
	movl	%ebp, 172(%rsp)         # 4-byte Spill
	movl	%r12d, 168(%rsp)        # 4-byte Spill
	movq	%r13, 160(%rsp)         # 8-byte Spill
	movq	%r14, 152(%rsp)         # 8-byte Spill
	movq	%rbx, 144(%rsp)         # 8-byte Spill
	movq	%r10, 136(%rsp)         # 8-byte Spill
	movq	%r11, 128(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	200(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	10968(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	10968(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 112(%rsp)        # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp974:
	#DEBUG_VALUE: tred1:f <- [RSP+112]
	.loc	5 889 0                 # eispack.c:889:0
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 108(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	10988(%rsp), %r9d       # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	108(%rsp), %ebp         # 4-byte Reload
	movl	10988(%rsp), %r12d      # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 104(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8880(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	8880(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	88(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 72(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	10968(%rsp), %rax       # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	vmovsd	72(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 890 0                 # eispack.c:890:0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	8888(%rsp), %rdx        # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8888(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	68(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	104(%rsp), %ebp         # 4-byte Reload
	movl	68(%rsp), %r12d         # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 64(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	64(%rsp), %r9d          # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	64(%rsp), %ebp          # 4-byte Reload
	movslq	%ebp, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 56(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	11104(%rsp), %rdx       # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	56(%rsp), %rax          # 8-byte Reload
	shlq	$3, %rax
	movq	11104(%rsp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 40(%rsp)         # 8-byte Spill
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	80(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	vmovsd	40(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 891 0                 # eispack.c:891:0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	8488(%rsp), %xmm0       # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 32(%rsp)         # 8-byte Spill
	callq	trace_logger_log_double
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	11104(%rsp), %rax       # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	vmovsd	32(%rsp), %xmm0         # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp975:
	.loc	5 886 0                 # eispack.c:886:0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	600(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %ebp          # 4-byte Reload
	movl	8900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	172(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	216(%rsp), %rsi         # 8-byte Reload
	movq	216(%rsp), %rdx         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	216(%rsp), %r9          # 8-byte Reload
	movq	224(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	jne	.LBB21_15
	jmp	.LBB21_35
.Ltmp976:
.LBB21_36:                              # %._crit_edge52
	movabsq	$894, %rdi              # imm = 0x37E
	leaq	.L.str571049, %rsi
	leaq	.L.str721064, %rdx
	leaq	.L.str3691361, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	5 894 0                 # eispack.c:894:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$11128, %rsp            # imm = 0x2B78
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp977:
.Ltmp978:
	.size	tred1, .Ltmp978-tred1
.Lfunc_end21:
	.cfi_endproc

	.section	.rodata.cst16,"aM",@progbits,16
	.align	16
.LCPI22_0:
	.quad	9223372036854775807     # double nan
	.quad	9223372036854775807     # double nan
	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI22_1:
	.quad	4372995238176751616     # double 2.2204460492503131E-16
.LCPI22_2:
	.quad	4607182418800017408     # double 1
.LCPI22_3:
	.quad	4611686018427387904     # double 2
	.text
	.globl	tqlrat
	.align	16, 0x90
	.type	tqlrat,@function
tqlrat:                                 # @tqlrat
	.cfi_startproc
.Lfunc_begin22:
	.loc	5 433 0                 # eispack.c:433:0
# BB#0:
	pushq	%rbp
.Ltmp986:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp987:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp988:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp989:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp990:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp991:
	.cfi_def_cfa_offset 56
	subq	$9336, %rsp             # imm = 0x2478
.Ltmp992:
	.cfi_def_cfa_offset 9392
.Ltmp993:
	.cfi_offset %rbx, -56
.Ltmp994:
	.cfi_offset %r12, -48
.Ltmp995:
	.cfi_offset %r13, -40
.Ltmp996:
	.cfi_offset %r14, -32
.Ltmp997:
	.cfi_offset %r15, -24
.Ltmp998:
	.cfi_offset %rbp, -16
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str5997, %r8
	movabsq	$0, %r9
	leaq	.L.str7999, %r10
	movabsq	$2, %r11
	leaq	.L.str3711363, %rbx
	movabsq	$3, %r14
	leaq	.L.str3701362, %r15
	movabsq	$454, %r12              # imm = 0x1C6
	leaq	.L.str621054, %r13
	leaq	.L.str4996, %rbp
	movq	%rcx, 9328(%rsp)        # 8-byte Spill
	leaq	.L.str701062, %rcx
	movl	%eax, 9324(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 9312(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 9304(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 9296(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rcx
	movq	%rcx, 9288(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 9280(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 9272(%rsp)        # 8-byte Spill
	movabsq	$24601, %rcx            # imm = 0x6019
	movq	%rcx, 9264(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 9256(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rcx
	movq	%rcx, 9248(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rcx
	.loc	5 366 0 prologue_end    # eispack.c:366:0
.Ltmp999:
	movl	%eax, 9244(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 9232(%rsp)        # 8-byte Spill
	movq	9264(%rsp), %rax        # 8-byte Reload
	movl	%edi, 9228(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	9296(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 9216(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	9232(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 9208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	9328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 9200(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	9288(%rsp), %rax        # 8-byte Reload
	movq	%r8, 9192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9184(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 9176(%rsp)        # 8-byte Spill
	movq	%r12, 9168(%rsp)        # 8-byte Spill
	movq	%rbp, 9160(%rsp)        # 8-byte Spill
	movq	%r15, 9152(%rsp)        # 8-byte Spill
	movq	%r14, 9144(%rsp)        # 8-byte Spill
	movq	%rbx, 9136(%rsp)        # 8-byte Spill
	movq	%r10, 9128(%rsp)        # 8-byte Spill
	movq	%r11, 9120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9200(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9264(%rsp), %rdi        # 8-byte Reload
	movq	9256(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9248(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: tqlrat:n <- [RSP+9228]
	#DEBUG_VALUE: tqlrat:d <- [RSP+9216]
	#DEBUG_VALUE: tqlrat:e2 <- [RSP+9208]
.Ltmp1000:
	#DEBUG_VALUE: tqlrat:b <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:c <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:ierr <- 0
	.loc	5 454 0                 # eispack.c:454:0
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9192(%rsp), %rcx        # 8-byte Reload
	movq	9272(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rdx        # 8-byte Reload
	movq	9184(%rsp), %rcx        # 8-byte Reload
	movq	9280(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9296(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9288(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	9304(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 9119(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	9168(%rsp), %rdi        # 8-byte Reload
	movq	9176(%rsp), %rsi        # 8-byte Reload
	movq	9160(%rsp), %rdx        # 8-byte Reload
	movq	9312(%rsp), %rcx        # 8-byte Reload
	movq	9120(%rsp), %r8         # 8-byte Reload
	movl	9324(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9144(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9152(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9120(%rsp), %rdi        # 8-byte Reload
	movq	9184(%rsp), %rsi        # 8-byte Reload
	movq	9184(%rsp), %rdx        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9136(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	9328(%rsp), %rdi        # 8-byte Reload
	movq	9328(%rsp), %rsi        # 8-byte Reload
	movq	9328(%rsp), %rcx        # 8-byte Reload
	movq	9192(%rsp), %r8         # 8-byte Reload
	movq	9184(%rsp), %r9         # 8-byte Reload
	movq	9128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	9119(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	9324(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_28
.Ltmp1001:
# BB#1:                                 # %.preheader34
	movabsq	$1, %rax
	leaq	.L.str91001, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3741366, %r8
	movabsq	$3, %r9
	leaq	.L.str3731365, %r10
	movabsq	$459, %r11              # imm = 0x1CB
	leaq	.L.str621054, %rbx
	leaq	.L.str3711363, %r14
	leaq	.L.str3721364, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 9104(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 9096(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 9088(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 9080(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	5 459 0                 # eispack.c:459:0
.Ltmp1002:
	movq	%rdi, 9072(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 9064(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 9056(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 9048(%rsp)        # 8-byte Spill
	movq	%r8, 9040(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 9032(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r14, 9024(%rsp)        # 8-byte Spill
	movq	%r15, 9016(%rsp)        # 8-byte Spill
	movl	%ebp, 9012(%rsp)        # 4-byte Spill
	movl	%r12d, 9008(%rsp)       # 4-byte Spill
	movq	%r13, 9000(%rsp)        # 8-byte Spill
	movq	%rbx, 8992(%rsp)        # 8-byte Spill
	movq	%r11, 8984(%rsp)        # 8-byte Spill
	movq	%r10, 8976(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rdx        # 8-byte Reload
	movq	9056(%rsp), %rcx        # 8-byte Reload
	movq	9080(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9096(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9088(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	$1, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	9000(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8975(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8984(%rsp), %rdi        # 8-byte Reload
	movq	8992(%rsp), %rsi        # 8-byte Reload
	movq	9024(%rsp), %rdx        # 8-byte Reload
	movq	9016(%rsp), %rcx        # 8-byte Reload
	movq	9072(%rsp), %r8         # 8-byte Reload
	movl	9012(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	9032(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	8976(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	9072(%rsp), %rdi        # 8-byte Reload
	movq	9056(%rsp), %rsi        # 8-byte Reload
	movq	9056(%rsp), %rdx        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9040(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	9104(%rsp), %rdi        # 8-byte Reload
	movq	9104(%rsp), %rsi        # 8-byte Reload
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	9048(%rsp), %r8         # 8-byte Reload
	movq	9056(%rsp), %r9         # 8-byte Reload
	movq	9064(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8975(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	9104(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB22_3
.Ltmp1003:
# BB#2:                                 # %._crit_edge37.thread
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str3701362, %r8
	leaq	.L.str7999, %rsi
	movabsq	$468, %rdi              # imm = 0x1D4
	leaq	.L.str621054, %r9
	leaq	.L.str3741366, %r10
	leaq	.L.str3761368, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$64, %r14
	leaq	.L.str141006, %r15
	leaq	.L.str611053, %r12
	movabsq	$466, %r13              # imm = 0x1D2
	movq	%rcx, 8952(%rsp)        # 8-byte Spill
	leaq	.L.str3751367, %rcx
	movq	%rcx, 8944(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 8936(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 8928(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rcx
	movq	%rcx, 8920(%rsp)        # 8-byte Spill
	leaq	.L.str131005, %rcx
	movq	%rcx, 8912(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 8904(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 8896(%rsp)        # 8-byte Spill
	leaq	.L.str111003, %rcx
	movq	%rcx, 8888(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 8880(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rcx
	movq	%rcx, 8872(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 8864(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
.Ltmp1004:
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	5 466 0                 # eispack.c:466:0
	movq	%rdi, 8856(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 8848(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 8840(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 8832(%rsp)        # 8-byte Spill
	movq	8888(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 8824(%rsp)         # 8-byte Spill
	movq	8832(%rsp), %r8         # 8-byte Reload
	movq	%r9, 8816(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 8812(%rsp)        # 4-byte Spill
	movq	%r14, 8800(%rsp)        # 8-byte Spill
	movq	%r15, 8792(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8784(%rsp)       # 8-byte Spill
	movq	%r12, 8776(%rsp)        # 8-byte Spill
	movq	%r13, 8768(%rsp)        # 8-byte Spill
	movl	%ebp, 8764(%rsp)        # 4-byte Spill
	movq	%r10, 8752(%rsp)        # 8-byte Spill
	movq	%r11, 8744(%rsp)        # 8-byte Spill
	movq	%rbx, 8736(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8864(%rsp), %rdx        # 8-byte Reload
	movq	8840(%rsp), %rcx        # 8-byte Reload
	movq	8792(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8872(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8732(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8912(%rsp), %rcx        # 8-byte Reload
	movq	8880(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8732(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8896(%rsp), %rsi        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8888(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8732(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8952(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8720(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8776(%rsp), %rcx        # 8-byte Reload
	movq	8904(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8912(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8920(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8720(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8928(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8712(%rsp)        # 8-byte Spill
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8768(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8944(%rsp), %rcx        # 8-byte Reload
	movq	8936(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8736(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	movq	8712(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8776(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8800(%rsp), %rsi        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8792(%rsp), %rcx        # 8-byte Reload
	movq	8840(%rsp), %r8         # 8-byte Reload
	movq	8848(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8720(%rsp), %rdx        # 8-byte Reload
	vmovsd	8784(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
.Ltmp1005:
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	5 468 0                 # eispack.c:468:0
	movq	8856(%rsp), %rdi        # 8-byte Reload
	movq	8816(%rsp), %rsi        # 8-byte Reload
	movq	8752(%rsp), %rdx        # 8-byte Reload
	movq	8744(%rsp), %rcx        # 8-byte Reload
	movq	8736(%rsp), %r8         # 8-byte Reload
	movl	8812(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8952(%rsp), %rdi        # 8-byte Reload
	movq	8840(%rsp), %rsi        # 8-byte Reload
	movq	8840(%rsp), %rdx        # 8-byte Reload
	movq	8952(%rsp), %rcx        # 8-byte Reload
	movq	8824(%rsp), %r8         # 8-byte Reload
	movq	8840(%rsp), %r9         # 8-byte Reload
	movq	8848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8812(%rsp), %eax        # 4-byte Reload
	movl	%eax, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB22_28
.Ltmp1006:
.LBB22_3:                               # %.lr.ph36
                                        # =>This Inner Loop Header: Depth=1
	movq	8960(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1731165, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str3731365, %r9
	movabsq	$3, %r10
	leaq	.L.str3791371, %r11
	movabsq	$459, %rbx              # imm = 0x1CB
	leaq	.L.str621054, %r14
	leaq	.L.str3781370, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 8704(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8696(%rsp)        # 8-byte Spill
	leaq	.L.str1721164, %rax
	movq	%rax, 8688(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 8680(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8672(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8664(%rsp)        # 8-byte Spill
	leaq	.L.str1161108, %rax
	movq	%rax, 8656(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 8648(%rsp)        # 8-byte Spill
	leaq	.L.str1151107, %rax
	movq	%rax, 8640(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 8632(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 8624(%rsp)        # 8-byte Spill
	leaq	.L.str201012, %rax
	movq	%rax, 8616(%rsp)        # 8-byte Spill
	leaq	.L.str221014, %rax
	movq	%rax, 8608(%rsp)        # 8-byte Spill
	movabsq	$461, %rax              # imm = 0x1CD
	movq	%rax, 8600(%rsp)        # 8-byte Spill
	leaq	.L.str3771369, %rax
	movq	%rax, 8592(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8584(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rax
	movq	%rax, 8576(%rsp)        # 8-byte Spill
	leaq	.L.str211013, %rax
	movq	%rax, 8568(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8560(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 8552(%rsp)        # 8-byte Spill
	leaq	.L.str181010, %rax
	movq	%rax, 8544(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 8536(%rsp)        # 8-byte Spill
	leaq	.L.str3711363, %rax
	movq	%rax, 8528(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 461 0                 # eispack.c:461:0
.Ltmp1007:
	movq	%rax, 8520(%rsp)        # 8-byte Spill
	movq	8552(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8512(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 8504(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 8496(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	8640(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8488(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8520(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8480(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 8472(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8464(%rsp)        # 8-byte Spill
	movl	%ebp, 8460(%rsp)        # 4-byte Spill
	movl	%r12d, 8456(%rsp)       # 4-byte Spill
	movq	%r13, 8448(%rsp)        # 8-byte Spill
	movq	%r14, 8440(%rsp)        # 8-byte Spill
	movq	%rbx, 8432(%rsp)        # 8-byte Spill
	movq	%r10, 8424(%rsp)        # 8-byte Spill
	movq	%r11, 8416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8488(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8544(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8704(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8536(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8408(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8544(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 8400(%rsp)       # 8-byte Spill
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8568(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8552(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8608(%rsp), %rcx        # 8-byte Reload
	movq	8560(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8392(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8568(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8576(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8392(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9208(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8488(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 8384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8600(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8592(%rsp), %rcx        # 8-byte Reload
	movq	8584(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8384(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8608(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8616(%rsp), %rcx        # 8-byte Reload
	movq	8504(%rsp), %r8         # 8-byte Reload
	movq	8512(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rax        # 8-byte Reload
	movq	8704(%rsp), %rcx        # 8-byte Reload
	vmovsd	8400(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, -8(%rax,%rcx,8)
.Ltmp1008:
	.loc	5 459 0                 # eispack.c:459:0
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8656(%rsp), %rcx        # 8-byte Reload
	movq	8624(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rdx        # 8-byte Reload
	movq	8504(%rsp), %rcx        # 8-byte Reload
	movq	8632(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8704(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8640(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8704(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 8376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8688(%rsp), %rcx        # 8-byte Reload
	movq	8648(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8664(%rsp), %rsi        # 8-byte Reload
	movq	8376(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8656(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	8376(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 8372(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8496(%rsp), %rcx        # 8-byte Reload
	movq	8672(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8680(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8696(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8688(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8372(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8448(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8371(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8432(%rsp), %rdi        # 8-byte Reload
	movq	8440(%rsp), %rsi        # 8-byte Reload
	movq	8472(%rsp), %rdx        # 8-byte Reload
	movq	8464(%rsp), %rcx        # 8-byte Reload
	movq	8480(%rsp), %r8         # 8-byte Reload
	movl	8460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8424(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8416(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8480(%rsp), %rdi        # 8-byte Reload
	movq	8504(%rsp), %rsi        # 8-byte Reload
	movq	8504(%rsp), %rdx        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8472(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	8488(%rsp), %rdi        # 8-byte Reload
	movq	8488(%rsp), %rsi        # 8-byte Reload
	movq	8488(%rsp), %rcx        # 8-byte Reload
	movq	8496(%rsp), %r8         # 8-byte Reload
	movq	8504(%rsp), %r9         # 8-byte Reload
	movq	8512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8371(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8376(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 8960(%rsp)        # 8-byte Spill
	jne	.LBB22_4
	jmp	.LBB22_3
.Ltmp1009:
.LBB22_4:                               # %._crit_edge37
	movabsq	$0, %rax
	movl	$1, %ecx
	movabsq	$1, %rdx
	vxorps	%xmm0, %xmm0, %xmm0
	movl	$0, %esi
	leaq	.L.str331025, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str3701362, %r10
	movabsq	$3, %r11
	leaq	.L.str3821374, %rbx
	movabsq	$468, %r14              # imm = 0x1D4
	leaq	.L.str621054, %r15
	leaq	.L.str3791371, %r12
	leaq	.L.str3811373, %r13
	movabsq	$19134, %rbp            # imm = 0x4ABE
	movq	%rax, 8360(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 8352(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 8344(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 8336(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 8328(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 8320(%rsp)        # 8-byte Spill
	leaq	.L.str321024, %rax
	movq	%rax, 8312(%rsp)        # 8-byte Spill
	movabsq	$466, %rax              # imm = 0x1D2
	movq	%rax, 8304(%rsp)        # 8-byte Spill
	leaq	.L.str3801372, %rax
	movq	%rax, 8296(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 8288(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rax
	movq	%rax, 8280(%rsp)        # 8-byte Spill
	leaq	.L.str261018, %rax
	movq	%rax, 8272(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 8264(%rsp)        # 8-byte Spill
	leaq	.L.str231015, %rax
	movq	%rax, 8256(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 8248(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 8240(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	#DEBUG_VALUE: tqlrat:f <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:t <- 0.000000e+00
	.loc	5 466 0                 # eispack.c:466:0
	movq	%rax, 8232(%rsp)        # 8-byte Spill
	movq	8304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 8224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 8220(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 8208(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	8256(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 8204(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	8232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 8192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	8220(%rsp), %eax        # 4-byte Reload
	movq	%r9, 8184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 8176(%rsp)        # 8-byte Spill
	movq	%r12, 8168(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8160(%rsp)       # 8-byte Spill
	movq	%r13, 8152(%rsp)        # 8-byte Spill
	movq	%rbp, 8144(%rsp)        # 8-byte Spill
	movq	%r14, 8136(%rsp)        # 8-byte Spill
	movq	%rbx, 8128(%rsp)        # 8-byte Spill
	movq	%r10, 8120(%rsp)        # 8-byte Spill
	movq	%r11, 8112(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8240(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 8108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8272(%rsp), %rcx        # 8-byte Reload
	movq	8248(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	8108(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8256(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8108(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	8208(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 8096(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8312(%rsp), %rcx        # 8-byte Reload
	movq	8264(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8272(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8280(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8096(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 8088(%rsp)        # 8-byte Spill
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8304(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8296(%rsp), %rcx        # 8-byte Reload
	movq	8288(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	movq	8088(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8312(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8320(%rsp), %rsi        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8336(%rsp), %rcx        # 8-byte Reload
	movq	8360(%rsp), %r8         # 8-byte Reload
	movq	8192(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	8096(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	#DEBUG_VALUE: tqlrat:l <- 0
	.loc	5 468 0                 # eispack.c:468:0
.Ltmp1010:
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8224(%rsp), %rcx        # 8-byte Reload
	movq	8328(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movq	8336(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8352(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8344(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	9228(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	8144(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 8087(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	8136(%rsp), %rdi        # 8-byte Reload
	movq	8176(%rsp), %rsi        # 8-byte Reload
	movq	8168(%rsp), %rdx        # 8-byte Reload
	movq	8152(%rsp), %rcx        # 8-byte Reload
	movq	8184(%rsp), %r8         # 8-byte Reload
	movl	8220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	8112(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8128(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8184(%rsp), %rdi        # 8-byte Reload
	movq	8360(%rsp), %rsi        # 8-byte Reload
	movq	8360(%rsp), %rdx        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8120(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	8208(%rsp), %rdi        # 8-byte Reload
	movq	8208(%rsp), %rsi        # 8-byte Reload
	movq	8208(%rsp), %rcx        # 8-byte Reload
	movq	8224(%rsp), %r8         # 8-byte Reload
	movq	8360(%rsp), %r9         # 8-byte Reload
	movq	8192(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	8087(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8360(%rsp), %rcx        # 8-byte Reload
	movl	8204(%rsp), %eax        # 4-byte Reload
	movq	8208(%rsp), %rdx        # 8-byte Reload
	vmovsd	8160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8160(%rsp), %xmm1       # 8-byte Reload
	movl	8220(%rsp), %esi        # 4-byte Reload
	vmovsd	8160(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8160(%rsp), %xmm3       # 8-byte Reload
	movl	8220(%rsp), %edi        # 4-byte Reload
	movl	%eax, 8080(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	movl	%esi, 8044(%rsp)        # 4-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%edi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_5
	jmp	.LBB22_28
.LBB22_5:                               # %.lr.ph33
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB22_9 Depth 2
                                        #     Child Loop BB22_12 Depth 2
                                        #       Child Loop BB22_15 Depth 3
                                        #       Child Loop BB22_17 Depth 3
                                        #     Child Loop BB22_22 Depth 2
	vmovsd	8024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	8032(%rsp), %xmm1       # 8-byte Reload
	movl	8044(%rsp), %eax        # 4-byte Reload
	vmovsd	8048(%rsp), %xmm2       # 8-byte Reload
	vmovsd	8056(%rsp), %xmm3       # 8-byte Reload
	movq	8064(%rsp), %rcx        # 8-byte Reload
	movl	8080(%rsp), %edx        # 4-byte Reload
	movq	8072(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str941086, %r8
	movabsq	$0, %r9
	leaq	.L.str7999, %r10
	movabsq	$2, %r11
	leaq	.L.str4001392, %rbx
	movabsq	$3, %r14
	leaq	.L.str251017, %r15
	movabsq	$473, %r12              # imm = 0x1D9
	leaq	.L.str621054, %r13
	leaq	.L.str3821374, %rbp
	movq	%rcx, 8016(%rsp)        # 8-byte Spill
	leaq	.L.str3991391, %rcx
	movl	%eax, 8012(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 8008(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 8000(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 7992(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 7984(%rsp)        # 8-byte Spill
	leaq	.L.str3901382, %rcx
	movq	%rcx, 7976(%rsp)        # 8-byte Spill
	leaq	.L.str371029, %rcx
	movq	%rcx, 7968(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 7960(%rsp)        # 8-byte Spill
	leaq	.L.str351027, %rcx
	movq	%rcx, 7952(%rsp)        # 8-byte Spill
	leaq	.L.str271019, %rcx
	movq	%rcx, 7944(%rsp)        # 8-byte Spill
	movabsq	$471, %rcx              # imm = 0x1D7
	movq	%rcx, 7936(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 7928(%rsp)        # 8-byte Spill
	leaq	.L.str311023, %rcx
	movq	%rcx, 7920(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 7912(%rsp)        # 8-byte Spill
	leaq	.L.str1981190, %rcx
	movq	%rcx, 7904(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 7896(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rcx
	movq	%rcx, 7888(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 7880(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rcx
	movq	%rcx, 7872(%rsp)        # 8-byte Spill
	leaq	.L.str3831375, %rcx
	movq	%rcx, 7864(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 7856(%rsp)        # 8-byte Spill
	leaq	.L.str291021, %rcx
	movq	%rcx, 7848(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 7840(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rcx
	movq	%rcx, 7832(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rcx
	movq	%rcx, 7824(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rcx
	movq	%rcx, 7816(%rsp)        # 8-byte Spill
	leaq	.L.str3971389, %rcx
	movq	%rcx, 7808(%rsp)        # 8-byte Spill
	leaq	.L.str3851377, %rcx
	movq	%rcx, 7800(%rsp)        # 8-byte Spill
	leaq	.L.str3981390, %rcx
	vxorps	%xmm4, %xmm4, %xmm4
	movq	%rcx, 7792(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 7784(%rsp)        # 8-byte Spill
	leaq	.L.str3791371, %rcx
	movq	%rcx, 7776(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 7768(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 7760(%rsp)        # 8-byte Spill
	leaq	.L.str3951387, %rcx
	movq	%rcx, 7752(%rsp)        # 8-byte Spill
	leaq	.L.str3961388, %rcx
	movq	%rcx, 7744(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 7736(%rsp)        # 8-byte Spill
	leaq	.L.str3941386, %rcx
	movq	%rcx, 7728(%rsp)        # 8-byte Spill
	leaq	.L.str3181310, %rcx
	movq	%rcx, 7720(%rsp)        # 8-byte Spill
	leaq	.L.str3921384, %rcx
	movq	%rcx, 7712(%rsp)        # 8-byte Spill
	leaq	.L.str3931385, %rcx
	movq	%rcx, 7704(%rsp)        # 8-byte Spill
	leaq	.L.str3911383, %rcx
	movq	%rcx, 7696(%rsp)        # 8-byte Spill
	leaq	.L.str3881380, %rcx
	movq	%rcx, 7688(%rsp)        # 8-byte Spill
	leaq	.L.str3891381, %rcx
	movq	%rcx, 7680(%rsp)        # 8-byte Spill
	leaq	.L.str3861378, %rcx
	movq	%rcx, 7672(%rsp)        # 8-byte Spill
	leaq	.L.str3871379, %rcx
	movq	%rcx, 7664(%rsp)        # 8-byte Spill
	leaq	.L.str3841376, %rcx
	.loc	5 470 0                 # eispack.c:470:0
.Ltmp1011:
	movq	%rcx, 7656(%rsp)        # 8-byte Spill
	movq	7768(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 7648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 7640(%rsp)        # 8-byte Spill
	movq	%r13, %rsi
	movl	%edx, 7636(%rsp)        # 4-byte Spill
	movq	%rbp, %rdx
	movq	7864(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 7624(%rsp)         # 8-byte Spill
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	%eax, 7620(%rsp)        # 4-byte Spill
	movl	8008(%rsp), %eax        # 4-byte Reload
	movq	%r9, 7608(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7600(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7592(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7584(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 7576(%rsp)       # 8-byte Spill
	movq	%r12, 7568(%rsp)        # 8-byte Spill
	movq	%r13, 7560(%rsp)        # 8-byte Spill
	movq	%rbp, 7552(%rsp)        # 8-byte Spill
	vmovsd	%xmm4, 7544(%rsp)       # 8-byte Spill
	movq	%r15, 7536(%rsp)        # 8-byte Spill
	movq	%r14, 7528(%rsp)        # 8-byte Spill
	movq	%r10, 7520(%rsp)        # 8-byte Spill
	movq	%r11, 7512(%rsp)        # 8-byte Spill
	movq	%rbx, 7504(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7656(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7672(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7664(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7672(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7688(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7680(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7688(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7696(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7704(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7584(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7712(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7728(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7608(%rsp), %rcx        # 8-byte Reload
	movq	7784(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7776(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7720(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7736(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7728(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7744(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7752(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7768(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7760(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7544(%rsp), %xmm0       # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7784(%rsp), %rcx        # 8-byte Reload
	movq	7648(%rsp), %r8         # 8-byte Reload
	movq	7776(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7792(%rsp), %r8         # 8-byte Reload
	movq	7648(%rsp), %r9         # 8-byte Reload
	movq	7800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7808(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7800(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1012:
	#DEBUG_VALUE: tqlrat:j <- 0
	.loc	5 471 0                 # eispack.c:471:0
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7824(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7816(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7496(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7824(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7488(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7840(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7832(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7488(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7848(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	7488(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7480(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7888(%rsp), %rcx        # 8-byte Reload
	movq	7856(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7864(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7872(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7640(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 7472(%rsp)        # 8-byte Spill
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7880(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7888(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7464(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7896(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	movq	7912(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7904(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7464(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7920(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7464(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7456(%rsp)       # 8-byte Spill
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7936(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7928(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7456(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7944(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7952(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7480(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7456(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7448(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1013:
	#DEBUG_VALUE: tqlrat:h <- [RSP+7448]
	.loc	5 473 0                 # eispack.c:473:0
	movq	7568(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	7624(%rsp), %rcx        # 8-byte Reload
	movq	7960(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7968(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7984(%rsp), %rsi        # 8-byte Reload
	vmovsd	7576(%rsp), %xmm0       # 8-byte Reload
	movq	7648(%rsp), %rdx        # 8-byte Reload
	movq	7976(%rsp), %rcx        # 8-byte Reload
	movq	7608(%rsp), %r8         # 8-byte Reload
	movq	7520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	7992(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 7447(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	7568(%rsp), %rdi        # 8-byte Reload
	movq	7560(%rsp), %rsi        # 8-byte Reload
	movq	7552(%rsp), %rdx        # 8-byte Reload
	movq	8000(%rsp), %rcx        # 8-byte Reload
	movq	7512(%rsp), %r8         # 8-byte Reload
	movl	8008(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7528(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7536(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7512(%rsp), %rdi        # 8-byte Reload
	movq	7608(%rsp), %rsi        # 8-byte Reload
	movq	7608(%rsp), %rdx        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7504(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7447(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	7648(%rsp), %rdi        # 8-byte Reload
	movq	7648(%rsp), %rsi        # 8-byte Reload
	movq	7648(%rsp), %rcx        # 8-byte Reload
	movq	7624(%rsp), %r8         # 8-byte Reload
	movq	7608(%rsp), %r9         # 8-byte Reload
	movq	7520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	7447(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7584(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7576(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7432(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7416(%rsp)       # 8-byte Spill
	jne	.LBB22_7
.Ltmp1014:
# BB#6:                                 #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str251017, %r8
	leaq	.L.str7999, %rdx
	movabsq	$478, %rdi              # imm = 0x1DE
	leaq	.L.str621054, %rsi
	leaq	.L.str4001392, %r9
	leaq	.L.str4011393, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str981090, %r12
	leaq	.L.str971089, %r13
	movq	%rax, 7408(%rsp)        # 8-byte Spill
	movabsq	$477, %rax              # imm = 0x1DD
	movq	%rax, 7400(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	vmovsd	.LCPI22_1, %xmm0
	movq	%rax, 7392(%rsp)        # 8-byte Spill
	leaq	.L.str961088, %rax
	movq	%rax, 7384(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 7376(%rsp)        # 8-byte Spill
	movabsq	$476, %rax              # imm = 0x1DC
	movq	%rax, 7368(%rsp)        # 8-byte Spill
	leaq	.L.str371029, %rax
	movq	%rax, 7360(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 7352(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rax
	movq	%rax, 7344(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
.Ltmp1015:
	#DEBUG_VALUE: tqlrat:t <- [RSP+7448]
	.loc	5 476 0                 # eispack.c:476:0
	movq	%rax, 7336(%rsp)        # 8-byte Spill
	movq	7368(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7328(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7320(%rsp)        # 8-byte Spill
	movq	%rdx, 7312(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7384(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7304(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7336(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7296(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7288(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 7280(%rsp)        # 8-byte Spill
	movq	%r14, 7272(%rsp)        # 8-byte Spill
	movq	%r12, 7264(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 7256(%rsp)       # 8-byte Spill
	movq	%r13, 7248(%rsp)        # 8-byte Spill
	movl	%ebp, 7244(%rsp)        # 4-byte Spill
	movq	%r10, 7232(%rsp)        # 8-byte Spill
	movq	%r11, 7224(%rsp)        # 8-byte Spill
	movl	%ebx, 7220(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	movq	7352(%rsp), %rdx        # 8-byte Reload
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	7344(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7448(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7360(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	7448(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 7208(%rsp)       # 8-byte Spill
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7368(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7392(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7256(%rsp), %xmm0       # 8-byte Reload
	movq	7304(%rsp), %rdx        # 8-byte Reload
	movq	7376(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7208(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7384(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7208(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7256(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 7200(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1016:
	#DEBUG_VALUE: tqlrat:b <- [RSP+7200]
	.loc	5 477 0                 # eispack.c:477:0
	movq	7400(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7264(%rsp), %rcx        # 8-byte Reload
	movq	7392(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7224(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7248(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7200(%rsp), %xmm0       # 8-byte Reload
	vmulsd	%xmm0, %xmm0, %xmm1
	movq	7272(%rsp), %rdi        # 8-byte Reload
	movq	7280(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	7408(%rsp), %rdx        # 8-byte Reload
	movq	7264(%rsp), %rcx        # 8-byte Reload
	movq	7304(%rsp), %r8         # 8-byte Reload
	movq	7312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm1, 7192(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1017:
	#DEBUG_VALUE: tqlrat:c <- [RSP+7192]
	.loc	5 478 0                 # eispack.c:478:0
	movq	7328(%rsp), %rdi        # 8-byte Reload
	movq	7320(%rsp), %rsi        # 8-byte Reload
	movq	7288(%rsp), %rdx        # 8-byte Reload
	movq	7232(%rsp), %rcx        # 8-byte Reload
	movq	7224(%rsp), %r8         # 8-byte Reload
	movl	7220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7408(%rsp), %rdi        # 8-byte Reload
	movq	7304(%rsp), %rsi        # 8-byte Reload
	movq	7304(%rsp), %rdx        # 8-byte Reload
	movq	7408(%rsp), %rcx        # 8-byte Reload
	movq	7296(%rsp), %r8         # 8-byte Reload
	movq	7304(%rsp), %r9         # 8-byte Reload
	movq	7312(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7192(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7200(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7448(%rsp), %xmm2       # 8-byte Reload
	vmovsd	%xmm0, 7432(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7424(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7416(%rsp)       # 8-byte Spill
.Ltmp1018:
.LBB22_7:                               # %.lr.ph
                                        #   in Loop: Header=BB22_5 Depth=1
	vmovsd	7416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7424(%rsp), %xmm1       # 8-byte Reload
	vmovsd	7432(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str4031395, %r8
	leaq	.L.str7999, %rdx
	movabsq	$482, %rdi              # imm = 0x1E2
	leaq	.L.str621054, %rsi
	leaq	.L.str251017, %r9
	leaq	.L.str4021394, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str3911383, %r12
	leaq	.L.str4001392, %r13
	movq	%rax, 7184(%rsp)        # 8-byte Spill
	leaq	.L.str371029, %rax
	movq	%rax, 7176(%rsp)        # 8-byte Spill
	leaq	.L.str3901382, %rax
	movq	%rax, 7168(%rsp)        # 8-byte Spill
	leaq	.L.str3821374, %rax
	movq	%rax, 7160(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 7152(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 7144(%rsp)        # 8-byte Spill
	leaq	.L.str3931385, %rax
	movq	%rax, 7136(%rsp)        # 8-byte Spill
	leaq	.L.str971089, %rax
	movq	%rax, 7128(%rsp)        # 8-byte Spill
	leaq	.L.str3921384, %rax
	movq	%rax, 7120(%rsp)        # 8-byte Spill
	leaq	.L.str3981390, %rax
	movq	%rax, 7112(%rsp)        # 8-byte Spill
	leaq	.L.str981090, %rax
	movq	%rax, 7104(%rsp)        # 8-byte Spill
	leaq	.L.str3971389, %rax
	.loc	5 482 0                 # eispack.c:482:0
.Ltmp1019:
	movq	%rax, 7096(%rsp)        # 8-byte Spill
	movq	7152(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 7088(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 7080(%rsp)        # 8-byte Spill
	movq	%rdx, 7072(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	7112(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 7064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	7144(%rsp), %rax        # 8-byte Reload
	movq	%r8, 7056(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 7048(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 7040(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 7032(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 7024(%rsp)       # 8-byte Spill
	movq	%r14, 7016(%rsp)        # 8-byte Spill
	movl	%ebp, 7012(%rsp)        # 4-byte Spill
	movq	%r15, 7000(%rsp)        # 8-byte Spill
	movq	%r13, 6992(%rsp)        # 8-byte Spill
	movq	%r12, 6984(%rsp)        # 8-byte Spill
	movl	%ebx, 6980(%rsp)        # 4-byte Spill
	movq	%r10, 6968(%rsp)        # 8-byte Spill
	movq	%r11, 6960(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7096(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7104(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	7112(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7152(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7144(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7120(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7128(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	7136(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7152(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	6984(%rsp), %rcx        # 8-byte Reload
	movq	7144(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6960(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7168(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	7160(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7176(%rsp), %r8         # 8-byte Reload
	movq	7184(%rsp), %r9         # 8-byte Reload
	movq	6992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7016(%rsp), %rdi        # 8-byte Reload
	movq	7000(%rsp), %rsi        # 8-byte Reload
	vmovsd	7040(%rsp), %xmm0       # 8-byte Reload
	movq	7184(%rsp), %rdx        # 8-byte Reload
	movq	6984(%rsp), %rcx        # 8-byte Reload
	movq	7064(%rsp), %r8         # 8-byte Reload
	movq	6992(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1020:
	#DEBUG_VALUE: tqlrat:m <- [RSP+8012]
	movq	7088(%rsp), %rdi        # 8-byte Reload
	movq	7080(%rsp), %rsi        # 8-byte Reload
	movq	7048(%rsp), %rdx        # 8-byte Reload
	movq	6968(%rsp), %rcx        # 8-byte Reload
	movq	6960(%rsp), %r8         # 8-byte Reload
	movl	6980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	7184(%rsp), %rdi        # 8-byte Reload
	movq	7064(%rsp), %rsi        # 8-byte Reload
	movq	7064(%rsp), %rdx        # 8-byte Reload
	movq	7184(%rsp), %rcx        # 8-byte Reload
	movq	7056(%rsp), %r8         # 8-byte Reload
	movq	7064(%rsp), %r9         # 8-byte Reload
	movq	7072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 6952(%rsp)        # 8-byte Spill
	movl	%ebx, 6948(%rsp)        # 4-byte Spill
	jmp	.LBB22_9
.Ltmp1021:
.LBB22_8:                               #   in Loop: Header=BB22_9 Depth=2
	movabsq	$1, %rax
	leaq	.L.str1111103, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4071399, %r8
	movabsq	$3, %r9
	leaq	.L.str4031395, %r10
	movabsq	$482, %r11              # imm = 0x1E2
	leaq	.L.str621054, %rbx
	leaq	.L.str4041396, %r14
	leaq	.L.str4061398, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 6936(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 6928(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 6920(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 6912(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 6904(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 6896(%rsp)        # 8-byte Spill
	leaq	.L.str4051397, %rax
	movq	%rax, 6888(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rdi, 6880(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 6872(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 6864(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 6856(%rsp)        # 8-byte Spill
	movq	6920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 6848(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	6856(%rsp), %rax        # 8-byte Reload
	movq	%r8, 6840(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 6832(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 6824(%rsp)        # 8-byte Spill
	movl	%ebp, 6820(%rsp)        # 4-byte Spill
	movl	%r12d, 6816(%rsp)       # 4-byte Spill
	movq	%r13, 6808(%rsp)        # 8-byte Spill
	movq	%r14, 6800(%rsp)        # 8-byte Spill
	movq	%rbx, 6792(%rsp)        # 8-byte Spill
	movq	%r10, 6784(%rsp)        # 8-byte Spill
	movq	%r11, 6776(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6896(%rsp), %rsi        # 8-byte Reload
	movq	6768(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6888(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	6768(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6808(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 6764(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6792(%rsp), %rsi        # 8-byte Reload
	movq	6800(%rsp), %rdx        # 8-byte Reload
	movq	6848(%rsp), %rcx        # 8-byte Reload
	movq	6904(%rsp), %r8         # 8-byte Reload
	movl	6820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6880(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6912(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6764(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6928(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6920(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	6764(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	6808(%rsp), %rdi        # 8-byte Reload
	movq	6936(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6848(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6763(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6776(%rsp), %rdi        # 8-byte Reload
	movq	6792(%rsp), %rsi        # 8-byte Reload
	movq	6800(%rsp), %rdx        # 8-byte Reload
	movq	6824(%rsp), %rcx        # 8-byte Reload
	movq	6880(%rsp), %r8         # 8-byte Reload
	movl	6820(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6832(%rsp), %rdi        # 8-byte Reload
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	6864(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6784(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6880(%rsp), %rdi        # 8-byte Reload
	movq	6864(%rsp), %rsi        # 8-byte Reload
	movq	6864(%rsp), %rdx        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6840(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6763(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6936(%rsp), %rdi        # 8-byte Reload
	movq	6936(%rsp), %rsi        # 8-byte Reload
	movq	6936(%rsp), %rcx        # 8-byte Reload
	movq	6848(%rsp), %r8         # 8-byte Reload
	movq	6864(%rsp), %r9         # 8-byte Reload
	movq	6872(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6763(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	6768(%rsp), %rcx        # 8-byte Reload
	movl	6756(%rsp), %ebp        # 4-byte Reload
	movl	6756(%rsp), %r12d       # 4-byte Reload
	movq	%rcx, 6952(%rsp)        # 8-byte Spill
	movl	%ebp, 6948(%rsp)        # 4-byte Spill
	movl	%r12d, 6752(%rsp)       # 4-byte Spill
	jne	.LBB22_9
	jmp	.LBB22_10
.LBB22_9:                               #   Parent Loop BB22_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	6948(%rsp), %eax        # 4-byte Reload
	movq	6952(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str1181110, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str4071399, %r10
	movabsq	$3, %r11
	leaq	.L.str4041396, %rbx
	movabsq	$484, %r14              # imm = 0x1E4
	leaq	.L.str621054, %r15
	leaq	.L.str4031395, %r12
	leaq	.L.str4101402, %r13
	movl	$0, %ebp
	movl	%eax, 6748(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 6736(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6728(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6720(%rsp)        # 8-byte Spill
	leaq	.L.str1261118, %rcx
	movq	%rcx, 6712(%rsp)        # 8-byte Spill
	leaq	.L.str4091401, %rcx
	movq	%rcx, 6704(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 6696(%rsp)        # 8-byte Spill
	movabsq	$482, %rcx              # imm = 0x1E2
	movq	%rcx, 6688(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6680(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6672(%rsp)        # 8-byte Spill
	leaq	.L.str4051397, %rcx
	movq	%rcx, 6664(%rsp)        # 8-byte Spill
	leaq	.L.str4081400, %rcx
	movq	%rcx, 6656(%rsp)        # 8-byte Spill
	leaq	.L.str1211113, %rcx
	movq	%rcx, 6648(%rsp)        # 8-byte Spill
	leaq	.L.str3981390, %rcx
	movq	%rcx, 6640(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 6632(%rsp)        # 8-byte Spill
	leaq	.L.str1201112, %rcx
	movq	%rcx, 6624(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 6616(%rsp)        # 8-byte Spill
	leaq	.L.str1601152, %rcx
	movq	%rcx, 6608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6600(%rsp)        # 8-byte Spill
	leaq	.L.str251017, %rcx
	movq	%rcx, 6592(%rsp)        # 8-byte Spill
	leaq	.L.str3941386, %rcx
	movq	%rcx, 6584(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6576(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 6568(%rsp)        # 8-byte Spill
	leaq	.L.str3831375, %rcx
	.loc	5 484 0                 # eispack.c:484:0
.Ltmp1022:
	movq	%rcx, 6560(%rsp)        # 8-byte Spill
	movq	6576(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6552(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6544(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 6536(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	6656(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6528(%rsp)         # 8-byte Spill
	movq	6568(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6520(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6516(%rsp)        # 4-byte Spill
	movq	%r15, 6504(%rsp)        # 8-byte Spill
	movq	%r12, 6496(%rsp)        # 8-byte Spill
	movq	%r13, 6488(%rsp)        # 8-byte Spill
	movl	%ebp, 6484(%rsp)        # 4-byte Spill
	movq	%r14, 6472(%rsp)        # 8-byte Spill
	movq	%rbx, 6464(%rsp)        # 8-byte Spill
	movq	%r10, 6456(%rsp)        # 8-byte Spill
	movq	%r11, 6448(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6664(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6560(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6576(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6704(%rsp), %rcx        # 8-byte Reload
	movq	6568(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6712(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6584(%rsp), %r8         # 8-byte Reload
	movq	6536(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6624(%rsp), %rcx        # 8-byte Reload
	movq	6600(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6608(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6736(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9208(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 6440(%rsp)        # 8-byte Spill
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6616(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6440(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6624(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 6432(%rsp)       # 8-byte Spill
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6544(%rsp), %rcx        # 8-byte Reload
	movq	6632(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6640(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	vmovsd	6432(%rsp), %xmm0       # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6648(%rsp), %rcx        # 8-byte Reload
	movq	6552(%rsp), %r8         # 8-byte Reload
	movq	6528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	6432(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp1023:
	.loc	5 482 0                 # eispack.c:482:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6431(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6664(%rsp), %rcx        # 8-byte Reload
	movq	6680(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6552(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	6736(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6656(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6736(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6672(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6536(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 6768(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6664(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6688(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6712(%rsp), %rcx        # 8-byte Reload
	movq	6680(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rdx        # 8-byte Reload
	movq	6552(%rsp), %rcx        # 8-byte Reload
	movq	6696(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6704(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6748(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6728(%rsp), %rdi        # 8-byte Reload
	movq	6720(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6712(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6756(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1024:
	#DEBUG_VALUE: tqlrat:m <- [RSP+6756]
	.loc	5 484 0                 # eispack.c:484:0
	movq	6472(%rsp), %rdi        # 8-byte Reload
	movq	6504(%rsp), %rsi        # 8-byte Reload
	movq	6496(%rsp), %rdx        # 8-byte Reload
	movq	6488(%rsp), %rcx        # 8-byte Reload
	movq	6520(%rsp), %r8         # 8-byte Reload
	movl	6484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6448(%rsp), %rdi        # 8-byte Reload
	movq	6552(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6464(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6520(%rsp), %rdi        # 8-byte Reload
	movq	6552(%rsp), %rsi        # 8-byte Reload
	movq	6552(%rsp), %rdx        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6456(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6431(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6536(%rsp), %rdi        # 8-byte Reload
	movq	6536(%rsp), %rsi        # 8-byte Reload
	movq	6536(%rsp), %rcx        # 8-byte Reload
	movq	6544(%rsp), %r8         # 8-byte Reload
	movq	6552(%rsp), %r9         # 8-byte Reload
	movq	6528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6431(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	6748(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 6752(%rsp)        # 4-byte Spill
	jne	.LBB22_8
.Ltmp1025:
.LBB22_10:                              # %split2
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	6752(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1381130, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str1301122, %r9
	movabsq	$3, %r10
	leaq	.L.str4131405, %r11
	movabsq	$490, %rbx              # imm = 0x1EA
	leaq	.L.str621054, %r14
	leaq	.L.str4071399, %r15
	leaq	.L.str4121404, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 6416(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 6408(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 6400(%rsp)        # 8-byte Spill
	leaq	.L.str4111403, %rcx
	movq	%rcx, 6392(%rsp)        # 8-byte Spill
	leaq	.L.str1271119, %rcx
	movq	%rcx, 6384(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6376(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6368(%rsp)        # 8-byte Spill
	leaq	.L.str3831375, %rcx
	movq	%rcx, 6360(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6352(%rsp)        # 8-byte Spill
	leaq	.L.str4031395, %rcx
	movq	%rcx, 6344(%rsp)        # 8-byte Spill
	leaq	.L.str4091401, %rcx
	movq	%rcx, 6336(%rsp)        # 8-byte Spill
	leaq	.L.str1261118, %rcx
	movq	%rcx, 6328(%rsp)        # 8-byte Spill
	leaq	.L.str4041396, %rcx
	movq	%rcx, 6320(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 6312(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 490 0                 # eispack.c:490:0
.Ltmp1026:
	movq	%rcx, 6304(%rsp)        # 8-byte Spill
	movq	6312(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 6296(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 6288(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 6280(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	6392(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 6272(%rsp)         # 8-byte Spill
	movq	6304(%rsp), %r8         # 8-byte Reload
	movq	%r9, 6264(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 6260(%rsp)        # 4-byte Spill
	movq	%r15, 6248(%rsp)        # 8-byte Spill
	movq	%r12, 6240(%rsp)        # 8-byte Spill
	movl	%ebp, 6236(%rsp)        # 4-byte Spill
	movl	%r13d, 6232(%rsp)       # 4-byte Spill
	movq	%r14, 6224(%rsp)        # 8-byte Spill
	movq	%rbx, 6216(%rsp)        # 8-byte Spill
	movq	%r10, 6208(%rsp)        # 8-byte Spill
	movq	%r11, 6200(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6328(%rsp), %r8         # 8-byte Reload
	movq	6416(%rsp), %r9         # 8-byte Reload
	movq	6320(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6336(%rsp), %r8         # 8-byte Reload
	movq	6416(%rsp), %r9         # 8-byte Reload
	movq	6344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6344(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6384(%rsp), %rcx        # 8-byte Reload
	movq	6352(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6368(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6360(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 6196(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6280(%rsp), %rcx        # 8-byte Reload
	movq	6376(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6196(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6384(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6400(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6392(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	6196(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	6408(%rsp), %rdi        # 8-byte Reload
	movq	6416(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6280(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 6195(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6216(%rsp), %rdi        # 8-byte Reload
	movq	6224(%rsp), %rsi        # 8-byte Reload
	movq	6248(%rsp), %rdx        # 8-byte Reload
	movq	6240(%rsp), %rcx        # 8-byte Reload
	movq	6272(%rsp), %r8         # 8-byte Reload
	movl	6236(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6208(%rsp), %rdi        # 8-byte Reload
	movq	6288(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6200(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6272(%rsp), %rdi        # 8-byte Reload
	movq	6288(%rsp), %rsi        # 8-byte Reload
	movq	6288(%rsp), %rdx        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6264(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6195(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	6416(%rsp), %rdi        # 8-byte Reload
	movq	6416(%rsp), %rsi        # 8-byte Reload
	movq	6416(%rsp), %rcx        # 8-byte Reload
	movq	6280(%rsp), %r8         # 8-byte Reload
	movq	6288(%rsp), %r9         # 8-byte Reload
	movq	6296(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	6195(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
# BB#11:                                # %.preheader
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4141406, %r8
	leaq	.L.str7999, %rsi
	movabsq	$494, %rdi              # imm = 0x1EE
	leaq	.L.str621054, %r9
	leaq	.L.str1301122, %r10
	leaq	.L.str1331125, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1491141, %r12
	leaq	.L.str4111403, %r13
	movq	%rcx, 6176(%rsp)        # 8-byte Spill
	leaq	.L.str3861378, %rcx
	movq	%rcx, 6168(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 6160(%rsp)        # 8-byte Spill
	leaq	.L.str1481140, %rcx
	movq	%rcx, 6152(%rsp)        # 8-byte Spill
	leaq	.L.str1471139, %rcx
	movq	%rcx, 6144(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 6136(%rsp)        # 8-byte Spill
	movabsq	$529, %rcx              # imm = 0x211
	movq	%rcx, 6128(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 6120(%rsp)        # 8-byte Spill
	leaq	.L.str1461138, %rcx
	movq	%rcx, 6112(%rsp)        # 8-byte Spill
	movabsq	$527, %rcx              # imm = 0x20F
	movq	%rcx, 6104(%rsp)        # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 6096(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 6088(%rsp)        # 8-byte Spill
	leaq	.L.str3831375, %rcx
	movq	%rcx, 6080(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 6072(%rsp)        # 8-byte Spill
	leaq	.L.str1441136, %rcx
	movq	%rcx, 6064(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rcx
	movq	%rcx, 6056(%rsp)        # 8-byte Spill
	leaq	.L.str1431135, %rcx
	movq	%rcx, 6048(%rsp)        # 8-byte Spill
	movabsq	$519, %rcx              # imm = 0x207
	movq	%rcx, 6040(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 6032(%rsp)        # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 6024(%rsp)        # 8-byte Spill
	leaq	.L.str1421134, %rcx
	movq	%rcx, 6016(%rsp)        # 8-byte Spill
	leaq	.L.str1411133, %rcx
	movq	%rcx, 6008(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rcx
	movq	%rcx, 6000(%rsp)        # 8-byte Spill
	movabsq	$511, %rcx              # imm = 0x1FF
	movq	%rcx, 5992(%rsp)        # 8-byte Spill
	leaq	.L.str1391131, %rcx
	movq	%rcx, 5984(%rsp)        # 8-byte Spill
	leaq	.L.str1401132, %rcx
	movq	%rcx, 5976(%rsp)        # 8-byte Spill
	movabsq	$507, %rcx              # imm = 0x1FB
	movq	%rcx, 5968(%rsp)        # 8-byte Spill
	movabsq	$504, %rcx              # imm = 0x1F8
	.loc	5 504 0                 # eispack.c:504:0
.Ltmp1027:
	movq	%rdi, 5960(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5952(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 5944(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	5984(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5936(%rsp)         # 8-byte Spill
	movq	6160(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5928(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5924(%rsp)        # 4-byte Spill
	movq	%r13, 5912(%rsp)        # 8-byte Spill
	movq	%r14, 5904(%rsp)        # 8-byte Spill
	movl	%ebp, 5900(%rsp)        # 4-byte Spill
	movq	%r15, 5888(%rsp)        # 8-byte Spill
	movq	%r12, 5880(%rsp)        # 8-byte Spill
	movq	%rbx, 5872(%rsp)        # 8-byte Spill
	movq	%r10, 5864(%rsp)        # 8-byte Spill
	movq	%r11, 5856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rdx        # 8-byte Reload
	movq	5944(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6080(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	.loc	5 507 0                 # eispack.c:507:0
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6176(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5848(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5968(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5976(%rsp), %rcx        # 8-byte Reload
	movq	6032(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5848(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 511 0                 # eispack.c:511:0
.Ltmp1028:
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5840(%rsp)        # 8-byte Spill
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5976(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5992(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6008(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5848(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5984(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5848(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5836(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5992(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6016(%rsp), %rcx        # 8-byte Reload
	movq	6120(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6000(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5836(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6008(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5836(%rsp), %eax        # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
.Ltmp1029:
	.loc	5 519 0                 # eispack.c:519:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6176(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6016(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5835(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	6040(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6048(%rsp), %rcx        # 8-byte Reload
	movq	6024(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	6260(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rcx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	6176(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 5824(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6040(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6064(%rsp), %rcx        # 8-byte Reload
	movq	6032(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	5824(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6048(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6056(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5824(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 527 0                 # eispack.c:527:0
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 5816(%rsp)        # 8-byte Spill
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6064(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	6104(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6112(%rsp), %rcx        # 8-byte Reload
	movq	6072(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	6088(%rsp), %rsi        # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6080(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 5812(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6104(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6144(%rsp), %rcx        # 8-byte Reload
	movq	6096(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5812(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6112(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	5812(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	.loc	5 529 0                 # eispack.c:529:0
.Ltmp1030:
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5808(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	6128(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	6152(%rsp), %rcx        # 8-byte Reload
	movq	6120(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rdx        # 8-byte Reload
	movq	5944(%rsp), %rcx        # 8-byte Reload
	movq	6136(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5808(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6144(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5808(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
.Ltmp1031:
	.loc	5 494 0                 # eispack.c:494:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	6176(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6152(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5807(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5880(%rsp), %rcx        # 8-byte Reload
	movq	6160(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	7636(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	5872(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	6168(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5912(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	7636(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5904(%rsp), %rdi        # 8-byte Reload
	movq	5888(%rsp), %rsi        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5880(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5800(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	5960(%rsp), %rdi        # 8-byte Reload
	movq	5928(%rsp), %rsi        # 8-byte Reload
	movq	5864(%rsp), %rdx        # 8-byte Reload
	movq	5856(%rsp), %rcx        # 8-byte Reload
	movq	5872(%rsp), %r8         # 8-byte Reload
	movl	5924(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	6176(%rsp), %rdi        # 8-byte Reload
	movq	5944(%rsp), %rsi        # 8-byte Reload
	movq	5944(%rsp), %rdx        # 8-byte Reload
	movq	6176(%rsp), %rcx        # 8-byte Reload
	movq	5936(%rsp), %r8         # 8-byte Reload
	movq	5944(%rsp), %r9         # 8-byte Reload
	movq	5952(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	vmovsd	7592(%rsp), %xmm0       # 8-byte Reload
	movl	5924(%rsp), %eax        # 4-byte Reload
	vmovsd	%xmm0, 5792(%rsp)       # 8-byte Spill
	movl	%eax, 5788(%rsp)        # 4-byte Spill
.LBB22_12:                              #   Parent Loop BB22_5 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB22_15 Depth 3
                                        #       Child Loop BB22_17 Depth 3
	movl	5788(%rsp), %eax        # 4-byte Reload
	vmovsd	5792(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1561148, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str4201412, %r9
	movabsq	$3, %r10
	leaq	.L.str4191411, %r11
	movabsq	$494, %rbx              # imm = 0x1EE
	leaq	.L.str621054, %r14
	leaq	.L.str4141406, %r15
	leaq	.L.str4181410, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 5776(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 5768(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 5760(%rsp)        # 8-byte Spill
	leaq	.L.str4171409, %rcx
	movq	%rcx, 5752(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 5744(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 5736(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 5728(%rsp)        # 8-byte Spill
	leaq	.L.str4161408, %rcx
	movq	%rcx, 5720(%rsp)        # 8-byte Spill
	leaq	.L.str1681160, %rcx
	movq	%rcx, 5712(%rsp)        # 8-byte Spill
	leaq	.L.str1301122, %rcx
	movq	%rcx, 5704(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 5696(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 5688(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 5680(%rsp)        # 8-byte Spill
	leaq	.L.str4151407, %rcx
	movq	%rcx, 5672(%rsp)        # 8-byte Spill
	leaq	.L.str2021194, %rcx
	movq	%rcx, 5664(%rsp)        # 8-byte Spill
	leaq	.L.str3951387, %rcx
	movq	%rcx, 5656(%rsp)        # 8-byte Spill
	movq	5696(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 5648(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 5640(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 5632(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	5672(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 5624(%rsp)         # 8-byte Spill
	movq	5688(%rsp), %r8         # 8-byte Reload
	movq	%r9, 5616(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 5612(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 5600(%rsp)       # 8-byte Spill
	movq	%r15, 5592(%rsp)        # 8-byte Spill
	movq	%r12, 5584(%rsp)        # 8-byte Spill
	movl	%ebp, 5580(%rsp)        # 4-byte Spill
	movl	%r13d, 5576(%rsp)       # 4-byte Spill
	movq	%r14, 5568(%rsp)        # 8-byte Spill
	movq	%rbx, 5560(%rsp)        # 8-byte Spill
	movq	%r10, 5552(%rsp)        # 8-byte Spill
	movq	%r11, 5544(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5656(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5664(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5680(%rsp), %rsi        # 8-byte Reload
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	movq	5776(%rsp), %rdx        # 8-byte Reload
	movq	5672(%rsp), %rcx        # 8-byte Reload
	movq	5640(%rsp), %r8         # 8-byte Reload
	movq	5720(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5696(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5752(%rsp), %rcx        # 8-byte Reload
	movq	5688(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5704(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5712(%rsp), %r8         # 8-byte Reload
	movq	5776(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5752(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5720(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5560(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5632(%rsp), %rcx        # 8-byte Reload
	movq	5728(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5744(%rsp), %rdx        # 8-byte Reload
	movq	5640(%rsp), %rcx        # 8-byte Reload
	movq	5736(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5760(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5752(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	cmpl	$29, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	5768(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 5543(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	5560(%rsp), %rdi        # 8-byte Reload
	movq	5568(%rsp), %rsi        # 8-byte Reload
	movq	5592(%rsp), %rdx        # 8-byte Reload
	movq	5584(%rsp), %rcx        # 8-byte Reload
	movq	5624(%rsp), %r8         # 8-byte Reload
	movl	5580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5552(%rsp), %rdi        # 8-byte Reload
	movq	5640(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5544(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	5624(%rsp), %rdi        # 8-byte Reload
	movq	5640(%rsp), %rsi        # 8-byte Reload
	movq	5640(%rsp), %rdx        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5616(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5543(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	5776(%rsp), %rdi        # 8-byte Reload
	movq	5776(%rsp), %rsi        # 8-byte Reload
	movq	5776(%rsp), %rcx        # 8-byte Reload
	movq	5632(%rsp), %r8         # 8-byte Reload
	movq	5640(%rsp), %r9         # 8-byte Reload
	movq	5648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5543(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_13
	jmp	.LBB22_14
.LBB22_13:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3701362, %r8
	leaq	.L.str7999, %rdx
	movabsq	$497, %rdi              # imm = 0x1F1
	leaq	.L.str621054, %rsi
	leaq	.L.str4191411, %r9
	leaq	.L.str4211413, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str1631155, %r12
	leaq	.L.str3941386, %r13
	movq	%rax, 5528(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 5520(%rsp)        # 8-byte Spill
	movabsq	$496, %rax              # imm = 0x1F0
	movq	%rax, 5512(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 496 0                 # eispack.c:496:0
.Ltmp1032:
	movq	%rax, 5504(%rsp)        # 8-byte Spill
	movq	5512(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5496(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 5488(%rsp)        # 8-byte Spill
	movq	%rdx, 5480(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 5472(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	5504(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5464(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 5456(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 5448(%rsp)        # 8-byte Spill
	movl	%ebp, 5444(%rsp)        # 4-byte Spill
	movq	%r15, 5432(%rsp)        # 8-byte Spill
	movq	%r13, 5424(%rsp)        # 8-byte Spill
	movq	%r12, 5416(%rsp)        # 8-byte Spill
	movl	%ebx, 5412(%rsp)        # 4-byte Spill
	movq	%r10, 5400(%rsp)        # 8-byte Spill
	movq	%r11, 5392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5392(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rdx        # 8-byte Reload
	movq	5472(%rsp), %rcx        # 8-byte Reload
	movq	5520(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5424(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %ebx        # 4-byte Reload
	addl	$1, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	5448(%rsp), %rdi        # 8-byte Reload
	movq	5432(%rsp), %rsi        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5416(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 5388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1033:
	#DEBUG_VALUE: tqlrat:ierr <- [RSP+5388]
	.loc	5 497 0                 # eispack.c:497:0
	movq	5496(%rsp), %rdi        # 8-byte Reload
	movq	5488(%rsp), %rsi        # 8-byte Reload
	movq	5456(%rsp), %rdx        # 8-byte Reload
	movq	5400(%rsp), %rcx        # 8-byte Reload
	movq	5392(%rsp), %r8         # 8-byte Reload
	movl	5412(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5528(%rsp), %rdi        # 8-byte Reload
	movq	5472(%rsp), %rsi        # 8-byte Reload
	movq	5472(%rsp), %rdx        # 8-byte Reload
	movq	5528(%rsp), %rcx        # 8-byte Reload
	movq	5464(%rsp), %r8         # 8-byte Reload
	movq	5472(%rsp), %r9         # 8-byte Reload
	movq	5480(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	5388(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, 9112(%rsp)        # 4-byte Spill
	jmp	.LBB22_28
.Ltmp1034:
.LBB22_14:                              #   in Loop: Header=BB22_12 Depth=2
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	vmovsd	.LCPI22_2, %xmm0
	movabsq	$0, %rsi
	leaq	.L.str141006, %rdi
	leaq	.L.str7999, %r8
	leaq	.L.str1821174, %r9
	movabsq	$3, %r10
	leaq	pythag, %r11
	leaq	.L.str3995, %rbx
	movabsq	$508, %r14              # imm = 0x1FC
	leaq	.L.str621054, %r15
	leaq	.L.str4201412, %r12
	leaq	.L.str1901182, %r13
	movabsq	$49, %rbp
	movq	%rsi, 5376(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 5372(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 5360(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 5352(%rsp)        # 8-byte Spill
	leaq	.L.str1841176, %rax
	movq	%rax, 5344(%rsp)        # 8-byte Spill
	leaq	.L.str1851177, %rax
	movq	%rax, 5336(%rsp)        # 8-byte Spill
	movabsq	$507, %rax              # imm = 0x1FB
	movq	%rax, 5328(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI22_3, %xmm1
	movq	%rax, 5320(%rsp)        # 8-byte Spill
	leaq	.L.str1701162, %rax
	movq	%rax, 5312(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 5304(%rsp)        # 8-byte Spill
	leaq	.L.str1831175, %rax
	movq	%rax, 5296(%rsp)        # 8-byte Spill
	leaq	.L.str1761168, %rax
	movq	%rax, 5288(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 5280(%rsp)        # 8-byte Spill
	leaq	.L.str1401132, %rax
	movq	%rax, 5272(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 5264(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rax
	movq	%rax, 5256(%rsp)        # 8-byte Spill
	movabsq	$506, %rax              # imm = 0x1FA
	movq	%rax, 5248(%rsp)        # 8-byte Spill
	leaq	.L.str1691161, %rax
	movq	%rax, 5240(%rsp)        # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, 5232(%rsp)        # 8-byte Spill
	leaq	.L.str1981190, %rax
	movq	%rax, 5224(%rsp)        # 8-byte Spill
	movabsq	$505, %rax              # imm = 0x1F9
	movq	%rax, 5216(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 5208(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 5200(%rsp)        # 8-byte Spill
	leaq	.L.str1681160, %rax
	movq	%rax, 5192(%rsp)        # 8-byte Spill
	leaq	.L.str4171409, %rax
	movq	%rax, 5184(%rsp)        # 8-byte Spill
	movabsq	$500, %rax              # imm = 0x1F4
	movq	%rax, 5176(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 500 0                 # eispack.c:500:0
	movq	%rax, 5168(%rsp)        # 8-byte Spill
	movq	5176(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 5160(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 5156(%rsp)        # 4-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 5144(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	5192(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 5136(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	5168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 5128(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	5372(%rsp), %eax        # 4-byte Reload
	movq	%r9, 5120(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 5112(%rsp)        # 8-byte Spill
	movq	%r13, 5104(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 5096(%rsp)       # 8-byte Spill
	movq	%rbp, 5088(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 5080(%rsp)       # 8-byte Spill
	movq	%r15, 5072(%rsp)        # 8-byte Spill
	movq	%r14, 5064(%rsp)        # 8-byte Spill
	movq	%r10, 5056(%rsp)        # 8-byte Spill
	movq	%r11, 5048(%rsp)        # 8-byte Spill
	movq	%rbx, 5040(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5376(%rsp), %rcx        # 8-byte Reload
	movq	5160(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5184(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	5612(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5200(%rsp), %rsi        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5192(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 5036(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1035:
	#DEBUG_VALUE: tqlrat:j <- [RSP+5036]
	.loc	5 505 0                 # eispack.c:505:0
	movq	5216(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5208(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7472(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5024(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5216(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5088(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5232(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5224(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5024(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5240(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5024(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
.Ltmp1036:
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5016(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1037:
	#DEBUG_VALUE: tqlrat:s <- [RSP+5016]
	.loc	5 506 0                 # eispack.c:506:0
	movq	5248(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5256(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	7496(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5008(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1038:
	#DEBUG_VALUE: tqlrat:g <- [RSP+5008]
	.loc	5 507 0                 # eispack.c:507:0
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5264(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5840(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5272(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5840(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 5000(%rsp)       # 8-byte Spill
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5280(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5288(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5296(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5008(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4992(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5304(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5080(%rsp), %xmm0       # 8-byte Reload
	movq	5376(%rsp), %rdx        # 8-byte Reload
	movq	5160(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5312(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	5080(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4984(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	5328(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5320(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4984(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5336(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5344(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4992(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4984(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	5352(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4976(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1039:
	#DEBUG_VALUE: tqlrat:p <- [RSP+4976]
	.loc	5 508 0                 # eispack.c:508:0
	movq	5064(%rsp), %rdi        # 8-byte Reload
	movq	5072(%rsp), %rsi        # 8-byte Reload
	movq	5112(%rsp), %rdx        # 8-byte Reload
	movq	5104(%rsp), %rcx        # 8-byte Reload
	movq	5088(%rsp), %r8         # 8-byte Reload
	movl	5372(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	5056(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	movq	5048(%rsp), %rdx        # 8-byte Reload
	movq	5144(%rsp), %rcx        # 8-byte Reload
	movq	5040(%rsp), %r8         # 8-byte Reload
	movq	5376(%rsp), %r9         # 8-byte Reload
	movq	5128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	5144(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	5144(%rsp), %rdx        # 8-byte Reload
	movq	5120(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	5360(%rsp), %rdi        # 8-byte Reload
	movq	5136(%rsp), %rsi        # 8-byte Reload
	vmovsd	5096(%rsp), %xmm0       # 8-byte Reload
	movq	5376(%rsp), %rdx        # 8-byte Reload
	movq	5160(%rsp), %rcx        # 8-byte Reload
	movq	5376(%rsp), %r8         # 8-byte Reload
	movq	5128(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_2(%rip), %xmm1
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	callq	pythag
.Ltmp1040:
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1821174, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	r8_sign, %r10
	leaq	.L.str481040, %r11
	movabsq	$509, %rbx              # imm = 0x1FD
	leaq	.L.str621054, %r14
	leaq	.L.str4201412, %r15
	leaq	.L.str1921184, %r12
	movabsq	$49, %r13
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rcx, 4968(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 4960(%rsp)        # 8-byte Spill
	leaq	.L.str1911183, %rcx
	movq	%rcx, 4952(%rsp)        # 8-byte Spill
	leaq	.L.str1901182, %rcx
	movq	%rcx, 4944(%rsp)        # 8-byte Spill
	leaq	fabs, %rcx
	movq	%rcx, 4936(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rcx
	movq	%rcx, 4928(%rsp)        # 8-byte Spill
	movq	4960(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 4920(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 4912(%rsp)        # 8-byte Spill
	movq	%rdx, %rsi
	vmovsd	%xmm0, 4904(%rsp)       # 8-byte Spill
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4896(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4888(%rsp)         # 8-byte Spill
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4880(%rsp)         # 8-byte Spill
	movq	4888(%rsp), %r9         # 8-byte Reload
	movq	%r13, 4872(%rsp)        # 8-byte Spill
	movq	%r15, 4864(%rsp)        # 8-byte Spill
	movq	%r12, 4856(%rsp)        # 8-byte Spill
	movl	%eax, 4852(%rsp)        # 4-byte Spill
	movl	%ebp, 4848(%rsp)        # 4-byte Spill
	movq	%r14, 4840(%rsp)        # 8-byte Spill
	movq	%rbx, 4832(%rsp)        # 8-byte Spill
	movq	%r10, 4824(%rsp)        # 8-byte Spill
	movq	%r11, 4816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1041:
	#DEBUG_VALUE: tqlrat:r <- [RSP+4904]
	.loc	5 509 0                 # eispack.c:509:0
	movq	4832(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	4872(%rsp), %r8         # 8-byte Reload
	movl	4852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	movq	4936(%rsp), %rdx        # 8-byte Reload
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	4928(%rsp), %r8         # 8-byte Reload
	movq	4920(%rsp), %r9         # 8-byte Reload
	movq	4888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4968(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	4904(%rsp), %xmm0       # 8-byte Reload
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4944(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	4904(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	4960(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4808(%rsp)       # 8-byte Spill
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4952(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4832(%rsp), %rdi        # 8-byte Reload
	movq	4840(%rsp), %rsi        # 8-byte Reload
	movq	4864(%rsp), %rdx        # 8-byte Reload
	movq	4856(%rsp), %rcx        # 8-byte Reload
	movq	4872(%rsp), %r8         # 8-byte Reload
	movl	4852(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4880(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	movq	4824(%rsp), %rdx        # 8-byte Reload
	movq	4968(%rsp), %rcx        # 8-byte Reload
	movq	4816(%rsp), %r8         # 8-byte Reload
	movq	4920(%rsp), %r9         # 8-byte Reload
	movq	4888(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4968(%rsp), %rdi        # 8-byte Reload
	movq	4896(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	4968(%rsp), %rdx        # 8-byte Reload
	movq	4912(%rsp), %rcx        # 8-byte Reload
	movq	4920(%rsp), %r8         # 8-byte Reload
	movq	4888(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	callq	r8_sign
.Ltmp1042:
	movabsq	$1, %rcx
	leaq	.L.str1421134, %r8
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4251417, %r9
	movabsq	$3, %r10
	leaq	.L.str4241416, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str621054, %r14
	leaq	.L.str4201412, %r15
	leaq	.L.str4231415, %r12
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 4800(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 4792(%rsp)        # 8-byte Spill
	leaq	.L.str1971189, %rcx
	movq	%rcx, 4784(%rsp)        # 8-byte Spill
	leaq	.L.str1761168, %rcx
	movq	%rcx, 4776(%rsp)        # 8-byte Spill
	leaq	.L.str1961188, %rcx
	movq	%rcx, 4768(%rsp)        # 8-byte Spill
	movabsq	$510, %rcx              # imm = 0x1FE
	movq	%rcx, 4760(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 4752(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rcx
	movq	%rcx, 4744(%rsp)        # 8-byte Spill
	movabsq	$509, %rcx              # imm = 0x1FD
	movq	%rcx, 4736(%rsp)        # 8-byte Spill
	leaq	.L.str4221414, %rcx
	movq	%rcx, 4728(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 4720(%rsp)        # 8-byte Spill
	leaq	.L.str1701162, %rcx
	movq	%rcx, 4712(%rsp)        # 8-byte Spill
	leaq	.L.str1951187, %rcx
	movq	%rcx, 4704(%rsp)        # 8-byte Spill
	movabsq	$16, %rcx
	movq	%rcx, 4696(%rsp)        # 8-byte Spill
	leaq	.L.str1821174, %rcx
	movq	%rcx, 4688(%rsp)        # 8-byte Spill
	leaq	.L.str1941186, %rcx
	movq	%rcx, 4680(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 4672(%rsp)        # 8-byte Spill
	leaq	.L.str1911183, %rcx
	movq	%rcx, 4664(%rsp)        # 8-byte Spill
	leaq	.L.str1921184, %rcx
	movq	%rcx, 4656(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rdi, 4648(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rcx, 4640(%rsp)        # 8-byte Spill
	movq	4792(%rsp), %rcx        # 8-byte Reload
	movq	%rsi, 4632(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, 4624(%rsp)       # 8-byte Spill
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	%rdx, 4616(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 4608(%rsp)         # 8-byte Spill
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	%r9, 4600(%rsp)         # 8-byte Spill
	movq	4632(%rsp), %r9         # 8-byte Reload
	movl	%eax, 4596(%rsp)        # 4-byte Spill
	movq	%r15, 4584(%rsp)        # 8-byte Spill
	movq	%r14, 4576(%rsp)        # 8-byte Spill
	movq	%r12, 4568(%rsp)        # 8-byte Spill
	movl	%ebp, 4564(%rsp)        # 4-byte Spill
	movq	%r13, 4552(%rsp)        # 8-byte Spill
	movq	%rbx, 4544(%rsp)        # 8-byte Spill
	movq	%r10, 4536(%rsp)        # 8-byte Spill
	movq	%r11, 4528(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4640(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4624(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4656(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4808(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4664(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4808(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4624(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4520(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4672(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4520(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4680(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4688(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4976(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4520(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4512(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4696(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4512(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4704(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4712(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4512(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4504(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4736(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4728(%rsp), %rcx        # 8-byte Reload
	movq	4720(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4744(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7496(%rsp), %rcx        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx)
	.loc	5 510 0                 # eispack.c:510:0
	movq	4760(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4752(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	4504(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4768(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4776(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4504(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4552(%rsp), %rdi        # 8-byte Reload
	movq	4792(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4800(%rsp), %rdx        # 8-byte Reload
	movq	4784(%rsp), %rcx        # 8-byte Reload
	movq	4616(%rsp), %r8         # 8-byte Reload
	movq	4632(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4496(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1043:
	#DEBUG_VALUE: tqlrat:h <- [RSP+4496]
	.loc	5 511 0                 # eispack.c:511:0
	movq	4544(%rsp), %rdi        # 8-byte Reload
	movq	4576(%rsp), %rsi        # 8-byte Reload
	movq	4584(%rsp), %rdx        # 8-byte Reload
	movq	4568(%rsp), %rcx        # 8-byte Reload
	movq	4648(%rsp), %r8         # 8-byte Reload
	movl	4596(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4536(%rsp), %rdi        # 8-byte Reload
	movq	4616(%rsp), %rsi        # 8-byte Reload
	movq	4616(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4528(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4648(%rsp), %rdi        # 8-byte Reload
	movq	4616(%rsp), %rsi        # 8-byte Reload
	movq	4616(%rsp), %rdx        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4600(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5835(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4800(%rsp), %rdi        # 8-byte Reload
	movq	4800(%rsp), %rsi        # 8-byte Reload
	movq	4800(%rsp), %rcx        # 8-byte Reload
	movq	4608(%rsp), %r8         # 8-byte Reload
	movq	4616(%rsp), %r9         # 8-byte Reload
	movq	4632(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	5835(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	8016(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4488(%rsp)        # 8-byte Spill
	jne	.LBB22_15
	jmp	.LBB22_16
.Ltmp1044:
.LBB22_15:                              # %.lr.ph5
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	4488(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231115, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str4241416, %r9
	movabsq	$3, %r10
	leaq	.L.str4251417, %r11
	movabsq	$511, %rbx              # imm = 0x1FF
	leaq	.L.str621054, %r14
	leaq	.L.str4291421, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4480(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 4472(%rsp)        # 8-byte Spill
	leaq	.L.str1221114, %rax
	movq	%rax, 4464(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 4456(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 4448(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4440(%rsp)        # 8-byte Spill
	leaq	.L.str4271419, %rax
	movq	%rax, 4432(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 4424(%rsp)        # 8-byte Spill
	leaq	.L.str4261418, %rax
	movq	%rax, 4416(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 4408(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 4400(%rsp)        # 8-byte Spill
	leaq	.L.str2011193, %rax
	movq	%rax, 4392(%rsp)        # 8-byte Spill
	leaq	.L.str1991191, %rax
	movq	%rax, 4384(%rsp)        # 8-byte Spill
	movabsq	$513, %rax              # imm = 0x201
	movq	%rax, 4376(%rsp)        # 8-byte Spill
	leaq	.L.str4281420, %rax
	movq	%rax, 4368(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 4360(%rsp)        # 8-byte Spill
	leaq	.L.str2001192, %rax
	movq	%rax, 4352(%rsp)        # 8-byte Spill
	leaq	.L.str1971189, %rax
	movq	%rax, 4344(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 4336(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 4328(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 4320(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 4312(%rsp)        # 8-byte Spill
	leaq	.L.str3881380, %rax
	movq	%rax, 4304(%rsp)        # 8-byte Spill
	leaq	.L.str4201412, %rax
	movq	%rax, 4296(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 4288(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 513 0                 # eispack.c:513:0
.Ltmp1045:
	movq	%rax, 4280(%rsp)        # 8-byte Spill
	movq	4288(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4272(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 4264(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 4256(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	4416(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4248(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4280(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4240(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 4232(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 4224(%rsp)        # 8-byte Spill
	movl	%ebp, 4220(%rsp)        # 4-byte Spill
	movl	%r12d, 4216(%rsp)       # 4-byte Spill
	movq	%r13, 4208(%rsp)        # 8-byte Spill
	movq	%r14, 4200(%rsp)        # 8-byte Spill
	movq	%rbx, 4192(%rsp)        # 8-byte Spill
	movq	%r10, 4184(%rsp)        # 8-byte Spill
	movq	%r11, 4176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4304(%rsp), %r8         # 8-byte Reload
	movq	4248(%rsp), %r9         # 8-byte Reload
	movq	4296(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4248(%rsp), %r9         # 8-byte Reload
	movq	4232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4232(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4384(%rsp), %rcx        # 8-byte Reload
	movq	4312(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4320(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4480(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	4248(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4328(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4168(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 4160(%rsp)       # 8-byte Spill
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4336(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4344(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4160(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4352(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	4160(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 4152(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	4376(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4368(%rsp), %rcx        # 8-byte Reload
	movq	4360(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4168(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4384(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4392(%rsp), %rcx        # 8-byte Reload
	movq	4264(%rsp), %r8         # 8-byte Reload
	movq	4272(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	4480(%rsp), %rcx        # 8-byte Reload
	vmovsd	4152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1046:
	.loc	5 511 0                 # eispack.c:511:0
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4432(%rsp), %rcx        # 8-byte Reload
	movq	4400(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rdx        # 8-byte Reload
	movq	4264(%rsp), %rcx        # 8-byte Reload
	movq	4408(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4480(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4416(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4480(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 4144(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4464(%rsp), %rcx        # 8-byte Reload
	movq	4424(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4440(%rsp), %rsi        # 8-byte Reload
	movq	4144(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4432(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4464(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 4140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4256(%rsp), %rcx        # 8-byte Reload
	movq	4448(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4456(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4140(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4472(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4464(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	4140(%rsp), %ebp        # 4-byte Reload
	movl	9228(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	4208(%rsp), %rdi        # 8-byte Reload
	movq	4248(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 4139(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	4192(%rsp), %rdi        # 8-byte Reload
	movq	4200(%rsp), %rsi        # 8-byte Reload
	movq	4232(%rsp), %rdx        # 8-byte Reload
	movq	4224(%rsp), %rcx        # 8-byte Reload
	movq	4240(%rsp), %r8         # 8-byte Reload
	movl	4220(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4184(%rsp), %rdi        # 8-byte Reload
	movq	4264(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4176(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	4240(%rsp), %rdi        # 8-byte Reload
	movq	4264(%rsp), %rsi        # 8-byte Reload
	movq	4264(%rsp), %rdx        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4232(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4139(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	4248(%rsp), %rdi        # 8-byte Reload
	movq	4248(%rsp), %rsi        # 8-byte Reload
	movq	4248(%rsp), %rcx        # 8-byte Reload
	movq	4256(%rsp), %r8         # 8-byte Reload
	movq	4264(%rsp), %r9         # 8-byte Reload
	movq	4272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	4139(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	4144(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 4488(%rsp)        # 8-byte Spill
	jne	.LBB22_16
	jmp	.LBB22_15
.Ltmp1047:
.LBB22_16:                              # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rax
	leaq	.L.str1481140, %r8
	movabsq	$0, %rcx
	leaq	.L.str7999, %rdx
	movabsq	$2, %rsi
	leaq	.L.str4331425, %rdi
	movabsq	$3, %r9
	leaq	.L.str4321424, %r10
	movabsq	$529, %r11              # imm = 0x211
	leaq	.L.str621054, %rbx
	leaq	.L.str4251417, %r14
	leaq	.L.str4311423, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 4128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 4120(%rsp)        # 8-byte Spill
	leaq	.L.str4301422, %rax
	.loc	5 515 0                 # eispack.c:515:0
	movq	%rax, 4112(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str621054, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 4104(%rsp)        # 8-byte Spill
	movl	$.L.str4251417, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4096(%rsp)        # 8-byte Spill
	movl	$.L.str2021194, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4088(%rsp)        # 8-byte Spill
	movl	$515, %esi              # imm = 0x203
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4080(%rsp)        # 8-byte Spill
	movl	$9, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 4072(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 4064(%rsp)        # 8-byte Spill
	movq	4080(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 4056(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	4064(%rsp), %rax        # 8-byte Reload
	movl	%esi, 4052(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	4096(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 4040(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	4088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 4032(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	4072(%rsp), %rax        # 8-byte Reload
	movq	%r8, 4024(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	4052(%rsp), %eax        # 4-byte Reload
	movq	%r9, 4016(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 4008(%rsp)       # 8-byte Spill
	movq	%r13, 4000(%rsp)        # 8-byte Spill
	movq	%r14, 3992(%rsp)        # 8-byte Spill
	movq	%r15, 3984(%rsp)        # 8-byte Spill
	movl	%ebp, 3980(%rsp)        # 4-byte Spill
	movl	%r12d, 3976(%rsp)       # 4-byte Spill
	movq	%rbx, 3968(%rsp)        # 8-byte Spill
	movq	%r10, 3960(%rsp)        # 8-byte Spill
	movq	%r11, 3952(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	$.L.str1971189, %eax
	movl	%eax, %ecx
	movl	$.L.str7999, %eax
	movl	%eax, %edx
	movl	$2, %eax
	movl	%eax, %esi
	movl	$64, %eax
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %r8d
	movl	4052(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r10d
	movq	%rdi, 3944(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	3944(%rsp), %r11        # 8-byte Reload
	movq	%rsi, 3936(%rsp)        # 8-byte Spill
	movq	%r11, %rsi
	vmovsd	4496(%rsp), %xmm0       # 8-byte Reload
	movq	%rdx, 3928(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%r8, 3920(%rsp)         # 8-byte Spill
	movq	%r10, %r8
	movq	3928(%rsp), %r9         # 8-byte Reload
	movq	%r10, 3912(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movl	$.L.str4151407, %eax
	movl	%eax, %ecx
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	5600(%rsp), %xmm0       # 8-byte Reload
	vmovsd	4496(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	4088(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3904(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3896(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1048:
	#DEBUG_VALUE: tqlrat:f <- [RSP+3896]
	.loc	5 519 0                 # eispack.c:519:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2031195, %eax
	movl	%eax, %ecx
	movl	$519, %eax              # imm = 0x207
	movl	%eax, %edi
	movl	$27, %eax
	movl	%eax, %r8d
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3888(%rsp)        # 8-byte Spill
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1049:
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$.L.str1441136, %eax
	movl	%eax, %r8d
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	movq	5816(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	5816(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rcx), %xmm0
	movq	3904(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3880(%rsp)       # 8-byte Spill
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1050:
	#DEBUG_VALUE: tqlrat:g <- [RSP+3880]
	.loc	5 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2051197, %eax
	movl	%eax, %ecx
	movl	$520, %eax              # imm = 0x208
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3872(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3864(%rsp)        # 8-byte Spill
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1051:
	movl	$.L.str141006, %eax
	movl	%eax, %ecx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3856(%rsp)       # 8-byte Spill
	movq	3912(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3856(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3880(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	5 522 0                 # eispack.c:522:0
.Ltmp1052:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str7999, (%rsi)
	movq	3904(%rsp), %rdi        # 8-byte Reload
	movq	3920(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 3848(%rsp)        # 8-byte Spill
	movq	3920(%rsp), %r8         # 8-byte Reload
	movb	%cl, 3847(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp1053:
	.loc	5 520 0                 # eispack.c:520:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4301422, %ebp
	movl	%ebp, %ecx
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	3872(%rsp), %rdi        # 8-byte Reload
	movq	4064(%rsp), %rsi        # 8-byte Reload
	movq	4096(%rsp), %rdx        # 8-byte Reload
	movl	4052(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3888(%rsp), %rcx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str3931385, %ebp
	movl	%ebp, %ecx
.Ltmp1054:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7032]
	movq	3936(%rsp), %rdi        # 8-byte Reload
	movq	3944(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	3920(%rsp), %rdx        # 8-byte Reload
	movq	3912(%rsp), %r8         # 8-byte Reload
	movq	3928(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1055:
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3920(%rsp), %rdi        # 8-byte Reload
	movq	3920(%rsp), %rsi        # 8-byte Reload
	movq	3848(%rsp), %rdx        # 8-byte Reload
	movq	3920(%rsp), %rcx        # 8-byte Reload
	movq	3864(%rsp), %r8         # 8-byte Reload
	movq	3912(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	3847(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3832(%rsp)       # 8-byte Spill
	jne	.LBB22_30
# BB#29:                                # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3880(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 3832(%rsp)       # 8-byte Spill
.LBB22_30:                              # %._crit_edge6
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3832(%rsp), %xmm0       # 8-byte Reload
.Ltmp1056:
	.loc	5 525 0                 # eispack.c:525:0
	movq	4000(%rsp), %rdi        # 8-byte Reload
	movq	4120(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3824(%rsp)       # 8-byte Spill
	movq	4128(%rsp), %rdx        # 8-byte Reload
	movq	4112(%rsp), %rcx        # 8-byte Reload
	movq	4032(%rsp), %r8         # 8-byte Reload
	movq	4040(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1057:
	#DEBUG_VALUE: tqlrat:h <- [RSP+3824]
	#DEBUG_VALUE: tqlrat:s <- 0.000000e+00
	#DEBUG_VALUE: tqlrat:mml <- [RSP+5808]
	#DEBUG_VALUE: tqlrat:ii <- 1
	.loc	5 529 0                 # eispack.c:529:0
	movq	3952(%rsp), %rdi        # 8-byte Reload
	movq	3968(%rsp), %rsi        # 8-byte Reload
	movq	3992(%rsp), %rdx        # 8-byte Reload
	movq	3984(%rsp), %rcx        # 8-byte Reload
	movq	4104(%rsp), %r8         # 8-byte Reload
	movl	3980(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	4016(%rsp), %rdi        # 8-byte Reload
	movq	4032(%rsp), %rsi        # 8-byte Reload
	movq	4032(%rsp), %rdx        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	3960(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	4104(%rsp), %rdi        # 8-byte Reload
	movq	4032(%rsp), %rsi        # 8-byte Reload
	movq	4032(%rsp), %rdx        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	4056(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5807(%rsp), %r10b       # 1-byte Reload
	andb	$1, %r10b
	movzbl	%r10b, %r11d
	movl	%r11d, %edx
	movq	4128(%rsp), %rdi        # 8-byte Reload
	movq	4128(%rsp), %rsi        # 8-byte Reload
	movq	4128(%rsp), %rcx        # 8-byte Reload
	movq	4024(%rsp), %r8         # 8-byte Reload
	movq	4032(%rsp), %r9         # 8-byte Reload
	movq	4040(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	5807(%rsp), %r10b       # 1-byte Reload
	testb	$1, %r10b
	movq	4128(%rsp), %rax        # 8-byte Reload
	vmovsd	4008(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3824(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3824(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3808(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3792(%rsp)       # 8-byte Spill
	jne	.LBB22_18
.Ltmp1058:
.LBB22_17:                              # %.lr.ph12
                                        #   Parent Loop BB22_5 Depth=1
                                        #     Parent Loop BB22_12 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	3792(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3808(%rsp), %xmm2       # 8-byte Reload
	movq	3816(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str4441436, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str4331425, %r9
	movabsq	$3, %r10
	leaq	.L.str4321424, %r11
	movabsq	$529, %rbx              # imm = 0x211
	leaq	.L.str621054, %r14
	leaq	.L.str4451437, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 3784(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3776(%rsp)        # 8-byte Spill
	leaq	.L.str4431435, %rax
	movq	%rax, 3768(%rsp)        # 8-byte Spill
	leaq	.L.str1491141, %rax
	movq	%rax, 3760(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3752(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3744(%rsp)        # 8-byte Spill
	leaq	.L.str4351427, %rax
	movq	%rax, 3736(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 3728(%rsp)        # 8-byte Spill
	leaq	.L.str4341426, %rax
	movq	%rax, 3720(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 3712(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3704(%rsp)        # 8-byte Spill
	leaq	.L.str2551247, %rax
	movq	%rax, 3696(%rsp)        # 8-byte Spill
	leaq	.L.str2541246, %rax
	movq	%rax, 3688(%rsp)        # 8-byte Spill
	leaq	.L.str2291221, %rax
	movq	%rax, 3680(%rsp)        # 8-byte Spill
	movabsq	$542, %rax              # imm = 0x21E
	movq	%rax, 3672(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 3664(%rsp)        # 8-byte Spill
	leaq	.L.str2091201, %rax
	movq	%rax, 3656(%rsp)        # 8-byte Spill
	leaq	.L.str4391431, %rax
	movq	%rax, 3648(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	5 531 0                 # eispack.c:531:0
.Ltmp1059:
	movq	%rax, 3640(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str621054, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 3632(%rsp)        # 8-byte Spill
	movl	$.L.str4331425, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3624(%rsp)        # 8-byte Spill
	movl	$.L.str4341426, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 3616(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 3600(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 3592(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %rax        # 8-byte Reload
	movl	%esi, 3580(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3624(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3568(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3616(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 3560(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3600(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3552(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	3580(%rsp), %eax        # 4-byte Reload
	movq	%r9, 3544(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 3536(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3528(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3520(%rsp)       # 8-byte Spill
	movq	%r13, 3512(%rsp)        # 8-byte Spill
	movq	%r15, 3504(%rsp)        # 8-byte Spill
	movl	%ebp, 3500(%rsp)        # 4-byte Spill
	movl	%r12d, 3496(%rsp)       # 4-byte Spill
	movq	%r14, 3488(%rsp)        # 8-byte Spill
	movq	%rbx, 3480(%rsp)        # 8-byte Spill
	movq	%r10, 3472(%rsp)        # 8-byte Spill
	movq	%r11, 3464(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251417, (%rcx)
	movl	$.L.str141006, %eax
	movl	%eax, %ecx
	movl	$2, %eax
	movl	%eax, %edx
	movl	$64, %eax
	movl	%eax, %esi
	movl	3580(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edi
	movl	$1, %r9d
	movl	%r9d, %r8d
	movq	%rdi, 3456(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 3448(%rsp)        # 8-byte Spill
	movq	%rdx, 3440(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3456(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3432(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3432(%rsp), %r11        # 8-byte Reload
	movq	%r8, 3424(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str4251417, %eax
	movl	%eax, %r9d
	movq	%rsp, %rcx
	movq	$.L.str4331425, (%rcx)
	movl	$.L.str4351427, %eax
	movl	%eax, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r10        # 8-byte Reload
	movq	%r9, 3416(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331425, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3408(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4361428, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3400(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	vxorps	%xmm0, %xmm0, %xmm0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3392(%rsp)       # 8-byte Spill
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3416(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movq	$.L.str4331425, (%rcx)
	movl	$.L.str2351227, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3384(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4371429, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3376(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251417, (%rcx)
	movl	$.L.str4301422, %eax
	movl	%eax, %ecx
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3368(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331425, (%rcx)
	movl	$.L.str2551247, %eax
	movl	%eax, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4381430, %eax
	movl	%eax, %ecx
	movq	3584(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3360(%rsp)        # 8-byte Spill
	movq	3600(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4251417, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4331425, (%rcx)
	movl	$.L.str4391431, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3352(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3352(%rsp), %r8         # 8-byte Reload
	movq	3424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2061198, %eax
	movl	%eax, %ecx
	movl	$531, %eax              # imm = 0x213
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3344(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3336(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3616(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str7999, %eax
	movl	%eax, %ecx
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movl	%edx, %eax
	movl	%eax, %ebp
	movl	%ebp, %esi
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movl	$32, %ebp
	movl	%ebp, %edi
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	%rdi, 3328(%rsp)        # 8-byte Spill
	movq	%r8, %rdi
	movq	3328(%rsp), %r9         # 8-byte Reload
	movq	%rsi, 3320(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 3312(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3308(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2071199, %eax
	movl	%eax, %ecx
	movl	$10, %eax
	movl	%eax, %r8d
	movq	3344(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3296(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$.L.str4111403, %ebp
	movl	%ebp, %r8d
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	6260(%rsp), %eax        # 4-byte Reload
	movl	3308(%rsp), %ebp        # 4-byte Reload
	subl	%ebp, %eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3288(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1060:
	#DEBUG_VALUE: tqlrat:i <- [RSP+3284]
	.loc	5 532 0                 # eispack.c:532:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2091201, %eax
	movl	%eax, %ecx
	movl	$532, %eax              # imm = 0x214
	movl	%eax, %edi
	movl	$13, %eax
	movl	%eax, %edx
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3272(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3264(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1061:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3528(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3264(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3256(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1062:
	#DEBUG_VALUE: tqlrat:p <- [RSP+3256]
	.loc	5 533 0                 # eispack.c:533:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2141206, %eax
	movl	%eax, %ecx
	movl	$533, %eax              # imm = 0x215
	movl	%eax, %edx
	movl	$35, %eax
	movl	%eax, %esi
	movq	%rdx, %rdi
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3248(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 3240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 3232(%rsp)        # 8-byte Spill
	movq	3248(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1063:
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3284(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3224(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2201212, %eax
	movl	%eax, %ecx
	movl	$29, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3216(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3208(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$.L.str1601152, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3200(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3192(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2281220, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3184(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3176(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3168(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2291221, %eax
	movl	%eax, %ecx
	movl	$9, %eax
	movl	%eax, %edx
	movq	3240(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3160(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3152(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3168(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3176(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3264(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3168(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3144(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1064:
	#DEBUG_VALUE: tqlrat:r <- [RSP+3144]
	.loc	5 534 0                 # eispack.c:534:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2301222, %eax
	movl	%eax, %ecx
	movl	$534, %eax              # imm = 0x216
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3136(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3128(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1065:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3520(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3120(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2311223, %eax
	movl	%eax, %ecx
	movl	$8, %eax
	movl	%eax, %r8d
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3112(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3296(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3284(%rsp), %eax        # 4-byte Reload
	incl	%eax
	movl	%eax, %ecx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3104(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	movl	%eax, 3100(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2321224, %eax
	movl	%eax, %ecx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3088(%rsp)        # 8-byte Spill
	movq	3248(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3328(%rsp), %rsi        # 8-byte Reload
	movq	3104(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	3100(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	%rsp, %rdx
	movq	$.L.str7999, (%rdx)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2331225, %eax
	movl	%eax, %ecx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 3072(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9208(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3064(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4401432, %eax
	movl	%eax, %ecx
	movl	$28, %eax
	movl	%eax, %edx
	movq	3136(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3056(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3120(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	vmovsd	3120(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	5 535 0                 # eispack.c:535:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str2341226, %eax
	movl	%eax, %esi
	movl	$535, %eax              # imm = 0x217
	movl	%eax, %edi
	movq	%rdi, 3048(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 3040(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 3032(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$16, %eax
	movl	%eax, %ecx
	movq	3048(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 3024(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3032(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 3016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1066:
	#DEBUG_VALUE: tqlrat:s <- [RSP+3016]
	.loc	5 536 0                 # eispack.c:536:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2361228, %eax
	movl	%eax, %ecx
	movl	$536, %eax              # imm = 0x218
	movl	%eax, %edx
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 3008(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, 3000(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1067:
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movl	$.L.str821074, %eax
	movl	%eax, %ecx
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2992(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2984(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2371229, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2976(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2968(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2381230, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2960(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2968(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2968(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2952(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2391231, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2944(%rsp)        # 8-byte Spill
	movq	3272(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2952(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3384(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2952(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2944(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2936(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2401232, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2928(%rsp)        # 8-byte Spill
	movq	3160(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2936(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2944(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3376(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3528(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2936(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2920(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2411233, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2912(%rsp)        # 8-byte Spill
	movq	3216(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	leaq	(%rcx,%rdx,8), %rsi
	movq	%rsp, %rdi
	movq	$.L.str7999, (%rdi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2904(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4411433, %eax
	movl	%eax, %ecx
	movq	3008(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2920(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2928(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %rdx        # 8-byte Reload
	vmovsd	2920(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rcx,%rdx,8)
	.loc	5 537 0                 # eispack.c:537:0
	movq	%rsp, %rsi
	movl	$1, (%rsi)
	movl	$.L.str2421234, %eax
	movl	%eax, %esi
	movl	$537, %eax              # imm = 0x219
	movl	%eax, %edi
	movq	%rdi, 2896(%rsp)        # 8-byte Spill
	movq	3608(%rsp), %r8         # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%r8, %rsi
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2880(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2451237, %eax
	movl	%eax, %ecx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2872(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3208(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	9208(%rsp), %rcx        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2864(%rsp)       # 8-byte Spill
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str4421434, %eax
	movl	%eax, %ecx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2856(%rsp)        # 8-byte Spill
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3536(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2864(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2864(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3536(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2848(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2521244, %eax
	movl	%eax, %ecx
	movl	$11, %eax
	movl	%eax, %r8d
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2840(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2848(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2856(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2880(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2888(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2880(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2848(%rsp), %xmm1       # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2832(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1068:
	#DEBUG_VALUE: tqlrat:g <- [RSP+2832]
	.loc	5 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str2531245, %eax
	movl	%eax, %ecx
	movl	$538, %eax              # imm = 0x21A
	movl	%eax, %edx
	movl	$47, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 2824(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2816(%rsp)        # 8-byte Spill
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
.Ltmp1069:
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	3392(%rsp), %xmm0       # 8-byte Reload
	movq	3456(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1070:
	.loc	5 537 0                 # eispack.c:537:0
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3392(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	.loc	5 538 0                 # eispack.c:538:0
.Ltmp1071:
	setnp	%al
	sete	%cl
	andb	%al, %cl
	.loc	5 540 0                 # eispack.c:540:0
.Ltmp1072:
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str7999, (%rsi)
	movq	3408(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2808(%rsp)        # 8-byte Spill
	movq	3424(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2807(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp1073:
	.loc	5 538 0                 # eispack.c:538:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$50, %ebp
	movl	%ebp, %r8d
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	3608(%rsp), %rsi        # 8-byte Reload
	movq	3624(%rsp), %rdx        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	movl	3580(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movl	$3, %r9d
	movl	%r9d, %edi
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	2840(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movl	$.L.str3931385, %ebp
	movl	%ebp, %ecx
.Ltmp1074:
	#DEBUG_VALUE: tqlrat:g <- [RSP+7032]
	movq	3440(%rsp), %rdi        # 8-byte Reload
	movq	3448(%rsp), %rsi        # 8-byte Reload
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	movq	3424(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3312(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp1075:
	movq	%rsp, %rcx
	movq	$.L.str7999, (%rcx)
	movq	3424(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	3456(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movb	2807(%rsp), %al         # 1-byte Reload
	testb	%al, %al
	vmovsd	7032(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2792(%rsp)       # 8-byte Spill
	jne	.LBB22_32
# BB#31:                                # %.lr.ph12
                                        #   in Loop: Header=BB22_17 Depth=3
	vmovsd	2832(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 2792(%rsp)       # 8-byte Spill
.LBB22_32:                              # %.lr.ph12
                                        #   in Loop: Header=BB22_17 Depth=3
	vmovsd	2792(%rsp), %xmm0       # 8-byte Reload
.Ltmp1076:
	.loc	5 542 0                 # eispack.c:542:0
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2784(%rsp)       # 8-byte Spill
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3672(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3640(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	2784(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3648(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3656(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	3256(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2784(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2776(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	3672(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3664(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	3144(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3680(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3688(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2776(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3144(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3696(%rsp), %rcx        # 8-byte Reload
	movq	3632(%rsp), %r8         # 8-byte Reload
	movq	3592(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2768(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1077:
	#DEBUG_VALUE: tqlrat:h <- [RSP+2768]
	.loc	5 529 0                 # eispack.c:529:0
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3736(%rsp), %rcx        # 8-byte Reload
	movq	3704(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3712(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	3784(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3720(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3784(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3736(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3768(%rsp), %rcx        # 8-byte Reload
	movq	3728(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3744(%rsp), %rsi        # 8-byte Reload
	movq	2760(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3736(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2760(%rsp), %rax        # 8-byte Reload
	movl	%eax, %r11d
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3768(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r11d, 2756(%rsp)       # 4-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3568(%rsp), %rcx        # 8-byte Reload
	movq	3752(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	5800(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %r11d
	movl	%r11d, %edx
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3760(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2756(%rsp), %r11d       # 4-byte Reload
	movl	%r11d, %ebx
	movl	%ebx, %edx
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3776(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3768(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2756(%rsp), %r11d       # 4-byte Reload
	movl	5800(%rsp), %ebx        # 4-byte Reload
	cmpl	%ebx, %r11d
	sete	%bpl
	movb	%bpl, %r14b
	andb	$1, %r14b
	movzbl	%r14b, %r15d
	movl	%r15d, %edx
	movq	3512(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movb	%bpl, 2755(%rsp)        # 1-byte Spill
	callq	trace_logger_log_int
	movq	3480(%rsp), %rdi        # 8-byte Reload
	movq	3488(%rsp), %rsi        # 8-byte Reload
	movq	3544(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movl	3500(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3472(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3552(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3544(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2755(%rsp), %bpl        # 1-byte Reload
	andb	$1, %bpl
	movzbl	%bpl, %r11d
	movl	%r11d, %edx
	movq	3560(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3560(%rsp), %rcx        # 8-byte Reload
	movq	3568(%rsp), %r8         # 8-byte Reload
	movq	3632(%rsp), %r9         # 8-byte Reload
	movq	3592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2755(%rsp), %bpl        # 1-byte Reload
	testb	$1, %bpl
	movq	2760(%rsp), %rax        # 8-byte Reload
	vmovsd	3016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2768(%rsp), %xmm1       # 8-byte Reload
	vmovsd	2784(%rsp), %xmm2       # 8-byte Reload
	movq	%rax, 3816(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 3808(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 3800(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 3792(%rsp)       # 8-byte Spill
	jne	.LBB22_18
	jmp	.LBB22_17
.Ltmp1078:
.LBB22_18:                              # %._crit_edge13
                                        #   in Loop: Header=BB22_12 Depth=2
	vmovsd	3792(%rsp), %xmm0       # 8-byte Reload
	vmovsd	3800(%rsp), %xmm1       # 8-byte Reload
	vmovsd	3808(%rsp), %xmm2       # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str2571249, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4511443, %r8
	movabsq	$3, %r9
	leaq	.L.str4131405, %r10
	movabsq	$549, %r11              # imm = 0x225
	leaq	.L.str621054, %rbx
	leaq	.L.str4321424, %r14
	leaq	.L.str4501442, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm3, %xmm3, %xmm3
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str1891181, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$545, %rax              # imm = 0x221
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str4491441, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str2561248, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	movabsq	$544, %rax              # imm = 0x220
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str4481440, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str4471439, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str4461438, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str4251417, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str4301422, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str4391431, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str4331425, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	leaq	.L.str2551247, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str2351227, %rax
	.loc	5 544 0                 # eispack.c:544:0
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2552(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2544(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2536(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2528(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 2504(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 2496(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 2488(%rsp)       # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	movl	%r12d, 2480(%rsp)       # 4-byte Spill
	movq	%r13, 2472(%rsp)        # 8-byte Spill
	vmovsd	%xmm3, 2464(%rsp)       # 8-byte Spill
	movq	%r15, 2456(%rsp)        # 8-byte Spill
	movq	%r14, 2448(%rsp)        # 8-byte Spill
	movq	%r10, 2440(%rsp)        # 8-byte Spill
	movq	%r11, 2432(%rsp)        # 8-byte Spill
	movq	%rbx, 2424(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2592(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2744(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2616(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2488(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2504(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2488(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2416(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 545 0                 # eispack.c:545:0
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7496(%rsp), %rax        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 549 0                 # eispack.c:549:0
.Ltmp1079:
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2464(%rsp), %xmm0       # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2744(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2464(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2432(%rsp), %rdi        # 8-byte Reload
	movq	2424(%rsp), %rsi        # 8-byte Reload
	movq	2448(%rsp), %rdx        # 8-byte Reload
	movq	2456(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2536(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2552(%rsp), %rdi        # 8-byte Reload
	movq	2536(%rsp), %rsi        # 8-byte Reload
	movq	2536(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	2536(%rsp), %r9         # 8-byte Reload
	movq	2544(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
.Ltmp1080:
# BB#19:                                #   in Loop: Header=BB22_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str2721264, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4131405, %r8
	movabsq	$3, %r9
	leaq	.L.str4161408, %r10
	movabsq	$554, %r11              # imm = 0x22A
	leaq	.L.str621054, %rbx
	leaq	.L.str4511443, %r14
	leaq	.L.str4521444, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str2591251, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str2611253, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str2601252, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	leaq	fabs, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str6998, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str3981390, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str1891181, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str2581250, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	5 554 0                 # eispack.c:554:0
.Ltmp1081:
	movq	%rdi, 2288(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2280(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2272(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movq	2304(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2264(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2248(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2240(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2232(%rsp)        # 8-byte Spill
	movl	%ebp, 2228(%rsp)        # 4-byte Spill
	movl	%r12d, 2224(%rsp)       # 4-byte Spill
	movq	%r13, 2216(%rsp)        # 8-byte Spill
	movq	%r14, 2208(%rsp)        # 8-byte Spill
	movq	%rbx, 2200(%rsp)        # 8-byte Spill
	movq	%r10, 2192(%rsp)        # 8-byte Spill
	movq	%r11, 2184(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2176(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2176(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	2176(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2168(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	7024(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2496(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 2160(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2160(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	.LCPI22_0(%rip), %xmm0
	vmovsd	2160(%rsp), %xmm1       # 8-byte Reload
	vandpd	%xmm0, %xmm1, %xmm0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2152(%rsp)       # 8-byte Spill
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2392(%rsp), %rsi        # 8-byte Reload
	vmovsd	2168(%rsp), %xmm0       # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2152(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2168(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2151(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2184(%rsp), %rdi        # 8-byte Reload
	movq	2200(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2228(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2272(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2272(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2151(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2256(%rsp), %r8         # 8-byte Reload
	movq	2272(%rsp), %r9         # 8-byte Reload
	movq	2280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2151(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_20
	jmp	.LBB22_21
.Ltmp1082:
.LBB22_20:                              #   in Loop: Header=BB22_12 Depth=2
	movabsq	$1, %rax
	leaq	.L.str2811273, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4141406, %r8
	movabsq	$3, %r9
	leaq	.L.str4131405, %r10
	movabsq	$561, %r11              # imm = 0x231
	leaq	.L.str621054, %rbx
	leaq	.L.str4161408, %r14
	leaq	.L.str4541446, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str2801272, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$559, %rax              # imm = 0x22F
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str4531445, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str1891181, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str2581250, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	5 559 0                 # eispack.c:559:0
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2040(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2032(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2024(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2016(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2008(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2000(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1996(%rsp)        # 4-byte Spill
	movl	%r12d, 1992(%rsp)       # 4-byte Spill
	movq	%r13, 1984(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1976(%rsp)       # 8-byte Spill
	movq	%r15, 1968(%rsp)        # 8-byte Spill
	movq	%r14, 1960(%rsp)        # 8-byte Spill
	movq	%r10, 1952(%rsp)        # 8-byte Spill
	movq	%r11, 1944(%rsp)        # 8-byte Spill
	movq	%rbx, 1936(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	2176(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2496(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2176(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1928(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	2088(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	movq	7472(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	7472(%rsp), %rax        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 561 0                 # eispack.c:561:0
.Ltmp1083:
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1976(%rsp), %xmm0       # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2128(%rsp), %rsi        # 8-byte Reload
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	movq	2136(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1928(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1976(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movb	%cl, 1927(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	1952(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2024(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2136(%rsp), %rsi        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2016(%rsp), %r8         # 8-byte Reload
	movq	2024(%rsp), %r9         # 8-byte Reload
	movq	2032(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	vmovsd	3896(%rsp), %xmm0       # 8-byte Reload
	movl	5036(%rsp), %ebp        # 4-byte Reload
	vmovsd	3896(%rsp), %xmm1       # 8-byte Reload
	vmovsd	%xmm0, 5792(%rsp)       # 8-byte Spill
	movl	%ebp, 5788(%rsp)        # 4-byte Spill
	vmovsd	%xmm1, 6184(%rsp)       # 8-byte Spill
	jne	.LBB22_21
	jmp	.LBB22_12
.Ltmp1084:
.LBB22_21:                              # %.lr.ph23
                                        #   in Loop: Header=BB22_5 Depth=1
	vmovsd	6184(%rsp), %xmm0       # 8-byte Reload
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str4561448, %r8
	leaq	.L.str7999, %rdx
	movabsq	$572, %rdi              # imm = 0x23C
	leaq	.L.str621054, %rsi
	leaq	.L.str4131405, %r9
	leaq	.L.str4551447, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str2841276, %r12
	leaq	.L.str3961388, %r13
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str2831275, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$568, %rax              # imm = 0x238
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str4071399, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str3951387, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str2021194, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str4161408, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str4321424, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str4511443, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 568 0                 # eispack.c:568:0
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1784(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1776(%rsp)        # 8-byte Spill
	movq	%rdx, 1768(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	1792(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1752(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1744(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1736(%rsp)       # 8-byte Spill
	movq	%r14, 1728(%rsp)        # 8-byte Spill
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
	movq	%r15, 1712(%rsp)        # 8-byte Spill
	movq	%r13, 1704(%rsp)        # 8-byte Spill
	movq	%r12, 1696(%rsp)        # 8-byte Spill
	movl	%ebx, 1692(%rsp)        # 4-byte Spill
	movq	%r10, 1680(%rsp)        # 8-byte Spill
	movq	%r11, 1672(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1808(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1912(%rsp), %r9         # 8-byte Reload
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1864(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	7496(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	7496(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1664(%rsp)       # 8-byte Spill
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1664(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1736(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1664(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1728(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1912(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1768(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1656(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1085:
	#DEBUG_VALUE: tqlrat:p <- [RSP+1656]
	#DEBUG_VALUE: tqlrat:i <- [RSP+8012]
	.loc	5 572 0                 # eispack.c:572:0
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1744(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1760(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1760(%rsp), %r9         # 8-byte Reload
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rax        # 8-byte Reload
	movl	8012(%rsp), %ebx        # 4-byte Reload
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movl	%ebx, 1644(%rsp)        # 4-byte Spill
.Ltmp1086:
.LBB22_22:                              #   Parent Loop BB22_5 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1644(%rsp), %eax        # 4-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str2901282, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str4631455, %r10
	movabsq	$3, %r11
	leaq	.L.str4621454, %rbx
	movabsq	$574, %r14              # imm = 0x23E
	leaq	.L.str621054, %r15
	leaq	.L.str4561448, %r12
	leaq	.L.str4611453, %r13
	movl	$0, %ebp
	movl	%eax, 1640(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str2781270, %rcx
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str4571449, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str4601452, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str4131405, %rcx
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str3941386, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str3151307, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str4591451, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str3831375, %rcx
	movq	%rcx, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str4581450, %rcx
	.loc	5 574 0                 # eispack.c:574:0
.Ltmp1087:
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1488(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1472(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1464(%rsp)         # 8-byte Spill
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1456(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1452(%rsp)        # 4-byte Spill
	movq	%r15, 1440(%rsp)        # 8-byte Spill
	movq	%r12, 1432(%rsp)        # 8-byte Spill
	movq	%r13, 1424(%rsp)        # 8-byte Spill
	movl	%ebp, 1420(%rsp)        # 4-byte Spill
	movq	%r14, 1408(%rsp)        # 8-byte Spill
	movq	%rbx, 1400(%rsp)        # 8-byte Spill
	movq	%r10, 1392(%rsp)        # 8-byte Spill
	movq	%r11, 1384(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1472(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1584(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1380(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1616(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1380(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1379(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1440(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movl	1420(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1384(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1456(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1488(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1379(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1488(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1379(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_23
	jmp	.LBB22_24
.LBB22_23:                              #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3851377, %r8
	leaq	.L.str7999, %rdx
	movabsq	$577, %rdi              # imm = 0x241
	leaq	.L.str621054, %rsi
	leaq	.L.str4621454, %r9
	leaq	.L.str4651457, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str2841276, %r15
	leaq	.L.str2971289, %r12
	movabsq	$576, %r13              # imm = 0x240
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str4641456, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str2921284, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str4601452, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	5 576 0                 # eispack.c:576:0
.Ltmp1088:
	movq	%rdi, 1296(%rsp)        # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 1288(%rsp)        # 8-byte Spill
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1256(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1248(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1240(%rsp)        # 8-byte Spill
	movl	%ebp, 1236(%rsp)        # 4-byte Spill
	movq	%r15, 1224(%rsp)        # 8-byte Spill
	movq	%r13, 1216(%rsp)        # 8-byte Spill
	movq	%r12, 1208(%rsp)        # 8-byte Spill
	movl	%ebx, 1204(%rsp)        # 4-byte Spill
	movq	%r10, 1192(%rsp)        # 8-byte Spill
	movq	%r11, 1184(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	1640(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1176(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1368(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1280(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
	.loc	5 577 0                 # eispack.c:577:0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1204(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1280(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB22_27
.Ltmp1089:
.LBB22_24:                              #   in Loop: Header=BB22_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3011293, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4671459, %r8
	movabsq	$3, %r9
	leaq	.L.str4591451, %r10
	movabsq	$579, %r11              # imm = 0x243
	leaq	.L.str621054, %rbx
	leaq	.L.str4631455, %r14
	leaq	.L.str4661458, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str3021294, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str821074, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str4571449, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str3001292, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str2841276, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str2991291, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str4581450, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$572, %rax              # imm = 0x23C
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 572 0                 # eispack.c:572:0
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	movq	1040(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1024(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1016(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1064(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1032(%rsp), %rax        # 8-byte Reload
	movq	%r8, 992(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 984(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 976(%rsp)         # 8-byte Spill
	movl	%ebp, 972(%rsp)         # 4-byte Spill
	movl	%r12d, 968(%rsp)        # 4-byte Spill
	movq	%r13, 960(%rsp)         # 8-byte Spill
	movq	%r14, 952(%rsp)         # 8-byte Spill
	movq	%rbx, 944(%rsp)         # 8-byte Spill
	movq	%r10, 936(%rsp)         # 8-byte Spill
	movq	%r11, 928(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1056(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	.loc	5 579 0                 # eispack.c:579:0
.Ltmp1090:
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 920(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	920(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	9216(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	9216(%rsp), %rax        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	vmovsd	-8(%rax,%rcx,8), %xmm0
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 904(%rsp)        # 8-byte Spill
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	movq	1160(%rsp), %rdx        # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	1016(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	904(%rsp), %xmm1        # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	setb	%al
.Ltmp1091:
	.loc	5 584 0                 # eispack.c:584:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 903(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	9216(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1632(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	9216(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	.loc	5 579 0                 # eispack.c:579:0
.Ltmp1092:
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 888(%rsp)         # 8-byte Spill
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	944(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movl	972(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	903(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	1016(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	903(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	jne	.LBB22_26
# BB#25:                                #   in Loop: Header=BB22_5 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str3851377, %r8
	leaq	.L.str7999, %rdx
	movabsq	$582, %rdi              # imm = 0x246
	leaq	.L.str621054, %rsi
	leaq	.L.str4671459, %r9
	leaq	.L.str4691461, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$64, %r14
	leaq	.L.str2841276, %r15
	leaq	.L.str3021294, %r12
	movabsq	$581, %r13              # imm = 0x245
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str4681460, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	.loc	5 581 0                 # eispack.c:581:0
.Ltmp1093:
	movq	%rdi, 864(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rsi, 856(%rsp)         # 8-byte Spill
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	872(%rsp), %r13         # 8-byte Reload
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	%r8, 832(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 824(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 820(%rsp)         # 4-byte Spill
	movl	%ebx, 816(%rsp)         # 4-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%r12, 800(%rsp)         # 8-byte Spill
	movq	%r15, 792(%rsp)         # 8-byte Spill
	movq	%r11, 784(%rsp)         # 8-byte Spill
	movq	%r10, 776(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	784(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	movq	848(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	808(%rsp), %rsi         # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	848(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rax         # 8-byte Reload
	vmovsd	1656(%rsp), %xmm0       # 8-byte Reload
	vmovsd	%xmm0, (%rax)
	.loc	5 582 0                 # eispack.c:582:0
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	816(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	840(%rsp), %r9          # 8-byte Reload
	movq	848(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB22_27
.Ltmp1094:
.LBB22_26:                              #   in Loop: Header=BB22_22 Depth=2
	movabsq	$1, %rax
	leaq	.L.str3171309, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str3851377, %r8
	movabsq	$3, %r9
	leaq	.L.str4561448, %r10
	movabsq	$572, %r11              # imm = 0x23C
	leaq	.L.str621054, %rbx
	leaq	.L.str4591451, %r14
	leaq	.L.str4711463, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str3161308, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str4571449, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str3001292, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str3021294, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$584, %rax              # imm = 0x248
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str4701462, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str3151307, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str4601452, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movabsq	$579, %rax              # imm = 0x243
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 579 0                 # eispack.c:579:0
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 624(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 616(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 608(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	632(%rsp), %rax         # 8-byte Reload
	movq	%r8, 592(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 584(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 576(%rsp)         # 8-byte Spill
	movl	%ebp, 572(%rsp)         # 4-byte Spill
	movl	%r12d, 568(%rsp)        # 4-byte Spill
	movq	%r13, 560(%rsp)         # 8-byte Spill
	movq	%r14, 552(%rsp)         # 8-byte Spill
	movq	%rbx, 544(%rsp)         # 8-byte Spill
	movq	%r10, 536(%rsp)         # 8-byte Spill
	movq	%r11, 528(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1640(%rsp), %ebp        # 4-byte Reload
	addl	$4294967295, %ebp       # imm = 0xFFFFFFFF
.Ltmp1095:
	.loc	5 584 0                 # eispack.c:584:0
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 524(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	888(%rsp), %rax         # 8-byte Reload
	vmovsd	904(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax)
.Ltmp1096:
	#DEBUG_VALUE: tqlrat:i <- [RSP+524]
	.loc	5 572 0                 # eispack.c:572:0
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1632(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 520(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	520(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	520(%rsp), %ebp         # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 519(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	544(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	608(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	608(%rsp), %rsi         # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	519(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	608(%rsp), %r9          # 8-byte Reload
	movq	616(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	519(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	920(%rsp), %rcx         # 8-byte Reload
	movl	524(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movl	%ebp, 1644(%rsp)        # 4-byte Spill
	jne	.LBB22_22
.Ltmp1097:
.LBB22_27:                              # %.loopexit17
                                        #   in Loop: Header=BB22_5 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	leaq	.L.str3201312, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str3701362, %r9
	movabsq	$3, %r10
	leaq	.L.str3821374, %r11
	movabsq	$468, %rbx              # imm = 0x1D4
	leaq	.L.str621054, %r14
	leaq	.L.str3851377, %r15
	leaq	.L.str4721464, %r12
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	leaq	.L.str3871379, %rcx
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str3861378, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rcx       # imm = 0xFFFFFFFF
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	leaq	.L.str3891381, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str3881380, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	leaq	.L.str3191311, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	leaq	.L.str511043, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	leaq	.L.str3841376, %rcx
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	leaq	.L.str3181310, %rcx
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	leaq	.L.str3941386, %rcx
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	leaq	.L.str3831375, %rcx
	.loc	5 468 0                 # eispack.c:468:0
	movq	%rdi, 368(%rsp)         # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, 360(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 352(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 336(%rsp)          # 8-byte Spill
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	%r9, 328(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 324(%rsp)         # 4-byte Spill
	movq	%r15, 312(%rsp)         # 8-byte Spill
	movq	%r12, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	7640(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	7640(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	8012(%rsp), %eax        # 4-byte Reload
	addl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1098:
	#DEBUG_VALUE: tqlrat:l <- [RSP+244]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 240(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	9228(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	240(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	240(%rsp), %eax         # 4-byte Reload
	movl	9228(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 239(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	8016(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	8016(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	7636(%rsp), %eax        # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 220(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movl	324(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	360(%rsp), %rsi         # 8-byte Reload
	movq	360(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	239(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	352(%rsp), %r8          # 8-byte Reload
	movq	360(%rsp), %r9          # 8-byte Reload
	movq	368(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	239(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movl	220(%rsp), %ebp         # 4-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	vmovsd	7040(%rsp), %xmm0       # 8-byte Reload
	vmovsd	7032(%rsp), %xmm1       # 8-byte Reload
	movl	244(%rsp), %eax         # 4-byte Reload
	vmovsd	1736(%rsp), %xmm2       # 8-byte Reload
	vmovsd	7024(%rsp), %xmm3       # 8-byte Reload
	movl	324(%rsp), %esi         # 4-byte Reload
	movl	%eax, 8044(%rsp)        # 4-byte Spill
	movq	%rcx, 8072(%rsp)        # 8-byte Spill
	movl	%ebp, 8080(%rsp)        # 4-byte Spill
	movq	%rdx, 8064(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 8056(%rsp)       # 8-byte Spill
	vmovsd	%xmm1, 8048(%rsp)       # 8-byte Spill
	vmovsd	%xmm2, 8032(%rsp)       # 8-byte Spill
	vmovsd	%xmm3, 8024(%rsp)       # 8-byte Spill
	movl	%esi, 9112(%rsp)        # 4-byte Spill
	jne	.LBB22_5
.Ltmp1099:
.LBB22_28:                              # %.loopexit24
	movl	9112(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	leaq	.L.str671059, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$589, %r9               # imm = 0x24D
	leaq	.L.str621054, %r10
	leaq	.L.str3701362, %r11
	leaq	.L.str4731465, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str4191411, %r12
	leaq	.L.str1631155, %r13
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	movabsq	$2, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str4996, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$3, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	.L.str3851377, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	leaq	.L.str3741366, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	leaq	.L.str3791371, %rcx
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 128(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	5 589 0                 # eispack.c:589:0
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 112(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 104(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 96(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 88(%rsp)           # 8-byte Spill
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	%r9, 80(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 76(%rsp)          # 4-byte Spill
	movl	%r14d, 72(%rsp)         # 4-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r12, 56(%rsp)          # 8-byte Spill
	movq	%r13, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%rbx, 32(%rsp)          # 8-byte Spill
	movq	%r10, 24(%rsp)          # 8-byte Spill
	movq	%r11, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	176(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	208(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	44(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	76(%rsp), %eax          # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	112(%rsp), %r9          # 8-byte Reload
	movq	88(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	76(%rsp), %eax          # 4-byte Reload
	addq	$9336, %rsp             # imm = 0x2478
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1100:
.Ltmp1101:
	.size	tqlrat, .Ltmp1101-tqlrat
.Lfunc_end22:
	.cfi_endproc

	.globl	trbak1
	.align	16, 0x90
	.type	trbak1,@function
trbak1:                                 # @trbak1
	.cfi_startproc
.Lfunc_begin23:
	.loc	5 654 0                 # eispack.c:654:0
# BB#0:
	pushq	%rbp
.Ltmp1109:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp1110:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp1111:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp1112:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp1113:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp1114:
	.cfi_def_cfa_offset 56
	subq	$3080, %rsp             # imm = 0xC08
.Ltmp1115:
	.cfi_def_cfa_offset 3136
.Ltmp1116:
	.cfi_offset %rbx, -56
.Ltmp1117:
	.cfi_offset %r12, -48
.Ltmp1118:
	.cfi_offset %r13, -40
.Ltmp1119:
	.cfi_offset %r14, -32
.Ltmp1120:
	.cfi_offset %r15, -24
.Ltmp1121:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str4791471, %r9
	movabsq	$0, %r10
	leaq	.L.str7999, %r11
	movabsq	$2, %rbx
	leaq	.L.str4821474, %r14
	movabsq	$3, %r15
	leaq	.L.str4811473, %r12
	movabsq	$661, %r13              # imm = 0x295
	leaq	.L.str4741466, %rbp
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str4996, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str4801472, %rax
	movl	%ecx, 3060(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3056(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str4781470, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str5997, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	movabsq	$23, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	movabsq	$671, %rax              # imm = 0x29F
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str4771469, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	leaq	.L.str4751467, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str4761468, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str691061, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	.loc	5 592 0 prologue_end    # eispack.c:592:0
.Ltmp1122:
	movl	%ecx, 2916(%rsp)        # 4-byte Spill
	movl	%edi, %ecx
                                        # kill: RCX<def> ECX<kill>
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	movq	2944(%rsp), %rax        # 8-byte Reload
	movl	%edi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3008(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2888(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2880(%rsp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2872(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2864(%rsp)         # 8-byte Spill
	movq	%r10, %r9
	movq	%r11, (%rsp)
	movq	%rbp, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r13, 2840(%rsp)        # 8-byte Spill
	movq	%r12, 2832(%rsp)        # 8-byte Spill
	movq	%r14, 2824(%rsp)        # 8-byte Spill
	movq	%rbx, 2816(%rsp)        # 8-byte Spill
	movq	%r10, 2808(%rsp)        # 8-byte Spill
	movq	%r11, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: trbak1:n <- [RSP+2900]
	#DEBUG_VALUE: trbak1:a <- [RSP+2888]
	#DEBUG_VALUE: trbak1:e <- [RSP+2880]
	#DEBUG_VALUE: trbak1:m <- [RSP+3060]
	#DEBUG_VALUE: trbak1:z <- [RSP+2872]
	.loc	5 661 0                 # eispack.c:661:0
.Ltmp1123:
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2960(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2799(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2798(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3032(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2799(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2798(%rsp), %al         # 1-byte Reload
	movb	2799(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
.Ltmp1124:
	.loc	5 671 0                 # eispack.c:671:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2797(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2984(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3024(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3008(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
.Ltmp1125:
	.loc	5 661 0                 # eispack.c:661:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2796(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2796(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2797(%rsp), %al         # 1-byte Reload
	movb	2796(%rsp), %cl         # 1-byte Reload
	andb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2795(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2856(%rsp), %rsi        # 8-byte Reload
	movq	3064(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movl	3056(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2832(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2816(%rsp), %rdi        # 8-byte Reload
	movq	2808(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3072(%rsp), %rsi        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	2808(%rsp), %r9         # 8-byte Reload
	movq	2800(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2795(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB23_1
	jmp	.LBB23_10
.Ltmp1126:
.LBB23_1:                               # %.lr.ph15
	movabsq	$1, %rax
	movl	$1, %ecx
	movabsq	$0, %rdx
	leaq	.L.str4841476, %r8
	leaq	.L.str7999, %rsi
	movabsq	$671, %rdi              # imm = 0x29F
	leaq	.L.str4741466, %r9
	leaq	.L.str4811473, %r10
	leaq	.L.str4831475, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	.loc	5 671 0                 # eispack.c:671:0
.Ltmp1127:
	movq	%rsi, 2784(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2776(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 2772(%rsp)        # 4-byte Spill
	movq	%r11, %rcx
	movq	%r8, 2760(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movq	2776(%rsp), %r9         # 8-byte Reload
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rax        # 8-byte Reload
	movl	2772(%rsp), %ebp        # 4-byte Reload
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
.LBB23_2:                               # =>This Loop Header: Depth=1
                                        #     Child Loop BB23_4 Depth 2
                                        #       Child Loop BB23_5 Depth 3
                                        #       Child Loop BB23_7 Depth 3
	movl	2740(%rsp), %eax        # 4-byte Reload
	movq	2744(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str4911483, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7999, %r8
	movabsq	$2, %r9
	leaq	.L.str4931485, %r10
	movabsq	$3, %r11
	leaq	.L.str1751167, %rbx
	movabsq	$675, %r14              # imm = 0x2A3
	leaq	.L.str4741466, %r15
	leaq	.L.str4841476, %r12
	leaq	.L.str4921484, %r13
	movl	$0, %ebp
	movl	%eax, 2736(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str4891481, %rcx
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str4901482, %rcx
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movabsq	$24, %rcx
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str4761468, %rcx
	movq	%rcx, 2680(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rcx
	movq	%rcx, 2672(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movq	%rcx, 2664(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str131005, %rcx
	movq	%rcx, 2648(%rsp)        # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str111003, %rcx
	movq	%rcx, 2632(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 2624(%rsp)        # 8-byte Spill
	leaq	.L.str1571149, %rcx
	movq	%rcx, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str4851477, %rcx
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 2600(%rsp)        # 8-byte Spill
	leaq	.L.str4871479, %rcx
	movq	%rcx, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str4811473, %rcx
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str4881480, %rcx
	movq	%rcx, 2576(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 2568(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str4861478, %rcx
	.loc	5 675 0                 # eispack.c:675:0
.Ltmp1128:
	movq	%rcx, 2552(%rsp)        # 8-byte Spill
	movq	2568(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 2544(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 2536(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2528(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 2520(%rsp)         # 8-byte Spill
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	%r9, 2512(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 2508(%rsp)        # 4-byte Spill
	movq	%r12, 2496(%rsp)        # 8-byte Spill
	movq	%r13, 2488(%rsp)        # 8-byte Spill
	movl	%ebp, 2484(%rsp)        # 4-byte Spill
	vmovsd	%xmm0, 2472(%rsp)       # 8-byte Spill
	movq	%r15, 2464(%rsp)        # 8-byte Spill
	movq	%r14, 2456(%rsp)        # 8-byte Spill
	movq	%r10, 2448(%rsp)        # 8-byte Spill
	movq	%r11, 2440(%rsp)        # 8-byte Spill
	movq	%rbx, 2432(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2528(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2632(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2880(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2424(%rsp)        # 8-byte Spill
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2880(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	vmovsd	(%rcx,%rdx,8), %xmm0
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 2416(%rsp)       # 8-byte Spill
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2472(%rsp), %xmm0       # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2656(%rsp), %rsi        # 8-byte Reload
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	2520(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	2416(%rsp), %xmm0       # 8-byte Reload
	vmovsd	2472(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	sete	%al
	setnp	%cl
	andb	%al, %cl
	movb	%cl, %al
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movb	%cl, 2415(%rsp)         # 1-byte Spill
	movq	%r8, %rcx
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rdx        # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3060(%rsp), %eax        # 4-byte Reload
	cmpl	$1, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2414(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movb	2414(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r9d
	movl	%r9d, %edx
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2415(%rsp), %al         # 1-byte Reload
	movb	2414(%rsp), %cl         # 1-byte Reload
	orb	%cl, %al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2413(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2456(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movl	2484(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2512(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2544(%rsp), %rdx        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2528(%rsp), %rsi        # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2544(%rsp), %r9         # 8-byte Reload
	movq	2520(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2413(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB23_9
.Ltmp1129:
# BB#3:                                 # %.preheader.lr.ph
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str1141106, %r8
	leaq	.L.str7999, %rdx
	movabsq	$677, %rdi              # imm = 0x2A5
	leaq	.L.str4741466, %rsi
	leaq	.L.str4931485, %r9
	leaq	.L.str4941486, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str261018, %r12
	leaq	.L.str81000, %r13
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str231015, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str221014, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str201012, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str211013, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str4851477, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	leaq	.L.str181010, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str611053, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$673, %rax              # imm = 0x2A1
	.loc	5 673 0                 # eispack.c:673:0
	movq	%rdi, 2256(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2248(%rsp)        # 8-byte Spill
	movq	%rdx, 2240(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2232(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2328(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2224(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2216(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2208(%rsp)        # 8-byte Spill
	movl	%ebp, 2204(%rsp)        # 4-byte Spill
	movq	%r14, 2192(%rsp)        # 8-byte Spill
	movq	%r12, 2184(%rsp)        # 8-byte Spill
	movq	%r15, 2176(%rsp)        # 8-byte Spill
	movl	%ebx, 2172(%rsp)        # 4-byte Spill
	movq	%r10, 2160(%rsp)        # 8-byte Spill
	movq	%r11, 2152(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2272(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	2728(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	5 684 0                 # eispack.c:684:0
.Ltmp1130:
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2144(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2304(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2140(%rsp), %ebx        # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2136(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 2132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2132(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2136(%rsp), %ebx        # 4-byte Reload
	movl	2132(%rsp), %ebp        # 4-byte Reload
	addl	%ebp, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2128(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2368(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2128(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2120(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
.Ltmp1131:
	.loc	5 677 0                 # eispack.c:677:0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2176(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2232(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2184(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2256(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2232(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2400(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2104(%rsp)        # 8-byte Spill
.LBB23_4:                               # %.lr.ph
                                        #   Parent Loop BB23_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB23_5 Depth 3
                                        #       Child Loop BB23_7 Depth 3
	movq	2104(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	vxorps	%xmm0, %xmm0, %xmm0
	movabsq	$1, %rdx
	leaq	.L.str4991491, %r8
	leaq	.L.str7999, %rsi
	movabsq	$680, %rdi              # imm = 0x2A8
	leaq	.L.str4741466, %r9
	leaq	.L.str1141106, %r10
	leaq	.L.str4981490, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str341026, %r13
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str331025, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str321024, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str4951487, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str4931485, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str4961488, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str4971489, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 682 0                 # eispack.c:682:0
.Ltmp1132:
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1968(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2032(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1976(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1936(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1928(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1924(%rsp)       # 4-byte Spill
	vmovsd	%xmm0, 1912(%rsp)       # 8-byte Spill
	movq	%r15, 1904(%rsp)        # 8-byte Spill
	movl	%ebp, 1900(%rsp)        # 4-byte Spill
	movq	%r12, 1888(%rsp)        # 8-byte Spill
	movq	%r13, 1880(%rsp)        # 8-byte Spill
	movq	%rbx, 1872(%rsp)        # 8-byte Spill
	movq	%r10, 1864(%rsp)        # 8-byte Spill
	movq	%r11, 1856(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2000(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	2016(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1852(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2048(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2056(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r14d
	movl	%r14d, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1852(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r14d       # 4-byte Reload
	imull	%r14d, %ebp
.Ltmp1133:
	.loc	5 680 0                 # eispack.c:680:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1848(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1848(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	2088(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1848(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1864(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movl	1900(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1952(%rsp), %rdi        # 8-byte Reload
	movq	1944(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1936(%rsp), %r8         # 8-byte Reload
	movq	1944(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	vmovsd	1912(%rsp), %xmm0       # 8-byte Reload
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
.LBB23_5:                               #   Parent Loop BB23_2 Depth=1
                                        #     Parent Loop BB23_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	vmovsd	1824(%rsp), %xmm0       # 8-byte Reload
	movq	1832(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str1231115, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str4991491, %r9
	movabsq	$3, %r10
	leaq	.L.str5031495, %r11
	movabsq	$680, %rbx              # imm = 0x2A8
	leaq	.L.str4741466, %r14
	leaq	.L.str5021494, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str1221114, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str4871479, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str1161108, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str1151107, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str5001492, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str5011493, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$682, %rax              # imm = 0x2AA
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str951087, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str981090, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str971089, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str691061, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str961088, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str341026, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str941086, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str371029, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str271019, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str361028, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str311023, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str4851477, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str351027, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	leaq	.L.str1141106, %rax
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 682 0                 # eispack.c:682:0
.Ltmp1134:
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	1520(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1504(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1488(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1752(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1472(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1464(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 1456(%rsp)       # 8-byte Spill
	movl	%ebp, 1452(%rsp)        # 4-byte Spill
	movl	%r12d, 1448(%rsp)       # 4-byte Spill
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	vmovsd	%xmm1, 1432(%rsp)       # 8-byte Spill
	movq	%r15, 1424(%rsp)        # 8-byte Spill
	movq	%r14, 1416(%rsp)        # 8-byte Spill
	movq	%r10, 1408(%rsp)        # 8-byte Spill
	movq	%r11, 1400(%rsp)        # 8-byte Spill
	movq	%rbx, 1392(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1432(%rsp), %xmm0       # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1388(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1388(%rsp), %ebp        # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1384(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1380(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1380(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1384(%rsp), %ebp        # 4-byte Reload
	movl	1380(%rsp), %r12d       # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1376(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1376(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1376(%rsp), %ebp        # 4-byte Reload
	movslq	%ebp, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1368(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1360(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1344(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1328(%rsp)       # 8-byte Spill
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1328(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1328(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1320(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1320(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1456(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1320(%rsp), %xmm1       # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1312(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1135:
	#DEBUG_VALUE: trbak1:s <- [RSP+1312]
	.loc	5 680 0                 # eispack.c:680:0
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1816(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1300(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1808(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1300(%rsp), %ebp        # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1299(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movl	1452(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1504(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1299(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	vmovsd	%xmm0, 1824(%rsp)       # 8-byte Spill
	jne	.LBB23_6
	jmp	.LBB23_5
.Ltmp1136:
.LBB23_6:                               # %.lr.ph6
                                        #   in Loop: Header=BB23_4 Depth=2
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str5051497, %r8
	leaq	.L.str7999, %rdx
	movabsq	$685, %rsi              # imm = 0x2AD
	leaq	.L.str4741466, %rdi
	leaq	.L.str5031495, %r9
	leaq	.L.str5041496, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str1271119, %r12
	movabsq	$32, %r13
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str1261118, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str1181110, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str4951487, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str1211113, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str1191111, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str1201112, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$684, %rax              # imm = 0x2AC
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str111003, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str1101102, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str1111103, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str261018, %rax
	.loc	5 684 0                 # eispack.c:684:0
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1136(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1128(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1120(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1168(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1088(%rsp)        # 8-byte Spill
	movl	%ebp, 1084(%rsp)        # 4-byte Spill
	movq	%r15, 1072(%rsp)        # 8-byte Spill
	movq	%r12, 1064(%rsp)        # 8-byte Spill
	movq	%r13, 1056(%rsp)        # 8-byte Spill
	movl	%ebx, 1052(%rsp)        # 4-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2112(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1024(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1024(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1312(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1024(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1016(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2424(%rsp), %rax        # 8-byte Reload
	vmovsd	(%rax), %xmm0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1008(%rsp)       # 8-byte Spill
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1008(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1016(%rsp), %xmm0       # 8-byte Reload
	vmovsd	1008(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 1000(%rsp)       # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp1137:
	#DEBUG_VALUE: trbak1:s <- [RSP+1000]
	#DEBUG_VALUE: trbak1:k <- 0
	.loc	5 687 0                 # eispack.c:687:0
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1232(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 996(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	996(%rsp), %ebx         # 4-byte Reload
	movl	2900(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp1138:
	.loc	5 685 0                 # eispack.c:685:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 992(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	992(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	992(%rsp), %ebx         # 4-byte Reload
	movslq	%ebx, %rax
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 984(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	1052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	1288(%rsp), %r9         # 8-byte Reload
	movq	1120(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rax, 976(%rsp)         # 8-byte Spill
.Ltmp1139:
.LBB23_7:                               #   Parent Loop BB23_2 Depth=1
                                        #     Parent Loop BB23_4 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movq	976(%rsp), %rax         # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str5101502, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7999, %rdi
	movabsq	$2, %r8
	leaq	.L.str5051497, %r9
	movabsq	$3, %r10
	leaq	.L.str4971489, %r11
	movabsq	$685, %rbx              # imm = 0x2AD
	leaq	.L.str4741466, %r14
	leaq	.L.str5111503, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str5091501, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str4871479, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str5071499, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str5061498, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	leaq	.L.str1561148, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str1401132, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$687, %rax              # imm = 0x2AF
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str5081500, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str1411133, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str1501142, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str1211113, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str1491141, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str1481140, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str81000, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str1471139, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str1461138, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str1431135, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str1441136, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str4851477, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str1421134, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str691061, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str1391131, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str1271119, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str5031495, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	5 687 0                 # eispack.c:687:0
.Ltmp1140:
	movq	%rax, 648(%rsp)         # 8-byte Spill
	movq	656(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 640(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	648(%rsp), %rax         # 8-byte Reload
	movq	%r8, 608(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 600(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r12d, 584(%rsp)        # 4-byte Spill
	movq	%r13, 576(%rsp)         # 8-byte Spill
	movq	%r14, 568(%rsp)         # 8-byte Spill
	movq	%rbx, 560(%rsp)         # 8-byte Spill
	movq	%r10, 552(%rsp)         # 8-byte Spill
	movq	%r11, 544(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	616(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	664(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	addq	%rcx, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 536(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	536(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2872(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 520(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %ebp         # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	imull	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 512(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 508(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	508(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	512(%rsp), %ebp         # 4-byte Reload
	movl	508(%rsp), %r12d        # 4-byte Reload
	addl	%r12d, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 504(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	504(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	504(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 496(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	2888(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	vmovsd	(%rax,%rcx,8), %xmm0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 480(%rsp)        # 8-byte Spill
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	480(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1000(%rsp), %xmm0       # 8-byte Reload
	vmovsd	480(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	472(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	520(%rsp), %xmm0        # 8-byte Reload
	vmovsd	472(%rsp), %xmm1        # 8-byte Reload
	vaddsd	%xmm1, %xmm0, %xmm2
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 464(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	2872(%rsp), %rax        # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	vmovsd	464(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, (%rax,%rcx,8)
.Ltmp1141:
	.loc	5 685 0                 # eispack.c:685:0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 456(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	928(%rsp), %rsi         # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	456(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 452(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2736(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	452(%rsp), %ebp         # 4-byte Reload
	movl	2736(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 451(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	568(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	632(%rsp), %rsi         # 8-byte Reload
	movq	632(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	632(%rsp), %r9          # 8-byte Reload
	movq	640(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	451(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	jne	.LBB23_8
	jmp	.LBB23_7
.Ltmp1142:
.LBB23_8:                               # %._crit_edge7
                                        #   in Loop: Header=BB23_4 Depth=2
	movabsq	$1, %rax
	leaq	.L.str5131505, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str1141106, %r8
	movabsq	$3, %r9
	leaq	.L.str1751167, %r10
	movabsq	$677, %r11              # imm = 0x2A5
	leaq	.L.str4741466, %rbx
	leaq	.L.str4971489, %r14
	leaq	.L.str5141506, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str5121504, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str4761468, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str4961488, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	leaq	.L.str4951487, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	5 677 0                 # eispack.c:677:0
	movq	%rdi, 360(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 352(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movq	392(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	336(%rsp), %rax         # 8-byte Reload
	movq	%r8, 320(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 312(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 304(%rsp)         # 8-byte Spill
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	movl	%r12d, 296(%rsp)        # 4-byte Spill
	movq	%r13, 288(%rsp)         # 8-byte Spill
	movq	%r14, 280(%rsp)         # 8-byte Spill
	movq	%rbx, 272(%rsp)         # 8-byte Spill
	movq	%r10, 264(%rsp)         # 8-byte Spill
	movq	%r11, 256(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 248(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	248(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 244(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3060(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	244(%rsp), %ebp         # 4-byte Reload
	movl	3060(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 243(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movl	300(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	344(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	243(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 2104(%rsp)        # 8-byte Spill
	jne	.LBB23_9
	jmp	.LBB23_4
.Ltmp1143:
.LBB23_9:                               # %.loopexit
                                        #   in Loop: Header=BB23_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str5161508, %rcx
	movabsq	$0, %rdx
	leaq	.L.str7999, %rsi
	movabsq	$2, %rdi
	leaq	.L.str4841476, %r8
	movabsq	$3, %r9
	leaq	.L.str4821474, %r10
	movabsq	$671, %r11              # imm = 0x29F
	leaq	.L.str4741466, %rbx
	leaq	.L.str1751167, %r14
	leaq	.L.str5171509, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str5151507, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str511043, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str4861478, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str4881480, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str4871479, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str141006, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 144(%rsp)         # 8-byte Spill
	leaq	.L.str4851477, %rax
	.loc	5 671 0                 # eispack.c:671:0
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2728(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2736(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp1144:
	#DEBUG_VALUE: trbak1:i <- [RSP+20]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	16(%rsp), %ebp          # 4-byte Reload
	movl	2900(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	20(%rsp), %ebp          # 4-byte Reload
	movq	%rcx, 2744(%rsp)        # 8-byte Spill
	movl	%ebp, 2740(%rsp)        # 4-byte Spill
	jne	.LBB23_10
	jmp	.LBB23_2
.Ltmp1145:
.LBB23_10:                              # %.loopexit11
	movabsq	$694, %rdi              # imm = 0x2B6
	leaq	.L.str4741466, %rsi
	leaq	.L.str4821474, %rdx
	leaq	.L.str5181510, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	5 694 0                 # eispack.c:694:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3080, %rsp             # imm = 0xC08
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp1146:
.Ltmp1147:
	.size	trbak1, .Ltmp1147-trbak1
.Lfunc_end23:
	.cfi_endproc

	.globl	trace_logger_write_labelmap
	.align	16, 0x90
	.type	trace_logger_write_labelmap,@function
trace_logger_write_labelmap:            # @trace_logger_write_labelmap
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp1149:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jne	.LBB24_2
# BB#1:
	callq	trace_logger_init
.LBB24_2:
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str1513, %eax
	movl	%eax, %esi
	movl	$26, %edx
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%esi, %edx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str11514, %edx
	movl	%edx, %esi
	movl	$25, %edx
	movl	%eax, (%rsp)            # 4-byte Spill
	addq	$24, %rsp
	jmp	gzwrite                 # TAILCALL
.Ltmp1150:
	.size	trace_logger_write_labelmap, .Ltmp1150-trace_logger_write_labelmap
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp1152:
	.cfi_def_cfa_offset 16
	movl	$.L.str21515, %eax
	movl	%eax, %edi
	movl	$.L.str31516, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB25_2
# BB#1:
	movl	$.L.str41517, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB25_2:
	movl	$512, %eax              # imm = 0x200
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	callq	calloc
	movq	%rax, current_toplevel_function
	movl	$2, current_logging_status
	movl	$trace_logger_fin, %ecx
	movl	%ecx, %edi
	callq	atexit
	movb	$1, initp
	movl	%eax, 4(%rsp)           # 4-byte Spill
	popq	%rax
	ret
.Ltmp1153:
	.size	trace_logger_init, .Ltmp1153-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp1155:
	.cfi_def_cfa_offset 16
	movq	current_toplevel_function(%rip), %rdi
	callq	free
	movq	full_trace_file(%rip), %rdi
	popq	%rax
	jmp	gzclose                 # TAILCALL
.Ltmp1156:
	.size	trace_logger_fin, .Ltmp1156-trace_logger_fin
	.cfi_endproc

	.globl	log_or_not
	.align	16, 0x90
	.type	log_or_not,@function
log_or_not:                             # @log_or_not
	.cfi_startproc
# BB#0:
	subq	$40, %rsp
.Ltmp1158:
	.cfi_def_cfa_offset 48
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movb	%al, 23(%rsp)           # 1-byte Spill
	jne	.LBB27_2
	jmp	.LBB27_1
.LBB27_1:
	movl	$1, %eax
	movl	$2, %ecx
	movb	23(%rsp), %dl           # 1-byte Reload
	testb	%dl, %dl
	cmovel	%ecx, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB27_9
.LBB27_2:
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB27_4
	jmp	.LBB27_3
.LBB27_3:
	movl	current_logging_status, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB27_9
.LBB27_4:
	movl	$1, %eax
	movl	36(%rsp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jne	.LBB27_9
# BB#5:
	movq	current_toplevel_function, %rax
	cmpb	$0, (%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB27_7
# BB#6:
	movl	$.L.str51518, %eax
	movl	%eax, %edi
	movl	$.L.str61519, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$118, %edx
	callq	__assert_fail
.LBB27_7:
	movl	$0, %eax
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	je	.LBB27_9
# BB#8:
	movl	$.L.str71520, %eax
	movl	%eax, %edi
	movl	$.L.str61519, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$123, %edx
	callq	__assert_fail
.LBB27_9:
	movl	16(%rsp), %eax          # 4-byte Reload
	addq	$40, %rsp
	ret
.Ltmp1159:
	.size	log_or_not, .Ltmp1159-log_or_not
	.cfi_endproc

	.globl	convert_bytes_to_hex
	.align	16, 0x90
	.type	convert_bytes_to_hex,@function
convert_bytes_to_hex:                   # @convert_bytes_to_hex
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp1161:
	.cfi_def_cfa_offset 64
	movabsq	$0, %rax
	movw	.L.str81521, %cx
	movw	%cx, (%rdi)
	movb	.L.str81521+2, %r8b
	movb	%r8b, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	jle	.LBB28_2
.LBB28_1:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movl	$.L.str91522, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	%rax, %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	%r8b, %al
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rcx, %rsi
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	$1, %rcx
	movl	%ecx, %eax
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	%edx, %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jne	.LBB28_1
.LBB28_2:                               # %._crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	addq	$56, %rsp
	ret
.Ltmp1162:
	.size	convert_bytes_to_hex, .Ltmp1162-convert_bytes_to_hex
	.cfi_endproc

	.globl	update_logging_status
	.align	16, 0x90
	.type	update_logging_status,@function
update_logging_status:                  # @update_logging_status
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp1164:
	.cfi_def_cfa_offset 64
	movb	%cl, %al
	movb	%dl, %r8b
	movl	current_logging_status, %ecx
	cmpl	$0, %ecx
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movb	%al, 51(%rsp)           # 1-byte Spill
	movb	%r8b, 50(%rsp)          # 1-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	jne	.LBB29_2
# BB#1:
	movl	inst_count, %esi
	movl	$.L.str101523, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	$2, current_logging_status
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jmp	.LBB29_8
.LBB29_2:
	movb	51(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	50(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movl	%ecx, %edi
	movl	52(%rsp), %edx          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	log_or_not
	movl	%eax, current_logging_status
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	setne	%r8b
	cmpl	%edx, %eax
	sete	%r9b
	orb	%r9b, %r8b
	testb	$1, %r8b
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jne	.LBB29_4
# BB#3:
	movl	inst_count, %esi
	movl	$.L.str111524, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	current_logging_status, %esi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB29_4:
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	current_toplevel_function, %rcx
	cmpb	$0, (%rcx)
	sete	%dl
	cmpl	$1, %eax
	sete	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jne	.LBB29_5
	jmp	.LBB29_6
.LBB29_5:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	strcpy
	movq	%rax, (%rsp)            # 8-byte Spill
	jmp	.LBB29_8
.LBB29_6:
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB29_8
# BB#7:
	movl	$0, %esi
	movabsq	$512, %rdx              # imm = 0x200
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	memset
.LBB29_8:
	addq	$56, %rsp
	ret
.Ltmp1165:
	.size	update_logging_status, .Ltmp1165-update_logging_status
	.cfi_endproc

	.globl	do_not_log
	.align	16, 0x90
	.type	do_not_log,@function
do_not_log:                             # @do_not_log
	.cfi_startproc
# BB#0:
	cmpl	$2, current_logging_status
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp1166:
	.size	do_not_log, .Ltmp1166-do_not_log
	.cfi_endproc

	.globl	trace_logger_log_entry
	.align	16, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp1168:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jne	.LBB31_2
# BB#1:
	callq	trace_logger_init
.LBB31_2:
	xorl	%esi, %esi
	movl	$1, %eax
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB31_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	$.L.str121525, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%cl, 11(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movb	11(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB31_4:
	addq	$24, %rsp
	ret
.Ltmp1169:
	.size	trace_logger_log_entry, .Ltmp1169-trace_logger_log_entry
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp1171:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpb	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB32_2
# BB#1:
	callq	trace_logger_init
.LBB32_2:
	movb	39(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	63(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%r8d, %esi
	movl	%ecx, %edx
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB32_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	inst_count, %eax
	movq	%rsp, %rcx
	movl	%eax, 8(%rcx)
	movl	56(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rcx)
	movl	$.L.str131526, %edx
	movl	%edx, %esi
	xorl	%edx, %edx
	movb	%dl, %r8b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movb	%r8b, 27(%rsp)          # 1-byte Spill
	movq	%r9, %r8
	movq	48(%rsp), %r9           # 8-byte Reload
	movb	27(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB32_4:
	addq	$72, %rsp
	ret
.Ltmp1172:
	.size	trace_logger_log0, .Ltmp1172-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp1174:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB33_2
# BB#1:
	movl	$.L.str141527, %eax
	movl	%eax, %edi
	movl	$.L.str61519, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$204, %edx
	callq	__assert_fail
.LBB33_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB33_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB33_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str151528, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB33_8
.LBB33_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB33_7
# BB#6:
	movl	$.L.str161529, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB33_8
.LBB33_7:
	movl	$.L.str171530, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB33_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB33_10
# BB#9:
	movl	$.L.str181531, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB33_11
.LBB33_10:
	movl	$.L.str191532, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB33_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB33_13
# BB#12:
	movl	$.L.str201533, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB33_14
.LBB33_13:
	movl	$.L.str211534, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB33_14:
	addq	$120, %rsp
	ret
.Ltmp1175:
	.size	trace_logger_log_int, .Ltmp1175-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_ptr
	.align	16, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp1177:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB34_2
# BB#1:
	movl	$.L.str141527, %eax
	movl	%eax, %edi
	movl	$.L.str61519, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_ptr, %eax
	movl	%eax, %ecx
	movl	$225, %edx
	callq	__assert_fail
.LBB34_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB34_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB34_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str221535, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB34_8
.LBB34_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB34_7
# BB#6:
	movl	$.L.str231536, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB34_8
.LBB34_7:
	movl	$.L.str241537, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB34_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB34_10
# BB#9:
	movl	$.L.str181531, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB34_11
.LBB34_10:
	movl	$.L.str191532, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB34_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB34_13
# BB#12:
	movl	$.L.str201533, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB34_14
.LBB34_13:
	movl	$.L.str211534, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB34_14:
	addq	$120, %rsp
	ret
.Ltmp1178:
	.size	trace_logger_log_ptr, .Ltmp1178-trace_logger_log_ptr
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp1180:
	.cfi_def_cfa_offset 112
	cmpb	$0, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	jne	.LBB35_2
# BB#1:
	movl	$.L.str141527, %eax
	movl	%eax, %edi
	movl	$.L.str61519, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$246, %edx
	callq	__assert_fail
.LBB35_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB35_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB35_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str251538, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB35_8
.LBB35_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB35_7
# BB#6:
	movl	$.L.str261539, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB35_8
.LBB35_7:
	movl	$.L.str271540, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB35_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB35_10
# BB#9:
	movl	$.L.str181531, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB35_11
.LBB35_10:
	movl	$.L.str191532, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB35_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB35_13
# BB#12:
	movl	$.L.str201533, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB35_14
.LBB35_13:
	movl	$.L.str211534, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB35_14:
	addq	$104, %rsp
	ret
.Ltmp1181:
	.size	trace_logger_log_double, .Ltmp1181-trace_logger_log_double
	.cfi_endproc

	.globl	trace_logger_log_vector
	.align	16, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp1184:
	.cfi_def_cfa_offset 16
.Ltmp1185:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp1186:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	16(%rbp), %rax
	cmpb	$0, initp
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	jne	.LBB36_2
# BB#1:
	leaq	.L.str141527, %rdi
	leaq	.L.str61519, %rsi
	movl	$267, %edx              # imm = 0x10B
	leaq	.L__PRETTY_FUNCTION__.trace_logger_log_vector, %rcx
	callq	__assert_fail
.LBB36_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB36_15
# BB#3:
	movl	$8, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	sarl	$31, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	andq	$-16, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-52(%rbp), %r9d         # 4-byte Reload
	idivl	%r9d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%eax, %edx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	callq	convert_bytes_to_hex
	movl	-48(%rbp), %eax         # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB36_5
# BB#4:
	leaq	.L.str281541, %rsi
	movq	full_trace_file, %rdi
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB36_8
.LBB36_5:
	movq	full_trace_file, %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB36_7
# BB#6:
	leaq	.L.str291542, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB36_8
.LBB36_7:
	leaq	.L.str301543, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB36_8:
	movq	full_trace_file, %rax
	movl	-28(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	je	.LBB36_10
# BB#9:
	leaq	.L.str181531, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB36_11
.LBB36_10:
	leaq	.L.str191532, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB36_11:
	movq	full_trace_file, %rax
	movl	-12(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	je	.LBB36_13
# BB#12:
	leaq	.L.str201533, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB36_14
.LBB36_13:
	leaq	.L.str211534, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB36_14:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB36_15:
	movq	%rbp, %rsp
	popq	%rbp
	ret
.Ltmp1187:
	.size	trace_logger_log_vector, .Ltmp1187-trace_logger_log_vector
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"store_loc[%d] = %f\n"
	.size	.L.str, 20

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"\n"
	.size	.L.str1, 2

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"Test failed with %d errors."
	.size	.L.str2, 28

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"Test passed!\n"
	.size	.L.str3, 14

	.type	.L.str4,@object         # @.str4
	.section	.rodata,"a",@progbits
.L.str4:
	.asciz	"test_stores"
	.size	.L.str4, 12

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	"0:0"
	.size	.L.str5, 4

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"1"
	.size	.L.str6, 2

	.type	.L.str7,@object         # @.str7
.L.str7:
	.zero	1
	.size	.L.str7, 1

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"phi"
	.size	.L.str8, 4

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"n_channels"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"0:0-5"
	.size	.L.str10, 6

	.type	.L.str11,@object        # @.str11
	.align	16
.L.str11:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str11, 19

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"._crit_edge3:0"
	.size	.L.str12, 15

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"2"
	.size	.L.str13, 2

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"n_samples"
	.size	.L.str14, 10

	.type	.L.str15,@object        # @.str15
	.align	16
.L.str15:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str15, 21

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	".preheader:1"
	.size	.L.str16, 13

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"indvars.iv5"
	.size	.L.str17, 12

	.type	.L.str18,@object        # @.str18
	.align	16
.L.str18:
	.asciz	"indvars.iv.next6"
	.size	.L.str18, 17

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"._crit_edge:1"
	.size	.L.str19, 14

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"3"
	.size	.L.str20, 2

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"stdout"
	.size	.L.str21, 7

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	".preheader:1-0"
	.size	.L.str22, 15

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	".lr.ph:1"
	.size	.L.str23, 9

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"4"
	.size	.L.str24, 2

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"5"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"6"
	.size	.L.str26, 2

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	".lr.ph:1-0"
	.size	.L.str27, 11

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"7:2"
	.size	.L.str28, 4

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"indvars.iv"
	.size	.L.str29, 11

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"indvars.iv.next"
	.size	.L.str30, 16

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"8"
	.size	.L.str31, 2

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"14"
	.size	.L.str32, 3

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"9"
	.size	.L.str33, 2

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	"10"
	.size	.L.str34, 3

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"freq_data"
	.size	.L.str35, 10

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"11"
	.size	.L.str36, 3

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"12"
	.size	.L.str37, 3

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"13"
	.size	.L.str38, 3

	.type	.L.str39,@object        # @.str39
.L.str39:
	.asciz	"fprintf"
	.size	.L.str39, 8

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"lftr.wideiv"
	.size	.L.str40, 12

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"exitcond"
	.size	.L.str41, 9

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"7:2-0"
	.size	.L.str42, 6

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	".lcssa"
	.size	.L.str43, 7

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"15"
	.size	.L.str44, 3

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"lftr.wideiv7"
	.size	.L.str45, 13

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"exitcond8"
	.size	.L.str46, 10

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"._crit_edge:1-0"
	.size	.L.str47, 16

	.type	.L.str48,@object        # @.str48
	.align	16
.L.str48:
	.asciz	"._crit_edge3:0-0"
	.size	.L.str48, 17

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"time_data"
	.size	.L.str49, 10

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"process_data"
	.size	.L.str50, 13

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"0:0-8"
	.size	.L.str51, 6

	.type	.L.str52,@object        # @.str52
	.align	16
.L.str52:
	.asciz	".preheader83.lr.ph:0"
	.size	.L.str52, 21

	.type	.L.str53,@object        # @.str53
	.align	16
.L.str53:
	.asciz	"._crit_edge93.thread:0"
	.size	.L.str53, 23

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"7"
	.size	.L.str54, 2

	.type	.L.str55,@object        # @.str55
	.align	16
.L.str55:
	.asciz	"._crit_edge93.thread:0-5"
	.size	.L.str55, 25

	.type	.L.str56,@object        # @.str56
	.align	16
.L.str56:
	.asciz	"._crit_edge82.thread:0"
	.size	.L.str56, 23

	.type	.L.str57,@object        # @.str57
	.align	16
.L.str57:
	.asciz	".preheader83.lr.ph:0-0"
	.size	.L.str57, 23

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	".preheader83:1"
	.size	.L.str58, 15

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"indvars.iv182"
	.size	.L.str59, 14

	.type	.L.str60,@object        # @.str60
	.align	16
.L.str60:
	.asciz	"indvars.iv.next183"
	.size	.L.str60, 19

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"._crit_edge91:1"
	.size	.L.str61, 16

	.type	.L.str62,@object        # @.str62
	.align	16
.L.str62:
	.asciz	".preheader83:1-0"
	.size	.L.str62, 17

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	".lr.ph86:1"
	.size	.L.str63, 11

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	"._crit_edge87:1"
	.size	.L.str64, 16

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	".lr.ph86:1-0"
	.size	.L.str65, 13

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"14:2"
	.size	.L.str66, 5

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"indvars.iv174"
	.size	.L.str67, 14

	.type	.L.str68,@object        # @.str68
	.align	16
.L.str68:
	.asciz	"indvars.iv.next175"
	.size	.L.str68, 19

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"16"
	.size	.L.str69, 3

	.type	.L.str70,@object        # @.str70
.L.str70:
	.asciz	"17"
	.size	.L.str70, 3

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"18"
	.size	.L.str71, 3

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"in"
	.size	.L.str72, 3

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"14:2-0"
	.size	.L.str73, 7

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	"19"
	.size	.L.str74, 3

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"14:2-1"
	.size	.L.str75, 7

	.type	.L.str76,@object        # @.str76
.L.str76:
	.asciz	"20"
	.size	.L.str76, 3

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	"out"
	.size	.L.str77, 4

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"14:2-2"
	.size	.L.str78, 7

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"21"
	.size	.L.str79, 3

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"14:2-3"
	.size	.L.str80, 7

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"lftr.wideiv176"
	.size	.L.str81, 15

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"exitcond177"
	.size	.L.str82, 12

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"14:2-4"
	.size	.L.str83, 7

	.type	.L.str84,@object        # @.str84
.L.str84:
	.asciz	"22"
	.size	.L.str84, 3

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"23"
	.size	.L.str85, 3

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"24"
	.size	.L.str86, 3

	.type	.L.str87,@object        # @.str87
	.align	16
.L.str87:
	.asciz	"._crit_edge87:1-0"
	.size	.L.str87, 18

	.type	.L.str88,@object        # @.str88
.L.str88:
	.asciz	"kiss_fft"
	.size	.L.str88, 9

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"cfg"
	.size	.L.str89, 4

	.type	.L.str90,@object        # @.str90
	.align	16
.L.str90:
	.asciz	"._crit_edge87:1-2"
	.size	.L.str90, 18

	.type	.L.str91,@object        # @.str91
.L.str91:
	.asciz	".lr.ph90:1"
	.size	.L.str91, 11

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	"25"
	.size	.L.str92, 3

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	".lr.ph90:1-0"
	.size	.L.str93, 13

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	"26:2"
	.size	.L.str94, 5

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"indvars.iv178"
	.size	.L.str95, 14

	.type	.L.str96,@object        # @.str96
	.align	16
.L.str96:
	.asciz	"indvars.iv.next179"
	.size	.L.str96, 19

	.type	.L.str97,@object        # @.str97
.L.str97:
	.asciz	"27"
	.size	.L.str97, 3

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"28"
	.size	.L.str98, 3

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"29"
	.size	.L.str99, 3

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"30"
	.size	.L.str100, 3

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"26:2-0"
	.size	.L.str101, 7

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"lftr.wideiv180"
	.size	.L.str102, 15

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"exitcond181"
	.size	.L.str103, 12

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"26:2-1"
	.size	.L.str104, 7

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"lftr.wideiv184"
	.size	.L.str105, 15

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"exitcond185"
	.size	.L.str106, 12

	.type	.L.str107,@object       # @.str107
	.align	16
.L.str107:
	.asciz	"._crit_edge91:1-0"
	.size	.L.str107, 18

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	"._crit_edge93:0"
	.size	.L.str108, 16

	.type	.L.str109,@object       # @.str109
.L.str109:
	.asciz	"31"
	.size	.L.str109, 3

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"32"
	.size	.L.str110, 3

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"33"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"34"
	.size	.L.str112, 3

	.type	.L.str113,@object       # @.str113
	.align	16
.L.str113:
	.asciz	"._crit_edge93:0-5"
	.size	.L.str113, 18

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	".preheader79:1"
	.size	.L.str114, 15

	.type	.L.str115,@object       # @.str115
.L.str115:
	.asciz	"indvars.iv170"
	.size	.L.str115, 14

	.type	.L.str116,@object       # @.str116
	.align	16
.L.str116:
	.asciz	"indvars.iv.next171"
	.size	.L.str116, 19

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"53:1"
	.size	.L.str117, 5

	.type	.L.str118,@object       # @.str118
.L.str118:
	.asciz	"35"
	.size	.L.str118, 3

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"36"
	.size	.L.str119, 3

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"37"
	.size	.L.str120, 3

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"sext188"
	.size	.L.str121, 8

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"38"
	.size	.L.str122, 3

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"39"
	.size	.L.str123, 3

	.type	.L.str124,@object       # @.str124
	.align	16
.L.str124:
	.asciz	".preheader79:1-0"
	.size	.L.str124, 17

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"40:2"
	.size	.L.str125, 5

	.type	.L.str126,@object       # @.str126
.L.str126:
	.asciz	"indvars.iv167"
	.size	.L.str126, 14

	.type	.L.str127,@object       # @.str127
	.align	16
.L.str127:
	.asciz	"indvars.iv.next168"
	.size	.L.str127, 19

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"41"
	.size	.L.str128, 3

	.type	.L.str129,@object       # @.str129
.L.str129:
	.asciz	"42"
	.size	.L.str129, 3

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"43"
	.size	.L.str130, 3

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"44"
	.size	.L.str131, 3

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	"45"
	.size	.L.str132, 3

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	"46"
	.size	.L.str133, 3

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"47"
	.size	.L.str134, 3

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	"48"
	.size	.L.str135, 3

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"49"
	.size	.L.str136, 3

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"sqrt"
	.size	.L.str137, 5

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"50"
	.size	.L.str138, 3

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"log10"
	.size	.L.str139, 6

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"51"
	.size	.L.str140, 3

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"52"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"fft_data"
	.size	.L.str142, 9

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"40:2-1"
	.size	.L.str143, 7

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"exitcond169"
	.size	.L.str144, 12

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"40:2-2"
	.size	.L.str145, 7

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"lftr.wideiv172"
	.size	.L.str146, 15

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"exitcond173"
	.size	.L.str147, 12

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"53:1-0"
	.size	.L.str148, 7

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"._crit_edge82:0"
	.size	.L.str149, 16

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	".ph"
	.size	.L.str150, 4

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	".ph189"
	.size	.L.str151, 7

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"54"
	.size	.L.str152, 3

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"55"
	.size	.L.str153, 3

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	"56"
	.size	.L.str154, 3

	.type	.L.str155,@object       # @.str155
	.align	16
.L.str155:
	.asciz	"._crit_edge82.thread:0-3"
	.size	.L.str155, 25

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	".preheader70:0"
	.size	.L.str156, 15

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"57"
	.size	.L.str157, 3

	.type	.L.str158,@object       # @.str158
.L.str158:
	.asciz	"58"
	.size	.L.str158, 3

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	"59"
	.size	.L.str159, 3

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"60"
	.size	.L.str160, 3

	.type	.L.str161,@object       # @.str161
	.align	16
.L.str161:
	.asciz	"._crit_edge82:0-3"
	.size	.L.str161, 18

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	".lr.ph78:1"
	.size	.L.str162, 11

	.type	.L.str163,@object       # @.str163
	.align	16
.L.str163:
	.asciz	"._crit_edge72.thread:0"
	.size	.L.str163, 23

	.type	.L.str164,@object       # @.str164
.L.str164:
	.asciz	"61"
	.size	.L.str164, 3

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	"75:1"
	.size	.L.str165, 5

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"62"
	.size	.L.str166, 3

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"63"
	.size	.L.str167, 3

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"64"
	.size	.L.str168, 3

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"65"
	.size	.L.str169, 3

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"66"
	.size	.L.str170, 3

	.type	.L.str171,@object       # @.str171
	.align	16
.L.str171:
	.asciz	".preheader70:0-0"
	.size	.L.str171, 17

	.type	.L.str172,@object       # @.str172
.L.str172:
	.asciz	".preheader67:1"
	.size	.L.str172, 15

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"indvars.iv163"
	.size	.L.str173, 14

	.type	.L.str174,@object       # @.str174
	.align	16
.L.str174:
	.asciz	"indvars.iv.next164"
	.size	.L.str174, 19

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"67"
	.size	.L.str175, 3

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	".lr.ph78:1-0"
	.size	.L.str176, 13

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	"sext187"
	.size	.L.str177, 8

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	"68"
	.size	.L.str178, 3

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	".lr.ph78:1-2"
	.size	.L.str179, 13

	.type	.L.str180,@object       # @.str180
.L.str180:
	.asciz	"69:2"
	.size	.L.str180, 5

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	"indvars.iv160"
	.size	.L.str181, 14

	.type	.L.str182,@object       # @.str182
	.align	16
.L.str182:
	.asciz	"indvars.iv.next161"
	.size	.L.str182, 19

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"70"
	.size	.L.str183, 3

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"74"
	.size	.L.str184, 3

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"71"
	.size	.L.str185, 3

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"72"
	.size	.L.str186, 3

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"73"
	.size	.L.str187, 3

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	"exitcond162"
	.size	.L.str188, 12

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"69:2-0"
	.size	.L.str189, 7

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"76"
	.size	.L.str190, 3

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"75:1-0"
	.size	.L.str191, 7

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"lftr.wideiv165"
	.size	.L.str192, 15

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	"exitcond166"
	.size	.L.str193, 12

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"75:1-1"
	.size	.L.str194, 7

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	"indvars.iv155"
	.size	.L.str195, 14

	.type	.L.str196,@object       # @.str196
	.align	16
.L.str196:
	.asciz	"indvars.iv.next156"
	.size	.L.str196, 19

	.type	.L.str197,@object       # @.str197
.L.str197:
	.asciz	"87:1"
	.size	.L.str197, 5

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"77"
	.size	.L.str198, 3

	.type	.L.str199,@object       # @.str199
.L.str199:
	.asciz	"78"
	.size	.L.str199, 3

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"sext186"
	.size	.L.str200, 8

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"79"
	.size	.L.str201, 3

	.type	.L.str202,@object       # @.str202
	.align	16
.L.str202:
	.asciz	".preheader67:1-0"
	.size	.L.str202, 17

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"80:2"
	.size	.L.str203, 5

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"indvars.iv152"
	.size	.L.str204, 14

	.type	.L.str205,@object       # @.str205
	.align	16
.L.str205:
	.asciz	"indvars.iv.next153"
	.size	.L.str205, 19

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	"stddev_temp.068"
	.size	.L.str206, 16

	.type	.L.str207,@object       # @.str207
.L.str207:
	.asciz	"86"
	.size	.L.str207, 3

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"81"
	.size	.L.str208, 3

	.type	.L.str209,@object       # @.str209
.L.str209:
	.asciz	"82"
	.size	.L.str209, 3

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"83"
	.size	.L.str210, 3

	.type	.L.str211,@object       # @.str211
.L.str211:
	.asciz	"84"
	.size	.L.str211, 3

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"85"
	.size	.L.str212, 3

	.type	.L.str213,@object       # @.str213
.L.str213:
	.asciz	"exitcond154"
	.size	.L.str213, 12

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"80:2-1"
	.size	.L.str214, 7

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	"88"
	.size	.L.str215, 3

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"89"
	.size	.L.str216, 3

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"90"
	.size	.L.str217, 3

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	"87:1-0"
	.size	.L.str218, 7

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"lftr.wideiv157"
	.size	.L.str219, 15

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"exitcond158"
	.size	.L.str220, 12

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	"87:1-1"
	.size	.L.str221, 7

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	"._crit_edge72:0"
	.size	.L.str222, 16

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	".ph190"
	.size	.L.str223, 7

	.type	.L.str224,@object       # @.str224
.L.str224:
	.asciz	".ph191"
	.size	.L.str224, 7

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	"91"
	.size	.L.str225, 3

	.type	.L.str226,@object       # @.str226
	.align	16
.L.str226:
	.asciz	"._crit_edge72.thread:0-2"
	.size	.L.str226, 25

	.type	.L.str227,@object       # @.str227
.L.str227:
	.asciz	"._crit_edge66:0"
	.size	.L.str227, 16

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"92"
	.size	.L.str228, 3

	.type	.L.str229,@object       # @.str229
.L.str229:
	.asciz	"93"
	.size	.L.str229, 3

	.type	.L.str230,@object       # @.str230
	.align	16
.L.str230:
	.asciz	"._crit_edge72:0-2"
	.size	.L.str230, 18

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	".preheader63:1"
	.size	.L.str231, 15

	.type	.L.str232,@object       # @.str232
	.align	16
.L.str232:
	.asciz	"._crit_edge66.thread:0"
	.size	.L.str232, 23

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"94"
	.size	.L.str233, 3

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"95"
	.size	.L.str234, 3

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"96"
	.size	.L.str235, 3

	.type	.L.str236,@object       # @.str236
	.align	16
.L.str236:
	.asciz	"._crit_edge66.thread:0-2"
	.size	.L.str236, 25

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"._crit_edge62:0"
	.size	.L.str237, 16

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"indvars.iv147"
	.size	.L.str238, 14

	.type	.L.str239,@object       # @.str239
	.align	16
.L.str239:
	.asciz	"indvars.iv.next148"
	.size	.L.str239, 19

	.type	.L.str240,@object       # @.str240
.L.str240:
	.asciz	"112:1"
	.size	.L.str240, 6

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"97"
	.size	.L.str241, 3

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"98"
	.size	.L.str242, 3

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"99"
	.size	.L.str243, 3

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	"100"
	.size	.L.str244, 4

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"sext"
	.size	.L.str245, 5

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	"101"
	.size	.L.str246, 4

	.type	.L.str247,@object       # @.str247
	.align	16
.L.str247:
	.asciz	".preheader63:1-0"
	.size	.L.str247, 17

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"102:2"
	.size	.L.str248, 6

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	"indvars.iv144"
	.size	.L.str249, 14

	.type	.L.str250,@object       # @.str250
	.align	16
.L.str250:
	.asciz	"indvars.iv.next145"
	.size	.L.str250, 19

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"111:2"
	.size	.L.str251, 6

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"102:2-0"
	.size	.L.str252, 8

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"103:2"
	.size	.L.str253, 6

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"104"
	.size	.L.str254, 4

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"105"
	.size	.L.str255, 4

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"106"
	.size	.L.str256, 4

	.type	.L.str257,@object       # @.str257
.L.str257:
	.asciz	"107"
	.size	.L.str257, 4

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"108"
	.size	.L.str258, 4

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"109"
	.size	.L.str259, 4

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"110"
	.size	.L.str260, 4

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"103:2-0"
	.size	.L.str261, 8

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"103:2-1"
	.size	.L.str262, 8

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"exitcond146"
	.size	.L.str263, 12

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"111:2-0"
	.size	.L.str264, 8

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"lftr.wideiv149"
	.size	.L.str265, 15

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"exitcond150"
	.size	.L.str266, 12

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"112:1-0"
	.size	.L.str267, 8

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"113"
	.size	.L.str268, 4

	.type	.L.str269,@object       # @.str269
.L.str269:
	.asciz	"114"
	.size	.L.str269, 4

	.type	.L.str270,@object       # @.str270
.L.str270:
	.asciz	"115"
	.size	.L.str270, 4

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"116"
	.size	.L.str271, 4

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"117"
	.size	.L.str272, 4

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	"118"
	.size	.L.str273, 4

	.type	.L.str274,@object       # @.str274
	.align	16
.L.str274:
	.asciz	"._crit_edge66:0-2"
	.size	.L.str274, 18

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	".lr.ph58:1"
	.size	.L.str275, 11

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	"indvars.iv140"
	.size	.L.str276, 14

	.type	.L.str277,@object       # @.str277
	.align	16
.L.str277:
	.asciz	"indvars.iv.next141"
	.size	.L.str277, 19

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"._crit_edge59:1"
	.size	.L.str278, 16

	.type	.L.str279,@object       # @.str279
.L.str279:
	.asciz	"119"
	.size	.L.str279, 4

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"120"
	.size	.L.str280, 4

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"121"
	.size	.L.str281, 4

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"122"
	.size	.L.str282, 4

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	".lr.ph58:1-0"
	.size	.L.str283, 13

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"123:2"
	.size	.L.str284, 6

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"indvars.iv136"
	.size	.L.str285, 14

	.type	.L.str286,@object       # @.str286
	.align	16
.L.str286:
	.asciz	"indvars.iv.next137"
	.size	.L.str286, 19

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"139:2"
	.size	.L.str287, 6

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"124"
	.size	.L.str288, 4

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"125"
	.size	.L.str289, 4

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	"123:2-0"
	.size	.L.str290, 8

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"126"
	.size	.L.str291, 4

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"127"
	.size	.L.str292, 4

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"128"
	.size	.L.str293, 4

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	"123:2-2"
	.size	.L.str294, 8

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"129:3"
	.size	.L.str295, 6

	.type	.L.str296,@object       # @.str296
.L.str296:
	.asciz	"indvars.iv131"
	.size	.L.str296, 14

	.type	.L.str297,@object       # @.str297
	.align	16
.L.str297:
	.asciz	"indvars.iv.next132"
	.size	.L.str297, 19

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"130"
	.size	.L.str298, 4

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"138"
	.size	.L.str299, 4

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"131"
	.size	.L.str300, 4

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"132"
	.size	.L.str301, 4

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"133"
	.size	.L.str302, 4

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"134"
	.size	.L.str303, 4

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"135"
	.size	.L.str304, 4

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"136"
	.size	.L.str305, 4

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	"137"
	.size	.L.str306, 4

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"exitcond133"
	.size	.L.str307, 12

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"129:3-0"
	.size	.L.str308, 8

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	"140"
	.size	.L.str309, 4

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	"139:2-0"
	.size	.L.str310, 8

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"141"
	.size	.L.str311, 4

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	"142"
	.size	.L.str312, 4

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"143"
	.size	.L.str313, 4

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"144"
	.size	.L.str314, 4

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"145"
	.size	.L.str315, 4

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"146"
	.size	.L.str316, 4

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"139:2-1"
	.size	.L.str317, 8

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"lftr.wideiv138"
	.size	.L.str318, 15

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"exitcond139"
	.size	.L.str319, 12

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"139:2-2"
	.size	.L.str320, 8

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"lftr.wideiv142"
	.size	.L.str321, 15

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"exitcond143"
	.size	.L.str322, 12

	.type	.L.str323,@object       # @.str323
	.align	16
.L.str323:
	.asciz	"._crit_edge59:1-0"
	.size	.L.str323, 18

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	"147"
	.size	.L.str324, 4

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"148"
	.size	.L.str325, 4

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"149"
	.size	.L.str326, 4

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	"150"
	.size	.L.str327, 4

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"151"
	.size	.L.str328, 4

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"rs"
	.size	.L.str329, 3

	.type	.L.str330,@object       # @.str330
	.align	16
.L.str330:
	.asciz	"freq_eigenvalues"
	.size	.L.str330, 17

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"152"
	.size	.L.str331, 4

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"153"
	.size	.L.str332, 4

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"154"
	.size	.L.str333, 4

	.type	.L.str334,@object       # @.str334
	.align	16
.L.str334:
	.asciz	"._crit_edge62:0-4"
	.size	.L.str334, 18

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	".lr.ph51:0"
	.size	.L.str335, 11

	.type	.L.str336,@object       # @.str336
	.align	16
.L.str336:
	.asciz	"._crit_edge52.thread:0"
	.size	.L.str336, 23

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"155"
	.size	.L.str337, 4

	.type	.L.str338,@object       # @.str338
	.align	16
.L.str338:
	.asciz	"._crit_edge52.thread:0-2"
	.size	.L.str338, 25

	.type	.L.str339,@object       # @.str339
	.align	16
.L.str339:
	.asciz	"._crit_edge42.thread:0"
	.size	.L.str339, 23

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"156"
	.size	.L.str340, 4

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"157"
	.size	.L.str341, 4

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	".lr.ph51:0-0"
	.size	.L.str342, 13

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	"158:1"
	.size	.L.str343, 6

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"indvars.iv126"
	.size	.L.str344, 14

	.type	.L.str345,@object       # @.str345
	.align	16
.L.str345:
	.asciz	"indvars.iv.next127"
	.size	.L.str345, 19

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	"169:1"
	.size	.L.str346, 6

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"159"
	.size	.L.str347, 4

	.type	.L.str348,@object       # @.str348
.L.str348:
	.asciz	"time_mean"
	.size	.L.str348, 10

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"158:1-0"
	.size	.L.str349, 8

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"158:1-2"
	.size	.L.str350, 8

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	".lr.ph45:1"
	.size	.L.str351, 11

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"160"
	.size	.L.str352, 4

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"161"
	.size	.L.str353, 4

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	".promoted47"
	.size	.L.str354, 12

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"162"
	.size	.L.str355, 4

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	".lr.ph45:1-0"
	.size	.L.str356, 13

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"163:2"
	.size	.L.str357, 6

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"indvars.iv122"
	.size	.L.str358, 14

	.type	.L.str359,@object       # @.str359
	.align	16
.L.str359:
	.asciz	"indvars.iv.next123"
	.size	.L.str359, 19

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	"164"
	.size	.L.str360, 4

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"168"
	.size	.L.str361, 4

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"165"
	.size	.L.str362, 4

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"166"
	.size	.L.str363, 4

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"167"
	.size	.L.str364, 4

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"lftr.wideiv124"
	.size	.L.str365, 15

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"exitcond125"
	.size	.L.str366, 12

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"163:2-0"
	.size	.L.str367, 8

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	"._crit_edge46:1"
	.size	.L.str368, 16

	.type	.L.str369,@object       # @.str369
	.align	16
.L.str369:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str369, 18

	.type	.L.str370,@object       # @.str370
	.align	16
.L.str370:
	.asciz	"._crit_edge46:1-1"
	.size	.L.str370, 18

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	"170"
	.size	.L.str371, 4

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	"171"
	.size	.L.str372, 4

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"169:1-0"
	.size	.L.str373, 8

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	"lftr.wideiv128"
	.size	.L.str374, 15

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	"exitcond129"
	.size	.L.str375, 12

	.type	.L.str376,@object       # @.str376
.L.str376:
	.asciz	"169:1-1"
	.size	.L.str376, 8

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	"._crit_edge52:0"
	.size	.L.str377, 16

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	"172"
	.size	.L.str378, 4

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	"173"
	.size	.L.str379, 4

	.type	.L.str380,@object       # @.str380
	.align	16
.L.str380:
	.asciz	"._crit_edge52:0-2"
	.size	.L.str380, 18

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	".lr.ph41:0"
	.size	.L.str381, 11

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	"174"
	.size	.L.str382, 4

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"175"
	.size	.L.str383, 4

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	".lr.ph41:0-0"
	.size	.L.str384, 13

	.type	.L.str385,@object       # @.str385
.L.str385:
	.asciz	"176:1"
	.size	.L.str385, 6

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	"indvars.iv117"
	.size	.L.str386, 14

	.type	.L.str387,@object       # @.str387
	.align	16
.L.str387:
	.asciz	"indvars.iv.next118"
	.size	.L.str387, 19

	.type	.L.str388,@object       # @.str388
.L.str388:
	.asciz	"191:1"
	.size	.L.str388, 6

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"177"
	.size	.L.str389, 4

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"time_stddev"
	.size	.L.str390, 12

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"176:1-0"
	.size	.L.str391, 8

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"176:1-2"
	.size	.L.str392, 8

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	".lr.ph35:1"
	.size	.L.str393, 11

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"178"
	.size	.L.str394, 4

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"179"
	.size	.L.str395, 4

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"180"
	.size	.L.str396, 4

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"181"
	.size	.L.str397, 4

	.type	.L.str398,@object       # @.str398
.L.str398:
	.asciz	".promoted37"
	.size	.L.str398, 12

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"182"
	.size	.L.str399, 4

	.type	.L.str400,@object       # @.str400
.L.str400:
	.asciz	".lr.ph35:1-0"
	.size	.L.str400, 13

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	"183:2"
	.size	.L.str401, 6

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"indvars.iv113"
	.size	.L.str402, 14

	.type	.L.str403,@object       # @.str403
	.align	16
.L.str403:
	.asciz	"indvars.iv.next114"
	.size	.L.str403, 19

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"184"
	.size	.L.str404, 4

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	"190"
	.size	.L.str405, 4

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	"185"
	.size	.L.str406, 4

	.type	.L.str407,@object       # @.str407
.L.str407:
	.asciz	"186"
	.size	.L.str407, 4

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"187"
	.size	.L.str408, 4

	.type	.L.str409,@object       # @.str409
.L.str409:
	.asciz	"188"
	.size	.L.str409, 4

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	"189"
	.size	.L.str410, 4

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	"lftr.wideiv115"
	.size	.L.str411, 15

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"exitcond116"
	.size	.L.str412, 12

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"183:2-0"
	.size	.L.str413, 8

	.type	.L.str414,@object       # @.str414
.L.str414:
	.asciz	"._crit_edge36:1"
	.size	.L.str414, 16

	.type	.L.str415,@object       # @.str415
	.align	16
.L.str415:
	.asciz	"._crit_edge36:1-0"
	.size	.L.str415, 18

	.type	.L.str416,@object       # @.str416
	.align	16
.L.str416:
	.asciz	"._crit_edge36:1-1"
	.size	.L.str416, 18

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"192"
	.size	.L.str417, 4

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"193"
	.size	.L.str418, 4

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	"194"
	.size	.L.str419, 4

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	"195"
	.size	.L.str420, 4

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"196"
	.size	.L.str421, 4

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"191:1-0"
	.size	.L.str422, 8

	.type	.L.str423,@object       # @.str423
.L.str423:
	.asciz	"lftr.wideiv119"
	.size	.L.str423, 15

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"exitcond120"
	.size	.L.str424, 12

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"191:1-1"
	.size	.L.str425, 8

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"._crit_edge42:0"
	.size	.L.str426, 16

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	".ph195"
	.size	.L.str427, 7

	.type	.L.str428,@object       # @.str428
.L.str428:
	.asciz	"197"
	.size	.L.str428, 4

	.type	.L.str429,@object       # @.str429
	.align	16
.L.str429:
	.asciz	"._crit_edge42.thread:0-2"
	.size	.L.str429, 25

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"._crit_edge32:0"
	.size	.L.str430, 16

	.type	.L.str431,@object       # @.str431
.L.str431:
	.asciz	"198"
	.size	.L.str431, 4

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	"199"
	.size	.L.str432, 4

	.type	.L.str433,@object       # @.str433
	.align	16
.L.str433:
	.asciz	"._crit_edge42:0-2"
	.size	.L.str433, 18

	.type	.L.str434,@object       # @.str434
	.align	16
.L.str434:
	.asciz	".preheader27.lr.ph:0"
	.size	.L.str434, 21

	.type	.L.str435,@object       # @.str435
	.align	16
.L.str435:
	.asciz	"._crit_edge32.thread:0"
	.size	.L.str435, 23

	.type	.L.str436,@object       # @.str436
.L.str436:
	.asciz	"200"
	.size	.L.str436, 4

	.type	.L.str437,@object       # @.str437
	.align	16
.L.str437:
	.asciz	"._crit_edge32.thread:0-2"
	.size	.L.str437, 25

	.type	.L.str438,@object       # @.str438
.L.str438:
	.asciz	"._crit_edge26:0"
	.size	.L.str438, 16

	.type	.L.str439,@object       # @.str439
.L.str439:
	.asciz	"201"
	.size	.L.str439, 4

	.type	.L.str440,@object       # @.str440
	.align	16
.L.str440:
	.asciz	".preheader27.lr.ph:0-0"
	.size	.L.str440, 23

	.type	.L.str441,@object       # @.str441
.L.str441:
	.asciz	".preheader27:1"
	.size	.L.str441, 15

	.type	.L.str442,@object       # @.str442
.L.str442:
	.asciz	"indvars.iv108"
	.size	.L.str442, 14

	.type	.L.str443,@object       # @.str443
	.align	16
.L.str443:
	.asciz	"indvars.iv.next109"
	.size	.L.str443, 19

	.type	.L.str444,@object       # @.str444
.L.str444:
	.asciz	"._crit_edge30:1"
	.size	.L.str444, 16

	.type	.L.str445,@object       # @.str445
	.align	16
.L.str445:
	.asciz	".preheader27:1-0"
	.size	.L.str445, 17

	.type	.L.str446,@object       # @.str446
.L.str446:
	.asciz	".lr.ph29:1"
	.size	.L.str446, 11

	.type	.L.str447,@object       # @.str447
.L.str447:
	.asciz	"202"
	.size	.L.str447, 4

	.type	.L.str448,@object       # @.str448
.L.str448:
	.asciz	"203"
	.size	.L.str448, 4

	.type	.L.str449,@object       # @.str449
.L.str449:
	.asciz	"204"
	.size	.L.str449, 4

	.type	.L.str450,@object       # @.str450
.L.str450:
	.asciz	"205"
	.size	.L.str450, 4

	.type	.L.str451,@object       # @.str451
.L.str451:
	.asciz	"206"
	.size	.L.str451, 4

	.type	.L.str452,@object       # @.str452
.L.str452:
	.asciz	"207"
	.size	.L.str452, 4

	.type	.L.str453,@object       # @.str453
.L.str453:
	.asciz	"208"
	.size	.L.str453, 4

	.type	.L.str454,@object       # @.str454
.L.str454:
	.asciz	".lr.ph29:1-0"
	.size	.L.str454, 13

	.type	.L.str455,@object       # @.str455
.L.str455:
	.asciz	"209:2"
	.size	.L.str455, 6

	.type	.L.str456,@object       # @.str456
.L.str456:
	.asciz	"indvars.iv104"
	.size	.L.str456, 14

	.type	.L.str457,@object       # @.str457
	.align	16
.L.str457:
	.asciz	"indvars.iv.next105"
	.size	.L.str457, 19

	.type	.L.str458,@object       # @.str458
.L.str458:
	.asciz	"210"
	.size	.L.str458, 4

	.type	.L.str459,@object       # @.str459
.L.str459:
	.asciz	"211"
	.size	.L.str459, 4

	.type	.L.str460,@object       # @.str460
.L.str460:
	.asciz	"212"
	.size	.L.str460, 4

	.type	.L.str461,@object       # @.str461
.L.str461:
	.asciz	"213"
	.size	.L.str461, 4

	.type	.L.str462,@object       # @.str462
.L.str462:
	.asciz	"214"
	.size	.L.str462, 4

	.type	.L.str463,@object       # @.str463
.L.str463:
	.asciz	"215"
	.size	.L.str463, 4

	.type	.L.str464,@object       # @.str464
.L.str464:
	.asciz	"209:2-0"
	.size	.L.str464, 8

	.type	.L.str465,@object       # @.str465
.L.str465:
	.asciz	"lftr.wideiv106"
	.size	.L.str465, 15

	.type	.L.str466,@object       # @.str466
.L.str466:
	.asciz	"exitcond107"
	.size	.L.str466, 12

	.type	.L.str467,@object       # @.str467
.L.str467:
	.asciz	"209:2-1"
	.size	.L.str467, 8

	.type	.L.str468,@object       # @.str468
.L.str468:
	.asciz	"lftr.wideiv110"
	.size	.L.str468, 15

	.type	.L.str469,@object       # @.str469
.L.str469:
	.asciz	"exitcond111"
	.size	.L.str469, 12

	.type	.L.str470,@object       # @.str470
	.align	16
.L.str470:
	.asciz	"._crit_edge30:1-0"
	.size	.L.str470, 18

	.type	.L.str471,@object       # @.str471
.L.str471:
	.asciz	"216"
	.size	.L.str471, 4

	.type	.L.str472,@object       # @.str472
.L.str472:
	.asciz	"217"
	.size	.L.str472, 4

	.type	.L.str473,@object       # @.str473
.L.str473:
	.asciz	"218"
	.size	.L.str473, 4

	.type	.L.str474,@object       # @.str474
.L.str474:
	.asciz	"219"
	.size	.L.str474, 4

	.type	.L.str475,@object       # @.str475
	.align	16
.L.str475:
	.asciz	"._crit_edge32:0-2"
	.size	.L.str475, 18

	.type	.L.str476,@object       # @.str476
.L.str476:
	.asciz	"220"
	.size	.L.str476, 4

	.type	.L.str477,@object       # @.str477
.L.str477:
	.asciz	"221"
	.size	.L.str477, 4

	.type	.L.str478,@object       # @.str478
.L.str478:
	.asciz	".lr.ph22:1"
	.size	.L.str478, 11

	.type	.L.str479,@object       # @.str479
.L.str479:
	.asciz	"indvars.iv100"
	.size	.L.str479, 14

	.type	.L.str480,@object       # @.str480
	.align	16
.L.str480:
	.asciz	"indvars.iv.next101"
	.size	.L.str480, 19

	.type	.L.str481,@object       # @.str481
.L.str481:
	.asciz	"._crit_edge23:1"
	.size	.L.str481, 16

	.type	.L.str482,@object       # @.str482
.L.str482:
	.asciz	"222"
	.size	.L.str482, 4

	.type	.L.str483,@object       # @.str483
.L.str483:
	.asciz	"223"
	.size	.L.str483, 4

	.type	.L.str484,@object       # @.str484
.L.str484:
	.asciz	"224"
	.size	.L.str484, 4

	.type	.L.str485,@object       # @.str485
.L.str485:
	.asciz	"225"
	.size	.L.str485, 4

	.type	.L.str486,@object       # @.str486
.L.str486:
	.asciz	".lr.ph22:1-0"
	.size	.L.str486, 13

	.type	.L.str487,@object       # @.str487
.L.str487:
	.asciz	"226:2"
	.size	.L.str487, 6

	.type	.L.str488,@object       # @.str488
.L.str488:
	.asciz	"indvars.iv96"
	.size	.L.str488, 13

	.type	.L.str489,@object       # @.str489
	.align	16
.L.str489:
	.asciz	"indvars.iv.next97"
	.size	.L.str489, 18

	.type	.L.str490,@object       # @.str490
.L.str490:
	.asciz	"242:2"
	.size	.L.str490, 6

	.type	.L.str491,@object       # @.str491
.L.str491:
	.asciz	"227"
	.size	.L.str491, 4

	.type	.L.str492,@object       # @.str492
.L.str492:
	.asciz	"228"
	.size	.L.str492, 4

	.type	.L.str493,@object       # @.str493
.L.str493:
	.asciz	"226:2-0"
	.size	.L.str493, 8

	.type	.L.str494,@object       # @.str494
.L.str494:
	.asciz	"226:2-2"
	.size	.L.str494, 8

	.type	.L.str495,@object       # @.str495
.L.str495:
	.asciz	".lr.ph:2"
	.size	.L.str495, 9

	.type	.L.str496,@object       # @.str496
.L.str496:
	.asciz	"229"
	.size	.L.str496, 4

	.type	.L.str497,@object       # @.str497
.L.str497:
	.asciz	"230"
	.size	.L.str497, 4

	.type	.L.str498,@object       # @.str498
.L.str498:
	.asciz	".promoted"
	.size	.L.str498, 10

	.type	.L.str499,@object       # @.str499
.L.str499:
	.asciz	"231"
	.size	.L.str499, 4

	.type	.L.str500,@object       # @.str500
.L.str500:
	.asciz	".lr.ph:2-0"
	.size	.L.str500, 11

	.type	.L.str501,@object       # @.str501
.L.str501:
	.asciz	"232:3"
	.size	.L.str501, 6

	.type	.L.str502,@object       # @.str502
.L.str502:
	.asciz	"233"
	.size	.L.str502, 4

	.type	.L.str503,@object       # @.str503
.L.str503:
	.asciz	"241"
	.size	.L.str503, 4

	.type	.L.str504,@object       # @.str504
.L.str504:
	.asciz	"234"
	.size	.L.str504, 4

	.type	.L.str505,@object       # @.str505
.L.str505:
	.asciz	"235"
	.size	.L.str505, 4

	.type	.L.str506,@object       # @.str506
.L.str506:
	.asciz	"236"
	.size	.L.str506, 4

	.type	.L.str507,@object       # @.str507
.L.str507:
	.asciz	"237"
	.size	.L.str507, 4

	.type	.L.str508,@object       # @.str508
.L.str508:
	.asciz	"238"
	.size	.L.str508, 4

	.type	.L.str509,@object       # @.str509
.L.str509:
	.asciz	"239"
	.size	.L.str509, 4

	.type	.L.str510,@object       # @.str510
.L.str510:
	.asciz	"240"
	.size	.L.str510, 4

	.type	.L.str511,@object       # @.str511
.L.str511:
	.asciz	"232:3-0"
	.size	.L.str511, 8

	.type	.L.str512,@object       # @.str512
.L.str512:
	.asciz	"._crit_edge:2"
	.size	.L.str512, 14

	.type	.L.str513,@object       # @.str513
.L.str513:
	.asciz	"._crit_edge:2-0"
	.size	.L.str513, 16

	.type	.L.str514,@object       # @.str514
.L.str514:
	.asciz	"._crit_edge:2-1"
	.size	.L.str514, 16

	.type	.L.str515,@object       # @.str515
.L.str515:
	.asciz	"243"
	.size	.L.str515, 4

	.type	.L.str516,@object       # @.str516
.L.str516:
	.asciz	"244"
	.size	.L.str516, 4

	.type	.L.str517,@object       # @.str517
.L.str517:
	.asciz	"242:2-0"
	.size	.L.str517, 8

	.type	.L.str518,@object       # @.str518
.L.str518:
	.asciz	"245"
	.size	.L.str518, 4

	.type	.L.str519,@object       # @.str519
.L.str519:
	.asciz	"246"
	.size	.L.str519, 4

	.type	.L.str520,@object       # @.str520
.L.str520:
	.asciz	"247"
	.size	.L.str520, 4

	.type	.L.str521,@object       # @.str521
.L.str521:
	.asciz	"248"
	.size	.L.str521, 4

	.type	.L.str522,@object       # @.str522
.L.str522:
	.asciz	"249"
	.size	.L.str522, 4

	.type	.L.str523,@object       # @.str523
.L.str523:
	.asciz	"250"
	.size	.L.str523, 4

	.type	.L.str524,@object       # @.str524
.L.str524:
	.asciz	"242:2-1"
	.size	.L.str524, 8

	.type	.L.str525,@object       # @.str525
.L.str525:
	.asciz	"lftr.wideiv98"
	.size	.L.str525, 14

	.type	.L.str526,@object       # @.str526
.L.str526:
	.asciz	"exitcond99"
	.size	.L.str526, 11

	.type	.L.str527,@object       # @.str527
.L.str527:
	.asciz	"242:2-2"
	.size	.L.str527, 8

	.type	.L.str528,@object       # @.str528
.L.str528:
	.asciz	"lftr.wideiv102"
	.size	.L.str528, 15

	.type	.L.str529,@object       # @.str529
.L.str529:
	.asciz	"exitcond103"
	.size	.L.str529, 12

	.type	.L.str530,@object       # @.str530
	.align	16
.L.str530:
	.asciz	"._crit_edge23:1-0"
	.size	.L.str530, 18

	.type	.L.str531,@object       # @.str531
.L.str531:
	.asciz	"251"
	.size	.L.str531, 4

	.type	.L.str532,@object       # @.str532
.L.str532:
	.asciz	"252"
	.size	.L.str532, 4

	.type	.L.str533,@object       # @.str533
.L.str533:
	.asciz	"253"
	.size	.L.str533, 4

	.type	.L.str534,@object       # @.str534
	.align	16
.L.str534:
	.asciz	"time_eigenvalues"
	.size	.L.str534, 17

	.type	.L.str535,@object       # @.str535
	.align	16
.L.str535:
	.asciz	"._crit_edge26:0-1"
	.size	.L.str535, 18

	.type	.L.str536,@object       # @.str536
.L.str536:
	.asciz	"main"
	.size	.L.str536, 5

	.type	.L.str537,@object       # @.str537
.L.str537:
	.asciz	"malloc"
	.size	.L.str537, 7

	.type	.L.str538,@object       # @.str538
.L.str538:
	.asciz	"0:0-3"
	.size	.L.str538, 6

	.type	.L.str539,@object       # @.str539
.L.str539:
	.asciz	"indvars.iv3"
	.size	.L.str539, 12

	.type	.L.str540,@object       # @.str540
	.align	16
.L.str540:
	.asciz	"indvars.iv.next4"
	.size	.L.str540, 17

	.type	.L.str541,@object       # @.str541
.L.str541:
	.asciz	"15:1"
	.size	.L.str541, 5

	.type	.L.str542,@object       # @.str542
.L.str542:
	.asciz	"6:2"
	.size	.L.str542, 4

	.type	.L.str543,@object       # @.str543
.L.str543:
	.asciz	"cos"
	.size	.L.str543, 4

	.type	.L.str544,@object       # @.str544
.L.str544:
	.asciz	"6:2-0"
	.size	.L.str544, 6

	.type	.L.str545,@object       # @.str545
.L.str545:
	.asciz	"6:2-1"
	.size	.L.str545, 6

	.type	.L.str546,@object       # @.str546
.L.str546:
	.asciz	"6:2-2"
	.size	.L.str546, 6

	.type	.L.str547,@object       # @.str547
.L.str547:
	.asciz	"exitcond5"
	.size	.L.str547, 10

	.type	.L.str548,@object       # @.str548
.L.str548:
	.asciz	"15:1-0"
	.size	.L.str548, 7

	.type	.L.str549,@object       # @.str549
.L.str549:
	.asciz	"16:0"
	.size	.L.str549, 5

	.type	.L.str550,@object       # @.str550
.L.str550:
	.asciz	"kiss_fft_alloc"
	.size	.L.str550, 15

	.type	.L.str551,@object       # @.str551
.L.str551:
	.asciz	"16:0-1"
	.size	.L.str551, 7

	.type	.L.str552,@object       # @.str552
.L.str552:
	.asciz	"16:0-3"
	.size	.L.str552, 7

	.type	.L.str553,@object       # @.str553
	.align	16
.L.str553:
	.asciz	"process_data/fft_loop 38\nprocess_data/fft_loop_1 40\nprocess_data/fft_loop_2 48\nprocess_data/fft_mean_loop_1 71\nprocess_data/fft_mean_loop_2 74\nprocess_data/fft_scale_loop_1 94\nprocess_data/fft_scale_loop_2 96\nprocess_data/fft_stddev_loop_1 81\nprocess_data/fft_stddev_loop_2 85\nprocess_data/freq_xcorr_loop_1 107\nprocess_data/freq_xcorr_loop_2 110\nprocess_data/freq_xcorr_loop_3 114\nprocess_data/mag_log_loop_1 59\nprocess_data/mag_log_loop_2 61\nprocess_data/time_mean_loop_1 142\nprocess_data/time_mean_loop_2 145\nprocess_data/time_scale_loop_1 164\nprocess_data/time_scale_loop_2 166\nprocess_data/time_stddev_loop_1 152\nprocess_data/time_stddev_loop_2 155\nprocess_data/time_xcorr_loop_1 174\nprocess_data/time_xcorr_loop_2 176\nprocess_data/time_xcorr_loop_3 179\nkf_bfly2/kf_bfly2_loop 32\nkf_bfly3/kf_bfly3_loop 108\nkf_bfly4/kf_bfly4_loop 60\nkf_bfly5/kf_bfly5_loop 161\nkf_bfly_generic/kf_bfly_loop 219\nkf_bfly_generic/kf_bfly_loop_1 221\nkf_bfly_generic/kf_bfly_loop_2 228\nkf_bfly_generic/kf_bfly_loop_3 231\nkf_factor/kf_factor_1 324\nkf_factor/kf_factor_2 325\nkf_work/kf_work_1 284\nkf_work/kf_work_2 289\npythag/pythag_loop 84\ntqlrat/tqlrat_1 459\ntqlrat/tqlrat_2 468\ntqlrat/tqlrat_3 482\ntqlrat/tqlrat_4 492\ntqlrat/tqlrat_5 511\ntqlrat/tqlrat_6 529\ntqlrat/tqlrat_7 572\ntrbak1/trbak1_1 671\ntrbak1/trbak1_2 677\ntrbak1/trbak1_3 680\ntrbak1/trbak1_4 685\ntred1/tred1_1 778\ntred1/tred1_10 847\ntred1/tred1_11 858\ntred1/tred1_12 868\ntred1/tred1_13 875\ntred1/tred1_14 879\ntred1/tred1_15 886\ntred1/tred1_2 783\ntred1/tred1_3 788\ntred1/tred1_4 796\ntred1/tred1_5 803\ntred1/tred1_6 815\ntred1/tred1_7 820\ntred1/tred1_8 837\ntred1/tred1_9 842\n"
	.size	.L.str553, 1618

	.type	.L.str554,@object       # @.str554
.L.str554:
	.asciz	"kiss_fft_alloc"
	.size	.L.str554, 15

	.type	.L.str1555,@object      # @.str1555
.L.str1555:
	.asciz	"0:0"
	.size	.L.str1555, 4

	.type	.L.str2556,@object      # @.str2556
.L.str2556:
	.asciz	"1"
	.size	.L.str2556, 2

	.type	.L.str3557,@object      # @.str3557
.L.str3557:
	.zero	1
	.size	.L.str3557, 1

	.type	.L.str4558,@object      # @.str4558
.L.str4558:
	.asciz	"phi"
	.size	.L.str4558, 4

	.type	.L.str5559,@object      # @.str5559
.L.str5559:
	.asciz	"nfft"
	.size	.L.str5559, 5

	.type	.L.str6560,@object      # @.str6560
.L.str6560:
	.asciz	"2"
	.size	.L.str6560, 2

	.type	.L.str7561,@object      # @.str7561
.L.str7561:
	.asciz	"3"
	.size	.L.str7561, 2

	.type	.L.str8562,@object      # @.str8562
.L.str8562:
	.asciz	"4"
	.size	.L.str8562, 2

	.type	.L.str9563,@object      # @.str9563
.L.str9563:
	.asciz	"5"
	.size	.L.str9563, 2

	.type	.L.str10564,@object     # @.str10564
.L.str10564:
	.asciz	"lenmem"
	.size	.L.str10564, 7

	.type	.L.str11565,@object     # @.str11565
.L.str11565:
	.asciz	"0:0-6"
	.size	.L.str11565, 6

	.type	.L.str12566,@object     # @.str12566
.L.str12566:
	.asciz	"6:0"
	.size	.L.str12566, 4

	.type	.L.str13567,@object     # @.str13567
.L.str13567:
	.asciz	"9:0"
	.size	.L.str13567, 4

	.type	.L.str14568,@object     # @.str14568
.L.str14568:
	.asciz	"7"
	.size	.L.str14568, 2

	.type	.L.str15569,@object     # @.str15569
.L.str15569:
	.asciz	"malloc"
	.size	.L.str15569, 7

	.type	.L.str16570,@object     # @.str16570
.L.str16570:
	.asciz	"8"
	.size	.L.str16570, 2

	.type	.L.str17571,@object     # @.str17571
.L.str17571:
	.asciz	"6:0-1"
	.size	.L.str17571, 6

	.type	.L.str18572,@object     # @.str18572
.L.str18572:
	.asciz	"17:0"
	.size	.L.str18572, 5

	.type	.L.str19573,@object     # @.str19573
.L.str19573:
	.asciz	"10"
	.size	.L.str19573, 3

	.type	.L.str20574,@object     # @.str20574
.L.str20574:
	.asciz	"mem"
	.size	.L.str20574, 4

	.type	.L.str21575,@object     # @.str21575
.L.str21575:
	.asciz	"9:0-0"
	.size	.L.str21575, 6

	.type	.L.str22576,@object     # @.str22576
.L.str22576:
	.asciz	"16:0"
	.size	.L.str22576, 5

	.type	.L.str23577,@object     # @.str23577
.L.str23577:
	.asciz	"11:0"
	.size	.L.str23577, 5

	.type	.L.str24578,@object     # @.str24578
.L.str24578:
	.asciz	"12"
	.size	.L.str24578, 3

	.type	.L.str25579,@object     # @.str25579
.L.str25579:
	.asciz	"13"
	.size	.L.str25579, 3

	.type	.L.str26580,@object     # @.str26580
.L.str26580:
	.asciz	"11:0-0"
	.size	.L.str26580, 7

	.type	.L.str27581,@object     # @.str27581
.L.str27581:
	.asciz	"14:0"
	.size	.L.str27581, 5

	.type	.L.str28582,@object     # @.str28582
.L.str28582:
	.asciz	"15"
	.size	.L.str28582, 3

	.type	.L.str29583,@object     # @.str29583
.L.str29583:
	.asciz	"14:0-1"
	.size	.L.str29583, 7

	.type	.L.str30584,@object     # @.str30584
.L.str30584:
	.asciz	"st.0"
	.size	.L.str30584, 5

	.type	.L.str31585,@object     # @.str31585
.L.str31585:
	.asciz	"16:0-0"
	.size	.L.str31585, 7

	.type	.L.str32586,@object     # @.str32586
.L.str32586:
	.asciz	"16:0-1"
	.size	.L.str32586, 7

	.type	.L.str33587,@object     # @.str33587
.L.str33587:
	.asciz	"st.1"
	.size	.L.str33587, 5

	.type	.L.str34588,@object     # @.str34588
.L.str34588:
	.asciz	"18"
	.size	.L.str34588, 3

	.type	.L.str35589,@object     # @.str35589
.L.str35589:
	.asciz	"17:0-0"
	.size	.L.str35589, 7

	.type	.L.str36590,@object     # @.str36590
.L.str36590:
	.asciz	"39:0"
	.size	.L.str36590, 5

	.type	.L.str37591,@object     # @.str37591
.L.str37591:
	.asciz	"19:0"
	.size	.L.str37591, 5

	.type	.L.str38592,@object     # @.str38592
.L.str38592:
	.asciz	"20"
	.size	.L.str38592, 3

	.type	.L.str39593,@object     # @.str39593
.L.str39593:
	.asciz	"19:0-0"
	.size	.L.str39593, 7

	.type	.L.str40594,@object     # @.str40594
.L.str40594:
	.asciz	"21"
	.size	.L.str40594, 3

	.type	.L.str41595,@object     # @.str41595
.L.str41595:
	.asciz	"19:0-1"
	.size	.L.str41595, 7

	.type	.L.str42596,@object     # @.str42596
.L.str42596:
	.asciz	"inverse_fft"
	.size	.L.str42596, 12

	.type	.L.str43597,@object     # @.str43597
.L.str43597:
	.asciz	"22"
	.size	.L.str43597, 3

	.type	.L.str44598,@object     # @.str44598
.L.str44598:
	.asciz	"19:0-3"
	.size	.L.str44598, 7

	.type	.L.str45599,@object     # @.str45599
.L.str45599:
	.asciz	".lr.ph:0"
	.size	.L.str45599, 9

	.type	.L.str46600,@object     # @.str46600
.L.str46600:
	.asciz	"._crit_edge:0"
	.size	.L.str46600, 14

	.type	.L.str47601,@object     # @.str47601
.L.str47601:
	.asciz	"23"
	.size	.L.str47601, 3

	.type	.L.str48602,@object     # @.str48602
.L.str48602:
	.asciz	".lr.ph:0-0"
	.size	.L.str48602, 11

	.type	.L.str49603,@object     # @.str49603
.L.str49603:
	.asciz	"24:1"
	.size	.L.str49603, 5

	.type	.L.str50604,@object     # @.str50604
.L.str50604:
	.asciz	"indvars.iv"
	.size	.L.str50604, 11

	.type	.L.str51605,@object     # @.str51605
.L.str51605:
	.asciz	"indvars.iv.next"
	.size	.L.str51605, 16

	.type	.L.str52606,@object     # @.str52606
.L.str52606:
	.asciz	"33:1"
	.size	.L.str52606, 5

	.type	.L.str53607,@object     # @.str53607
.L.str53607:
	.asciz	"25"
	.size	.L.str53607, 3

	.type	.L.str54608,@object     # @.str54608
.L.str54608:
	.asciz	"26"
	.size	.L.str54608, 3

	.type	.L.str55609,@object     # @.str55609
.L.str55609:
	.asciz	"27"
	.size	.L.str55609, 3

	.type	.L.str56610,@object     # @.str56610
.L.str56610:
	.asciz	"28"
	.size	.L.str56610, 3

	.type	.L.str57611,@object     # @.str57611
.L.str57611:
	.asciz	"29"
	.size	.L.str57611, 3

	.type	.L.str58612,@object     # @.str58612
.L.str58612:
	.asciz	"30"
	.size	.L.str58612, 3

	.type	.L.str59613,@object     # @.str59613
.L.str59613:
	.asciz	"24:1-2"
	.size	.L.str59613, 7

	.type	.L.str60614,@object     # @.str60614
.L.str60614:
	.asciz	"31:1"
	.size	.L.str60614, 5

	.type	.L.str61615,@object     # @.str61615
.L.str61615:
	.asciz	"32"
	.size	.L.str61615, 3

	.type	.L.str62616,@object     # @.str62616
.L.str62616:
	.asciz	"31:1-1"
	.size	.L.str62616, 7

	.type	.L.str63617,@object     # @.str63617
.L.str63617:
	.asciz	"phase.0"
	.size	.L.str63617, 8

	.type	.L.str64618,@object     # @.str64618
.L.str64618:
	.asciz	"34"
	.size	.L.str64618, 3

	.type	.L.str65619,@object     # @.str65619
.L.str65619:
	.asciz	"cos"
	.size	.L.str65619, 4

	.type	.L.str66620,@object     # @.str66620
.L.str66620:
	.asciz	"35"
	.size	.L.str66620, 3

	.type	.L.str67621,@object     # @.str67621
.L.str67621:
	.asciz	"33:1-0"
	.size	.L.str67621, 7

	.type	.L.str68622,@object     # @.str68622
.L.str68622:
	.asciz	"36"
	.size	.L.str68622, 3

	.type	.L.str69623,@object     # @.str69623
.L.str69623:
	.asciz	"sin"
	.size	.L.str69623, 4

	.type	.L.str70624,@object     # @.str70624
.L.str70624:
	.asciz	"37"
	.size	.L.str70624, 3

	.type	.L.str71625,@object     # @.str71625
.L.str71625:
	.asciz	"33:1-1"
	.size	.L.str71625, 7

	.type	.L.str72626,@object     # @.str72626
.L.str72626:
	.asciz	"lftr.wideiv"
	.size	.L.str72626, 12

	.type	.L.str73627,@object     # @.str73627
.L.str73627:
	.asciz	"exitcond"
	.size	.L.str73627, 9

	.type	.L.str74628,@object     # @.str74628
.L.str74628:
	.asciz	"33:1-2"
	.size	.L.str74628, 7

	.type	.L.str75629,@object     # @.str75629
.L.str75629:
	.asciz	"38"
	.size	.L.str75629, 3

	.type	.L.str76630,@object     # @.str76630
.L.str76630:
	.asciz	"._crit_edge:0-0"
	.size	.L.str76630, 16

	.type	.L.str77631,@object     # @.str77631
.L.str77631:
	.asciz	"kf_factor"
	.size	.L.str77631, 10

	.type	.L.str78632,@object     # @.str78632
.L.str78632:
	.asciz	"._crit_edge:0-1"
	.size	.L.str78632, 16

	.type	.L.str79633,@object     # @.str79633
.L.str79633:
	.asciz	"39:0-0"
	.size	.L.str79633, 7

	.type	.L.str80634,@object     # @.str80634
.L.str80634:
	.asciz	"n"
	.size	.L.str80634, 2

	.type	.L.str81635,@object     # @.str81635
.L.str81635:
	.asciz	"sqrt"
	.size	.L.str81635, 5

	.type	.L.str82636,@object     # @.str82636
.L.str82636:
	.asciz	"floor"
	.size	.L.str82636, 6

	.type	.L.str83637,@object     # @.str83637
.L.str83637:
	.asciz	"0:0-4"
	.size	.L.str83637, 6

	.type	.L.str84638,@object     # @.str84638
.L.str84638:
	.asciz	".outer:1"
	.size	.L.str84638, 9

	.type	.L.str85639,@object     # @.str85639
.L.str85639:
	.asciz	".01.ph"
	.size	.L.str85639, 7

	.type	.L.str86640,@object     # @.str86640
.L.str86640:
	.asciz	"._crit_edge:1"
	.size	.L.str86640, 14

	.type	.L.str87641,@object     # @.str87641
.L.str87641:
	.asciz	"facbuf"
	.size	.L.str87641, 7

	.type	.L.str88642,@object     # @.str88642
.L.str88642:
	.asciz	"p.0.ph"
	.size	.L.str88642, 7

	.type	.L.str89643,@object     # @.str89643
.L.str89643:
	.asciz	"p.0.lcssa"
	.size	.L.str89643, 10

	.type	.L.str90644,@object     # @.str90644
.L.str90644:
	.asciz	".0.ph"
	.size	.L.str90644, 6

	.type	.L.str91645,@object     # @.str91645
.L.str91645:
	.asciz	".outer:1-0"
	.size	.L.str91645, 11

	.type	.L.str92646,@object     # @.str92646
.L.str92646:
	.asciz	".lr.ph:2"
	.size	.L.str92646, 9

	.type	.L.str93647,@object     # @.str93647
.L.str93647:
	.asciz	"p.02"
	.size	.L.str93647, 5

	.type	.L.str94648,@object     # @.str94648
.L.str94648:
	.asciz	"p.0.be"
	.size	.L.str94648, 7

	.type	.L.str95649,@object     # @.str95649
.L.str95649:
	.asciz	".backedge:2"
	.size	.L.str95649, 12

	.type	.L.str96650,@object     # @.str96650
.L.str96650:
	.asciz	".lr.ph:2-0"
	.size	.L.str96650, 11

	.type	.L.str97651,@object     # @.str97651
.L.str97651:
	.asciz	"6:2"
	.size	.L.str97651, 4

	.type	.L.str98652,@object     # @.str98652
.L.str98652:
	.asciz	"7:2"
	.size	.L.str98652, 4

	.type	.L.str99653,@object     # @.str99653
.L.str99653:
	.asciz	"6:2-1"
	.size	.L.str99653, 6

	.type	.L.str100654,@object    # @.str100654
.L.str100654:
	.asciz	"7:2-1"
	.size	.L.str100654, 6

	.type	.L.str101655,@object    # @.str101655
.L.str101655:
	.asciz	"p.1"
	.size	.L.str101655, 4

	.type	.L.str102656,@object    # @.str102656
.L.str102656:
	.asciz	"9"
	.size	.L.str102656, 2

	.type	.L.str103657,@object    # @.str103657
.L.str103657:
	.asciz	"11"
	.size	.L.str103657, 3

	.type	.L.str104658,@object    # @.str104658
.L.str104658:
	.asciz	".backedge:2-1"
	.size	.L.str104658, 14

	.type	.L.str105659,@object    # @.str105659
.L.str105659:
	.asciz	"14"
	.size	.L.str105659, 3

	.type	.L.str106660,@object    # @.str106660
.L.str106660:
	.asciz	"._crit_edge:1-2"
	.size	.L.str106660, 16

	.type	.L.str107661,@object    # @.str107661
.L.str107661:
	.asciz	"._crit_edge:1-4"
	.size	.L.str107661, 16

	.type	.L.str108662,@object    # @.str108662
.L.str108662:
	.asciz	"16"
	.size	.L.str108662, 3

	.type	.L.str109663,@object    # @.str109663
.L.str109663:
	.asciz	"._crit_edge:1-5"
	.size	.L.str109663, 16

	.type	.L.str110664,@object    # @.str110664
.L.str110664:
	.asciz	"kiss_fft_stride"
	.size	.L.str110664, 16

	.type	.L.str111665,@object    # @.str111665
.L.str111665:
	.asciz	"0:0-2"
	.size	.L.str111665, 6

	.type	.L.str112666,@object    # @.str112666
.L.str112666:
	.asciz	"fin"
	.size	.L.str112666, 4

	.type	.L.str113667,@object    # @.str113667
.L.str113667:
	.asciz	"0:0-5"
	.size	.L.str113667, 6

	.type	.L.str114668,@object    # @.str114668
.L.str114668:
	.asciz	"fout"
	.size	.L.str114668, 5

	.type	.L.str115669,@object    # @.str115669
.L.str115669:
	.asciz	"st"
	.size	.L.str115669, 3

	.type	.L.str116670,@object    # @.str116670
.L.str116670:
	.asciz	"0:0-8"
	.size	.L.str116670, 6

	.type	.L.str117671,@object    # @.str117671
.L.str117671:
	.asciz	"kf_work"
	.size	.L.str117671, 8

	.type	.L.str118672,@object    # @.str118672
.L.str118672:
	.asciz	"in_stride"
	.size	.L.str118672, 10

	.type	.L.str119673,@object    # @.str119673
.L.str119673:
	.asciz	"0:0-9"
	.size	.L.str119673, 6

	.type	.L.str120674,@object    # @.str120674
.L.str120674:
	.asciz	"Fout"
	.size	.L.str120674, 5

	.type	.L.str121675,@object    # @.str121675
.L.str121675:
	.asciz	"f"
	.size	.L.str121675, 2

	.type	.L.str122676,@object    # @.str122676
.L.str122676:
	.asciz	"factors"
	.size	.L.str122676, 8

	.type	.L.str123677,@object    # @.str123677
.L.str123677:
	.asciz	"6"
	.size	.L.str123677, 2

	.type	.L.str124678,@object    # @.str124678
.L.str124678:
	.asciz	"0:0-13"
	.size	.L.str124678, 7

	.type	.L.str125679,@object    # @.str125679
.L.str125679:
	.asciz	".preheader:0"
	.size	.L.str125679, 13

	.type	.L.str126680,@object    # @.str126680
.L.str126680:
	.asciz	".preheader1:0"
	.size	.L.str126680, 14

	.type	.L.str127681,@object    # @.str127681
.L.str127681:
	.asciz	"fstride"
	.size	.L.str127681, 8

	.type	.L.str128682,@object    # @.str128682
.L.str128682:
	.asciz	".preheader1:0-0"
	.size	.L.str128682, 16

	.type	.L.str129683,@object    # @.str129683
.L.str129683:
	.asciz	"28:1"
	.size	.L.str129683, 5

	.type	.L.str130684,@object    # @.str130684
.L.str130684:
	.asciz	"17"
	.size	.L.str130684, 3

	.type	.L.str131685,@object    # @.str131685
.L.str131685:
	.asciz	".preheader:0-0"
	.size	.L.str131685, 15

	.type	.L.str132686,@object    # @.str132686
.L.str132686:
	.asciz	"18:1"
	.size	.L.str132686, 5

	.type	.L.str133687,@object    # @.str133687
.L.str133687:
	.asciz	"19"
	.size	.L.str133687, 3

	.type	.L.str134688,@object    # @.str134688
.L.str134688:
	.asciz	"18:1-0"
	.size	.L.str134688, 7

	.type	.L.str135689,@object    # @.str135689
	.align	16
.L.str135689:
	.asciz	"llvm.memcpy.p0i8.p0i8.i64"
	.size	.L.str135689, 26

	.type	.L.str136690,@object    # @.str136690
.L.str136690:
	.asciz	"24"
	.size	.L.str136690, 3

	.type	.L.str137691,@object    # @.str137691
.L.str137691:
	.asciz	"18:1-1"
	.size	.L.str137691, 7

	.type	.L.str138692,@object    # @.str138692
.L.str138692:
	.asciz	"18:1-2"
	.size	.L.str138692, 7

	.type	.L.str139693,@object    # @.str139693
.L.str139693:
	.asciz	"18:1-3"
	.size	.L.str139693, 7

	.type	.L.str140694,@object    # @.str140694
.L.str140694:
	.asciz	".loopexit:0"
	.size	.L.str140694, 12

	.type	.L.str141695,@object    # @.str141695
.L.str141695:
	.asciz	"28:1-0"
	.size	.L.str141695, 7

	.type	.L.str142696,@object    # @.str142696
.L.str142696:
	.asciz	"28:1-1"
	.size	.L.str142696, 7

	.type	.L.str143697,@object    # @.str143697
.L.str143697:
	.asciz	"31"
	.size	.L.str143697, 3

	.type	.L.str144698,@object    # @.str144698
.L.str144698:
	.asciz	"28:1-2"
	.size	.L.str144698, 7

	.type	.L.str145699,@object    # @.str145699
.L.str145699:
	.asciz	"33"
	.size	.L.str145699, 3

	.type	.L.str146700,@object    # @.str146700
.L.str146700:
	.asciz	"28:1-3"
	.size	.L.str146700, 7

	.type	.L.str147701,@object    # @.str147701
.L.str147701:
	.asciz	".loopexit:0-0"
	.size	.L.str147701, 14

	.type	.L.str148702,@object    # @.str148702
.L.str148702:
	.asciz	".loopexit:0-1"
	.size	.L.str148702, 14

	.type	.L.str149703,@object    # @.str149703
.L.str149703:
	.asciz	".loopexit:0-2"
	.size	.L.str149703, 14

	.type	.L.str150704,@object    # @.str150704
.L.str150704:
	.asciz	"42:0"
	.size	.L.str150704, 5

	.type	.L.str151705,@object    # @.str151705
.L.str151705:
	.asciz	"36:0"
	.size	.L.str151705, 5

	.type	.L.str152706,@object    # @.str152706
.L.str152706:
	.asciz	"34:0"
	.size	.L.str152706, 5

	.type	.L.str153707,@object    # @.str153707
.L.str153707:
	.asciz	"44:0"
	.size	.L.str153707, 5

	.type	.L.str154708,@object    # @.str154708
.L.str154708:
	.asciz	"34:0-0"
	.size	.L.str154708, 7

	.type	.L.str155709,@object    # @.str155709
.L.str155709:
	.asciz	"kf_bfly2"
	.size	.L.str155709, 9

	.type	.L.str156710,@object    # @.str156710
.L.str156710:
	.asciz	"34:0-1"
	.size	.L.str156710, 7

	.type	.L.str157711,@object    # @.str157711
.L.str157711:
	.asciz	"46:0"
	.size	.L.str157711, 5

	.type	.L.str158712,@object    # @.str158712
.L.str158712:
	.asciz	"36:0-0"
	.size	.L.str158712, 7

	.type	.L.str159713,@object    # @.str159713
.L.str159713:
	.asciz	"kf_bfly3"
	.size	.L.str159713, 9

	.type	.L.str160714,@object    # @.str160714
.L.str160714:
	.asciz	"36:0-1"
	.size	.L.str160714, 7

	.type	.L.str161715,@object    # @.str161715
.L.str161715:
	.asciz	"40"
	.size	.L.str161715, 3

	.type	.L.str162716,@object    # @.str162716
.L.str162716:
	.asciz	"41"
	.size	.L.str162716, 3

	.type	.L.str163717,@object    # @.str163717
.L.str163717:
	.asciz	"kf_bfly4"
	.size	.L.str163717, 9

	.type	.L.str164718,@object    # @.str164718
.L.str164718:
	.asciz	"39:0-1"
	.size	.L.str164718, 7

	.type	.L.str165719,@object    # @.str165719
.L.str165719:
	.asciz	"43"
	.size	.L.str165719, 3

	.type	.L.str166720,@object    # @.str166720
.L.str166720:
	.asciz	"42:0-0"
	.size	.L.str166720, 7

	.type	.L.str167721,@object    # @.str167721
.L.str167721:
	.asciz	"kf_bfly5"
	.size	.L.str167721, 9

	.type	.L.str168722,@object    # @.str168722
.L.str168722:
	.asciz	"42:0-1"
	.size	.L.str168722, 7

	.type	.L.str169723,@object    # @.str169723
.L.str169723:
	.asciz	"45"
	.size	.L.str169723, 3

	.type	.L.str170724,@object    # @.str170724
.L.str170724:
	.asciz	"44:0-0"
	.size	.L.str170724, 7

	.type	.L.str171725,@object    # @.str171725
.L.str171725:
	.asciz	"kf_bfly_generic"
	.size	.L.str171725, 16

	.type	.L.str172726,@object    # @.str172726
.L.str172726:
	.asciz	"44:0-1"
	.size	.L.str172726, 7

	.type	.L.str173727,@object    # @.str173727
.L.str173727:
	.asciz	"46:0-0"
	.size	.L.str173727, 7

	.type	.L.str174728,@object    # @.str174728
.L.str174728:
	.asciz	"kiss_fft"
	.size	.L.str174728, 9

	.type	.L.str175729,@object    # @.str175729
.L.str175729:
	.asciz	"0:0-3"
	.size	.L.str175729, 6

	.type	.L.str176730,@object    # @.str176730
.L.str176730:
	.asciz	"cfg"
	.size	.L.str176730, 4

	.type	.L.str177731,@object    # @.str177731
	.align	16
.L.str177731:
	.asciz	"kiss_fft_cleanup"
	.size	.L.str177731, 17

	.type	.L.str178732,@object    # @.str178732
.L.str178732:
	.asciz	"0:0-0"
	.size	.L.str178732, 6

	.type	.L.str179733,@object    # @.str179733
	.align	16
.L.str179733:
	.asciz	"kiss_fft_next_fast_size"
	.size	.L.str179733, 24

	.type	.L.str180734,@object    # @.str180734
.L.str180734:
	.asciz	"0:0-1"
	.size	.L.str180734, 6

	.type	.L.str181735,@object    # @.str181735
.L.str181735:
	.asciz	"1:1"
	.size	.L.str181735, 4

	.type	.L.str182736,@object    # @.str182736
.L.str182736:
	.asciz	".0"
	.size	.L.str182736, 3

	.type	.L.str183737,@object    # @.str183737
.L.str183737:
	.asciz	"1:1-1"
	.size	.L.str183737, 6

	.type	.L.str184738,@object    # @.str184738
.L.str184738:
	.asciz	".loopexit:1"
	.size	.L.str184738, 12

	.type	.L.str185739,@object    # @.str185739
.L.str185739:
	.asciz	"m.01"
	.size	.L.str185739, 5

	.type	.L.str186740,@object    # @.str186740
.L.str186740:
	.asciz	".lr.ph:2-1"
	.size	.L.str186740, 11

	.type	.L.str187741,@object    # @.str187741
.L.str187741:
	.asciz	"m.0.lcssa"
	.size	.L.str187741, 10

	.type	.L.str188742,@object    # @.str188742
.L.str188742:
	.asciz	".loopexit:1-0"
	.size	.L.str188742, 14

	.type	.L.str189743,@object    # @.str189743
.L.str189743:
	.asciz	".lr.ph4:2"
	.size	.L.str189743, 10

	.type	.L.str190744,@object    # @.str190744
.L.str190744:
	.asciz	".loopexit2:1"
	.size	.L.str190744, 13

	.type	.L.str191745,@object    # @.str191745
.L.str191745:
	.asciz	"m.13"
	.size	.L.str191745, 5

	.type	.L.str192746,@object    # @.str192746
.L.str192746:
	.asciz	".lr.ph4:2-1"
	.size	.L.str192746, 12

	.type	.L.str193747,@object    # @.str193747
.L.str193747:
	.asciz	"m.1.lcssa"
	.size	.L.str193747, 10

	.type	.L.str194748,@object    # @.str194748
.L.str194748:
	.asciz	".loopexit2:1-0"
	.size	.L.str194748, 15

	.type	.L.str195749,@object    # @.str195749
.L.str195749:
	.asciz	".lr.ph7:2"
	.size	.L.str195749, 10

	.type	.L.str196750,@object    # @.str196750
.L.str196750:
	.asciz	"m.26"
	.size	.L.str196750, 5

	.type	.L.str197751,@object    # @.str197751
.L.str197751:
	.asciz	".lr.ph7:2-1"
	.size	.L.str197751, 12

	.type	.L.str198752,@object    # @.str198752
.L.str198752:
	.asciz	"m.2.lcssa"
	.size	.L.str198752, 10

	.type	.L.str199753,@object    # @.str199753
.L.str199753:
	.asciz	"._crit_edge:1-1"
	.size	.L.str199753, 16

	.type	.L.str200754,@object    # @.str200754
.L.str200754:
	.asciz	"m"
	.size	.L.str200754, 2

	.type	.L.str201755,@object    # @.str201755
.L.str201755:
	.asciz	"0:0-7"
	.size	.L.str201755, 6

	.type	.L.str202756,@object    # @.str202756
.L.str202756:
	.asciz	"4:1"
	.size	.L.str202756, 4

	.type	.L.str203757,@object    # @.str203757
.L.str203757:
	.asciz	"Fout2.0"
	.size	.L.str203757, 8

	.type	.L.str204758,@object    # @.str204758
.L.str204758:
	.asciz	"tw1.0"
	.size	.L.str204758, 6

	.type	.L.str205759,@object    # @.str205759
.L.str205759:
	.asciz	".01"
	.size	.L.str205759, 4

	.type	.L.str206760,@object    # @.str206760
.L.str206760:
	.asciz	"4:1-1"
	.size	.L.str206760, 6

	.type	.L.str207761,@object    # @.str207761
.L.str207761:
	.asciz	"4:1-2"
	.size	.L.str207761, 6

	.type	.L.str208762,@object    # @.str208762
.L.str208762:
	.asciz	"4:1-3"
	.size	.L.str208762, 6

	.type	.L.str209763,@object    # @.str209763
.L.str209763:
	.asciz	"4:1-4"
	.size	.L.str209763, 6

	.type	.L.str210764,@object    # @.str210764
.L.str210764:
	.asciz	"4:1-8"
	.size	.L.str210764, 6

	.type	.L.str211765,@object    # @.str211765
.L.str211765:
	.asciz	"0:0-10"
	.size	.L.str211765, 7

	.type	.L.str212766,@object    # @.str212766
.L.str212766:
	.asciz	"7:1"
	.size	.L.str212766, 4

	.type	.L.str213767,@object    # @.str213767
.L.str213767:
	.asciz	"tw2.0"
	.size	.L.str213767, 6

	.type	.L.str214768,@object    # @.str214768
.L.str214768:
	.asciz	"k.0"
	.size	.L.str214768, 4

	.type	.L.str215769,@object    # @.str215769
.L.str215769:
	.asciz	"65"
	.size	.L.str215769, 3

	.type	.L.str216770,@object    # @.str216770
.L.str216770:
	.asciz	"64"
	.size	.L.str216770, 3

	.type	.L.str217771,@object    # @.str217771
.L.str217771:
	.asciz	"39"
	.size	.L.str217771, 3

	.type	.L.str218772,@object    # @.str218772
.L.str218772:
	.asciz	"42"
	.size	.L.str218772, 3

	.type	.L.str219773,@object    # @.str219773
.L.str219773:
	.asciz	"44"
	.size	.L.str219773, 3

	.type	.L.str220774,@object    # @.str220774
.L.str220774:
	.asciz	"7:1-2"
	.size	.L.str220774, 6

	.type	.L.str221775,@object    # @.str221775
.L.str221775:
	.asciz	"46"
	.size	.L.str221775, 3

	.type	.L.str222776,@object    # @.str222776
.L.str222776:
	.asciz	"47"
	.size	.L.str222776, 3

	.type	.L.str223777,@object    # @.str223777
.L.str223777:
	.asciz	"48"
	.size	.L.str223777, 3

	.type	.L.str224778,@object    # @.str224778
.L.str224778:
	.asciz	"49"
	.size	.L.str224778, 3

	.type	.L.str225779,@object    # @.str225779
.L.str225779:
	.asciz	"7:1-3"
	.size	.L.str225779, 6

	.type	.L.str226780,@object    # @.str226780
.L.str226780:
	.asciz	"50"
	.size	.L.str226780, 3

	.type	.L.str227781,@object    # @.str227781
.L.str227781:
	.asciz	"51"
	.size	.L.str227781, 3

	.type	.L.str228782,@object    # @.str228782
.L.str228782:
	.asciz	"52"
	.size	.L.str228782, 3

	.type	.L.str229783,@object    # @.str229783
.L.str229783:
	.asciz	"53"
	.size	.L.str229783, 3

	.type	.L.str230784,@object    # @.str230784
.L.str230784:
	.asciz	"7:1-4"
	.size	.L.str230784, 6

	.type	.L.str231785,@object    # @.str231785
.L.str231785:
	.asciz	"54"
	.size	.L.str231785, 3

	.type	.L.str232786,@object    # @.str232786
.L.str232786:
	.asciz	"55"
	.size	.L.str232786, 3

	.type	.L.str233787,@object    # @.str233787
.L.str233787:
	.asciz	"7:1-5"
	.size	.L.str233787, 6

	.type	.L.str234788,@object    # @.str234788
.L.str234788:
	.asciz	"56"
	.size	.L.str234788, 3

	.type	.L.str235789,@object    # @.str235789
.L.str235789:
	.asciz	"57"
	.size	.L.str235789, 3

	.type	.L.str236790,@object    # @.str236790
.L.str236790:
	.asciz	"7:1-6"
	.size	.L.str236790, 6

	.type	.L.str237791,@object    # @.str237791
.L.str237791:
	.asciz	"58"
	.size	.L.str237791, 3

	.type	.L.str238792,@object    # @.str238792
.L.str238792:
	.asciz	"59"
	.size	.L.str238792, 3

	.type	.L.str239793,@object    # @.str239793
.L.str239793:
	.asciz	"7:1-7"
	.size	.L.str239793, 6

	.type	.L.str240794,@object    # @.str240794
.L.str240794:
	.asciz	"60"
	.size	.L.str240794, 3

	.type	.L.str241795,@object    # @.str241795
.L.str241795:
	.asciz	"61"
	.size	.L.str241795, 3

	.type	.L.str242796,@object    # @.str242796
.L.str242796:
	.asciz	"7:1-8"
	.size	.L.str242796, 6

	.type	.L.str243797,@object    # @.str243797
.L.str243797:
	.asciz	"62"
	.size	.L.str243797, 3

	.type	.L.str244798,@object    # @.str244798
.L.str244798:
	.asciz	"63"
	.size	.L.str244798, 3

	.type	.L.str245799,@object    # @.str245799
.L.str245799:
	.asciz	"7:1-9"
	.size	.L.str245799, 6

	.type	.L.str246800,@object    # @.str246800
.L.str246800:
	.asciz	"66"
	.size	.L.str246800, 3

	.type	.L.str247801,@object    # @.str247801
.L.str247801:
	.asciz	"7:1-12"
	.size	.L.str247801, 7

	.type	.L.str248802,@object    # @.str248802
.L.str248802:
	.asciz	"67:0"
	.size	.L.str248802, 5

	.type	.L.str249803,@object    # @.str249803
.L.str249803:
	.asciz	"67:0-0"
	.size	.L.str249803, 7

	.type	.L.str250804,@object    # @.str250804
.L.str250804:
	.asciz	"0:0-11"
	.size	.L.str250804, 7

	.type	.L.str251805,@object    # @.str251805
.L.str251805:
	.asciz	"9:1"
	.size	.L.str251805, 4

	.type	.L.str252806,@object    # @.str252806
.L.str252806:
	.asciz	"tw3.0"
	.size	.L.str252806, 6

	.type	.L.str253807,@object    # @.str253807
.L.str253807:
	.asciz	"71"
	.size	.L.str253807, 3

	.type	.L.str254808,@object    # @.str254808
.L.str254808:
	.asciz	"86:1"
	.size	.L.str254808, 5

	.type	.L.str255809,@object    # @.str255809
.L.str255809:
	.asciz	"70"
	.size	.L.str255809, 3

	.type	.L.str256810,@object    # @.str256810
.L.str256810:
	.asciz	"88"
	.size	.L.str256810, 3

	.type	.L.str257811,@object    # @.str257811
.L.str257811:
	.asciz	"69"
	.size	.L.str257811, 3

	.type	.L.str258812,@object    # @.str258812
.L.str258812:
	.asciz	"87"
	.size	.L.str258812, 3

	.type	.L.str259813,@object    # @.str259813
.L.str259813:
	.asciz	"9:1-0"
	.size	.L.str259813, 6

	.type	.L.str260814,@object    # @.str260814
.L.str260814:
	.asciz	"9:1-1"
	.size	.L.str260814, 6

	.type	.L.str261815,@object    # @.str261815
.L.str261815:
	.asciz	"9:1-2"
	.size	.L.str261815, 6

	.type	.L.str262816,@object    # @.str262816
.L.str262816:
	.asciz	"67"
	.size	.L.str262816, 3

	.type	.L.str263817,@object    # @.str263817
.L.str263817:
	.asciz	"68"
	.size	.L.str263817, 3

	.type	.L.str264818,@object    # @.str264818
.L.str264818:
	.asciz	"9:1-3"
	.size	.L.str264818, 6

	.type	.L.str265819,@object    # @.str265819
.L.str265819:
	.asciz	"72"
	.size	.L.str265819, 3

	.type	.L.str266820,@object    # @.str266820
.L.str266820:
	.asciz	"73"
	.size	.L.str266820, 3

	.type	.L.str267821,@object    # @.str267821
.L.str267821:
	.asciz	"9:1-7"
	.size	.L.str267821, 6

	.type	.L.str268822,@object    # @.str268822
.L.str268822:
	.asciz	"74"
	.size	.L.str268822, 3

	.type	.L.str269823,@object    # @.str269823
.L.str269823:
	.asciz	"75"
	.size	.L.str269823, 3

	.type	.L.str270824,@object    # @.str270824
.L.str270824:
	.asciz	"9:1-8"
	.size	.L.str270824, 6

	.type	.L.str271825,@object    # @.str271825
.L.str271825:
	.asciz	"9:1-9"
	.size	.L.str271825, 6

	.type	.L.str272826,@object    # @.str272826
.L.str272826:
	.asciz	"81:1"
	.size	.L.str272826, 5

	.type	.L.str273827,@object    # @.str273827
.L.str273827:
	.asciz	"76:1"
	.size	.L.str273827, 5

	.type	.L.str274828,@object    # @.str274828
.L.str274828:
	.asciz	"77"
	.size	.L.str274828, 3

	.type	.L.str275829,@object    # @.str275829
.L.str275829:
	.asciz	"76:1-0"
	.size	.L.str275829, 7

	.type	.L.str276830,@object    # @.str276830
.L.str276830:
	.asciz	"78"
	.size	.L.str276830, 3

	.type	.L.str277831,@object    # @.str277831
.L.str277831:
	.asciz	"76:1-1"
	.size	.L.str277831, 7

	.type	.L.str278832,@object    # @.str278832
.L.str278832:
	.asciz	"79"
	.size	.L.str278832, 3

	.type	.L.str279833,@object    # @.str279833
.L.str279833:
	.asciz	"76:1-2"
	.size	.L.str279833, 7

	.type	.L.str280834,@object    # @.str280834
.L.str280834:
	.asciz	"80"
	.size	.L.str280834, 3

	.type	.L.str281835,@object    # @.str281835
.L.str281835:
	.asciz	"76:1-3"
	.size	.L.str281835, 7

	.type	.L.str282836,@object    # @.str282836
.L.str282836:
	.asciz	"82"
	.size	.L.str282836, 3

	.type	.L.str283837,@object    # @.str283837
.L.str283837:
	.asciz	"81:1-0"
	.size	.L.str283837, 7

	.type	.L.str284838,@object    # @.str284838
.L.str284838:
	.asciz	"83"
	.size	.L.str284838, 3

	.type	.L.str285839,@object    # @.str285839
.L.str285839:
	.asciz	"81:1-1"
	.size	.L.str285839, 7

	.type	.L.str286840,@object    # @.str286840
.L.str286840:
	.asciz	"84"
	.size	.L.str286840, 3

	.type	.L.str287841,@object    # @.str287841
.L.str287841:
	.asciz	"81:1-2"
	.size	.L.str287841, 7

	.type	.L.str288842,@object    # @.str288842
.L.str288842:
	.asciz	"85"
	.size	.L.str288842, 3

	.type	.L.str289843,@object    # @.str289843
.L.str289843:
	.asciz	"81:1-3"
	.size	.L.str289843, 7

	.type	.L.str290844,@object    # @.str290844
.L.str290844:
	.asciz	"storemerge"
	.size	.L.str290844, 11

	.type	.L.str291845,@object    # @.str291845
.L.str291845:
	.asciz	"86:1-0"
	.size	.L.str291845, 7

	.type	.L.str292846,@object    # @.str292846
.L.str292846:
	.asciz	"89"
	.size	.L.str292846, 3

	.type	.L.str293847,@object    # @.str293847
.L.str293847:
	.asciz	"86:1-3"
	.size	.L.str293847, 7

	.type	.L.str294848,@object    # @.str294848
.L.str294848:
	.asciz	"90:0"
	.size	.L.str294848, 5

	.type	.L.str295849,@object    # @.str295849
.L.str295849:
	.asciz	"90:0-0"
	.size	.L.str295849, 7

	.type	.L.str296850,@object    # @.str296850
.L.str296850:
	.asciz	"25:1"
	.size	.L.str296850, 5

	.type	.L.str297851,@object    # @.str297851
.L.str297851:
	.asciz	"Fout0.06"
	.size	.L.str297851, 9

	.type	.L.str298852,@object    # @.str298852
.L.str298852:
	.asciz	"162"
	.size	.L.str298852, 4

	.type	.L.str299853,@object    # @.str299853
.L.str299853:
	.asciz	"Fout1.05"
	.size	.L.str299853, 9

	.type	.L.str300854,@object    # @.str300854
.L.str300854:
	.asciz	"163"
	.size	.L.str300854, 4

	.type	.L.str301855,@object    # @.str301855
.L.str301855:
	.asciz	"Fout2.04"
	.size	.L.str301855, 9

	.type	.L.str302856,@object    # @.str302856
.L.str302856:
	.asciz	"164"
	.size	.L.str302856, 4

	.type	.L.str303857,@object    # @.str303857
.L.str303857:
	.asciz	"Fout3.03"
	.size	.L.str303857, 9

	.type	.L.str304858,@object    # @.str304858
.L.str304858:
	.asciz	"165"
	.size	.L.str304858, 4

	.type	.L.str305859,@object    # @.str305859
.L.str305859:
	.asciz	"Fout4.02"
	.size	.L.str305859, 9

	.type	.L.str306860,@object    # @.str306860
.L.str306860:
	.asciz	"166"
	.size	.L.str306860, 4

	.type	.L.str307861,@object    # @.str307861
.L.str307861:
	.asciz	"76"
	.size	.L.str307861, 3

	.type	.L.str308862,@object    # @.str308862
.L.str308862:
	.asciz	"sext"
	.size	.L.str308862, 5

	.type	.L.str309863,@object    # @.str309863
.L.str309863:
	.asciz	"81"
	.size	.L.str309863, 3

	.type	.L.str310864,@object    # @.str310864
.L.str310864:
	.asciz	"86"
	.size	.L.str310864, 3

	.type	.L.str311865,@object    # @.str311865
.L.str311865:
	.asciz	"90"
	.size	.L.str311865, 3

	.type	.L.str312866,@object    # @.str312866
.L.str312866:
	.asciz	"91"
	.size	.L.str312866, 3

	.type	.L.str313867,@object    # @.str313867
.L.str313867:
	.asciz	"92"
	.size	.L.str313867, 3

	.type	.L.str314868,@object    # @.str314868
.L.str314868:
	.asciz	"93"
	.size	.L.str314868, 3

	.type	.L.str315869,@object    # @.str315869
.L.str315869:
	.asciz	"94"
	.size	.L.str315869, 3

	.type	.L.str316870,@object    # @.str316870
.L.str316870:
	.asciz	"95"
	.size	.L.str316870, 3

	.type	.L.str317871,@object    # @.str317871
.L.str317871:
	.asciz	"96"
	.size	.L.str317871, 3

	.type	.L.str318872,@object    # @.str318872
.L.str318872:
	.asciz	"97"
	.size	.L.str318872, 3

	.type	.L.str319873,@object    # @.str319873
.L.str319873:
	.asciz	"98"
	.size	.L.str319873, 3

	.type	.L.str320874,@object    # @.str320874
.L.str320874:
	.asciz	"99"
	.size	.L.str320874, 3

	.type	.L.str321875,@object    # @.str321875
.L.str321875:
	.asciz	"100"
	.size	.L.str321875, 4

	.type	.L.str322876,@object    # @.str322876
.L.str322876:
	.asciz	"101"
	.size	.L.str322876, 4

	.type	.L.str323877,@object    # @.str323877
.L.str323877:
	.asciz	"102"
	.size	.L.str323877, 4

	.type	.L.str324878,@object    # @.str324878
.L.str324878:
	.asciz	"103"
	.size	.L.str324878, 4

	.type	.L.str325879,@object    # @.str325879
.L.str325879:
	.asciz	"104"
	.size	.L.str325879, 4

	.type	.L.str326880,@object    # @.str326880
.L.str326880:
	.asciz	"105"
	.size	.L.str326880, 4

	.type	.L.str327881,@object    # @.str327881
.L.str327881:
	.asciz	"106"
	.size	.L.str327881, 4

	.type	.L.str328882,@object    # @.str328882
.L.str328882:
	.asciz	"107"
	.size	.L.str328882, 4

	.type	.L.str329883,@object    # @.str329883
.L.str329883:
	.asciz	"108"
	.size	.L.str329883, 4

	.type	.L.str330884,@object    # @.str330884
.L.str330884:
	.asciz	"109"
	.size	.L.str330884, 4

	.type	.L.str331885,@object    # @.str331885
.L.str331885:
	.asciz	"110"
	.size	.L.str331885, 4

	.type	.L.str332886,@object    # @.str332886
.L.str332886:
	.asciz	"111"
	.size	.L.str332886, 4

	.type	.L.str333887,@object    # @.str333887
.L.str333887:
	.asciz	"112"
	.size	.L.str333887, 4

	.type	.L.str334888,@object    # @.str334888
.L.str334888:
	.asciz	"113"
	.size	.L.str334888, 4

	.type	.L.str335889,@object    # @.str335889
.L.str335889:
	.asciz	"114"
	.size	.L.str335889, 4

	.type	.L.str336890,@object    # @.str336890
.L.str336890:
	.asciz	"115"
	.size	.L.str336890, 4

	.type	.L.str337891,@object    # @.str337891
.L.str337891:
	.asciz	"116"
	.size	.L.str337891, 4

	.type	.L.str338892,@object    # @.str338892
.L.str338892:
	.asciz	"117"
	.size	.L.str338892, 4

	.type	.L.str339893,@object    # @.str339893
.L.str339893:
	.asciz	"118"
	.size	.L.str339893, 4

	.type	.L.str340894,@object    # @.str340894
.L.str340894:
	.asciz	"119"
	.size	.L.str340894, 4

	.type	.L.str341895,@object    # @.str341895
.L.str341895:
	.asciz	"120"
	.size	.L.str341895, 4

	.type	.L.str342896,@object    # @.str342896
.L.str342896:
	.asciz	"121"
	.size	.L.str342896, 4

	.type	.L.str343897,@object    # @.str343897
.L.str343897:
	.asciz	"25:1-0"
	.size	.L.str343897, 7

	.type	.L.str344898,@object    # @.str344898
.L.str344898:
	.asciz	"122"
	.size	.L.str344898, 4

	.type	.L.str345899,@object    # @.str345899
.L.str345899:
	.asciz	"123"
	.size	.L.str345899, 4

	.type	.L.str346900,@object    # @.str346900
.L.str346900:
	.asciz	"124"
	.size	.L.str346900, 4

	.type	.L.str347901,@object    # @.str347901
.L.str347901:
	.asciz	"25:1-1"
	.size	.L.str347901, 7

	.type	.L.str348902,@object    # @.str348902
.L.str348902:
	.asciz	"125"
	.size	.L.str348902, 4

	.type	.L.str349903,@object    # @.str349903
.L.str349903:
	.asciz	"126"
	.size	.L.str349903, 4

	.type	.L.str350904,@object    # @.str350904
.L.str350904:
	.asciz	"127"
	.size	.L.str350904, 4

	.type	.L.str351905,@object    # @.str351905
.L.str351905:
	.asciz	"128"
	.size	.L.str351905, 4

	.type	.L.str352906,@object    # @.str352906
.L.str352906:
	.asciz	"129"
	.size	.L.str352906, 4

	.type	.L.str353907,@object    # @.str353907
.L.str353907:
	.asciz	"130"
	.size	.L.str353907, 4

	.type	.L.str354908,@object    # @.str354908
.L.str354908:
	.asciz	"131"
	.size	.L.str354908, 4

	.type	.L.str355909,@object    # @.str355909
.L.str355909:
	.asciz	"132"
	.size	.L.str355909, 4

	.type	.L.str356910,@object    # @.str356910
.L.str356910:
	.asciz	"133"
	.size	.L.str356910, 4

	.type	.L.str357911,@object    # @.str357911
.L.str357911:
	.asciz	"134"
	.size	.L.str357911, 4

	.type	.L.str358912,@object    # @.str358912
.L.str358912:
	.asciz	"135"
	.size	.L.str358912, 4

	.type	.L.str359913,@object    # @.str359913
.L.str359913:
	.asciz	"136"
	.size	.L.str359913, 4

	.type	.L.str360914,@object    # @.str360914
.L.str360914:
	.asciz	"137"
	.size	.L.str360914, 4

	.type	.L.str361915,@object    # @.str361915
.L.str361915:
	.asciz	"138"
	.size	.L.str361915, 4

	.type	.L.str362916,@object    # @.str362916
.L.str362916:
	.asciz	"139"
	.size	.L.str362916, 4

	.type	.L.str363917,@object    # @.str363917
.L.str363917:
	.asciz	"140"
	.size	.L.str363917, 4

	.type	.L.str364918,@object    # @.str364918
.L.str364918:
	.asciz	"25:1-2"
	.size	.L.str364918, 7

	.type	.L.str365919,@object    # @.str365919
.L.str365919:
	.asciz	"141"
	.size	.L.str365919, 4

	.type	.L.str366920,@object    # @.str366920
.L.str366920:
	.asciz	"25:1-3"
	.size	.L.str366920, 7

	.type	.L.str367921,@object    # @.str367921
.L.str367921:
	.asciz	"142"
	.size	.L.str367921, 4

	.type	.L.str368922,@object    # @.str368922
.L.str368922:
	.asciz	"25:1-4"
	.size	.L.str368922, 7

	.type	.L.str369923,@object    # @.str369923
.L.str369923:
	.asciz	"143"
	.size	.L.str369923, 4

	.type	.L.str370924,@object    # @.str370924
.L.str370924:
	.asciz	"25:1-5"
	.size	.L.str370924, 7

	.type	.L.str371925,@object    # @.str371925
.L.str371925:
	.asciz	"144"
	.size	.L.str371925, 4

	.type	.L.str372926,@object    # @.str372926
.L.str372926:
	.asciz	"145"
	.size	.L.str372926, 4

	.type	.L.str373927,@object    # @.str373927
.L.str373927:
	.asciz	"146"
	.size	.L.str373927, 4

	.type	.L.str374928,@object    # @.str374928
.L.str374928:
	.asciz	"147"
	.size	.L.str374928, 4

	.type	.L.str375929,@object    # @.str375929
.L.str375929:
	.asciz	"148"
	.size	.L.str375929, 4

	.type	.L.str376930,@object    # @.str376930
.L.str376930:
	.asciz	"149"
	.size	.L.str376930, 4

	.type	.L.str377931,@object    # @.str377931
.L.str377931:
	.asciz	"150"
	.size	.L.str377931, 4

	.type	.L.str378932,@object    # @.str378932
.L.str378932:
	.asciz	"151"
	.size	.L.str378932, 4

	.type	.L.str379933,@object    # @.str379933
.L.str379933:
	.asciz	"152"
	.size	.L.str379933, 4

	.type	.L.str380934,@object    # @.str380934
.L.str380934:
	.asciz	"153"
	.size	.L.str380934, 4

	.type	.L.str381935,@object    # @.str381935
.L.str381935:
	.asciz	"154"
	.size	.L.str381935, 4

	.type	.L.str382936,@object    # @.str382936
.L.str382936:
	.asciz	"155"
	.size	.L.str382936, 4

	.type	.L.str383937,@object    # @.str383937
.L.str383937:
	.asciz	"156"
	.size	.L.str383937, 4

	.type	.L.str384938,@object    # @.str384938
.L.str384938:
	.asciz	"157"
	.size	.L.str384938, 4

	.type	.L.str385939,@object    # @.str385939
.L.str385939:
	.asciz	"158"
	.size	.L.str385939, 4

	.type	.L.str386940,@object    # @.str386940
.L.str386940:
	.asciz	"25:1-6"
	.size	.L.str386940, 7

	.type	.L.str387941,@object    # @.str387941
.L.str387941:
	.asciz	"159"
	.size	.L.str387941, 4

	.type	.L.str388942,@object    # @.str388942
.L.str388942:
	.asciz	"25:1-7"
	.size	.L.str388942, 7

	.type	.L.str389943,@object    # @.str389943
.L.str389943:
	.asciz	"160"
	.size	.L.str389943, 4

	.type	.L.str390944,@object    # @.str390944
.L.str390944:
	.asciz	"25:1-8"
	.size	.L.str390944, 7

	.type	.L.str391945,@object    # @.str391945
.L.str391945:
	.asciz	"161"
	.size	.L.str391945, 4

	.type	.L.str392946,@object    # @.str392946
.L.str392946:
	.asciz	"25:1-9"
	.size	.L.str392946, 7

	.type	.L.str393947,@object    # @.str393947
.L.str393947:
	.asciz	"25:1-15"
	.size	.L.str393947, 8

	.type	.L.str394948,@object    # @.str394948
.L.str394948:
	.asciz	"p"
	.size	.L.str394948, 2

	.type	.L.str395949,@object    # @.str395949
	.align	16
.L.str395949:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str395949, 19

	.type	.L.str396950,@object    # @.str396950
.L.str396950:
	.asciz	"._crit_edge11:0"
	.size	.L.str396950, 16

	.type	.L.str397951,@object    # @.str397951
	.align	16
.L.str397951:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str397951, 21

	.type	.L.str398952,@object    # @.str398952
.L.str398952:
	.asciz	".preheader:1"
	.size	.L.str398952, 13

	.type	.L.str399953,@object    # @.str399953
.L.str399953:
	.asciz	"indvars.iv20"
	.size	.L.str399953, 13

	.type	.L.str400954,@object    # @.str400954
	.align	16
.L.str400954:
	.asciz	"indvars.iv.next21"
	.size	.L.str400954, 18

	.type	.L.str401955,@object    # @.str401955
.L.str401955:
	.asciz	"._crit_edge9:1"
	.size	.L.str401955, 15

	.type	.L.str402956,@object    # @.str402956
.L.str402956:
	.asciz	".preheader:1-0"
	.size	.L.str402956, 15

	.type	.L.str403957,@object    # @.str403957
.L.str403957:
	.asciz	"indvars.iv14"
	.size	.L.str403957, 13

	.type	.L.str404958,@object    # @.str404958
	.align	16
.L.str404958:
	.asciz	"indvars.iv.next15"
	.size	.L.str404958, 18

	.type	.L.str405959,@object    # @.str405959
.L.str405959:
	.asciz	"indvars.iv12"
	.size	.L.str405959, 13

	.type	.L.str406960,@object    # @.str406960
	.align	16
.L.str406960:
	.asciz	"indvars.iv.next13"
	.size	.L.str406960, 18

	.type	.L.str407961,@object    # @.str407961
.L.str407961:
	.asciz	".lr.ph8:2"
	.size	.L.str407961, 10

	.type	.L.str408962,@object    # @.str408962
.L.str408962:
	.asciz	"indvars.iv22"
	.size	.L.str408962, 13

	.type	.L.str409963,@object    # @.str409963
	.align	16
.L.str409963:
	.asciz	"indvars.iv.next23"
	.size	.L.str409963, 18

	.type	.L.str410964,@object    # @.str410964
.L.str410964:
	.asciz	"._crit_edge:2"
	.size	.L.str410964, 14

	.type	.L.str411965,@object    # @.str411965
.L.str411965:
	.asciz	"q1.16"
	.size	.L.str411965, 6

	.type	.L.str412966,@object    # @.str412966
.L.str412966:
	.asciz	".lr.ph8:2-1"
	.size	.L.str412966, 12

	.type	.L.str413967,@object    # @.str413967
.L.str413967:
	.asciz	".lr.ph8:2-3"
	.size	.L.str413967, 12

	.type	.L.str414968,@object    # @.str414968
.L.str414968:
	.asciz	".lr.ph5:2"
	.size	.L.str414968, 10

	.type	.L.str415969,@object    # @.str415969
.L.str415969:
	.asciz	".lr.ph5:2-0"
	.size	.L.str415969, 12

	.type	.L.str416970,@object    # @.str416970
.L.str416970:
	.asciz	"22:3"
	.size	.L.str416970, 5

	.type	.L.str417971,@object    # @.str417971
.L.str417971:
	.asciz	"indvars.iv16"
	.size	.L.str417971, 13

	.type	.L.str418972,@object    # @.str418972
	.align	16
.L.str418972:
	.asciz	"indvars.iv.next17"
	.size	.L.str418972, 18

	.type	.L.str419973,@object    # @.str419973
.L.str419973:
	.asciz	"twidx.04"
	.size	.L.str419973, 9

	.type	.L.str420974,@object    # @.str420974
.L.str420974:
	.asciz	"."
	.size	.L.str420974, 2

	.type	.L.str421975,@object    # @.str421975
.L.str421975:
	.asciz	"22:3-1"
	.size	.L.str421975, 7

	.type	.L.str422976,@object    # @.str422976
.L.str422976:
	.asciz	"22:3-2"
	.size	.L.str422976, 7

	.type	.L.str423977,@object    # @.str423977
.L.str423977:
	.asciz	"lftr.wideiv18"
	.size	.L.str423977, 14

	.type	.L.str424978,@object    # @.str424978
.L.str424978:
	.asciz	"exitcond19"
	.size	.L.str424978, 11

	.type	.L.str425979,@object    # @.str425979
.L.str425979:
	.asciz	"22:3-3"
	.size	.L.str425979, 7

	.type	.L.str426980,@object    # @.str426980
.L.str426980:
	.asciz	"exitcond24"
	.size	.L.str426980, 11

	.type	.L.str427981,@object    # @.str427981
.L.str427981:
	.asciz	"._crit_edge:2-1"
	.size	.L.str427981, 16

	.type	.L.str428982,@object    # @.str428982
.L.str428982:
	.asciz	"lftr.wideiv25"
	.size	.L.str428982, 14

	.type	.L.str429983,@object    # @.str429983
.L.str429983:
	.asciz	"exitcond26"
	.size	.L.str429983, 11

	.type	.L.str430984,@object    # @.str430984
	.align	16
.L.str430984:
	.asciz	"._crit_edge9:1-0"
	.size	.L.str430984, 17

	.type	.L.str431985,@object    # @.str431985
	.align	16
.L.str431985:
	.asciz	"._crit_edge11:0-0"
	.size	.L.str431985, 18

	.type	.L.str432986,@object    # @.str432986
.L.str432986:
	.asciz	"free"
	.size	.L.str432986, 5

	.type	.L.str433987,@object    # @.str433987
	.align	16
.L.str433987:
	.asciz	"._crit_edge11:0-1"
	.size	.L.str433987, 18

	.type	.L.str992,@object       # @.str992
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str992:
	.asciz	"\n"
	.size	.L.str992, 2

	.type	.L.str1993,@object      # @.str1993
.L.str1993:
	.asciz	"RS - Fatal error!\n"
	.size	.L.str1993, 19

	.type	.L.str2994,@object      # @.str2994
.L.str2994:
	.asciz	"  Error return from TQLRAT!\n"
	.size	.L.str2994, 29

	.type	.L.str3995,@object      # @.str3995
	.section	.rodata,"a",@progbits
.L.str3995:
	.asciz	"pythag"
	.size	.L.str3995, 7

	.type	.L.str4996,@object      # @.str4996
.L.str4996:
	.asciz	"0:0"
	.size	.L.str4996, 4

	.type	.L.str5997,@object      # @.str5997
.L.str5997:
	.asciz	"1"
	.size	.L.str5997, 2

	.type	.L.str6998,@object      # @.str6998
.L.str6998:
	.asciz	"fabs"
	.size	.L.str6998, 5

	.type	.L.str7999,@object      # @.str7999
.L.str7999:
	.asciz	"phi"
	.size	.L.str7999, 4

	.type	.L.str81000,@object     # @.str81000
.L.str81000:
	.asciz	"a"
	.size	.L.str81000, 2

	.type	.L.str91001,@object     # @.str91001
.L.str91001:
	.asciz	"2"
	.size	.L.str91001, 2

	.type	.L.str101002,@object    # @.str101002
.L.str101002:
	.asciz	"b"
	.size	.L.str101002, 2

	.type	.L.str111003,@object    # @.str111003
.L.str111003:
	.asciz	"3"
	.size	.L.str111003, 2

	.type	.L.str121004,@object    # @.str121004
.L.str121004:
	.asciz	"r8_max"
	.size	.L.str121004, 7

	.type	.L.str131005,@object    # @.str131005
.L.str131005:
	.asciz	"4"
	.size	.L.str131005, 2

	.type	.L.str141006,@object    # @.str141006
.L.str141006:
	.zero	1
	.size	.L.str141006, 1

	.type	.L.str151007,@object    # @.str151007
.L.str151007:
	.asciz	"0:0-3"
	.size	.L.str151007, 6

	.type	.L.str161008,@object    # @.str161008
.L.str161008:
	.asciz	"5:0"
	.size	.L.str161008, 4

	.type	.L.str171009,@object    # @.str171009
.L.str171009:
	.asciz	".loopexit:0"
	.size	.L.str171009, 12

	.type	.L.str181010,@object    # @.str181010
.L.str181010:
	.asciz	"6"
	.size	.L.str181010, 2

	.type	.L.str191011,@object    # @.str191011
.L.str191011:
	.asciz	"r8_min"
	.size	.L.str191011, 7

	.type	.L.str201012,@object    # @.str201012
.L.str201012:
	.asciz	"7"
	.size	.L.str201012, 2

	.type	.L.str211013,@object    # @.str211013
.L.str211013:
	.asciz	"8"
	.size	.L.str211013, 2

	.type	.L.str221014,@object    # @.str221014
.L.str221014:
	.asciz	"9"
	.size	.L.str221014, 2

	.type	.L.str231015,@object    # @.str231015
.L.str231015:
	.asciz	"10"
	.size	.L.str231015, 3

	.type	.L.str241016,@object    # @.str241016
.L.str241016:
	.asciz	"5:0-3"
	.size	.L.str241016, 6

	.type	.L.str251017,@object    # @.str251017
.L.str251017:
	.asciz	".lr.ph:1"
	.size	.L.str251017, 9

	.type	.L.str261018,@object    # @.str261018
.L.str261018:
	.asciz	"11"
	.size	.L.str261018, 3

	.type	.L.str271019,@object    # @.str271019
.L.str271019:
	.asciz	"19"
	.size	.L.str271019, 3

	.type	.L.str281020,@object    # @.str281020
.L.str281020:
	.asciz	"p.02"
	.size	.L.str281020, 5

	.type	.L.str291021,@object    # @.str291021
.L.str291021:
	.asciz	"15"
	.size	.L.str291021, 3

	.type	.L.str301022,@object    # @.str301022
.L.str301022:
	.asciz	"r.01"
	.size	.L.str301022, 5

	.type	.L.str311023,@object    # @.str311023
.L.str311023:
	.asciz	"18"
	.size	.L.str311023, 3

	.type	.L.str321024,@object    # @.str321024
.L.str321024:
	.asciz	"12"
	.size	.L.str321024, 3

	.type	.L.str331025,@object    # @.str331025
.L.str331025:
	.asciz	"13"
	.size	.L.str331025, 3

	.type	.L.str341026,@object    # @.str341026
.L.str341026:
	.asciz	"14"
	.size	.L.str341026, 3

	.type	.L.str351027,@object    # @.str351027
.L.str351027:
	.asciz	"16"
	.size	.L.str351027, 3

	.type	.L.str361028,@object    # @.str361028
.L.str361028:
	.asciz	"17"
	.size	.L.str361028, 3

	.type	.L.str371029,@object    # @.str371029
.L.str371029:
	.asciz	"20"
	.size	.L.str371029, 3

	.type	.L.str381030,@object    # @.str381030
.L.str381030:
	.asciz	".lr.ph:1-5"
	.size	.L.str381030, 11

	.type	.L.str391031,@object    # @.str391031
.L.str391031:
	.asciz	"p.1"
	.size	.L.str391031, 4

	.type	.L.str401032,@object    # @.str401032
.L.str401032:
	.asciz	".loopexit:0-0"
	.size	.L.str401032, 14

	.type	.L.str411033,@object    # @.str411033
.L.str411033:
	.asciz	"x"
	.size	.L.str411033, 2

	.type	.L.str421034,@object    # @.str421034
.L.str421034:
	.asciz	"y"
	.size	.L.str421034, 2

	.type	.L.str431035,@object    # @.str431035
.L.str431035:
	.asciz	"x.y"
	.size	.L.str431035, 4

	.type	.L.str441036,@object    # @.str441036
.L.str441036:
	.asciz	"0:0-2"
	.size	.L.str441036, 6

	.type	.L.str451037,@object    # @.str451037
.L.str451037:
	.asciz	"y.x"
	.size	.L.str451037, 4

	.type	.L.str461038,@object    # @.str461038
.L.str461038:
	.asciz	"r8_epsilon"
	.size	.L.str461038, 11

	.type	.L.str471039,@object    # @.str471039
.L.str471039:
	.asciz	"0:0-1"
	.size	.L.str471039, 6

	.type	.L.str481040,@object    # @.str481040
.L.str481040:
	.asciz	"r8_sign"
	.size	.L.str481040, 8

	.type	.L.str491041,@object    # @.str491041
.L.str491041:
	.asciz	"."
	.size	.L.str491041, 2

	.type	.L.str501042,@object    # @.str501042
.L.str501042:
	.asciz	"rs"
	.size	.L.str501042, 3

	.type	.L.str511043,@object    # @.str511043
.L.str511043:
	.asciz	"n"
	.size	.L.str511043, 2

	.type	.L.str521044,@object    # @.str521044
.L.str521044:
	.asciz	"0:0-8"
	.size	.L.str521044, 6

	.type	.L.str531045,@object    # @.str531045
.L.str531045:
	.asciz	"11:0"
	.size	.L.str531045, 5

	.type	.L.str541046,@object    # @.str541046
.L.str541046:
	.asciz	"4:0"
	.size	.L.str541046, 4

	.type	.L.str551047,@object    # @.str551047
.L.str551047:
	.asciz	"matz"
	.size	.L.str551047, 5

	.type	.L.str561048,@object    # @.str561048
.L.str561048:
	.asciz	"4:0-0"
	.size	.L.str561048, 6

	.type	.L.str571049,@object    # @.str571049
.L.str571049:
	.asciz	"tred1"
	.size	.L.str571049, 6

	.type	.L.str581050,@object    # @.str581050
.L.str581050:
	.asciz	"w"
	.size	.L.str581050, 2

	.type	.L.str591051,@object    # @.str591051
.L.str591051:
	.asciz	"fv1"
	.size	.L.str591051, 4

	.type	.L.str601052,@object    # @.str601052
.L.str601052:
	.asciz	"fv2"
	.size	.L.str601052, 4

	.type	.L.str611053,@object    # @.str611053
.L.str611053:
	.asciz	"5"
	.size	.L.str611053, 2

	.type	.L.str621054,@object    # @.str621054
.L.str621054:
	.asciz	"tqlrat"
	.size	.L.str621054, 7

	.type	.L.str631055,@object    # @.str631055
.L.str631055:
	.asciz	"4:0-2"
	.size	.L.str631055, 6

	.type	.L.str641056,@object    # @.str641056
.L.str641056:
	.asciz	"7:0"
	.size	.L.str641056, 4

	.type	.L.str651057,@object    # @.str651057
.L.str651057:
	.asciz	"printf"
	.size	.L.str651057, 7

	.type	.L.str661058,@object    # @.str661058
.L.str661058:
	.asciz	"7:0-0"
	.size	.L.str661058, 6

	.type	.L.str671059,@object    # @.str671059
.L.str671059:
	.asciz	".0"
	.size	.L.str671059, 3

	.type	.L.str681060,@object    # @.str681060
.L.str681060:
	.asciz	"11:0-0"
	.size	.L.str681060, 7

	.type	.L.str691061,@object    # @.str691061
.L.str691061:
	.asciz	"z"
	.size	.L.str691061, 2

	.type	.L.str701062,@object    # @.str701062
.L.str701062:
	.asciz	"0:0-6"
	.size	.L.str701062, 6

	.type	.L.str711063,@object    # @.str711063
.L.str711063:
	.asciz	".lr.ph58:0"
	.size	.L.str711063, 11

	.type	.L.str721064,@object    # @.str721064
.L.str721064:
	.asciz	"._crit_edge52:0"
	.size	.L.str721064, 16

	.type	.L.str731065,@object    # @.str731065
.L.str731065:
	.asciz	".lr.ph58:0-0"
	.size	.L.str731065, 13

	.type	.L.str741066,@object    # @.str741066
.L.str741066:
	.asciz	"5:1"
	.size	.L.str741066, 4

	.type	.L.str751067,@object    # @.str751067
.L.str751067:
	.asciz	".preheader53:0"
	.size	.L.str751067, 15

	.type	.L.str761068,@object    # @.str761068
	.align	16
.L.str761068:
	.asciz	".preheader53:0-0"
	.size	.L.str761068, 17

	.type	.L.str771069,@object    # @.str771069
.L.str771069:
	.asciz	".lr.ph55:0"
	.size	.L.str771069, 11

	.type	.L.str781070,@object    # @.str781070
.L.str781070:
	.asciz	".lr.ph55:0-0"
	.size	.L.str781070, 13

	.type	.L.str791071,@object    # @.str791071
.L.str791071:
	.asciz	"15:1"
	.size	.L.str791071, 5

	.type	.L.str801072,@object    # @.str801072
.L.str801072:
	.asciz	"indvars.iv140"
	.size	.L.str801072, 14

	.type	.L.str811073,@object    # @.str811073
	.align	16
.L.str811073:
	.asciz	"indvars.iv.next141"
	.size	.L.str811073, 19

	.type	.L.str821074,@object    # @.str821074
.L.str821074:
	.asciz	"d"
	.size	.L.str821074, 2

	.type	.L.str831075,@object    # @.str831075
.L.str831075:
	.asciz	"5:1-0"
	.size	.L.str831075, 6

	.type	.L.str841076,@object    # @.str841076
.L.str841076:
	.asciz	"lftr.wideiv142"
	.size	.L.str841076, 15

	.type	.L.str851077,@object    # @.str851077
.L.str851077:
	.asciz	"exitcond143"
	.size	.L.str851077, 12

	.type	.L.str861078,@object    # @.str861078
.L.str861078:
	.asciz	"5:1-1"
	.size	.L.str861078, 6

	.type	.L.str871079,@object    # @.str871079
.L.str871079:
	.asciz	".preheader47:0"
	.size	.L.str871079, 15

	.type	.L.str881080,@object    # @.str881080
	.align	16
.L.str881080:
	.asciz	".preheader47:0-0"
	.size	.L.str881080, 17

	.type	.L.str891081,@object    # @.str891081
.L.str891081:
	.asciz	".lr.ph51:0"
	.size	.L.str891081, 11

	.type	.L.str901082,@object    # @.str901082
.L.str901082:
	.asciz	".lr.ph51:0-0"
	.size	.L.str901082, 13

	.type	.L.str911083,@object    # @.str911083
.L.str911083:
	.asciz	"26:1"
	.size	.L.str911083, 5

	.type	.L.str921084,@object    # @.str921084
.L.str921084:
	.asciz	"indvars.iv136"
	.size	.L.str921084, 14

	.type	.L.str931085,@object    # @.str931085
	.align	16
.L.str931085:
	.asciz	"indvars.iv.next137"
	.size	.L.str931085, 19

	.type	.L.str941086,@object    # @.str941086
.L.str941086:
	.asciz	"21"
	.size	.L.str941086, 3

	.type	.L.str951087,@object    # @.str951087
.L.str951087:
	.asciz	"22"
	.size	.L.str951087, 3

	.type	.L.str961088,@object    # @.str961088
.L.str961088:
	.asciz	"23"
	.size	.L.str961088, 3

	.type	.L.str971089,@object    # @.str971089
.L.str971089:
	.asciz	"24"
	.size	.L.str971089, 3

	.type	.L.str981090,@object    # @.str981090
.L.str981090:
	.asciz	"25"
	.size	.L.str981090, 3

	.type	.L.str991091,@object    # @.str991091
.L.str991091:
	.asciz	"15:1-0"
	.size	.L.str991091, 7

	.type	.L.str1001092,@object   # @.str1001092
.L.str1001092:
	.asciz	"lftr.wideiv138"
	.size	.L.str1001092, 15

	.type	.L.str1011093,@object   # @.str1011093
.L.str1011093:
	.asciz	"exitcond139"
	.size	.L.str1011093, 12

	.type	.L.str1021094,@object   # @.str1021094
.L.str1021094:
	.asciz	"15:1-1"
	.size	.L.str1021094, 7

	.type	.L.str1031095,@object   # @.str1031095
.L.str1031095:
	.asciz	"indvars.iv134"
	.size	.L.str1031095, 14

	.type	.L.str1041096,@object   # @.str1041096
	.align	16
.L.str1041096:
	.asciz	"indvars.iv.next135"
	.size	.L.str1041096, 19

	.type	.L.str1051097,@object   # @.str1051097
.L.str1051097:
	.asciz	".backedge:1"
	.size	.L.str1051097, 12

	.type	.L.str1061098,@object   # @.str1061098
	.align	16
.L.str1061098:
	.asciz	"indvars.iv130.in"
	.size	.L.str1061098, 17

	.type	.L.str1071099,@object   # @.str1071099
.L.str1071099:
	.asciz	"indvars.iv130"
	.size	.L.str1071099, 14

	.type	.L.str1081100,@object   # @.str1081100
.L.str1081100:
	.asciz	"i.150.in"
	.size	.L.str1081100, 9

	.type	.L.str1091101,@object   # @.str1091101
.L.str1091101:
	.asciz	"i.150"
	.size	.L.str1091101, 6

	.type	.L.str1101102,@object   # @.str1101102
.L.str1101102:
	.asciz	"27"
	.size	.L.str1101102, 3

	.type	.L.str1111103,@object   # @.str1111103
.L.str1111103:
	.asciz	"28"
	.size	.L.str1111103, 3

	.type	.L.str1121104,@object   # @.str1121104
.L.str1121104:
	.asciz	"26:1-4"
	.size	.L.str1121104, 7

	.type	.L.str1131105,@object   # @.str1131105
.L.str1131105:
	.asciz	"._crit_edge46:1"
	.size	.L.str1131105, 16

	.type	.L.str1141106,@object   # @.str1141106
.L.str1141106:
	.asciz	".lr.ph:2"
	.size	.L.str1141106, 9

	.type	.L.str1151107,@object   # @.str1151107
.L.str1151107:
	.asciz	"indvars.iv"
	.size	.L.str1151107, 11

	.type	.L.str1161108,@object   # @.str1161108
.L.str1161108:
	.asciz	"indvars.iv.next"
	.size	.L.str1161108, 16

	.type	.L.str1171109,@object   # @.str1171109
.L.str1171109:
	.asciz	"scale.02"
	.size	.L.str1171109, 9

	.type	.L.str1181110,@object   # @.str1181110
.L.str1181110:
	.asciz	"32"
	.size	.L.str1181110, 3

	.type	.L.str1191111,@object   # @.str1191111
.L.str1191111:
	.asciz	"29"
	.size	.L.str1191111, 3

	.type	.L.str1201112,@object   # @.str1201112
.L.str1201112:
	.asciz	"30"
	.size	.L.str1201112, 3

	.type	.L.str1211113,@object   # @.str1211113
.L.str1211113:
	.asciz	"31"
	.size	.L.str1211113, 3

	.type	.L.str1221114,@object   # @.str1221114
.L.str1221114:
	.asciz	"lftr.wideiv"
	.size	.L.str1221114, 12

	.type	.L.str1231115,@object   # @.str1231115
.L.str1231115:
	.asciz	"exitcond"
	.size	.L.str1231115, 9

	.type	.L.str1241116,@object   # @.str1241116
.L.str1241116:
	.asciz	".lr.ph:2-1"
	.size	.L.str1241116, 11

	.type	.L.str1251117,@object   # @.str1251117
.L.str1251117:
	.asciz	"._crit_edge:1"
	.size	.L.str1251117, 14

	.type	.L.str1261118,@object   # @.str1261118
.L.str1261118:
	.asciz	"33"
	.size	.L.str1261118, 3

	.type	.L.str1271119,@object   # @.str1271119
.L.str1271119:
	.asciz	"34"
	.size	.L.str1271119, 3

	.type	.L.str1281120,@object   # @.str1281120
.L.str1281120:
	.asciz	"._crit_edge:1-0"
	.size	.L.str1281120, 16

	.type	.L.str1291121,@object   # @.str1291121
.L.str1291121:
	.asciz	".preheader43:1"
	.size	.L.str1291121, 15

	.type	.L.str1301122,@object   # @.str1301122
.L.str1301122:
	.asciz	".preheader:1"
	.size	.L.str1301122, 13

	.type	.L.str1311123,@object   # @.str1311123
	.align	16
.L.str1311123:
	.asciz	".preheader43:1-0"
	.size	.L.str1311123, 17

	.type	.L.str1321124,@object   # @.str1321124
.L.str1321124:
	.asciz	".lr.ph45:2"
	.size	.L.str1321124, 11

	.type	.L.str1331125,@object   # @.str1331125
.L.str1331125:
	.asciz	".preheader:1-0"
	.size	.L.str1331125, 15

	.type	.L.str1341126,@object   # @.str1341126
.L.str1341126:
	.asciz	"._crit_edge8:1"
	.size	.L.str1341126, 15

	.type	.L.str1351127,@object   # @.str1351127
.L.str1351127:
	.asciz	".lr.ph4:2"
	.size	.L.str1351127, 10

	.type	.L.str1361128,@object   # @.str1361128
.L.str1361128:
	.asciz	"indvars.iv128"
	.size	.L.str1361128, 14

	.type	.L.str1371129,@object   # @.str1371129
	.align	16
.L.str1371129:
	.asciz	"indvars.iv.next129"
	.size	.L.str1371129, 19

	.type	.L.str1381130,@object   # @.str1381130
.L.str1381130:
	.asciz	"35"
	.size	.L.str1381130, 3

	.type	.L.str1391131,@object   # @.str1391131
.L.str1391131:
	.asciz	"36"
	.size	.L.str1391131, 3

	.type	.L.str1401132,@object   # @.str1401132
.L.str1401132:
	.asciz	"37"
	.size	.L.str1401132, 3

	.type	.L.str1411133,@object   # @.str1411133
.L.str1411133:
	.asciz	"38"
	.size	.L.str1411133, 3

	.type	.L.str1421134,@object   # @.str1421134
.L.str1421134:
	.asciz	"39"
	.size	.L.str1421134, 3

	.type	.L.str1431135,@object   # @.str1431135
.L.str1431135:
	.asciz	"40"
	.size	.L.str1431135, 3

	.type	.L.str1441136,@object   # @.str1441136
.L.str1441136:
	.asciz	"41"
	.size	.L.str1441136, 3

	.type	.L.str1451137,@object   # @.str1451137
.L.str1451137:
	.asciz	".lr.ph45:2-0"
	.size	.L.str1451137, 13

	.type	.L.str1461138,@object   # @.str1461138
.L.str1461138:
	.asciz	"42"
	.size	.L.str1461138, 3

	.type	.L.str1471139,@object   # @.str1471139
.L.str1471139:
	.asciz	"43"
	.size	.L.str1471139, 3

	.type	.L.str1481140,@object   # @.str1481140
.L.str1481140:
	.asciz	"44"
	.size	.L.str1481140, 3

	.type	.L.str1491141,@object   # @.str1491141
.L.str1491141:
	.asciz	"45"
	.size	.L.str1491141, 3

	.type	.L.str1501142,@object   # @.str1501142
.L.str1501142:
	.asciz	"46"
	.size	.L.str1501142, 3

	.type	.L.str1511143,@object   # @.str1511143
.L.str1511143:
	.asciz	".lr.ph45:2-1"
	.size	.L.str1511143, 13

	.type	.L.str1521144,@object   # @.str1521144
.L.str1521144:
	.asciz	".lr.ph45:2-2"
	.size	.L.str1521144, 13

	.type	.L.str1531145,@object   # @.str1531145
.L.str1531145:
	.asciz	"lftr.wideiv132"
	.size	.L.str1531145, 15

	.type	.L.str1541146,@object   # @.str1541146
.L.str1541146:
	.asciz	"exitcond133"
	.size	.L.str1541146, 12

	.type	.L.str1551147,@object   # @.str1551147
.L.str1551147:
	.asciz	".lr.ph45:2-3"
	.size	.L.str1551147, 13

	.type	.L.str1561148,@object   # @.str1561148
.L.str1561148:
	.asciz	"47"
	.size	.L.str1561148, 3

	.type	.L.str1571149,@object   # @.str1571149
.L.str1571149:
	.asciz	"e"
	.size	.L.str1571149, 2

	.type	.L.str1581150,@object   # @.str1581150
	.align	16
.L.str1581150:
	.asciz	"._crit_edge46:1-0"
	.size	.L.str1581150, 18

	.type	.L.str1591151,@object   # @.str1591151
.L.str1591151:
	.asciz	"48"
	.size	.L.str1591151, 3

	.type	.L.str1601152,@object   # @.str1601152
.L.str1601152:
	.asciz	"e2"
	.size	.L.str1601152, 3

	.type	.L.str1611153,@object   # @.str1611153
	.align	16
.L.str1611153:
	.asciz	"._crit_edge46:1-1"
	.size	.L.str1611153, 18

	.type	.L.str1621154,@object   # @.str1621154
	.align	16
.L.str1621154:
	.asciz	"._crit_edge46:1-2"
	.size	.L.str1621154, 18

	.type	.L.str1631155,@object   # @.str1631155
.L.str1631155:
	.asciz	"49"
	.size	.L.str1631155, 3

	.type	.L.str1641156,@object   # @.str1641156
.L.str1641156:
	.asciz	"50"
	.size	.L.str1641156, 3

	.type	.L.str1651157,@object   # @.str1651157
.L.str1651157:
	.asciz	".backedge:1-0"
	.size	.L.str1651157, 14

	.type	.L.str1661158,@object   # @.str1661158
.L.str1661158:
	.asciz	"indvars.iv61"
	.size	.L.str1661158, 13

	.type	.L.str1671159,@object   # @.str1671159
	.align	16
.L.str1671159:
	.asciz	"indvars.iv.next62"
	.size	.L.str1671159, 18

	.type	.L.str1681160,@object   # @.str1681160
.L.str1681160:
	.asciz	"51"
	.size	.L.str1681160, 3

	.type	.L.str1691161,@object   # @.str1691161
.L.str1691161:
	.asciz	"52"
	.size	.L.str1691161, 3

	.type	.L.str1701162,@object   # @.str1701162
.L.str1701162:
	.asciz	"53"
	.size	.L.str1701162, 3

	.type	.L.str1711163,@object   # @.str1711163
.L.str1711163:
	.asciz	".lr.ph4:2-0"
	.size	.L.str1711163, 12

	.type	.L.str1721164,@object   # @.str1721164
.L.str1721164:
	.asciz	"lftr.wideiv65"
	.size	.L.str1721164, 14

	.type	.L.str1731165,@object   # @.str1731165
.L.str1731165:
	.asciz	"exitcond66"
	.size	.L.str1731165, 11

	.type	.L.str1741166,@object   # @.str1741166
.L.str1741166:
	.asciz	".lr.ph4:2-1"
	.size	.L.str1741166, 12

	.type	.L.str1751167,@object   # @.str1751167
.L.str1751167:
	.asciz	".loopexit:1"
	.size	.L.str1751167, 12

	.type	.L.str1761168,@object   # @.str1761168
.L.str1761168:
	.asciz	"54"
	.size	.L.str1761168, 3

	.type	.L.str1771169,@object   # @.str1771169
.L.str1771169:
	.asciz	".loopexit:1-0"
	.size	.L.str1771169, 14

	.type	.L.str1781170,@object   # @.str1781170
.L.str1781170:
	.asciz	".lr.ph7:2"
	.size	.L.str1781170, 10

	.type	.L.str1791171,@object   # @.str1791171
.L.str1791171:
	.asciz	"indvars.iv68"
	.size	.L.str1791171, 13

	.type	.L.str1801172,@object   # @.str1801172
	.align	16
.L.str1801172:
	.asciz	"indvars.iv.next69"
	.size	.L.str1801172, 18

	.type	.L.str1811173,@object   # @.str1811173
.L.str1811173:
	.asciz	"h.05"
	.size	.L.str1811173, 5

	.type	.L.str1821174,@object   # @.str1821174
.L.str1821174:
	.asciz	"58"
	.size	.L.str1821174, 3

	.type	.L.str1831175,@object   # @.str1831175
.L.str1831175:
	.asciz	"55"
	.size	.L.str1831175, 3

	.type	.L.str1841176,@object   # @.str1841176
.L.str1841176:
	.asciz	"56"
	.size	.L.str1841176, 3

	.type	.L.str1851177,@object   # @.str1851177
.L.str1851177:
	.asciz	"57"
	.size	.L.str1851177, 3

	.type	.L.str1861178,@object   # @.str1861178
.L.str1861178:
	.asciz	"lftr.wideiv72"
	.size	.L.str1861178, 14

	.type	.L.str1871179,@object   # @.str1871179
.L.str1871179:
	.asciz	"exitcond73"
	.size	.L.str1871179, 11

	.type	.L.str1881180,@object   # @.str1881180
.L.str1881180:
	.asciz	".lr.ph7:2-1"
	.size	.L.str1881180, 12

	.type	.L.str1891181,@object   # @.str1891181
.L.str1891181:
	.asciz	"h.0.lcssa"
	.size	.L.str1891181, 10

	.type	.L.str1901182,@object   # @.str1901182
.L.str1901182:
	.asciz	"59"
	.size	.L.str1901182, 3

	.type	.L.str1911183,@object   # @.str1911183
.L.str1911183:
	.asciz	"60"
	.size	.L.str1911183, 3

	.type	.L.str1921184,@object   # @.str1921184
.L.str1921184:
	.asciz	"61"
	.size	.L.str1921184, 3

	.type	.L.str1931185,@object   # @.str1931185
	.align	16
.L.str1931185:
	.asciz	"._crit_edge8:1-0"
	.size	.L.str1931185, 17

	.type	.L.str1941186,@object   # @.str1941186
.L.str1941186:
	.asciz	"62"
	.size	.L.str1941186, 3

	.type	.L.str1951187,@object   # @.str1951187
.L.str1951187:
	.asciz	"63"
	.size	.L.str1951187, 3

	.type	.L.str1961188,@object   # @.str1961188
.L.str1961188:
	.asciz	"64"
	.size	.L.str1961188, 3

	.type	.L.str1971189,@object   # @.str1971189
.L.str1971189:
	.asciz	"65"
	.size	.L.str1971189, 3

	.type	.L.str1981190,@object   # @.str1981190
.L.str1981190:
	.asciz	"sqrt"
	.size	.L.str1981190, 5

	.type	.L.str1991191,@object   # @.str1991191
.L.str1991191:
	.asciz	"66"
	.size	.L.str1991191, 3

	.type	.L.str2001192,@object   # @.str2001192
.L.str2001192:
	.asciz	"67"
	.size	.L.str2001192, 3

	.type	.L.str2011193,@object   # @.str2011193
.L.str2011193:
	.asciz	"68"
	.size	.L.str2011193, 3

	.type	.L.str2021194,@object   # @.str2021194
.L.str2021194:
	.asciz	"69"
	.size	.L.str2021194, 3

	.type	.L.str2031195,@object   # @.str2031195
.L.str2031195:
	.asciz	"70"
	.size	.L.str2031195, 3

	.type	.L.str2041196,@object   # @.str2041196
	.align	16
.L.str2041196:
	.asciz	"._crit_edge8:1-3"
	.size	.L.str2041196, 17

	.type	.L.str2051197,@object   # @.str2051197
.L.str2051197:
	.asciz	"71"
	.size	.L.str2051197, 3

	.type	.L.str2061198,@object   # @.str2061198
.L.str2061198:
	.asciz	"72"
	.size	.L.str2061198, 3

	.type	.L.str2071199,@object   # @.str2071199
.L.str2071199:
	.asciz	"73"
	.size	.L.str2071199, 3

	.type	.L.str2081200,@object   # @.str2081200
	.align	16
.L.str2081200:
	.asciz	"._crit_edge8:1-5"
	.size	.L.str2081200, 17

	.type	.L.str2091201,@object   # @.str2091201
.L.str2091201:
	.asciz	"74"
	.size	.L.str2091201, 3

	.type	.L.str2101202,@object   # @.str2101202
	.align	16
.L.str2101202:
	.asciz	"._crit_edge8:1-6"
	.size	.L.str2101202, 17

	.type	.L.str2111203,@object   # @.str2111203
.L.str2111203:
	.asciz	".lr.ph13:2"
	.size	.L.str2111203, 11

	.type	.L.str2121204,@object   # @.str2121204
.L.str2121204:
	.asciz	"indvars.iv74"
	.size	.L.str2121204, 13

	.type	.L.str2131205,@object   # @.str2131205
	.align	16
.L.str2131205:
	.asciz	"indvars.iv.next75"
	.size	.L.str2131205, 18

	.type	.L.str2141206,@object   # @.str2141206
.L.str2141206:
	.asciz	"75"
	.size	.L.str2141206, 3

	.type	.L.str2151207,@object   # @.str2151207
.L.str2151207:
	.asciz	".lr.ph13:2-0"
	.size	.L.str2151207, 13

	.type	.L.str2161208,@object   # @.str2161208
.L.str2161208:
	.asciz	"lftr.wideiv78"
	.size	.L.str2161208, 14

	.type	.L.str2171209,@object   # @.str2171209
.L.str2171209:
	.asciz	"exitcond79"
	.size	.L.str2171209, 11

	.type	.L.str2181210,@object   # @.str2181210
.L.str2181210:
	.asciz	".lr.ph13:2-1"
	.size	.L.str2181210, 13

	.type	.L.str2191211,@object   # @.str2191211
.L.str2191211:
	.asciz	".loopexit11:1"
	.size	.L.str2191211, 14

	.type	.L.str2201212,@object   # @.str2201212
.L.str2201212:
	.asciz	"76"
	.size	.L.str2201212, 3

	.type	.L.str2211213,@object   # @.str2211213
.L.str2211213:
	.asciz	".loopexit11:1-0"
	.size	.L.str2211213, 16

	.type	.L.str2221214,@object   # @.str2221214
.L.str2221214:
	.asciz	".lr.ph22:2"
	.size	.L.str2221214, 11

	.type	.L.str2231215,@object   # @.str2231215
.L.str2231215:
	.asciz	"indvars.iv89"
	.size	.L.str2231215, 13

	.type	.L.str2241216,@object   # @.str2241216
	.align	16
.L.str2241216:
	.asciz	"indvars.iv.next90"
	.size	.L.str2241216, 18

	.type	.L.str2251217,@object   # @.str2251217
.L.str2251217:
	.asciz	"._crit_edge18:2"
	.size	.L.str2251217, 16

	.type	.L.str2261218,@object   # @.str2261218
.L.str2261218:
	.asciz	"indvars.iv81"
	.size	.L.str2261218, 13

	.type	.L.str2271219,@object   # @.str2271219
	.align	16
.L.str2271219:
	.asciz	"indvars.iv.next82"
	.size	.L.str2271219, 18

	.type	.L.str2281220,@object   # @.str2281220
.L.str2281220:
	.asciz	"77"
	.size	.L.str2281220, 3

	.type	.L.str2291221,@object   # @.str2291221
.L.str2291221:
	.asciz	"78"
	.size	.L.str2291221, 3

	.type	.L.str2301222,@object   # @.str2301222
.L.str2301222:
	.asciz	"79"
	.size	.L.str2301222, 3

	.type	.L.str2311223,@object   # @.str2311223
.L.str2311223:
	.asciz	"80"
	.size	.L.str2311223, 3

	.type	.L.str2321224,@object   # @.str2321224
.L.str2321224:
	.asciz	"81"
	.size	.L.str2321224, 3

	.type	.L.str2331225,@object   # @.str2331225
.L.str2331225:
	.asciz	"82"
	.size	.L.str2331225, 3

	.type	.L.str2341226,@object   # @.str2341226
.L.str2341226:
	.asciz	"83"
	.size	.L.str2341226, 3

	.type	.L.str2351227,@object   # @.str2351227
.L.str2351227:
	.asciz	"84"
	.size	.L.str2351227, 3

	.type	.L.str2361228,@object   # @.str2361228
.L.str2361228:
	.asciz	"85"
	.size	.L.str2361228, 3

	.type	.L.str2371229,@object   # @.str2371229
.L.str2371229:
	.asciz	"86"
	.size	.L.str2371229, 3

	.type	.L.str2381230,@object   # @.str2381230
.L.str2381230:
	.asciz	"87"
	.size	.L.str2381230, 3

	.type	.L.str2391231,@object   # @.str2391231
.L.str2391231:
	.asciz	"88"
	.size	.L.str2391231, 3

	.type	.L.str2401232,@object   # @.str2401232
.L.str2401232:
	.asciz	"89"
	.size	.L.str2401232, 3

	.type	.L.str2411233,@object   # @.str2411233
.L.str2411233:
	.asciz	"90"
	.size	.L.str2411233, 3

	.type	.L.str2421234,@object   # @.str2421234
.L.str2421234:
	.asciz	"91"
	.size	.L.str2421234, 3

	.type	.L.str2431235,@object   # @.str2431235
.L.str2431235:
	.asciz	".lr.ph22:2-2"
	.size	.L.str2431235, 13

	.type	.L.str2441236,@object   # @.str2441236
.L.str2441236:
	.asciz	".lr.ph17:2"
	.size	.L.str2441236, 11

	.type	.L.str2451237,@object   # @.str2451237
.L.str2451237:
	.asciz	"92"
	.size	.L.str2451237, 3

	.type	.L.str2461238,@object   # @.str2461238
.L.str2461238:
	.asciz	".lr.ph17:2-0"
	.size	.L.str2461238, 13

	.type	.L.str2471239,@object   # @.str2471239
.L.str2471239:
	.asciz	"93:3"
	.size	.L.str2471239, 5

	.type	.L.str2481240,@object   # @.str2481240
.L.str2481240:
	.asciz	"indvars.iv83"
	.size	.L.str2481240, 13

	.type	.L.str2491241,@object   # @.str2491241
	.align	16
.L.str2491241:
	.asciz	"indvars.iv.next84"
	.size	.L.str2491241, 18

	.type	.L.str2501242,@object   # @.str2501242
.L.str2501242:
	.asciz	"g.014"
	.size	.L.str2501242, 6

	.type	.L.str2511243,@object   # @.str2511243
.L.str2511243:
	.asciz	"100"
	.size	.L.str2511243, 4

	.type	.L.str2521244,@object   # @.str2521244
.L.str2521244:
	.asciz	"94"
	.size	.L.str2521244, 3

	.type	.L.str2531245,@object   # @.str2531245
.L.str2531245:
	.asciz	"95"
	.size	.L.str2531245, 3

	.type	.L.str2541246,@object   # @.str2541246
.L.str2541246:
	.asciz	"96"
	.size	.L.str2541246, 3

	.type	.L.str2551247,@object   # @.str2551247
.L.str2551247:
	.asciz	"97"
	.size	.L.str2551247, 3

	.type	.L.str2561248,@object   # @.str2561248
.L.str2561248:
	.asciz	"98"
	.size	.L.str2561248, 3

	.type	.L.str2571249,@object   # @.str2571249
.L.str2571249:
	.asciz	"99"
	.size	.L.str2571249, 3

	.type	.L.str2581250,@object   # @.str2581250
.L.str2581250:
	.asciz	"101"
	.size	.L.str2581250, 4

	.type	.L.str2591251,@object   # @.str2591251
.L.str2591251:
	.asciz	"102"
	.size	.L.str2591251, 4

	.type	.L.str2601252,@object   # @.str2601252
.L.str2601252:
	.asciz	"103"
	.size	.L.str2601252, 4

	.type	.L.str2611253,@object   # @.str2611253
.L.str2611253:
	.asciz	"104"
	.size	.L.str2611253, 4

	.type	.L.str2621254,@object   # @.str2621254
.L.str2621254:
	.asciz	"93:3-1"
	.size	.L.str2621254, 7

	.type	.L.str2631255,@object   # @.str2631255
.L.str2631255:
	.asciz	"lftr.wideiv87"
	.size	.L.str2631255, 14

	.type	.L.str2641256,@object   # @.str2641256
.L.str2641256:
	.asciz	"exitcond88"
	.size	.L.str2641256, 11

	.type	.L.str2651257,@object   # @.str2651257
.L.str2651257:
	.asciz	"93:3-2"
	.size	.L.str2651257, 7

	.type	.L.str2661258,@object   # @.str2661258
.L.str2661258:
	.asciz	"g.0.lcssa"
	.size	.L.str2661258, 10

	.type	.L.str2671259,@object   # @.str2671259
	.align	16
.L.str2671259:
	.asciz	"._crit_edge18:2-0"
	.size	.L.str2671259, 18

	.type	.L.str2681260,@object   # @.str2681260
.L.str2681260:
	.asciz	"lftr.wideiv93"
	.size	.L.str2681260, 14

	.type	.L.str2691261,@object   # @.str2691261
.L.str2691261:
	.asciz	"exitcond94"
	.size	.L.str2691261, 11

	.type	.L.str2701262,@object   # @.str2701262
	.align	16
.L.str2701262:
	.asciz	"._crit_edge18:2-1"
	.size	.L.str2701262, 18

	.type	.L.str2711263,@object   # @.str2711263
.L.str2711263:
	.asciz	".loopexit20:1"
	.size	.L.str2711263, 14

	.type	.L.str2721264,@object   # @.str2721264
.L.str2721264:
	.asciz	"105"
	.size	.L.str2721264, 4

	.type	.L.str2731265,@object   # @.str2731265
.L.str2731265:
	.asciz	".loopexit20:1-0"
	.size	.L.str2731265, 16

	.type	.L.str2741266,@object   # @.str2741266
.L.str2741266:
	.asciz	".lr.ph25:2"
	.size	.L.str2741266, 11

	.type	.L.str2751267,@object   # @.str2751267
.L.str2751267:
	.asciz	"indvars.iv96"
	.size	.L.str2751267, 13

	.type	.L.str2761268,@object   # @.str2761268
	.align	16
.L.str2761268:
	.asciz	"indvars.iv.next97"
	.size	.L.str2761268, 18

	.type	.L.str2771269,@object   # @.str2771269
.L.str2771269:
	.asciz	"f.024"
	.size	.L.str2771269, 6

	.type	.L.str2781270,@object   # @.str2781270
.L.str2781270:
	.asciz	"112"
	.size	.L.str2781270, 4

	.type	.L.str2791271,@object   # @.str2791271
.L.str2791271:
	.asciz	"106"
	.size	.L.str2791271, 4

	.type	.L.str2801272,@object   # @.str2801272
.L.str2801272:
	.asciz	"107"
	.size	.L.str2801272, 4

	.type	.L.str2811273,@object   # @.str2811273
.L.str2811273:
	.asciz	"108"
	.size	.L.str2811273, 4

	.type	.L.str2821274,@object   # @.str2821274
.L.str2821274:
	.asciz	".lr.ph25:2-0"
	.size	.L.str2821274, 13

	.type	.L.str2831275,@object   # @.str2831275
.L.str2831275:
	.asciz	"109"
	.size	.L.str2831275, 4

	.type	.L.str2841276,@object   # @.str2841276
.L.str2841276:
	.asciz	"110"
	.size	.L.str2841276, 4

	.type	.L.str2851277,@object   # @.str2851277
.L.str2851277:
	.asciz	"111"
	.size	.L.str2851277, 4

	.type	.L.str2861278,@object   # @.str2861278
.L.str2861278:
	.asciz	"lftr.wideiv100"
	.size	.L.str2861278, 15

	.type	.L.str2871279,@object   # @.str2871279
.L.str2871279:
	.asciz	"exitcond101"
	.size	.L.str2871279, 12

	.type	.L.str2881280,@object   # @.str2881280
.L.str2881280:
	.asciz	".lr.ph25:2-2"
	.size	.L.str2881280, 13

	.type	.L.str2891281,@object   # @.str2891281
.L.str2891281:
	.asciz	"._crit_edge26:1"
	.size	.L.str2891281, 16

	.type	.L.str2901282,@object   # @.str2901282
.L.str2901282:
	.asciz	"113"
	.size	.L.str2901282, 4

	.type	.L.str2911283,@object   # @.str2911283
.L.str2911283:
	.asciz	"114"
	.size	.L.str2911283, 4

	.type	.L.str2921284,@object   # @.str2921284
.L.str2921284:
	.asciz	"115"
	.size	.L.str2921284, 4

	.type	.L.str2931285,@object   # @.str2931285
	.align	16
.L.str2931285:
	.asciz	"._crit_edge26:1-2"
	.size	.L.str2931285, 18

	.type	.L.str2941286,@object   # @.str2941286
.L.str2941286:
	.asciz	".lr.ph31:2"
	.size	.L.str2941286, 11

	.type	.L.str2951287,@object   # @.str2951287
.L.str2951287:
	.asciz	"indvars.iv102"
	.size	.L.str2951287, 14

	.type	.L.str2961288,@object   # @.str2961288
	.align	16
.L.str2961288:
	.asciz	"indvars.iv.next103"
	.size	.L.str2961288, 19

	.type	.L.str2971289,@object   # @.str2971289
.L.str2971289:
	.asciz	"116"
	.size	.L.str2971289, 4

	.type	.L.str2981290,@object   # @.str2981290
.L.str2981290:
	.asciz	"117"
	.size	.L.str2981290, 4

	.type	.L.str2991291,@object   # @.str2991291
.L.str2991291:
	.asciz	"118"
	.size	.L.str2991291, 4

	.type	.L.str3001292,@object   # @.str3001292
.L.str3001292:
	.asciz	"119"
	.size	.L.str3001292, 4

	.type	.L.str3011293,@object   # @.str3011293
.L.str3011293:
	.asciz	"120"
	.size	.L.str3011293, 4

	.type	.L.str3021294,@object   # @.str3021294
.L.str3021294:
	.asciz	"121"
	.size	.L.str3021294, 4

	.type	.L.str3031295,@object   # @.str3031295
.L.str3031295:
	.asciz	".lr.ph31:2-0"
	.size	.L.str3031295, 13

	.type	.L.str3041296,@object   # @.str3041296
.L.str3041296:
	.asciz	"lftr.wideiv106"
	.size	.L.str3041296, 15

	.type	.L.str3051297,@object   # @.str3051297
.L.str3051297:
	.asciz	"exitcond107"
	.size	.L.str3051297, 12

	.type	.L.str3061298,@object   # @.str3061298
.L.str3061298:
	.asciz	".lr.ph31:2-1"
	.size	.L.str3061298, 13

	.type	.L.str3071299,@object   # @.str3071299
.L.str3071299:
	.asciz	".loopexit28:1"
	.size	.L.str3071299, 14

	.type	.L.str3081300,@object   # @.str3081300
.L.str3081300:
	.asciz	"122"
	.size	.L.str3081300, 4

	.type	.L.str3091301,@object   # @.str3091301
.L.str3091301:
	.asciz	".loopexit28:1-0"
	.size	.L.str3091301, 16

	.type	.L.str3101302,@object   # @.str3101302
.L.str3101302:
	.asciz	".lr.ph34:2"
	.size	.L.str3101302, 11

	.type	.L.str3111303,@object   # @.str3111303
.L.str3111303:
	.asciz	"indvars.iv116"
	.size	.L.str3111303, 14

	.type	.L.str3121304,@object   # @.str3121304
	.align	16
.L.str3121304:
	.asciz	"indvars.iv.next117"
	.size	.L.str3121304, 19

	.type	.L.str3131305,@object   # @.str3131305
.L.str3131305:
	.asciz	"._crit_edge35:2"
	.size	.L.str3131305, 16

	.type	.L.str3141306,@object   # @.str3141306
.L.str3141306:
	.asciz	"123"
	.size	.L.str3141306, 4

	.type	.L.str3151307,@object   # @.str3151307
.L.str3151307:
	.asciz	"124"
	.size	.L.str3151307, 4

	.type	.L.str3161308,@object   # @.str3161308
.L.str3161308:
	.asciz	"125"
	.size	.L.str3161308, 4

	.type	.L.str3171309,@object   # @.str3171309
.L.str3171309:
	.asciz	"126"
	.size	.L.str3171309, 4

	.type	.L.str3181310,@object   # @.str3181310
.L.str3181310:
	.asciz	"127"
	.size	.L.str3181310, 4

	.type	.L.str3191311,@object   # @.str3191311
.L.str3191311:
	.asciz	"128"
	.size	.L.str3191311, 4

	.type	.L.str3201312,@object   # @.str3201312
.L.str3201312:
	.asciz	"129"
	.size	.L.str3201312, 4

	.type	.L.str3211313,@object   # @.str3211313
.L.str3211313:
	.asciz	".lr.ph34:2-3"
	.size	.L.str3211313, 13

	.type	.L.str3221314,@object   # @.str3221314
.L.str3221314:
	.asciz	"130:3"
	.size	.L.str3221314, 6

	.type	.L.str3231315,@object   # @.str3231315
.L.str3231315:
	.asciz	"indvars.iv110"
	.size	.L.str3231315, 14

	.type	.L.str3241316,@object   # @.str3241316
	.align	16
.L.str3241316:
	.asciz	"indvars.iv.next111"
	.size	.L.str3241316, 19

	.type	.L.str3251317,@object   # @.str3251317
.L.str3251317:
	.asciz	"131"
	.size	.L.str3251317, 4

	.type	.L.str3261318,@object   # @.str3261318
.L.str3261318:
	.asciz	"132"
	.size	.L.str3261318, 4

	.type	.L.str3271319,@object   # @.str3271319
.L.str3271319:
	.asciz	"133"
	.size	.L.str3271319, 4

	.type	.L.str3281320,@object   # @.str3281320
.L.str3281320:
	.asciz	"134"
	.size	.L.str3281320, 4

	.type	.L.str3291321,@object   # @.str3291321
.L.str3291321:
	.asciz	"135"
	.size	.L.str3291321, 4

	.type	.L.str3301322,@object   # @.str3301322
.L.str3301322:
	.asciz	"136"
	.size	.L.str3301322, 4

	.type	.L.str3311323,@object   # @.str3311323
.L.str3311323:
	.asciz	"137"
	.size	.L.str3311323, 4

	.type	.L.str3321324,@object   # @.str3321324
.L.str3321324:
	.asciz	"138"
	.size	.L.str3321324, 4

	.type	.L.str3331325,@object   # @.str3331325
.L.str3331325:
	.asciz	"139"
	.size	.L.str3331325, 4

	.type	.L.str3341326,@object   # @.str3341326
.L.str3341326:
	.asciz	"140"
	.size	.L.str3341326, 4

	.type	.L.str3351327,@object   # @.str3351327
.L.str3351327:
	.asciz	"141"
	.size	.L.str3351327, 4

	.type	.L.str3361328,@object   # @.str3361328
.L.str3361328:
	.asciz	"130:3-0"
	.size	.L.str3361328, 8

	.type	.L.str3371329,@object   # @.str3371329
.L.str3371329:
	.asciz	"lftr.wideiv114"
	.size	.L.str3371329, 15

	.type	.L.str3381330,@object   # @.str3381330
.L.str3381330:
	.asciz	"exitcond115"
	.size	.L.str3381330, 12

	.type	.L.str3391331,@object   # @.str3391331
.L.str3391331:
	.asciz	"130:3-1"
	.size	.L.str3391331, 8

	.type	.L.str3401332,@object   # @.str3401332
.L.str3401332:
	.asciz	"lftr.wideiv120"
	.size	.L.str3401332, 15

	.type	.L.str3411333,@object   # @.str3411333
.L.str3411333:
	.asciz	"exitcond121"
	.size	.L.str3411333, 12

	.type	.L.str3421334,@object   # @.str3421334
	.align	16
.L.str3421334:
	.asciz	"._crit_edge35:2-0"
	.size	.L.str3421334, 18

	.type	.L.str3431335,@object   # @.str3431335
.L.str3431335:
	.asciz	".preheader39:1"
	.size	.L.str3431335, 15

	.type	.L.str3441336,@object   # @.str3441336
.L.str3441336:
	.asciz	"142"
	.size	.L.str3441336, 4

	.type	.L.str3451337,@object   # @.str3451337
	.align	16
.L.str3451337:
	.asciz	".preheader39:1-0"
	.size	.L.str3451337, 17

	.type	.L.str3461338,@object   # @.str3461338
.L.str3461338:
	.asciz	".lr.ph42:2"
	.size	.L.str3461338, 11

	.type	.L.str3471339,@object   # @.str3471339
.L.str3471339:
	.asciz	"indvars.iv122"
	.size	.L.str3471339, 14

	.type	.L.str3481340,@object   # @.str3481340
	.align	16
.L.str3481340:
	.asciz	"indvars.iv.next123"
	.size	.L.str3481340, 19

	.type	.L.str3491341,@object   # @.str3491341
.L.str3491341:
	.asciz	"143"
	.size	.L.str3491341, 4

	.type	.L.str3501342,@object   # @.str3501342
.L.str3501342:
	.asciz	"144"
	.size	.L.str3501342, 4

	.type	.L.str3511343,@object   # @.str3511343
.L.str3511343:
	.asciz	"145"
	.size	.L.str3511343, 4

	.type	.L.str3521344,@object   # @.str3521344
.L.str3521344:
	.asciz	"146"
	.size	.L.str3521344, 4

	.type	.L.str3531345,@object   # @.str3531345
.L.str3531345:
	.asciz	"147"
	.size	.L.str3531345, 4

	.type	.L.str3541346,@object   # @.str3541346
.L.str3541346:
	.asciz	"148"
	.size	.L.str3541346, 4

	.type	.L.str3551347,@object   # @.str3551347
.L.str3551347:
	.asciz	"149"
	.size	.L.str3551347, 4

	.type	.L.str3561348,@object   # @.str3561348
.L.str3561348:
	.asciz	"150"
	.size	.L.str3561348, 4

	.type	.L.str3571349,@object   # @.str3571349
.L.str3571349:
	.asciz	".lr.ph42:2-1"
	.size	.L.str3571349, 13

	.type	.L.str3581350,@object   # @.str3581350
.L.str3581350:
	.asciz	"151"
	.size	.L.str3581350, 4

	.type	.L.str3591351,@object   # @.str3591351
.L.str3591351:
	.asciz	"152"
	.size	.L.str3591351, 4

	.type	.L.str3601352,@object   # @.str3601352
.L.str3601352:
	.asciz	"153"
	.size	.L.str3601352, 4

	.type	.L.str3611353,@object   # @.str3611353
.L.str3611353:
	.asciz	"154"
	.size	.L.str3611353, 4

	.type	.L.str3621354,@object   # @.str3621354
.L.str3621354:
	.asciz	"155"
	.size	.L.str3621354, 4

	.type	.L.str3631355,@object   # @.str3631355
.L.str3631355:
	.asciz	".lr.ph42:2-2"
	.size	.L.str3631355, 13

	.type	.L.str3641356,@object   # @.str3641356
.L.str3641356:
	.asciz	"156"
	.size	.L.str3641356, 4

	.type	.L.str3651357,@object   # @.str3651357
.L.str3651357:
	.asciz	".lr.ph42:2-3"
	.size	.L.str3651357, 13

	.type	.L.str3661358,@object   # @.str3661358
.L.str3661358:
	.asciz	"lftr.wideiv126"
	.size	.L.str3661358, 15

	.type	.L.str3671359,@object   # @.str3671359
.L.str3671359:
	.asciz	"exitcond127"
	.size	.L.str3671359, 12

	.type	.L.str3681360,@object   # @.str3681360
.L.str3681360:
	.asciz	".lr.ph42:2-4"
	.size	.L.str3681360, 13

	.type	.L.str3691361,@object   # @.str3691361
	.align	16
.L.str3691361:
	.asciz	"._crit_edge52:0-0"
	.size	.L.str3691361, 18

	.type	.L.str3701362,@object   # @.str3701362
.L.str3701362:
	.asciz	".loopexit24:0"
	.size	.L.str3701362, 14

	.type	.L.str3711363,@object   # @.str3711363
.L.str3711363:
	.asciz	".preheader34:0"
	.size	.L.str3711363, 15

	.type	.L.str3721364,@object   # @.str3721364
	.align	16
.L.str3721364:
	.asciz	".preheader34:0-0"
	.size	.L.str3721364, 17

	.type	.L.str3731365,@object   # @.str3731365
.L.str3731365:
	.asciz	".lr.ph36:1"
	.size	.L.str3731365, 11

	.type	.L.str3741366,@object   # @.str3741366
	.align	16
.L.str3741366:
	.asciz	"._crit_edge37.thread:0"
	.size	.L.str3741366, 23

	.type	.L.str3751367,@object   # @.str3751367
	.align	16
.L.str3751367:
	.asciz	"._crit_edge37.thread:0-2"
	.size	.L.str3751367, 25

	.type	.L.str3761368,@object   # @.str3761368
	.align	16
.L.str3761368:
	.asciz	"._crit_edge37.thread:0-4"
	.size	.L.str3761368, 25

	.type	.L.str3771369,@object   # @.str3771369
.L.str3771369:
	.asciz	".lr.ph36:1-0"
	.size	.L.str3771369, 13

	.type	.L.str3781370,@object   # @.str3781370
.L.str3781370:
	.asciz	".lr.ph36:1-1"
	.size	.L.str3781370, 13

	.type	.L.str3791371,@object   # @.str3791371
.L.str3791371:
	.asciz	"._crit_edge37:0"
	.size	.L.str3791371, 16

	.type	.L.str3801372,@object   # @.str3801372
	.align	16
.L.str3801372:
	.asciz	"._crit_edge37:0-2"
	.size	.L.str3801372, 18

	.type	.L.str3811373,@object   # @.str3811373
	.align	16
.L.str3811373:
	.asciz	"._crit_edge37:0-4"
	.size	.L.str3811373, 18

	.type	.L.str3821374,@object   # @.str3821374
.L.str3821374:
	.asciz	".lr.ph33:1"
	.size	.L.str3821374, 11

	.type	.L.str3831375,@object   # @.str3831375
.L.str3831375:
	.asciz	"indvars.iv63"
	.size	.L.str3831375, 13

	.type	.L.str3841376,@object   # @.str3841376
	.align	16
.L.str3841376:
	.asciz	"indvars.iv.next64"
	.size	.L.str3841376, 18

	.type	.L.str3851377,@object   # @.str3851377
.L.str3851377:
	.asciz	".loopexit17:1"
	.size	.L.str3851377, 14

	.type	.L.str3861378,@object   # @.str3861378
.L.str3861378:
	.asciz	"indvars.iv49"
	.size	.L.str3861378, 13

	.type	.L.str3871379,@object   # @.str3871379
	.align	16
.L.str3871379:
	.asciz	"indvars.iv.next50"
	.size	.L.str3871379, 18

	.type	.L.str3881380,@object   # @.str3881380
.L.str3881380:
	.asciz	"indvars.iv42"
	.size	.L.str3881380, 13

	.type	.L.str3891381,@object   # @.str3891381
	.align	16
.L.str3891381:
	.asciz	"indvars.iv.next43"
	.size	.L.str3891381, 18

	.type	.L.str3901382,@object   # @.str3901382
.L.str3901382:
	.asciz	"t.031"
	.size	.L.str3901382, 6

	.type	.L.str3911383,@object   # @.str3911383
.L.str3911383:
	.asciz	"t.1"
	.size	.L.str3911383, 4

	.type	.L.str3921384,@object   # @.str3921384
.L.str3921384:
	.asciz	"b.030"
	.size	.L.str3921384, 6

	.type	.L.str3931385,@object   # @.str3931385
.L.str3931385:
	.asciz	"b.1"
	.size	.L.str3931385, 4

	.type	.L.str3941386,@object   # @.str3941386
.L.str3941386:
	.asciz	"l.028"
	.size	.L.str3941386, 6

	.type	.L.str3951387,@object   # @.str3951387
.L.str3951387:
	.asciz	"f.027"
	.size	.L.str3951387, 6

	.type	.L.str3961388,@object   # @.str3961388
.L.str3961388:
	.asciz	"f.2"
	.size	.L.str3961388, 4

	.type	.L.str3971389,@object   # @.str3971389
.L.str3971389:
	.asciz	"c.026"
	.size	.L.str3971389, 6

	.type	.L.str3981390,@object   # @.str3981390
.L.str3981390:
	.asciz	"c.1"
	.size	.L.str3981390, 4

	.type	.L.str3991391,@object   # @.str3991391
.L.str3991391:
	.asciz	".lr.ph33:1-2"
	.size	.L.str3991391, 13

	.type	.L.str4001392,@object   # @.str4001392
.L.str4001392:
	.asciz	"22:1"
	.size	.L.str4001392, 5

	.type	.L.str4011393,@object   # @.str4011393
.L.str4011393:
	.asciz	"22:1-3"
	.size	.L.str4011393, 7

	.type	.L.str4021394,@object   # @.str4021394
.L.str4021394:
	.asciz	".lr.ph:1-1"
	.size	.L.str4021394, 11

	.type	.L.str4031395,@object   # @.str4031395
.L.str4031395:
	.asciz	"29:2"
	.size	.L.str4031395, 5

	.type	.L.str4041396,@object   # @.str4041396
.L.str4041396:
	.asciz	"26:2"
	.size	.L.str4041396, 5

	.type	.L.str4051397,@object   # @.str4051397
	.align	16
.L.str4051397:
	.asciz	"indvars.iv.next41"
	.size	.L.str4051397, 18

	.type	.L.str4061398,@object   # @.str4061398
.L.str4061398:
	.asciz	"26:2-0"
	.size	.L.str4061398, 7

	.type	.L.str4071399,@object   # @.str4071399
.L.str4071399:
	.asciz	"split2:1"
	.size	.L.str4071399, 9

	.type	.L.str4081400,@object   # @.str4081400
.L.str4081400:
	.asciz	"indvars.iv40"
	.size	.L.str4081400, 13

	.type	.L.str4091401,@object   # @.str4091401
.L.str4091401:
	.asciz	"m.01"
	.size	.L.str4091401, 5

	.type	.L.str4101402,@object   # @.str4101402
.L.str4101402:
	.asciz	"29:2-1"
	.size	.L.str4101402, 7

	.type	.L.str4111403,@object   # @.str4111403
.L.str4111403:
	.asciz	"m.0.lcssa"
	.size	.L.str4111403, 10

	.type	.L.str4121404,@object   # @.str4121404
.L.str4121404:
	.asciz	"split2:1-0"
	.size	.L.str4121404, 11

	.type	.L.str4131405,@object   # @.str4131405
.L.str4131405:
	.asciz	".lr.ph23:1"
	.size	.L.str4131405, 11

	.type	.L.str4141406,@object   # @.str4141406
.L.str4141406:
	.asciz	"46:2"
	.size	.L.str4141406, 5

	.type	.L.str4151407,@object   # @.str4151407
.L.str4151407:
	.asciz	"f.1"
	.size	.L.str4151407, 4

	.type	.L.str4161408,@object   # @.str4161408
.L.str4161408:
	.asciz	"106:2"
	.size	.L.str4161408, 6

	.type	.L.str4171409,@object   # @.str4171409
.L.str4171409:
	.asciz	"j.0"
	.size	.L.str4171409, 4

	.type	.L.str4181410,@object   # @.str4181410
.L.str4181410:
	.asciz	"46:2-0"
	.size	.L.str4181410, 7

	.type	.L.str4191411,@object   # @.str4191411
.L.str4191411:
	.asciz	"48:0"
	.size	.L.str4191411, 5

	.type	.L.str4201412,@object   # @.str4201412
.L.str4201412:
	.asciz	"50:2"
	.size	.L.str4201412, 5

	.type	.L.str4211413,@object   # @.str4211413
.L.str4211413:
	.asciz	"48:0-1"
	.size	.L.str4211413, 7

	.type	.L.str4221414,@object   # @.str4221414
.L.str4221414:
	.asciz	"50:2-5"
	.size	.L.str4221414, 7

	.type	.L.str4231415,@object   # @.str4231415
.L.str4231415:
	.asciz	"50:2-7"
	.size	.L.str4231415, 7

	.type	.L.str4241416,@object   # @.str4241416
.L.str4241416:
	.asciz	".lr.ph5:3"
	.size	.L.str4241416, 10

	.type	.L.str4251417,@object   # @.str4251417
.L.str4251417:
	.asciz	"._crit_edge6:2"
	.size	.L.str4251417, 15

	.type	.L.str4261418,@object   # @.str4261418
.L.str4261418:
	.asciz	"indvars.iv44"
	.size	.L.str4261418, 13

	.type	.L.str4271419,@object   # @.str4271419
	.align	16
.L.str4271419:
	.asciz	"indvars.iv.next45"
	.size	.L.str4271419, 18

	.type	.L.str4281420,@object   # @.str4281420
.L.str4281420:
	.asciz	".lr.ph5:3-0"
	.size	.L.str4281420, 12

	.type	.L.str4291421,@object   # @.str4291421
.L.str4291421:
	.asciz	".lr.ph5:3-1"
	.size	.L.str4291421, 12

	.type	.L.str4301422,@object   # @.str4301422
.L.str4301422:
	.asciz	"g.0"
	.size	.L.str4301422, 4

	.type	.L.str4311423,@object   # @.str4311423
	.align	16
.L.str4311423:
	.asciz	"._crit_edge6:2-7"
	.size	.L.str4311423, 17

	.type	.L.str4321424,@object   # @.str4321424
.L.str4321424:
	.asciz	"._crit_edge13:2"
	.size	.L.str4321424, 16

	.type	.L.str4331425,@object   # @.str4331425
.L.str4331425:
	.asciz	".lr.ph12:3"
	.size	.L.str4331425, 11

	.type	.L.str4341426,@object   # @.str4341426
.L.str4341426:
	.asciz	"indvars.iv47"
	.size	.L.str4341426, 13

	.type	.L.str4351427,@object   # @.str4351427
	.align	16
.L.str4351427:
	.asciz	"indvars.iv.next48"
	.size	.L.str4351427, 18

	.type	.L.str4361428,@object   # @.str4361428
.L.str4361428:
	.asciz	"s.010"
	.size	.L.str4361428, 6

	.type	.L.str4371429,@object   # @.str4371429
.L.str4371429:
	.asciz	"h.08"
	.size	.L.str4371429, 5

	.type	.L.str4381430,@object   # @.str4381430
.L.str4381430:
	.asciz	"g.17"
	.size	.L.str4381430, 5

	.type	.L.str4391431,@object   # @.str4391431
.L.str4391431:
	.asciz	"g.2"
	.size	.L.str4391431, 4

	.type	.L.str4401432,@object   # @.str4401432
.L.str4401432:
	.asciz	".lr.ph12:3-3"
	.size	.L.str4401432, 13

	.type	.L.str4411433,@object   # @.str4411433
.L.str4411433:
	.asciz	".lr.ph12:3-5"
	.size	.L.str4411433, 13

	.type	.L.str4421434,@object   # @.str4421434
.L.str4421434:
	.asciz	"93"
	.size	.L.str4421434, 3

	.type	.L.str4431435,@object   # @.str4431435
.L.str4431435:
	.asciz	"lftr.wideiv51"
	.size	.L.str4431435, 14

	.type	.L.str4441436,@object   # @.str4441436
.L.str4441436:
	.asciz	"exitcond52"
	.size	.L.str4441436, 11

	.type	.L.str4451437,@object   # @.str4451437
.L.str4451437:
	.asciz	".lr.ph12:3-9"
	.size	.L.str4451437, 13

	.type	.L.str4461438,@object   # @.str4461438
.L.str4461438:
	.asciz	"s.0.lcssa"
	.size	.L.str4461438, 10

	.type	.L.str4471439,@object   # @.str4471439
.L.str4471439:
	.asciz	"g.1.lcssa"
	.size	.L.str4471439, 10

	.type	.L.str4481440,@object   # @.str4481440
	.align	16
.L.str4481440:
	.asciz	"._crit_edge13:2-0"
	.size	.L.str4481440, 18

	.type	.L.str4491441,@object   # @.str4491441
	.align	16
.L.str4491441:
	.asciz	"._crit_edge13:2-1"
	.size	.L.str4491441, 18

	.type	.L.str4501442,@object   # @.str4501442
	.align	16
.L.str4501442:
	.asciz	"._crit_edge13:2-2"
	.size	.L.str4501442, 18

	.type	.L.str4511443,@object   # @.str4511443
.L.str4511443:
	.asciz	"100:2"
	.size	.L.str4511443, 6

	.type	.L.str4521444,@object   # @.str4521444
.L.str4521444:
	.asciz	"100:2-0"
	.size	.L.str4521444, 8

	.type	.L.str4531445,@object   # @.str4531445
.L.str4531445:
	.asciz	"106:2-0"
	.size	.L.str4531445, 8

	.type	.L.str4541446,@object   # @.str4541446
.L.str4541446:
	.asciz	"106:2-1"
	.size	.L.str4541446, 8

	.type	.L.str4551447,@object   # @.str4551447
.L.str4551447:
	.asciz	".lr.ph23:1-2"
	.size	.L.str4551447, 13

	.type	.L.str4561448,@object   # @.str4561448
.L.str4561448:
	.asciz	"111:2"
	.size	.L.str4561448, 6

	.type	.L.str4571449,@object   # @.str4571449
.L.str4571449:
	.asciz	"indvars.iv60"
	.size	.L.str4571449, 13

	.type	.L.str4581450,@object   # @.str4581450
	.align	16
.L.str4581450:
	.asciz	"indvars.iv.next61"
	.size	.L.str4581450, 18

	.type	.L.str4591451,@object   # @.str4591451
.L.str4591451:
	.asciz	"123:2"
	.size	.L.str4591451, 6

	.type	.L.str4601452,@object   # @.str4601452
.L.str4601452:
	.asciz	"i.221"
	.size	.L.str4601452, 6

	.type	.L.str4611453,@object   # @.str4611453
.L.str4611453:
	.asciz	"111:2-0"
	.size	.L.str4611453, 8

	.type	.L.str4621454,@object   # @.str4621454
.L.str4621454:
	.asciz	"114:1"
	.size	.L.str4621454, 6

	.type	.L.str4631455,@object   # @.str4631455
.L.str4631455:
	.asciz	"117:2"
	.size	.L.str4631455, 6

	.type	.L.str4641456,@object   # @.str4641456
.L.str4641456:
	.asciz	"114:1-0"
	.size	.L.str4641456, 8

	.type	.L.str4651457,@object   # @.str4651457
.L.str4651457:
	.asciz	"114:1-1"
	.size	.L.str4651457, 8

	.type	.L.str4661458,@object   # @.str4661458
.L.str4661458:
	.asciz	"117:2-0"
	.size	.L.str4661458, 8

	.type	.L.str4671459,@object   # @.str4671459
.L.str4671459:
	.asciz	"122:1"
	.size	.L.str4671459, 6

	.type	.L.str4681460,@object   # @.str4681460
.L.str4681460:
	.asciz	"122:1-0"
	.size	.L.str4681460, 8

	.type	.L.str4691461,@object   # @.str4691461
.L.str4691461:
	.asciz	"122:1-1"
	.size	.L.str4691461, 8

	.type	.L.str4701462,@object   # @.str4701462
.L.str4701462:
	.asciz	"123:2-0"
	.size	.L.str4701462, 8

	.type	.L.str4711463,@object   # @.str4711463
.L.str4711463:
	.asciz	"123:2-2"
	.size	.L.str4711463, 8

	.type	.L.str4721464,@object   # @.str4721464
.L.str4721464:
	.asciz	".loopexit17:1-1"
	.size	.L.str4721464, 16

	.type	.L.str4731465,@object   # @.str4731465
.L.str4731465:
	.asciz	".loopexit24:0-0"
	.size	.L.str4731465, 16

	.type	.L.str4741466,@object   # @.str4741466
.L.str4741466:
	.asciz	"trbak1"
	.size	.L.str4741466, 7

	.type	.L.str4751467,@object   # @.str4751467
.L.str4751467:
	.asciz	"notlhs"
	.size	.L.str4751467, 7

	.type	.L.str4761468,@object   # @.str4761468
.L.str4761468:
	.asciz	"m"
	.size	.L.str4761468, 2

	.type	.L.str4771469,@object   # @.str4771469
.L.str4771469:
	.asciz	"notrhs"
	.size	.L.str4771469, 7

	.type	.L.str4781470,@object   # @.str4781470
.L.str4781470:
	.asciz	"or.cond.not"
	.size	.L.str4781470, 12

	.type	.L.str4791471,@object   # @.str4791471
.L.str4791471:
	.asciz	"or.cond32"
	.size	.L.str4791471, 10

	.type	.L.str4801472,@object   # @.str4801472
.L.str4801472:
	.asciz	"0:0-5"
	.size	.L.str4801472, 6

	.type	.L.str4811473,@object   # @.str4811473
.L.str4811473:
	.asciz	".lr.ph15:0"
	.size	.L.str4811473, 11

	.type	.L.str4821474,@object   # @.str4821474
.L.str4821474:
	.asciz	".loopexit11:0"
	.size	.L.str4821474, 14

	.type	.L.str4831475,@object   # @.str4831475
.L.str4831475:
	.asciz	".lr.ph15:0-0"
	.size	.L.str4831475, 13

	.type	.L.str4841476,@object   # @.str4841476
.L.str4841476:
	.asciz	"2:1"
	.size	.L.str4841476, 4

	.type	.L.str4851477,@object   # @.str4851477
.L.str4851477:
	.asciz	"indvars.iv28"
	.size	.L.str4851477, 13

	.type	.L.str4861478,@object   # @.str4861478
	.align	16
.L.str4861478:
	.asciz	"indvars.iv.next29"
	.size	.L.str4861478, 18

	.type	.L.str4871479,@object   # @.str4871479
.L.str4871479:
	.asciz	"indvars.iv20"
	.size	.L.str4871479, 13

	.type	.L.str4881480,@object   # @.str4881480
	.align	16
.L.str4881480:
	.asciz	"indvars.iv.next21"
	.size	.L.str4881480, 18

	.type	.L.str4891481,@object   # @.str4891481
.L.str4891481:
	.asciz	".not"
	.size	.L.str4891481, 5

	.type	.L.str4901482,@object   # @.str4901482
.L.str4901482:
	.asciz	".not33"
	.size	.L.str4901482, 7

	.type	.L.str4911483,@object   # @.str4911483
.L.str4911483:
	.asciz	"brmerge"
	.size	.L.str4911483, 8

	.type	.L.str4921484,@object   # @.str4921484
.L.str4921484:
	.asciz	"2:1-0"
	.size	.L.str4921484, 6

	.type	.L.str4931485,@object   # @.str4931485
	.align	16
.L.str4931485:
	.asciz	".preheader.lr.ph:1"
	.size	.L.str4931485, 19

	.type	.L.str4941486,@object   # @.str4941486
	.align	16
.L.str4941486:
	.asciz	".preheader.lr.ph:1-0"
	.size	.L.str4941486, 21

	.type	.L.str4951487,@object   # @.str4951487
.L.str4951487:
	.asciz	"indvars.iv24"
	.size	.L.str4951487, 13

	.type	.L.str4961488,@object   # @.str4961488
	.align	16
.L.str4961488:
	.asciz	"indvars.iv.next25"
	.size	.L.str4961488, 18

	.type	.L.str4971489,@object   # @.str4971489
.L.str4971489:
	.asciz	"._crit_edge7:2"
	.size	.L.str4971489, 15

	.type	.L.str4981490,@object   # @.str4981490
.L.str4981490:
	.asciz	".lr.ph:2-0"
	.size	.L.str4981490, 11

	.type	.L.str4991491,@object   # @.str4991491
.L.str4991491:
	.asciz	"15:3"
	.size	.L.str4991491, 5

	.type	.L.str5001492,@object   # @.str5001492
.L.str5001492:
	.asciz	"s.03"
	.size	.L.str5001492, 5

	.type	.L.str5011493,@object   # @.str5011493
.L.str5011493:
	.asciz	"26"
	.size	.L.str5011493, 3

	.type	.L.str5021494,@object   # @.str5021494
.L.str5021494:
	.asciz	"15:3-1"
	.size	.L.str5021494, 7

	.type	.L.str5031495,@object   # @.str5031495
.L.str5031495:
	.asciz	".lr.ph6:2"
	.size	.L.str5031495, 10

	.type	.L.str5041496,@object   # @.str5041496
.L.str5041496:
	.asciz	".lr.ph6:2-2"
	.size	.L.str5041496, 12

	.type	.L.str5051497,@object   # @.str5051497
.L.str5051497:
	.asciz	"35:3"
	.size	.L.str5051497, 5

	.type	.L.str5061498,@object   # @.str5061498
.L.str5061498:
	.asciz	"indvars.iv18"
	.size	.L.str5061498, 13

	.type	.L.str5071499,@object   # @.str5071499
	.align	16
.L.str5071499:
	.asciz	"indvars.iv.next19"
	.size	.L.str5071499, 18

	.type	.L.str5081500,@object   # @.str5081500
.L.str5081500:
	.asciz	"35:3-0"
	.size	.L.str5081500, 7

	.type	.L.str5091501,@object   # @.str5091501
.L.str5091501:
	.asciz	"lftr.wideiv22"
	.size	.L.str5091501, 14

	.type	.L.str5101502,@object   # @.str5101502
.L.str5101502:
	.asciz	"exitcond23"
	.size	.L.str5101502, 11

	.type	.L.str5111503,@object   # @.str5111503
.L.str5111503:
	.asciz	"35:3-1"
	.size	.L.str5111503, 7

	.type	.L.str5121504,@object   # @.str5121504
.L.str5121504:
	.asciz	"lftr.wideiv26"
	.size	.L.str5121504, 14

	.type	.L.str5131505,@object   # @.str5131505
.L.str5131505:
	.asciz	"exitcond27"
	.size	.L.str5131505, 11

	.type	.L.str5141506,@object   # @.str5141506
	.align	16
.L.str5141506:
	.asciz	"._crit_edge7:2-0"
	.size	.L.str5141506, 17

	.type	.L.str5151507,@object   # @.str5151507
.L.str5151507:
	.asciz	"lftr.wideiv30"
	.size	.L.str5151507, 14

	.type	.L.str5161508,@object   # @.str5161508
.L.str5161508:
	.asciz	"exitcond31"
	.size	.L.str5161508, 11

	.type	.L.str5171509,@object   # @.str5171509
.L.str5171509:
	.asciz	".loopexit:1-1"
	.size	.L.str5171509, 14

	.type	.L.str5181510,@object   # @.str5181510
.L.str5181510:
	.asciz	".loopexit11:0-0"
	.size	.L.str5181510, 16

	.type	initp,@object           # @initp
	.bss
	.globl	initp
initp:
	.byte	0                       # 0x0
	.size	initp, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str1513,@object      # @.str1513
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str1513:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str1513, 27

	.type	.L.str11514,@object     # @.str11514
.L.str11514:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str11514, 26

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str21515,@object     # @.str21515
.L.str21515:
	.asciz	"dynamic_trace.gz"
	.size	.L.str21515, 17

	.type	.L.str31516,@object     # @.str31516
.L.str31516:
	.asciz	"w"
	.size	.L.str31516, 2

	.type	.L.str41517,@object     # @.str41517
.L.str41517:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str41517, 39

	.type	current_toplevel_function,@object # @current_toplevel_function
	.comm	current_toplevel_function,8,8
	.type	current_logging_status,@object # @current_logging_status
	.comm	current_logging_status,4,4
	.type	.L.str51518,@object     # @.str51518
.L.str51518:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str51518, 75

	.type	.L.str61519,@object     # @.str61519
.L.str61519:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.c"
	.size	.L.str61519, 51

	.type	.L__PRETTY_FUNCTION__.log_or_not,@object # @__PRETTY_FUNCTION__.log_or_not
.L__PRETTY_FUNCTION__.log_or_not:
	.asciz	"logging_status log_or_not(_Bool, _Bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__.log_or_not, 53

	.type	.L.str71520,@object     # @.str71520
.L.str71520:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str71520, 69

	.type	.L.str81521,@object     # @.str81521
.L.str81521:
	.asciz	"0x"
	.size	.L.str81521, 3

	.type	.L.str91522,@object     # @.str91522
.L.str91522:
	.asciz	"%02x"
	.size	.L.str91522, 5

	.type	.L.str101523,@object    # @.str101523
.L.str101523:
	.asciz	"Stopping logging at inst %d.\n"
	.size	.L.str101523, 30

	.type	.L.str111524,@object    # @.str111524
.L.str111524:
	.asciz	"Starting to log at inst = %d.\n"
	.size	.L.str111524, 31

	.type	.L.str121525,@object    # @.str121525
.L.str121525:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str121525, 15

	.type	.L.str131526,@object    # @.str131526
.L.str131526:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str131526, 22

	.type	.L.str141527,@object    # @.str141527
.L.str141527:
	.asciz	"initp == true"
	.size	.L.str141527, 14

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str151528,@object    # @.str151528
.L.str151528:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str151528, 12

	.type	.L.str161529,@object    # @.str161529
.L.str161529:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str161529, 12

	.type	.L.str171530,@object    # @.str171530
.L.str171530:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str171530, 13

	.type	.L.str181531,@object    # @.str181531
.L.str181531:
	.asciz	",%s"
	.size	.L.str181531, 4

	.type	.L.str191532,@object    # @.str191532
.L.str191532:
	.asciz	", "
	.size	.L.str191532, 3

	.type	.L.str201533,@object    # @.str201533
.L.str201533:
	.asciz	",%s,\n"
	.size	.L.str201533, 6

	.type	.L.str211534,@object    # @.str211534
.L.str211534:
	.asciz	",\n"
	.size	.L.str211534, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_ptr,@object # @__PRETTY_FUNCTION__.trace_logger_log_ptr
.L__PRETTY_FUNCTION__.trace_logger_log_ptr:
	.asciz	"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_ptr, 72

	.type	.L.str221535,@object    # @.str221535
.L.str221535:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str221535, 14

	.type	.L.str231536,@object    # @.str231536
.L.str231536:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str231536, 14

	.type	.L.str241537,@object    # @.str241537
.L.str241537:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str241537, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str251538,@object    # @.str251538
.L.str251538:
	.asciz	"r,%d,%f,%d"
	.size	.L.str251538, 11

	.type	.L.str261539,@object    # @.str261539
.L.str261539:
	.asciz	"f,%d,%f,%d"
	.size	.L.str261539, 11

	.type	.L.str271540,@object    # @.str271540
.L.str271540:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str271540, 12

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_vector,@object # @__PRETTY_FUNCTION__.trace_logger_log_vector
.L__PRETTY_FUNCTION__.trace_logger_log_vector:
	.asciz	"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_vector, 76

	.type	.L.str281541,@object    # @.str281541
.L.str281541:
	.asciz	"r,%d,%s,%d"
	.size	.L.str281541, 11

	.type	.L.str291542,@object    # @.str291542
.L.str291542:
	.asciz	"f,%d,%s,%d"
	.size	.L.str291542, 11

	.type	.L.str301543,@object    # @.str301543
.L.str301543:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str301543, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"feature_extraction.c"
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/integration-test/with-cpu/feature_extraction"
.Linfo_string3:
	.asciz	"high_index"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"low_index"
.Linfo_string6:
	.asciz	"n_fft_items"
.Linfo_string7:
	.asciz	"n_sd"
.Linfo_string8:
	.asciz	"test_stores"
.Linfo_string9:
	.asciz	"process_data"
.Linfo_string10:
	.asciz	"main"
.Linfo_string11:
	.asciz	"kiss_fft.c"
.Linfo_string12:
	.asciz	"pi"
.Linfo_string13:
	.asciz	"double"
.Linfo_string14:
	.asciz	"kiss_fft_alloc"
.Linfo_string15:
	.asciz	"nfft"
.Linfo_string16:
	.asciz	"inverse"
.Linfo_string17:
	.asciz	"factors"
.Linfo_string18:
	.asciz	"twiddles"
.Linfo_string19:
	.asciz	"r"
.Linfo_string20:
	.asciz	"i"
.Linfo_string21:
	.asciz	"kiss_fft_cpx"
.Linfo_string22:
	.asciz	"kiss_fft_state"
.Linfo_string23:
	.asciz	"kiss_fft_cfg"
.Linfo_string24:
	.asciz	"kiss_fft_stride"
.Linfo_string25:
	.asciz	"kiss_fft"
.Linfo_string26:
	.asciz	"kiss_fft_cleanup"
.Linfo_string27:
	.asciz	"kiss_fft_next_fast_size"
.Linfo_string28:
	.asciz	"kf_work"
.Linfo_string29:
	.asciz	"kf_bfly_generic"
.Linfo_string30:
	.asciz	"kf_bfly5"
.Linfo_string31:
	.asciz	"kf_bfly4"
.Linfo_string32:
	.asciz	"kf_bfly3"
.Linfo_string33:
	.asciz	"kf_bfly2"
.Linfo_string34:
	.asciz	"kf_factor"
.Linfo_string35:
	.asciz	"eispack.c"
.Linfo_string36:
	.asciz	"value"
.Linfo_string37:
	.asciz	"pythag"
.Linfo_string38:
	.asciz	"r8_epsilon"
.Linfo_string39:
	.asciz	"r8_max"
.Linfo_string40:
	.asciz	"r8_min"
.Linfo_string41:
	.asciz	"r8_sign"
.Linfo_string42:
	.asciz	"rs"
.Linfo_string43:
	.asciz	"tqlrat"
.Linfo_string44:
	.asciz	"trbak1"
.Linfo_string45:
	.asciz	"tred1"
.Linfo_string46:
	.asciz	"time_data"
.Linfo_string47:
	.asciz	"TYPE"
.Linfo_string48:
	.asciz	"freq_data"
.Linfo_string49:
	.asciz	"n_samples"
.Linfo_string50:
	.asciz	"n_channels"
.Linfo_string51:
	.asciz	"j"
.Linfo_string52:
	.asciz	"cfg"
.Linfo_string53:
	.asciz	"out"
.Linfo_string54:
	.asciz	"fft_data"
.Linfo_string55:
	.asciz	"fft_stddev"
.Linfo_string56:
	.asciz	"scaled_fft_data"
.Linfo_string57:
	.asciz	"freq_xcorr_matrix"
.Linfo_string58:
	.asciz	"XCORR_TYPE"
.Linfo_string59:
	.asciz	"time_stddev"
.Linfo_string60:
	.asciz	"n_time_sd"
.Linfo_string61:
	.asciz	"scaled_time_data"
.Linfo_string62:
	.asciz	"time_xcorr_matrix"
.Linfo_string63:
	.asciz	"time_eigenvalues"
.Linfo_string64:
	.asciz	"in"
.Linfo_string65:
	.asciz	"fft_mean"
.Linfo_string66:
	.asciz	"freq_eigenvalues"
.Linfo_string67:
	.asciz	"time_mean"
.Linfo_string68:
	.asciz	"channel"
.Linfo_string69:
	.asciz	"index"
.Linfo_string70:
	.asciz	"temp"
.Linfo_string71:
	.asciz	"stddev_temp"
.Linfo_string72:
	.asciz	"k"
.Linfo_string73:
	.asciz	"num_failures"
.Linfo_string74:
	.asciz	"inverse_fft"
.Linfo_string75:
	.asciz	"mem"
.Linfo_string76:
	.asciz	"lenmem"
.Linfo_string77:
	.asciz	"long unsigned int"
.Linfo_string78:
	.asciz	"size_t"
.Linfo_string79:
	.asciz	"memneeded"
.Linfo_string80:
	.asciz	"st"
.Linfo_string81:
	.asciz	"phase"
.Linfo_string82:
	.asciz	"fin"
.Linfo_string83:
	.asciz	"fout"
.Linfo_string84:
	.asciz	"in_stride"
.Linfo_string85:
	.asciz	"n"
.Linfo_string86:
	.asciz	"m"
.Linfo_string87:
	.asciz	"facbuf"
.Linfo_string88:
	.asciz	"p"
.Linfo_string89:
	.asciz	"floor_sqrt"
.Linfo_string90:
	.asciz	"Fout"
.Linfo_string91:
	.asciz	"f"
.Linfo_string92:
	.asciz	"fstride"
.Linfo_string93:
	.asciz	"Fout_beg"
.Linfo_string94:
	.asciz	"f_beg"
.Linfo_string95:
	.asciz	"Fout_end"
.Linfo_string96:
	.asciz	"Norig"
.Linfo_string97:
	.asciz	"scratch"
.Linfo_string98:
	.asciz	"u"
.Linfo_string99:
	.asciz	"q"
.Linfo_string100:
	.asciz	"q1"
.Linfo_string101:
	.asciz	"t"
.Linfo_string102:
	.asciz	"twidx"
.Linfo_string103:
	.asciz	"Fout0"
.Linfo_string104:
	.asciz	"Fout1"
.Linfo_string105:
	.asciz	"Fout2"
.Linfo_string106:
	.asciz	"Fout3"
.Linfo_string107:
	.asciz	"Fout4"
.Linfo_string108:
	.asciz	"ya"
.Linfo_string109:
	.asciz	"yb"
.Linfo_string110:
	.asciz	"m2"
.Linfo_string111:
	.asciz	"m3"
.Linfo_string112:
	.asciz	"tw1"
.Linfo_string113:
	.asciz	"tw2"
.Linfo_string114:
	.asciz	"tw3"
.Linfo_string115:
	.asciz	"epi3"
.Linfo_string116:
	.asciz	"a"
.Linfo_string117:
	.asciz	"b"
.Linfo_string118:
	.asciz	"s"
.Linfo_string119:
	.asciz	"x"
.Linfo_string120:
	.asciz	"y"
.Linfo_string121:
	.asciz	"w"
.Linfo_string122:
	.asciz	"matz"
.Linfo_string123:
	.asciz	"_Bool"
.Linfo_string124:
	.asciz	"z"
.Linfo_string125:
	.asciz	"fv2"
.Linfo_string126:
	.asciz	"ierr"
.Linfo_string127:
	.asciz	"fv1"
.Linfo_string128:
	.asciz	"d"
.Linfo_string129:
	.asciz	"e"
.Linfo_string130:
	.asciz	"e2"
.Linfo_string131:
	.asciz	"l"
.Linfo_string132:
	.asciz	"h"
.Linfo_string133:
	.asciz	"scale"
.Linfo_string134:
	.asciz	"g"
.Linfo_string135:
	.asciz	"c"
.Linfo_string136:
	.asciz	"mml"
.Linfo_string137:
	.asciz	"ii"
.Linfo_string138:
	.asciz	"l1"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	1597                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x636 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	2                       # Abbrev [2] 0x3e:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	1                       # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x4a:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x56:0xc DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.byte	46                      # DW_AT_const_value
	.byte	5                       # Abbrev [5] 0x62:0x8f DW_TAG_subprogram
	.long	.Linfo_string8          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x7f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x8e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc2            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x9d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc4            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xac:0xf DW_TAG_formal_parameter
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	17                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbb:0x35 DW_TAG_lexical_block
	.quad	.Ltmp21                 # DW_AT_low_pc
	.quad	.Ltmp35                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0xcc:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	18                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0xd8:0x17 DW_TAG_lexical_block
	.long	.Ldebug_range+48        # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0xdd:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range           # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0xe2:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	20                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xf1:0x3e3 DW_TAG_subprogram
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x10a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc8            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x119:0xf DW_TAG_formal_parameter
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc11           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x128:0xf DW_TAG_formal_parameter
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc14           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x137:0xf DW_TAG_formal_parameter
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc17           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x146:0xf DW_TAG_formal_parameter
	.long	.Linfo_string52         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	1416                    # DW_AT_type
	.long	.Ldebug_loc20           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x155:0xf DW_TAG_variable
	.long	.Linfo_string53         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	37                      # DW_AT_decl_line
	.long	1556                    # DW_AT_type
	.long	.Ldebug_loc23           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x164:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x170:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x17c:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	12                      # Abbrev [12] 0x188:0xf DW_TAG_variable
	.long	.Linfo_string54         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	58                      # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.long	.Ldebug_loc25           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x197:0xf DW_TAG_variable
	.long	.Linfo_string55         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	70                      # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.long	.Ldebug_loc28           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1a6:0xf DW_TAG_variable
	.long	.Linfo_string56         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.long	.Ldebug_loc33           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1b5:0xf DW_TAG_variable
	.long	.Linfo_string57         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	106                     # DW_AT_decl_line
	.long	1578                    # DW_AT_type
	.long	.Ldebug_loc36           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1c4:0xf DW_TAG_variable
	.long	.Linfo_string59         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	141                     # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.long	.Ldebug_loc39           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1d3:0xf DW_TAG_variable
	.long	.Linfo_string60         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	151                     # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.long	.Ldebug_loc41           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1e2:0xf DW_TAG_variable
	.long	.Linfo_string61         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	163                     # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.long	.Ldebug_loc44           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x1f1:0xf DW_TAG_variable
	.long	.Linfo_string62         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	173                     # DW_AT_decl_line
	.long	1578                    # DW_AT_type
	.long	.Ldebug_loc47           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x200:0xf DW_TAG_variable
	.long	.Linfo_string63         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	190                     # DW_AT_decl_line
	.long	1578                    # DW_AT_type
	.long	.Ldebug_loc50           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x20f:0xb DW_TAG_variable
	.long	.Linfo_string64         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	1556                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x21a:0xb DW_TAG_variable
	.long	.Linfo_string65         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x225:0xb DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x230:0xb DW_TAG_variable
	.long	.Linfo_string66         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	127                     # DW_AT_decl_line
	.long	1578                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x23b:0xb DW_TAG_variable
	.long	.Linfo_string67         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	1567                    # DW_AT_type
	.byte	9                       # Abbrev [9] 0x246:0x3b DW_TAG_lexical_block
	.long	.Ldebug_range+240       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x24b:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	38                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x257:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+192       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x25c:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range+96        # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x261:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	40                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x26d:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+144       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x272:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x281:0x5d DW_TAG_lexical_block
	.long	.Ldebug_range+336       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x286:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	59                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x292:0x4b DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x2a3:0x39 DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x2b4:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x2bf:0x1c DW_TAG_lexical_block
	.long	.Ldebug_range+288       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x2c4:0xb DW_TAG_variable
	.long	.Linfo_string69         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	63                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x2cf:0xb DW_TAG_variable
	.long	.Linfo_string70         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	1507                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x2de:0x42 DW_TAG_lexical_block
	.long	.Ldebug_range+384       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x2e3:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x2ef:0x30 DW_TAG_lexical_block
	.quad	.Ltmp88                 # DW_AT_low_pc
	.quad	.Ltmp95                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x300:0x1e DW_TAG_lexical_block
	.quad	.Ltmp89                 # DW_AT_low_pc
	.quad	.Ltmp94                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x311:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x320:0x4f DW_TAG_lexical_block
	.long	.Ldebug_range+448       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x325:0xb DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	81                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x330:0x3e DW_TAG_lexical_block
	.quad	.Ltmp97                 # DW_AT_low_pc
	.quad	.Ltmp102                # DW_AT_high_pc
	.byte	12                      # Abbrev [12] 0x341:0xf DW_TAG_variable
	.long	.Linfo_string71         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	83                      # DW_AT_decl_line
	.long	1405                    # DW_AT_type
	.long	.Ldebug_loc31           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x350:0x1d DW_TAG_lexical_block
	.quad	.Ltmp97                 # DW_AT_low_pc
	.quad	.Ltmp101                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x361:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	85                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x36f:0x41 DW_TAG_lexical_block
	.long	.Ldebug_range+496       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x374:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x380:0x2f DW_TAG_lexical_block
	.quad	.Ltmp110                # DW_AT_low_pc
	.quad	.Ltmp116                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x391:0x1d DW_TAG_lexical_block
	.quad	.Ltmp110                # DW_AT_low_pc
	.quad	.Ltmp116                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x3a2:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x3b0:0x65 DW_TAG_lexical_block
	.long	.Ldebug_range+608       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x3b5:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	107                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x3c1:0x53 DW_TAG_lexical_block
	.quad	.Ltmp121                # DW_AT_low_pc
	.quad	.Ltmp132                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x3d2:0x41 DW_TAG_lexical_block
	.quad	.Ltmp121                # DW_AT_low_pc
	.quad	.Ltmp132                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x3e3:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	110                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x3ee:0x24 DW_TAG_lexical_block
	.long	.Ldebug_range+560       # DW_AT_ranges
	.byte	7                       # Abbrev [7] 0x3f3:0x1e DW_TAG_lexical_block
	.quad	.Ltmp124                # DW_AT_low_pc
	.quad	.Ltmp130                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x404:0xc DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	114                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x415:0x2a DW_TAG_lexical_block
	.long	.Ldebug_range+752       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x41a:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	142                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x426:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+704       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x42b:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+656       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x430:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	145                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x43f:0x2a DW_TAG_lexical_block
	.long	.Ldebug_range+896       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x444:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	152                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x450:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+848       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x455:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+800       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x45a:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	155                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x469:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+1040      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x46e:0xc DW_TAG_variable
	.long	.Linfo_string68         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	164                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x47a:0x17 DW_TAG_lexical_block
	.long	.Ldebug_range+992       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x47f:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range+944       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x484:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	166                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x492:0x41 DW_TAG_lexical_block
	.long	.Ldebug_range+1312      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x497:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	174                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x4a3:0x2f DW_TAG_lexical_block
	.long	.Ldebug_range+1264      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x4a8:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+1216      # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x4ad:0xb DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	176                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x4b8:0x18 DW_TAG_lexical_block
	.long	.Ldebug_range+1152      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x4bd:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+1104      # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x4c2:0xc DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	179                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x4d4:0xa4 DW_TAG_subprogram
	.long	.Linfo_string10         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	200                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	12                      # Abbrev [12] 0x4f1:0xf DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	202                     # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc52           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x500:0xf DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	203                     # DW_AT_decl_line
	.long	1400                    # DW_AT_type
	.long	.Ldebug_loc54           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x50f:0xf DW_TAG_variable
	.long	.Linfo_string52         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	1416                    # DW_AT_type
	.long	.Ldebug_loc56           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x51e:0xc DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	235                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x52a:0x4d DW_TAG_lexical_block
	.quad	.Ltmp239                # DW_AT_low_pc
	.quad	.Ltmp246                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x53b:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	206                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x547:0x2f DW_TAG_lexical_block
	.quad	.Ltmp241                # DW_AT_low_pc
	.quad	.Ltmp245                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x558:0x1d DW_TAG_lexical_block
	.quad	.Ltmp241                # DW_AT_low_pc
	.quad	.Ltmp245                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x569:0xb DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	14                      # Abbrev [14] 0x578:0x5 DW_TAG_pointer_type
	.long	1405                    # DW_AT_type
	.byte	15                      # Abbrev [15] 0x57d:0xb DW_TAG_typedef
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	13                      # DW_AT_decl_line
	.byte	16                      # Abbrev [16] 0x588:0xb DW_TAG_typedef
	.long	1427                    # DW_AT_type
	.long	.Linfo_string23         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.byte	14                      # Abbrev [14] 0x593:0x5 DW_TAG_pointer_type
	.long	1432                    # DW_AT_type
	.byte	17                      # Abbrev [17] 0x598:0x3f DW_TAG_structure_type
	.long	.Linfo_string22         # DW_AT_name
	.short	280                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	18                      # Abbrev [18] 0x5a1:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x5ae:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x5bb:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	.Lsection_info+1979     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	20                      # Abbrev [20] 0x5c8:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	1495                    # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	21                      # Abbrev [21] 0x5d7:0xc DW_TAG_array_type
	.long	1507                    # DW_AT_type
	.byte	22                      # Abbrev [22] 0x5dc:0x6 DW_TAG_subrange_type
	.long	1549                    # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	16                      # Abbrev [16] 0x5e3:0xb DW_TAG_typedef
	.long	1518                    # DW_AT_type
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.byte	23                      # Abbrev [23] 0x5ee:0x1f DW_TAG_structure_type
	.byte	16                      # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	19                      # Abbrev [19] 0x5f2:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x5ff:0xd DW_TAG_member
	.long	.Linfo_string20         # DW_AT_name
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x60d:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	21                      # Abbrev [21] 0x614:0xb DW_TAG_array_type
	.long	1507                    # DW_AT_type
	.byte	25                      # Abbrev [25] 0x619:0x5 DW_TAG_subrange_type
	.long	1549                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	21                      # Abbrev [21] 0x61f:0xb DW_TAG_array_type
	.long	1405                    # DW_AT_type
	.byte	25                      # Abbrev [25] 0x624:0x5 DW_TAG_subrange_type
	.long	1549                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	21                      # Abbrev [21] 0x62a:0xb DW_TAG_array_type
	.long	1589                    # DW_AT_type
	.byte	25                      # Abbrev [25] 0x62f:0x5 DW_TAG_subrange_type
	.long	1549                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x635:0xb DW_TAG_typedef
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Linfo_string58         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	12                      # DW_AT_decl_line
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	2047                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x7f8 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string11         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	26                      # Abbrev [26] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string13         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	27                      # Abbrev [27] 0x3e:0xed DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	299                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.quad	.Lfunc_end3             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x5c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc58           # DW_AT_location
	.byte	28                      # Abbrev [28] 0x6c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc60           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x7c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string75         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1950                    # DW_AT_type
	.long	.Ldebug_loc62           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x8c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string76         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1951                    # DW_AT_type
	.long	.Ldebug_loc64           # DW_AT_location
	.byte	30                      # Abbrev [30] 0x9c:0x10 DW_TAG_variable
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	350                     # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc66           # DW_AT_location
	.byte	30                      # Abbrev [30] 0xac:0x10 DW_TAG_variable
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	349                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.long	.Ldebug_loc68           # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbc:0x6e DW_TAG_lexical_block
	.quad	.Ltmp283                # DW_AT_low_pc
	.quad	.Ltmp297                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xcd:0x5c DW_TAG_lexical_block
	.quad	.Ltmp284                # DW_AT_low_pc
	.quad	.Ltmp297                # DW_AT_high_pc
	.byte	31                      # Abbrev [31] 0xde:0xd DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0xeb:0x3d DW_TAG_lexical_block
	.quad	.Ltmp285                # DW_AT_low_pc
	.quad	.Ltmp296                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0xfc:0x2b DW_TAG_lexical_block
	.long	.Ldebug_range+1360      # DW_AT_ranges
	.byte	32                      # Abbrev [32] 0x101:0x15 DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	24
	.byte	45
	.byte	68
	.byte	84
	.byte	251
	.byte	33
	.byte	9
	.byte	64
	.byte	30                      # Abbrev [30] 0x116:0x10 DW_TAG_variable
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	367                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc71           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	16                      # Abbrev [16] 0x12b:0xb DW_TAG_typedef
	.long	310                     # DW_AT_type
	.long	.Linfo_string23         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	57                      # DW_AT_decl_line
	.byte	14                      # Abbrev [14] 0x136:0x5 DW_TAG_pointer_type
	.long	315                     # DW_AT_type
	.byte	17                      # Abbrev [17] 0x13b:0x3f DW_TAG_structure_type
	.long	.Linfo_string22         # DW_AT_name
	.short	280                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	19                      # Abbrev [19] 0x144:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x151:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x15e:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	378                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	20                      # Abbrev [20] 0x16b:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	397                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	33                      # Abbrev [33] 0x17a:0xc DW_TAG_array_type
	.long	.Lsection_info+55       # DW_AT_type
	.byte	22                      # Abbrev [22] 0x17f:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	63                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x186:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	21                      # Abbrev [21] 0x18d:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x192:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	16                      # Abbrev [16] 0x199:0xb DW_TAG_typedef
	.long	420                     # DW_AT_type
	.long	.Linfo_string21         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.byte	23                      # Abbrev [23] 0x1a4:0x1f DW_TAG_structure_type
	.byte	16                      # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	18                      # Abbrev [18] 0x1a8:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x1b5:0xd DW_TAG_member
	.long	.Linfo_string20         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	34                      # Abbrev [34] 0x1c3:0x5b DW_TAG_subprogram
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.quad	.Lfunc_end4             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	35                      # Abbrev [35] 0x1dd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\220\001"
	.byte	35                      # Abbrev [35] 0x1ed:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string82         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\360\002"
	.byte	35                      # Abbrev [35] 0x1fd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\350\002"
	.byte	28                      # Abbrev [28] 0x20d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc74           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	34                      # Abbrev [34] 0x21e:0x4b DW_TAG_subprogram
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	35                      # Abbrev [35] 0x238:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\210\001"
	.byte	35                      # Abbrev [35] 0x248:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string82         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\240\001"
	.byte	29                      # Abbrev [29] 0x258:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc76           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	36                      # Abbrev [36] 0x269:0x1a DW_TAG_subprogram
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	400                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	37                      # Abbrev [37] 0x283:0x51 DW_TAG_subprogram
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x2a1:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc78           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x2b1:0x22 DW_TAG_lexical_block
	.quad	.Ltmp377                # DW_AT_low_pc
	.quad	.Ltmp389                # DW_AT_high_pc
	.byte	38                      # Abbrev [38] 0x2c2:0x10 DW_TAG_variable
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	408                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc81           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x2d4:0xc1 DW_TAG_subprogram
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	244                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.quad	.Lfunc_end9             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x2ed:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	1994                    # DW_AT_type
	.long	.Ldebug_loc102          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x2fc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	246                     # DW_AT_decl_line
	.long	1999                    # DW_AT_type
	.long	.Ldebug_loc104          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x30b:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	247                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc106          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x31a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	248                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc108          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x329:0xf DW_TAG_formal_parameter
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	249                     # DW_AT_decl_line
	.long	1989                    # DW_AT_type
	.long	.Ldebug_loc110          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x338:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	250                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc114          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x347:0xf DW_TAG_variable
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	253                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc116          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x356:0xf DW_TAG_variable
	.long	.Linfo_string94         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	254                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.long	.Ldebug_loc118          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x365:0xf DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	255                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc120          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x374:0x10 DW_TAG_variable
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	256                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc122          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x384:0x10 DW_TAG_variable
	.long	.Linfo_string95         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	257                     # DW_AT_decl_line
	.long	1974                    # DW_AT_type
	.long	.Ldebug_loc124          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x395:0xfe DW_TAG_subprogram
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	204                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.quad	.Lfunc_end10            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x3ae:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	205                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc126          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3bd:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	206                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc128          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3cc:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	207                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc130          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x3db:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc132          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x3ea:0xf DW_TAG_formal_parameter
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc134          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x3f9:0xf DW_TAG_variable
	.long	.Linfo_string96         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	215                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc136          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x408:0xf DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc138          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x417:0xc DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	42                      # Abbrev [42] 0x423:0xc DW_TAG_variable
	.long	.Linfo_string99         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	41                      # Abbrev [41] 0x42f:0xf DW_TAG_variable
	.long	.Linfo_string100        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc143          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x43e:0xb DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	10                      # Abbrev [10] 0x449:0xb DW_TAG_variable
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	213                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x454:0xb DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	214                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	7                       # Abbrev [7] 0x45f:0x33 DW_TAG_lexical_block
	.quad	.Ltmp496                # DW_AT_low_pc
	.quad	.Ltmp521                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0x470:0x21 DW_TAG_lexical_block
	.long	.Ldebug_range+1504      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x475:0x1b DW_TAG_lexical_block
	.long	.Ldebug_range+1456      # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x47a:0x15 DW_TAG_lexical_block
	.long	.Ldebug_range+1408      # DW_AT_ranges
	.byte	41                      # Abbrev [41] 0x47f:0xf DW_TAG_variable
	.long	.Linfo_string102        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	229                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc140          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x493:0xce DW_TAG_subprogram
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.quad	.Lfunc_end11            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x4ac:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	137                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc145          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4bb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	138                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc147          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4ca:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	139                     # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc149          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x4d9:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc151          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4e8:0xf DW_TAG_variable
	.long	.Linfo_string103        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc153          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4f7:0xf DW_TAG_variable
	.long	.Linfo_string104        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc156          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x506:0xf DW_TAG_variable
	.long	.Linfo_string105        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc159          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x515:0xf DW_TAG_variable
	.long	.Linfo_string106        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc162          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x524:0xf DW_TAG_variable
	.long	.Linfo_string107        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc165          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x533:0xc DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	144                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	10                      # Abbrev [10] 0x53f:0xb DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	145                     # DW_AT_decl_line
	.long	2014                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x54a:0xb DW_TAG_variable
	.long	.Linfo_string108        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0x555:0xb DW_TAG_variable
	.long	.Linfo_string109        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x561:0xbb DW_TAG_subprogram
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	44                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.quad	.Lfunc_end12            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x57a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	45                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc168          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x589:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc171          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x598:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc173          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x5a7:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc175          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5b6:0xf DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc177          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5c5:0xf DW_TAG_variable
	.long	.Linfo_string110        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc180          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5d4:0xf DW_TAG_variable
	.long	.Linfo_string111        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc182          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5e3:0xf DW_TAG_variable
	.long	.Linfo_string112        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc184          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5f2:0xf DW_TAG_variable
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc187          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x601:0xf DW_TAG_variable
	.long	.Linfo_string114        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc190          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x610:0xb DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.long	2026                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x61c:0xa8 DW_TAG_subprogram
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	92                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin13          # DW_AT_low_pc
	.quad	.Lfunc_end13            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x635:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc193          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x644:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc196          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x653:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc198          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x662:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc200          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x671:0xf DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	1956                    # DW_AT_type
	.long	.Ldebug_loc202          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x680:0xf DW_TAG_variable
	.long	.Linfo_string110        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc205          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x68f:0xf DW_TAG_variable
	.long	.Linfo_string113        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc207          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x69e:0xf DW_TAG_variable
	.long	.Linfo_string112        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc210          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x6ad:0xb DW_TAG_variable
	.long	.Linfo_string97         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	2038                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x6b8:0xb DW_TAG_variable
	.long	.Linfo_string115        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	39                      # Abbrev [39] 0x6c4:0x7f DW_TAG_subprogram
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	21                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin14          # DW_AT_low_pc
	.quad	.Lfunc_end14            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x6dd:0xf DW_TAG_formal_parameter
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	22                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc213          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6ec:0xf DW_TAG_formal_parameter
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	2004                    # DW_AT_type
	.long	.Ldebug_loc216          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6fb:0xf DW_TAG_formal_parameter
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	2009                    # DW_AT_type
	.long	.Ldebug_loc218          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x70a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	25                      # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc220          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x719:0xf DW_TAG_variable
	.long	.Linfo_string112        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc223          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x728:0xf DW_TAG_variable
	.long	.Linfo_string105        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1984                    # DW_AT_type
	.long	.Ldebug_loc226          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x737:0xb DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	44                      # Abbrev [44] 0x743:0x5b DW_TAG_subprogram
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.quad	.Lfunc_end8             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x75d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc91           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x76d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	1989                    # DW_AT_type
	.long	.Ldebug_loc86           # DW_AT_location
	.byte	38                      # Abbrev [38] 0x77d:0x10 DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	319                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc95           # DW_AT_location
	.byte	30                      # Abbrev [30] 0x78d:0x10 DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	320                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc100          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	45                      # Abbrev [45] 0x79e:0x1 DW_TAG_pointer_type
	.byte	14                      # Abbrev [14] 0x79f:0x5 DW_TAG_pointer_type
	.long	1956                    # DW_AT_type
	.byte	16                      # Abbrev [16] 0x7a4:0xb DW_TAG_typedef
	.long	1967                    # DW_AT_type
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	42                      # DW_AT_decl_line
	.byte	4                       # Abbrev [4] 0x7af:0x7 DW_TAG_base_type
	.long	.Linfo_string77         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	14                      # Abbrev [14] 0x7b6:0x5 DW_TAG_pointer_type
	.long	1979                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7bb:0x5 DW_TAG_const_type
	.long	409                     # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7c0:0x5 DW_TAG_pointer_type
	.long	409                     # DW_AT_type
	.byte	46                      # Abbrev [46] 0x7c5:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+55       # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7ca:0x5 DW_TAG_pointer_type
	.long	1984                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7cf:0x5 DW_TAG_pointer_type
	.long	1974                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7d4:0x5 DW_TAG_const_type
	.long	1956                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7d9:0x5 DW_TAG_const_type
	.long	299                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0x7de:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x7e3:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	12                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	21                      # Abbrev [21] 0x7ea:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x7ef:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	5                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	21                      # Abbrev [21] 0x7f6:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	22                      # Abbrev [22] 0x7fb:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	4                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
.L.debug_info_end1:
.L.debug_info_begin2:
	.long	1362                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x54b DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string35         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	47                      # Abbrev [47] 0x26:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.long	.Lsection_info+1651     # DW_AT_type
	.byte	5                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.byte	48                      # Abbrev [48] 0x31:0x87 DW_TAG_subprogram
	.long	.Linfo_string37         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1656     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin15          # DW_AT_low_pc
	.quad	.Lfunc_end15            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	40                      # Abbrev [40] 0x4e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string116        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc229          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x5d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	11                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc231          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x6c:0xf DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	71                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc233          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x7b:0xf DW_TAG_variable
	.long	.Linfo_string19         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	72                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc236          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x8a:0xf DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	74                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc240          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x99:0xf DW_TAG_variable
	.long	.Linfo_string118        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	73                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc243          # DW_AT_location
	.byte	41                      # Abbrev [41] 0xa8:0xf DW_TAG_variable
	.long	.Linfo_string98         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc245          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	49                      # Abbrev [49] 0xb8:0x32 DW_TAG_subprogram
	.long	.Linfo_string38         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin18          # DW_AT_low_pc
	.quad	.Lfunc_end18            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	50                      # Abbrev [50] 0xd5:0x14 DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
	.long	.Lsection_info+1651     # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	0
	.byte	176
	.byte	60
	.byte	0                       # End Of Children Mark
	.byte	48                      # Abbrev [48] 0xea:0x47 DW_TAG_subprogram
	.long	.Linfo_string39         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1656     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin16          # DW_AT_low_pc
	.quad	.Lfunc_end16            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	40                      # Abbrev [40] 0x107:0xf DW_TAG_formal_parameter
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc250          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x116:0xf DW_TAG_formal_parameter
	.long	.Linfo_string120        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc247          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x125:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	170                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	48                      # Abbrev [48] 0x131:0x47 DW_TAG_subprogram
	.long	.Linfo_string40         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1656     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin17          # DW_AT_low_pc
	.quad	.Lfunc_end17            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	40                      # Abbrev [40] 0x14e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc256          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x15d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string120        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	184                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc253          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x16c:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	211                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	48                      # Abbrev [48] 0x178:0x38 DW_TAG_subprogram
	.long	.Linfo_string41         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+1656     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin19          # DW_AT_low_pc
	.quad	.Lfunc_end19            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	40                      # Abbrev [40] 0x195:0xf DW_TAG_formal_parameter
	.long	.Linfo_string119        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	225                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc259          # DW_AT_location
	.byte	43                      # Abbrev [43] 0x1a4:0xb DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.byte	252                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	37                      # Abbrev [37] 0x1b0:0x9b DW_TAG_subprogram
	.long	.Linfo_string42         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin20          # DW_AT_low_pc
	.quad	.Lfunc_end20            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x1ce:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc274          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x1de:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string116        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc271          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x1ee:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string121        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc268          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x1fe:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string122        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1340                    # DW_AT_type
	.long	.Ldebug_loc262          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x20e:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string124        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	267                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc265          # DW_AT_location
	.byte	30                      # Abbrev [30] 0x21e:0x10 DW_TAG_variable
	.long	.Linfo_string125        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	335                     # DW_AT_decl_line
	.long	1347                    # DW_AT_type
	.long	.Ldebug_loc277          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x22e:0x10 DW_TAG_variable
	.long	.Linfo_string126        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	336                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc279          # DW_AT_location
	.byte	51                      # Abbrev [51] 0x23e:0xc DW_TAG_variable
	.long	.Linfo_string127        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	334                     # DW_AT_decl_line
	.long	1347                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	37                      # Abbrev [37] 0x24b:0x158 DW_TAG_subprogram
	.long	.Linfo_string43         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin22          # DW_AT_low_pc
	.quad	.Lfunc_end22            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x269:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc316          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x279:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string128        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc318          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x289:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string130        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc320          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x299:0x10 DW_TAG_variable
	.long	.Linfo_string117        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	434                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc322          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2a9:0x10 DW_TAG_variable
	.long	.Linfo_string135        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	435                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc325          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2b9:0x10 DW_TAG_variable
	.long	.Linfo_string126        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	440                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc328          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2c9:0x10 DW_TAG_variable
	.long	.Linfo_string91         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	436                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc331          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2d9:0x10 DW_TAG_variable
	.long	.Linfo_string101        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	450                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc334          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2e9:0x10 DW_TAG_variable
	.long	.Linfo_string131        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	443                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc337          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x2f9:0x10 DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	442                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc340          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x309:0x10 DW_TAG_variable
	.long	.Linfo_string132        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	438                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc343          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x319:0x10 DW_TAG_variable
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	445                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc348          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x329:0x10 DW_TAG_variable
	.long	.Linfo_string118        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	449                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc351          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x339:0x10 DW_TAG_variable
	.long	.Linfo_string134        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	437                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc355          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x349:0x10 DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	447                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc361          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x359:0x10 DW_TAG_variable
	.long	.Linfo_string19         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	448                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc365          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x369:0x10 DW_TAG_variable
	.long	.Linfo_string136        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	446                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc368          # DW_AT_location
	.byte	31                      # Abbrev [31] 0x379:0xd DW_TAG_variable
	.long	.Linfo_string137        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	441                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	38                      # Abbrev [38] 0x386:0x10 DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	439                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc370          # DW_AT_location
	.byte	52                      # Abbrev [52] 0x396:0xc DW_TAG_variable
	.long	.Linfo_string138        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	444                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	34                      # Abbrev [34] 0x3a3:0xb0 DW_TAG_subprogram
	.long	.Linfo_string44         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin23          # DW_AT_low_pc
	.quad	.Lfunc_end23            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x3bd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc374          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x3cd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string116        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc376          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x3dd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string129        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc378          # DW_AT_location
	.byte	28                      # Abbrev [28] 0x3ed:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string86         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc380          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x3fd:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string124        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	592                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc382          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x40d:0x10 DW_TAG_variable
	.long	.Linfo_string118        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	659                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc384          # DW_AT_location
	.byte	31                      # Abbrev [31] 0x41d:0xd DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	657                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	38                      # Abbrev [38] 0x42a:0x10 DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	655                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc387          # DW_AT_location
	.byte	52                      # Abbrev [52] 0x43a:0xc DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	656                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	52                      # Abbrev [52] 0x446:0xc DW_TAG_variable
	.long	.Linfo_string131        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	658                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	34                      # Abbrev [34] 0x453:0xe4 DW_TAG_subprogram
	.long	.Linfo_string45         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin21          # DW_AT_low_pc
	.quad	.Lfunc_end21            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	28                      # Abbrev [28] 0x46d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string85         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc282          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x47d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string116        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc284          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x48d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string128        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc286          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x49d:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string129        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc288          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x4ad:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string130        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	699                     # DW_AT_decl_line
	.long	1335                    # DW_AT_type
	.long	.Ldebug_loc290          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x4bd:0x10 DW_TAG_variable
	.long	.Linfo_string51         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	773                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc292          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x4cd:0x10 DW_TAG_variable
	.long	.Linfo_string131        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	775                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc295          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x4dd:0x10 DW_TAG_variable
	.long	.Linfo_string132        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	770                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc297          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x4ed:0x10 DW_TAG_variable
	.long	.Linfo_string133        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	776                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc302          # DW_AT_location
	.byte	31                      # Abbrev [31] 0x4fd:0xd DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	774                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	38                      # Abbrev [38] 0x50a:0x10 DW_TAG_variable
	.long	.Linfo_string91         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	768                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc305          # DW_AT_location
	.byte	38                      # Abbrev [38] 0x51a:0x10 DW_TAG_variable
	.long	.Linfo_string134        # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	769                     # DW_AT_decl_line
	.long	.Lsection_info+1656     # DW_AT_type
	.long	.Ldebug_loc311          # DW_AT_location
	.byte	52                      # Abbrev [52] 0x52a:0xc DW_TAG_variable
	.long	.Linfo_string20         # DW_AT_name
	.byte	5                       # DW_AT_decl_file
	.short	771                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	46                      # Abbrev [46] 0x537:0x5 DW_TAG_pointer_type
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	4                       # Abbrev [4] 0x53c:0x7 DW_TAG_base_type
	.long	.Linfo_string123        # DW_AT_name
	.byte	2                       # DW_AT_encoding
	.byte	1                       # DW_AT_byte_size
	.byte	33                      # Abbrev [33] 0x543:0xb DW_TAG_array_type
	.long	.Lsection_info+1656     # DW_AT_type
	.byte	25                      # Abbrev [25] 0x548:0x5 DW_TAG_subrange_type
	.long	1358                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	24                      # Abbrev [24] 0x54e:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	0                       # End Of Children Mark
.L.debug_info_end2:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	85                      # DW_AT_ranges
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	5                       # DW_FORM_data2
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	5                       # DW_FORM_data2
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	47                      # DW_AT_upper_bound
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	25                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	26                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	27                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	28                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	29                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	30                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	31                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	32                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	33                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	34                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	35                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	36                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	37                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	38                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	39                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	40                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	41                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	42                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	43                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	44                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	45                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	46                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	47                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	48                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	49                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	50                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	51                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	52                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset0 = .Ltmp1189-.Ltmp1188            # Loc expr size
	.short	.Lset0
.Ltmp1188:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\016"
.Ltmp1189:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset1 = .Ltmp1191-.Ltmp1190            # Loc expr size
	.short	.Lset1
.Ltmp1190:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\016"
.Ltmp1191:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp1193-.Ltmp1192            # Loc expr size
	.short	.Lset2
.Ltmp1192:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\016"
.Ltmp1193:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset3 = .Ltmp1195-.Ltmp1194            # Loc expr size
	.short	.Lset3
.Ltmp1194:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\017"
.Ltmp1195:
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin1
	.quad	.Ltmp52
.Lset4 = .Ltmp1197-.Ltmp1196            # Loc expr size
	.short	.Lset4
.Ltmp1196:
	.byte	85                      # DW_OP_reg5
.Ltmp1197:
	.quad	.Ltmp52
	.quad	.Ltmp56
.Lset5 = .Ltmp1199-.Ltmp1198            # Loc expr size
	.short	.Lset5
.Ltmp1198:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"
.Ltmp1199:
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin1
	.quad	.Ltmp53
.Lset6 = .Ltmp1201-.Ltmp1200            # Loc expr size
	.short	.Lset6
.Ltmp1200:
	.byte	84                      # DW_OP_reg4
.Ltmp1201:
	.quad	.Ltmp53
	.quad	.Ltmp56
.Lset7 = .Ltmp1203-.Ltmp1202            # Loc expr size
	.short	.Lset7
.Ltmp1202:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"
.Ltmp1203:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin1
	.quad	.Ltmp51
.Lset8 = .Ltmp1205-.Ltmp1204            # Loc expr size
	.short	.Lset8
.Ltmp1204:
	.byte	81                      # DW_OP_reg1
.Ltmp1205:
	.quad	.Ltmp51
	.quad	.Ltmp56
.Lset9 = .Ltmp1207-.Ltmp1206            # Loc expr size
	.short	.Lset9
.Ltmp1206:
	.byte	118                     # DW_OP_breg6
	.ascii	"\370~"
.Ltmp1207:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Lfunc_begin1
	.quad	.Ltmp49
.Lset10 = .Ltmp1209-.Ltmp1208           # Loc expr size
	.short	.Lset10
.Ltmp1208:
	.byte	82                      # DW_OP_reg2
.Ltmp1209:
	.quad	.Ltmp49
	.quad	.Ltmp56
.Lset11 = .Ltmp1211-.Ltmp1210           # Loc expr size
	.short	.Lset11
.Ltmp1210:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274\177"
.Ltmp1211:
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Lfunc_begin1
	.quad	.Ltmp54
.Lset12 = .Ltmp1213-.Ltmp1212           # Loc expr size
	.short	.Lset12
.Ltmp1212:
	.byte	88                      # DW_OP_reg8
.Ltmp1213:
	.quad	.Ltmp54
	.quad	.Ltmp56
.Lset13 = .Ltmp1215-.Ltmp1214           # Loc expr size
	.short	.Lset13
.Ltmp1214:
	.byte	118                     # DW_OP_breg6
	.ascii	"\300~"
.Ltmp1215:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp55
	.quad	.Ltmp56
.Lset14 = .Ltmp1217-.Ltmp1216           # Loc expr size
	.short	.Lset14
.Ltmp1216:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340|"
	.byte	6
.Ltmp1217:
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp72
	.quad	.Ltmp58
.Lset15 = .Ltmp1219-.Ltmp1218           # Loc expr size
	.short	.Lset15
.Ltmp1218:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200i"
	.byte	6
.Ltmp1219:
	.quad	.Ltmp73
	.quad	.Ltmp74
.Lset16 = .Ltmp1221-.Ltmp1220           # Loc expr size
	.short	.Lset16
.Ltmp1220:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200i"
	.byte	6
.Ltmp1221:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp86
	.quad	.Ltmp82
.Lset17 = .Ltmp1223-.Ltmp1222           # Loc expr size
	.short	.Lset17
.Ltmp1222:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270X"
	.byte	6
.Ltmp1223:
	.quad	.Ltmp86
	.quad	.Ltmp84
.Lset18 = .Ltmp1225-.Ltmp1224           # Loc expr size
	.short	.Lset18
.Ltmp1224:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270X"
	.byte	6
.Ltmp1225:
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp100
	.quad	.Ltmp101
.Lset19 = .Ltmp1227-.Ltmp1226           # Loc expr size
	.short	.Lset19
.Ltmp1226:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360J"
.Ltmp1227:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp118
	.quad	.Ltmp105
.Lset20 = .Ltmp1229-.Ltmp1228           # Loc expr size
	.short	.Lset20
.Ltmp1228:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\267\177"
	.byte	6
.Ltmp1229:
	.quad	.Ltmp118
	.quad	.Ltmp107
.Lset21 = .Ltmp1231-.Ltmp1230           # Loc expr size
	.short	.Lset21
.Ltmp1230:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270\267\177"
	.byte	6
.Ltmp1231:
	.quad	0
	.quad	0
.Ldebug_loc36:
	.quad	.Ltmp134
	.quad	.Ltmp109
.Lset22 = .Ltmp1233-.Ltmp1232           # Loc expr size
	.short	.Lset22
.Ltmp1232:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310\247\177"
	.byte	6
.Ltmp1233:
	.quad	.Ltmp134
	.quad	.Ltmp120
.Lset23 = .Ltmp1235-.Ltmp1234           # Loc expr size
	.short	.Lset23
.Ltmp1234:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310\247\177"
	.byte	6
.Ltmp1235:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Ltmp135
	.quad	.Ltmp136
.Lset24 = .Ltmp1237-.Ltmp1236           # Loc expr size
	.short	.Lset24
.Ltmp1236:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310\245\177"
	.byte	6
.Ltmp1237:
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Ltmp188
	.quad	.Ltmp138
.Lset25 = .Ltmp1239-.Ltmp1238           # Loc expr size
	.short	.Lset25
.Ltmp1238:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244\374~"
.Ltmp1239:
	.quad	.Ltmp188
	.quad	.Ltmp156
.Lset26 = .Ltmp1241-.Ltmp1240           # Loc expr size
	.short	.Lset26
.Ltmp1240:
	.byte	118                     # DW_OP_breg6
	.ascii	"\244\374~"
.Ltmp1241:
	.quad	0
	.quad	0
.Ldebug_loc44:
	.quad	.Ltmp189
	.quad	.Ltmp174
.Lset27 = .Ltmp1243-.Ltmp1242           # Loc expr size
	.short	.Lset27
.Ltmp1242:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\374~"
	.byte	6
.Ltmp1243:
	.quad	.Ltmp189
	.quad	.Ltmp176
.Lset28 = .Ltmp1245-.Ltmp1244           # Loc expr size
	.short	.Lset28
.Ltmp1244:
	.byte	118                     # DW_OP_breg6
	.ascii	"\230\374~"
	.byte	6
.Ltmp1245:
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Ltmp211
	.quad	.Ltmp178
.Lset29 = .Ltmp1247-.Ltmp1246           # Loc expr size
	.short	.Lset29
.Ltmp1246:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360\350~"
	.byte	6
.Ltmp1247:
	.quad	.Ltmp211
	.quad	.Ltmp191
.Lset30 = .Ltmp1249-.Ltmp1248           # Loc expr size
	.short	.Lset30
.Ltmp1248:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360\350~"
	.byte	6
.Ltmp1249:
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Ltmp212
	.quad	.Ltmp213
.Lset31 = .Ltmp1251-.Ltmp1250           # Loc expr size
	.short	.Lset31
.Ltmp1250:
	.byte	118                     # DW_OP_breg6
	.ascii	"\330\346~"
	.byte	6
.Ltmp1251:
	.quad	0
	.quad	0
.Ldebug_loc52:
	.quad	.Ltmp237
	.quad	.Ltmp238
.Lset32 = .Ltmp1253-.Ltmp1252           # Loc expr size
	.short	.Lset32
.Ltmp1252:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\017"
.Ltmp1253:
	.quad	0
	.quad	0
.Ldebug_loc54:
	.quad	.Ltmp239
	.quad	.Ltmp240
.Lset33 = .Ltmp1255-.Ltmp1254           # Loc expr size
	.short	.Lset33
.Ltmp1254:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\016"
.Ltmp1255:
	.quad	0
	.quad	0
.Ldebug_loc56:
	.quad	.Ltmp247
	.quad	.Ltmp248
.Lset34 = .Ltmp1257-.Ltmp1256           # Loc expr size
	.short	.Lset34
.Ltmp1256:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp1257:
	.quad	0
	.quad	0
.Ldebug_loc58:
	.quad	.Lfunc_begin3
	.quad	.Ltmp275
.Lset35 = .Ltmp1259-.Ltmp1258           # Loc expr size
	.short	.Lset35
.Ltmp1258:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\027"
.Ltmp1259:
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Lfunc_begin3
	.quad	.Ltmp275
.Lset36 = .Ltmp1261-.Ltmp1260           # Loc expr size
	.short	.Lset36
.Ltmp1260:
	.byte	119                     # DW_OP_breg7
	.ascii	"\334\030"
.Ltmp1261:
	.quad	0
	.quad	0
.Ldebug_loc62:
	.quad	.Lfunc_begin3
	.quad	.Ltmp275
.Lset37 = .Ltmp1263-.Ltmp1262           # Loc expr size
	.short	.Lset37
.Ltmp1262:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\027"
.Ltmp1263:
	.quad	0
	.quad	0
.Ldebug_loc64:
	.quad	.Lfunc_begin3
	.quad	.Ltmp275
.Lset38 = .Ltmp1265-.Ltmp1264           # Loc expr size
	.short	.Lset38
.Ltmp1264:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\027"
.Ltmp1265:
	.quad	0
	.quad	0
.Ldebug_loc66:
	.quad	.Ltmp274
	.quad	.Ltmp275
.Lset39 = .Ltmp1267-.Ltmp1266           # Loc expr size
	.short	.Lset39
.Ltmp1266:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\026"
.Ltmp1267:
	.quad	0
	.quad	0
.Ldebug_loc68:
	.quad	.Ltmp277
	.quad	.Ltmp278
.Lset40 = .Ltmp1269-.Ltmp1268           # Loc expr size
	.short	.Lset40
.Ltmp1268:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\024"
.Ltmp1269:
	.quad	.Ltmp280
	.quad	.Ltmp281
.Lset41 = .Ltmp1271-.Ltmp1270           # Loc expr size
	.short	.Lset41
.Ltmp1270:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\020"
.Ltmp1271:
	.quad	0
	.quad	0
.Ldebug_loc71:
	.quad	.Ltmp290
	.quad	.Ltmp291
.Lset42 = .Ltmp1273-.Ltmp1272           # Loc expr size
	.short	.Lset42
.Ltmp1272:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\007"
.Ltmp1273:
	.quad	.Ltmp292
	.quad	.Ltmp293
.Lset43 = .Ltmp1275-.Ltmp1274           # Loc expr size
	.short	.Lset43
.Ltmp1274:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\005"
.Ltmp1275:
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Lfunc_begin4
	.quad	.Ltmp323
.Lset44 = .Ltmp1277-.Ltmp1276           # Loc expr size
	.short	.Lset44
.Ltmp1276:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\001"
.Ltmp1277:
	.quad	0
	.quad	0
.Ldebug_loc76:
	.quad	.Lfunc_begin5
	.quad	.Ltmp347
.Lset45 = .Ltmp1279-.Ltmp1278           # Loc expr size
	.short	.Lset45
.Ltmp1278:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp1279:
	.quad	0
	.quad	0
.Ldebug_loc78:
	.quad	.Lfunc_begin7
	.quad	.Ltmp376
.Lset46 = .Ltmp1281-.Ltmp1280           # Loc expr size
	.short	.Lset46
.Ltmp1280:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\016"
.Ltmp1281:
	.quad	.Ltmp388
	.quad	.Ltmp389
.Lset47 = .Ltmp1283-.Ltmp1282           # Loc expr size
	.short	.Lset47
.Ltmp1282:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp1283:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Ltmp378
	.quad	.Ltmp379
.Lset48 = .Ltmp1285-.Ltmp1284           # Loc expr size
	.short	.Lset48
.Ltmp1284:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\f"
.Ltmp1285:
	.quad	.Ltmp380
	.quad	.Ltmp381
.Lset49 = .Ltmp1287-.Ltmp1286           # Loc expr size
	.short	.Lset49
.Ltmp1286:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\t"
.Ltmp1287:
	.quad	.Ltmp382
	.quad	.Ltmp383
.Lset50 = .Ltmp1289-.Ltmp1288           # Loc expr size
	.short	.Lset50
.Ltmp1288:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\006"
.Ltmp1289:
	.quad	.Ltmp384
	.quad	.Ltmp385
.Lset51 = .Ltmp1291-.Ltmp1290           # Loc expr size
	.short	.Lset51
.Ltmp1290:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp1291:
	.quad	0
	.quad	0
.Ldebug_loc86:
	.quad	.Lfunc_begin8
	.quad	.Ltmp413
.Lset52 = .Ltmp1293-.Ltmp1292           # Loc expr size
	.short	.Lset52
.Ltmp1292:
	.byte	84                      # DW_OP_reg4
.Ltmp1293:
	.quad	.Ltmp413
	.quad	.Ltmp418
.Lset53 = .Ltmp1295-.Ltmp1294           # Loc expr size
	.short	.Lset53
.Ltmp1294:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\013"
.Ltmp1295:
	.quad	.Ltmp429
	.quad	.Ltmp430
.Lset54 = .Ltmp1297-.Ltmp1296           # Loc expr size
	.short	.Lset54
.Ltmp1296:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1297:
	.quad	.Ltmp430
	.quad	.Ltmp431
.Lset55 = .Ltmp1299-.Ltmp1298           # Loc expr size
	.short	.Lset55
.Ltmp1298:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1299:
	.quad	0
	.quad	0
.Ldebug_loc91:
	.quad	.Lfunc_begin8
	.quad	.Ltmp414
.Lset56 = .Ltmp1301-.Ltmp1300           # Loc expr size
	.short	.Lset56
.Ltmp1300:
	.byte	85                      # DW_OP_reg5
.Ltmp1301:
	.quad	.Ltmp414
	.quad	.Ltmp415
.Lset57 = .Ltmp1303-.Ltmp1302           # Loc expr size
	.short	.Lset57
.Ltmp1302:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\013"
.Ltmp1303:
	.quad	.Ltmp428
	.quad	.Ltmp431
.Lset58 = .Ltmp1305-.Ltmp1304           # Loc expr size
	.short	.Lset58
.Ltmp1304:
	.byte	119                     # DW_OP_breg7
	.byte	36
.Ltmp1305:
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Ltmp416
	.quad	.Ltmp422
.Lset59 = .Ltmp1307-.Ltmp1306           # Loc expr size
	.short	.Lset59
.Ltmp1306:
	.byte	16                      # DW_OP_constu
	.byte	3
.Ltmp1307:
	.quad	.Ltmp422
	.quad	.Ltmp423
.Lset60 = .Ltmp1309-.Ltmp1308           # Loc expr size
	.short	.Lset60
.Ltmp1308:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\005"
.Ltmp1309:
	.quad	.Ltmp425
	.quad	.Ltmp427
.Lset61 = .Ltmp1311-.Ltmp1310           # Loc expr size
	.short	.Lset61
.Ltmp1310:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244\n"
.Ltmp1311:
	.quad	0
	.quad	0
.Ldebug_loc100:
	.quad	.Ltmp417
	.quad	.Ltmp418
.Lset62 = .Ltmp1313-.Ltmp1312           # Loc expr size
	.short	.Lset62
.Ltmp1312:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\n"
.Ltmp1313:
	.quad	0
	.quad	0
.Ldebug_loc102:
	.quad	.Lfunc_begin9
	.quad	.Ltmp462
.Lset63 = .Ltmp1315-.Ltmp1314           # Loc expr size
	.short	.Lset63
.Ltmp1314:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\027"
.Ltmp1315:
	.quad	0
	.quad	0
.Ldebug_loc104:
	.quad	.Lfunc_begin9
	.quad	.Ltmp462
.Lset64 = .Ltmp1317-.Ltmp1316           # Loc expr size
	.short	.Lset64
.Ltmp1316:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\027"
.Ltmp1317:
	.quad	0
	.quad	0
.Ldebug_loc106:
	.quad	.Lfunc_begin9
	.quad	.Ltmp462
.Lset65 = .Ltmp1319-.Ltmp1318           # Loc expr size
	.short	.Lset65
.Ltmp1318:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\027"
.Ltmp1319:
	.quad	0
	.quad	0
.Ldebug_loc108:
	.quad	.Lfunc_begin9
	.quad	.Ltmp462
.Lset66 = .Ltmp1321-.Ltmp1320           # Loc expr size
	.short	.Lset66
.Ltmp1320:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\031"
.Ltmp1321:
	.quad	0
	.quad	0
.Ldebug_loc110:
	.quad	.Lfunc_begin9
	.quad	.Ltmp457
.Lset67 = .Ltmp1323-.Ltmp1322           # Loc expr size
	.short	.Lset67
.Ltmp1322:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\026"
.Ltmp1323:
	.quad	.Ltmp457
	.quad	.Ltmp459
.Lset68 = .Ltmp1325-.Ltmp1324           # Loc expr size
	.short	.Lset68
.Ltmp1324:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\026"
.Ltmp1325:
	.quad	.Ltmp459
	.quad	.Ltmp462
.Lset69 = .Ltmp1327-.Ltmp1326           # Loc expr size
	.short	.Lset69
.Ltmp1326:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\026"
.Ltmp1327:
	.quad	0
	.quad	0
.Ldebug_loc114:
	.quad	.Lfunc_begin9
	.quad	.Ltmp462
.Lset70 = .Ltmp1329-.Ltmp1328           # Loc expr size
	.short	.Lset70
.Ltmp1328:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\026"
.Ltmp1329:
	.quad	0
	.quad	0
.Ldebug_loc116:
	.quad	.Ltmp455
	.quad	.Ltmp462
.Lset71 = .Ltmp1331-.Ltmp1330           # Loc expr size
	.short	.Lset71
.Ltmp1330:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\026"
.Ltmp1331:
	.quad	0
	.quad	0
.Ldebug_loc118:
	.quad	.Ltmp456
	.quad	.Ltmp462
.Lset72 = .Ltmp1333-.Ltmp1332           # Loc expr size
	.short	.Lset72
.Ltmp1332:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\026"
.Ltmp1333:
	.quad	0
	.quad	0
.Ldebug_loc120:
	.quad	.Ltmp458
	.quad	.Ltmp462
.Lset73 = .Ltmp1335-.Ltmp1334           # Loc expr size
	.short	.Lset73
.Ltmp1334:
	.byte	119                     # DW_OP_breg7
	.ascii	"\224\026"
.Ltmp1335:
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Ltmp460
	.quad	.Ltmp462
.Lset74 = .Ltmp1337-.Ltmp1336           # Loc expr size
	.short	.Lset74
.Ltmp1336:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\026"
.Ltmp1337:
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Ltmp461
	.quad	.Ltmp462
.Lset75 = .Ltmp1339-.Ltmp1338           # Loc expr size
	.short	.Lset75
.Ltmp1338:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\025"
.Ltmp1339:
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Lfunc_begin10
	.quad	.Ltmp497
.Lset76 = .Ltmp1341-.Ltmp1340           # Loc expr size
	.short	.Lset76
.Ltmp1340:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\031"
.Ltmp1341:
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Lfunc_begin10
	.quad	.Ltmp497
.Lset77 = .Ltmp1343-.Ltmp1342           # Loc expr size
	.short	.Lset77
.Ltmp1342:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\031"
.Ltmp1343:
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Lfunc_begin10
	.quad	.Ltmp497
.Lset78 = .Ltmp1345-.Ltmp1344           # Loc expr size
	.short	.Lset78
.Ltmp1344:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\031"
.Ltmp1345:
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Lfunc_begin10
	.quad	.Ltmp497
.Lset79 = .Ltmp1347-.Ltmp1346           # Loc expr size
	.short	.Lset79
.Ltmp1346:
	.byte	119                     # DW_OP_breg7
	.ascii	"\334\032"
.Ltmp1347:
	.quad	0
	.quad	0
.Ldebug_loc134:
	.quad	.Lfunc_begin10
	.quad	.Ltmp497
.Lset80 = .Ltmp1349-.Ltmp1348           # Loc expr size
	.short	.Lset80
.Ltmp1348:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\031"
.Ltmp1349:
	.quad	0
	.quad	0
.Ldebug_loc136:
	.quad	.Ltmp494
	.quad	.Ltmp495
.Lset81 = .Ltmp1351-.Ltmp1350           # Loc expr size
	.short	.Lset81
.Ltmp1350:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\030"
.Ltmp1351:
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Ltmp496
	.quad	.Ltmp497
.Lset82 = .Ltmp1353-.Ltmp1352           # Loc expr size
	.short	.Lset82
.Ltmp1352:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\026"
.Ltmp1353:
	.quad	0
	.quad	0
.Ldebug_loc140:
	.quad	.Ltmp508
	.quad	.Ltmp514
.Lset83 = .Ltmp1355-.Ltmp1354           # Loc expr size
	.short	.Lset83
.Ltmp1354:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1355:
	.quad	.Ltmp514
	.quad	.Ltmp518
.Lset84 = .Ltmp1357-.Ltmp1356           # Loc expr size
	.short	.Lset84
.Ltmp1356:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\005"
.Ltmp1357:
	.quad	0
	.quad	0
.Ldebug_loc143:
	.quad	.Ltmp519
	.quad	.Ltmp520
.Lset85 = .Ltmp1359-.Ltmp1358           # Loc expr size
	.short	.Lset85
.Ltmp1358:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp1359:
	.quad	0
	.quad	0
.Ldebug_loc145:
	.quad	.Lfunc_begin11
	.quad	.Ltmp546
.Lset86 = .Ltmp1361-.Ltmp1360           # Loc expr size
	.short	.Lset86
.Ltmp1360:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\034"
.Ltmp1361:
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Lfunc_begin11
	.quad	.Ltmp546
.Lset87 = .Ltmp1363-.Ltmp1362           # Loc expr size
	.short	.Lset87
.Ltmp1362:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\034"
.Ltmp1363:
	.quad	0
	.quad	0
.Ldebug_loc149:
	.quad	.Lfunc_begin11
	.quad	.Ltmp546
.Lset88 = .Ltmp1365-.Ltmp1364           # Loc expr size
	.short	.Lset88
.Ltmp1364:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\034"
.Ltmp1365:
	.quad	0
	.quad	0
.Ldebug_loc151:
	.quad	.Lfunc_begin11
	.quad	.Ltmp546
.Lset89 = .Ltmp1367-.Ltmp1366           # Loc expr size
	.short	.Lset89
.Ltmp1366:
	.byte	119                     # DW_OP_breg7
	.ascii	"\374\036"
.Ltmp1367:
	.quad	0
	.quad	0
.Ldebug_loc153:
	.quad	.Ltmp545
	.quad	.Ltmp546
.Lset90 = .Ltmp1369-.Ltmp1368           # Loc expr size
	.short	.Lset90
.Ltmp1368:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\034"
.Ltmp1369:
	.quad	.Ltmp569
	.quad	.Ltmp574
.Lset91 = .Ltmp1371-.Ltmp1370           # Loc expr size
	.short	.Lset91
.Ltmp1370:
	.byte	119                     # DW_OP_breg7
	.asciz	"\300"
.Ltmp1371:
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Ltmp551
	.quad	.Ltmp546
.Lset92 = .Ltmp1373-.Ltmp1372           # Loc expr size
	.short	.Lset92
.Ltmp1372:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\030"
.Ltmp1373:
	.quad	.Ltmp570
	.quad	.Ltmp574
.Lset93 = .Ltmp1375-.Ltmp1374           # Loc expr size
	.short	.Lset93
.Ltmp1374:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp1375:
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Ltmp549
	.quad	.Ltmp546
.Lset94 = .Ltmp1377-.Ltmp1376           # Loc expr size
	.short	.Lset94
.Ltmp1376:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\030"
.Ltmp1377:
	.quad	.Ltmp571
	.quad	.Ltmp574
.Lset95 = .Ltmp1379-.Ltmp1378           # Loc expr size
	.short	.Lset95
.Ltmp1378:
	.byte	119                     # DW_OP_breg7
	.byte	48
.Ltmp1379:
	.quad	0
	.quad	0
.Ldebug_loc162:
	.quad	.Ltmp548
	.quad	.Ltmp546
.Lset96 = .Ltmp1381-.Ltmp1380           # Loc expr size
	.short	.Lset96
.Ltmp1380:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\030"
.Ltmp1381:
	.quad	.Ltmp572
	.quad	.Ltmp574
.Lset97 = .Ltmp1383-.Ltmp1382           # Loc expr size
	.short	.Lset97
.Ltmp1382:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp1383:
	.quad	0
	.quad	0
.Ldebug_loc165:
	.quad	.Ltmp547
	.quad	.Ltmp546
.Lset98 = .Ltmp1385-.Ltmp1384           # Loc expr size
	.short	.Lset98
.Ltmp1384:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\030"
.Ltmp1385:
	.quad	.Ltmp573
	.quad	.Ltmp574
.Lset99 = .Ltmp1387-.Ltmp1386           # Loc expr size
	.short	.Lset99
.Ltmp1386:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp1387:
	.quad	0
	.quad	0
.Ldebug_loc168:
	.quad	.Lfunc_begin12
	.quad	.Ltmp604
.Lset100 = .Ltmp1389-.Ltmp1388          # Loc expr size
	.short	.Lset100
.Ltmp1388:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\024"
.Ltmp1389:
	.quad	.Ltmp625
	.quad	.Ltmp627
.Lset101 = .Ltmp1391-.Ltmp1390          # Loc expr size
	.short	.Lset101
.Ltmp1390:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1391:
	.quad	0
	.quad	0
.Ldebug_loc171:
	.quad	.Lfunc_begin12
	.quad	.Ltmp604
.Lset102 = .Ltmp1393-.Ltmp1392          # Loc expr size
	.short	.Lset102
.Ltmp1392:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\024"
.Ltmp1393:
	.quad	0
	.quad	0
.Ldebug_loc173:
	.quad	.Lfunc_begin12
	.quad	.Ltmp604
.Lset103 = .Ltmp1395-.Ltmp1394          # Loc expr size
	.short	.Lset103
.Ltmp1394:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\024"
.Ltmp1395:
	.quad	0
	.quad	0
.Ldebug_loc175:
	.quad	.Lfunc_begin12
	.quad	.Ltmp604
.Lset104 = .Ltmp1397-.Ltmp1396          # Loc expr size
	.short	.Lset104
.Ltmp1396:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\024"
.Ltmp1397:
	.quad	0
	.quad	0
.Ldebug_loc177:
	.quad	.Ltmp598
	.quad	.Ltmp604
.Lset105 = .Ltmp1399-.Ltmp1398          # Loc expr size
	.short	.Lset105
.Ltmp1398:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\024"
.Ltmp1399:
	.quad	.Ltmp626
	.quad	.Ltmp627
.Lset106 = .Ltmp1401-.Ltmp1400          # Loc expr size
	.short	.Lset106
.Ltmp1400:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1401:
	.quad	0
	.quad	0
.Ldebug_loc180:
	.quad	.Ltmp599
	.quad	.Ltmp604
.Lset107 = .Ltmp1403-.Ltmp1402          # Loc expr size
	.short	.Lset107
.Ltmp1402:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\024"
.Ltmp1403:
	.quad	0
	.quad	0
.Ldebug_loc182:
	.quad	.Ltmp600
	.quad	.Ltmp604
.Lset108 = .Ltmp1405-.Ltmp1404          # Loc expr size
	.short	.Lset108
.Ltmp1404:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\024"
.Ltmp1405:
	.quad	0
	.quad	0
.Ldebug_loc184:
	.quad	.Ltmp601
	.quad	.Ltmp604
.Lset109 = .Ltmp1407-.Ltmp1406          # Loc expr size
	.short	.Lset109
.Ltmp1406:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1407:
	.quad	.Ltmp614
	.quad	.Ltmp618
.Lset110 = .Ltmp1409-.Ltmp1408          # Loc expr size
	.short	.Lset110
.Ltmp1408:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\007"
.Ltmp1409:
	.quad	0
	.quad	0
.Ldebug_loc187:
	.quad	.Ltmp601
	.quad	.Ltmp604
.Lset111 = .Ltmp1411-.Ltmp1410          # Loc expr size
	.short	.Lset111
.Ltmp1410:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1411:
	.quad	.Ltmp615
	.quad	.Ltmp618
.Lset112 = .Ltmp1413-.Ltmp1412          # Loc expr size
	.short	.Lset112
.Ltmp1412:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\007"
.Ltmp1413:
	.quad	0
	.quad	0
.Ldebug_loc190:
	.quad	.Ltmp601
	.quad	.Ltmp604
.Lset113 = .Ltmp1415-.Ltmp1414          # Loc expr size
	.short	.Lset113
.Ltmp1414:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\023"
.Ltmp1415:
	.quad	.Ltmp616
	.quad	.Ltmp618
.Lset114 = .Ltmp1417-.Ltmp1416          # Loc expr size
	.short	.Lset114
.Ltmp1416:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\007"
.Ltmp1417:
	.quad	0
	.quad	0
.Ldebug_loc193:
	.quad	.Lfunc_begin13
	.quad	.Ltmp655
.Lset115 = .Ltmp1419-.Ltmp1418          # Loc expr size
	.short	.Lset115
.Ltmp1418:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\f"
.Ltmp1419:
	.quad	.Ltmp666
	.quad	.Ltmp668
.Lset116 = .Ltmp1421-.Ltmp1420          # Loc expr size
	.short	.Lset116
.Ltmp1420:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp1421:
	.quad	0
	.quad	0
.Ldebug_loc196:
	.quad	.Lfunc_begin13
	.quad	.Ltmp655
.Lset117 = .Ltmp1423-.Ltmp1422          # Loc expr size
	.short	.Lset117
.Ltmp1422:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\f"
.Ltmp1423:
	.quad	0
	.quad	0
.Ldebug_loc198:
	.quad	.Lfunc_begin13
	.quad	.Ltmp655
.Lset118 = .Ltmp1425-.Ltmp1424          # Loc expr size
	.short	.Lset118
.Ltmp1424:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\f"
.Ltmp1425:
	.quad	0
	.quad	0
.Ldebug_loc200:
	.quad	.Lfunc_begin13
	.quad	.Ltmp655
.Lset119 = .Ltmp1427-.Ltmp1426          # Loc expr size
	.short	.Lset119
.Ltmp1426:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\f"
.Ltmp1427:
	.quad	0
	.quad	0
.Ldebug_loc202:
	.quad	.Ltmp651
	.quad	.Ltmp655
.Lset120 = .Ltmp1429-.Ltmp1428          # Loc expr size
	.short	.Lset120
.Ltmp1428:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\f"
.Ltmp1429:
	.quad	.Ltmp667
	.quad	.Ltmp668
.Lset121 = .Ltmp1431-.Ltmp1430          # Loc expr size
	.short	.Lset121
.Ltmp1430:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp1431:
	.quad	0
	.quad	0
.Ldebug_loc205:
	.quad	.Ltmp652
	.quad	.Ltmp655
.Lset122 = .Ltmp1433-.Ltmp1432          # Loc expr size
	.short	.Lset122
.Ltmp1432:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\013"
.Ltmp1433:
	.quad	0
	.quad	0
.Ldebug_loc207:
	.quad	.Ltmp653
	.quad	.Ltmp655
.Lset123 = .Ltmp1435-.Ltmp1434          # Loc expr size
	.short	.Lset123
.Ltmp1434:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp1435:
	.quad	.Ltmp662
	.quad	.Ltmp668
.Lset124 = .Ltmp1437-.Ltmp1436          # Loc expr size
	.short	.Lset124
.Ltmp1436:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\001"
.Ltmp1437:
	.quad	0
	.quad	0
.Ldebug_loc210:
	.quad	.Ltmp653
	.quad	.Ltmp655
.Lset125 = .Ltmp1439-.Ltmp1438          # Loc expr size
	.short	.Lset125
.Ltmp1438:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\013"
.Ltmp1439:
	.quad	.Ltmp661
	.quad	.Ltmp668
.Lset126 = .Ltmp1441-.Ltmp1440          # Loc expr size
	.short	.Lset126
.Ltmp1440:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp1441:
	.quad	0
	.quad	0
.Ldebug_loc213:
	.quad	.Lfunc_begin14
	.quad	.Ltmp694
.Lset127 = .Ltmp1443-.Ltmp1442          # Loc expr size
	.short	.Lset127
.Ltmp1442:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\007"
.Ltmp1443:
	.quad	.Ltmp701
	.quad	.Ltmp703
.Lset128 = .Ltmp1445-.Ltmp1444          # Loc expr size
	.short	.Lset128
.Ltmp1444:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp1445:
	.quad	0
	.quad	0
.Ldebug_loc216:
	.quad	.Lfunc_begin14
	.quad	.Ltmp694
.Lset129 = .Ltmp1447-.Ltmp1446          # Loc expr size
	.short	.Lset129
.Ltmp1446:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\007"
.Ltmp1447:
	.quad	0
	.quad	0
.Ldebug_loc218:
	.quad	.Lfunc_begin14
	.quad	.Ltmp694
.Lset130 = .Ltmp1449-.Ltmp1448          # Loc expr size
	.short	.Lset130
.Ltmp1448:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp1449:
	.quad	0
	.quad	0
.Ldebug_loc220:
	.quad	.Lfunc_begin14
	.quad	.Ltmp694
.Lset131 = .Ltmp1451-.Ltmp1450          # Loc expr size
	.short	.Lset131
.Ltmp1450:
	.byte	119                     # DW_OP_breg7
	.ascii	"\344\007"
.Ltmp1451:
	.quad	.Ltmp702
	.quad	.Ltmp703
.Lset132 = .Ltmp1453-.Ltmp1452          # Loc expr size
	.short	.Lset132
.Ltmp1452:
	.byte	119                     # DW_OP_breg7
	.byte	28
.Ltmp1453:
	.quad	0
	.quad	0
.Ldebug_loc223:
	.quad	.Ltmp692
	.quad	.Ltmp694
.Lset133 = .Ltmp1455-.Ltmp1454          # Loc expr size
	.short	.Lset133
.Ltmp1454:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\007"
.Ltmp1455:
	.quad	.Ltmp697
	.quad	.Ltmp703
.Lset134 = .Ltmp1457-.Ltmp1456          # Loc expr size
	.short	.Lset134
.Ltmp1456:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370"
.Ltmp1457:
	.quad	0
	.quad	0
.Ldebug_loc226:
	.quad	.Ltmp693
	.quad	.Ltmp694
.Lset135 = .Ltmp1459-.Ltmp1458          # Loc expr size
	.short	.Lset135
.Ltmp1458:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\006"
.Ltmp1459:
	.quad	.Ltmp700
	.quad	.Ltmp703
.Lset136 = .Ltmp1461-.Ltmp1460          # Loc expr size
	.short	.Lset136
.Ltmp1460:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp1461:
	.quad	0
	.quad	0
.Ldebug_loc229:
	.quad	.Lfunc_begin15
	.quad	.Ltmp729
.Lset137 = .Ltmp1463-.Ltmp1462          # Loc expr size
	.short	.Lset137
.Ltmp1462:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\n"
.Ltmp1463:
	.quad	0
	.quad	0
.Ldebug_loc231:
	.quad	.Lfunc_begin15
	.quad	.Ltmp727
.Lset138 = .Ltmp1465-.Ltmp1464          # Loc expr size
	.short	.Lset138
.Ltmp1464:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\n"
.Ltmp1465:
	.quad	0
	.quad	0
.Ldebug_loc233:
	.quad	.Ltmp728
	.quad	.Ltmp729
.Lset139 = .Ltmp1467-.Ltmp1466          # Loc expr size
	.short	.Lset139
.Ltmp1466:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\t"
.Ltmp1467:
	.quad	.Ltmp737
	.quad	.Ltmp740
.Lset140 = .Ltmp1469-.Ltmp1468          # Loc expr size
	.short	.Lset140
.Ltmp1468:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\001"
.Ltmp1469:
	.quad	0
	.quad	0
.Ldebug_loc236:
	.quad	.Ltmp731
	.quad	.Ltmp732
.Lset141 = .Ltmp1471-.Ltmp1470          # Loc expr size
	.short	.Lset141
.Ltmp1470:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp1471:
	.quad	.Ltmp732
	.quad	.Ltmp734
.Lset142 = .Ltmp1473-.Ltmp1472          # Loc expr size
	.short	.Lset142
.Ltmp1472:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\005"
.Ltmp1473:
	.quad	.Ltmp738
	.quad	.Ltmp740
.Lset143 = .Ltmp1475-.Ltmp1474          # Loc expr size
	.short	.Lset143
.Ltmp1474:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp1475:
	.quad	0
	.quad	0
.Ldebug_loc240:
	.quad	.Ltmp733
	.quad	.Ltmp734
.Lset144 = .Ltmp1477-.Ltmp1476          # Loc expr size
	.short	.Lset144
.Ltmp1476:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\005"
.Ltmp1477:
	.quad	.Ltmp739
	.quad	.Ltmp740
.Lset145 = .Ltmp1479-.Ltmp1478          # Loc expr size
	.short	.Lset145
.Ltmp1478:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\002"
.Ltmp1479:
	.quad	0
	.quad	0
.Ldebug_loc243:
	.quad	.Ltmp735
	.quad	.Ltmp740
.Lset146 = .Ltmp1481-.Ltmp1480          # Loc expr size
	.short	.Lset146
.Ltmp1480:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\002"
.Ltmp1481:
	.quad	0
	.quad	0
.Ldebug_loc245:
	.quad	.Ltmp736
	.quad	.Ltmp740
.Lset147 = .Ltmp1483-.Ltmp1482          # Loc expr size
	.short	.Lset147
.Ltmp1482:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\001"
.Ltmp1483:
	.quad	0
	.quad	0
.Ldebug_loc247:
	.quad	.Lfunc_begin16
	.quad	.Ltmp765
.Lset148 = .Ltmp1485-.Ltmp1484          # Loc expr size
	.short	.Lset148
.Ltmp1484:
	.byte	98                      # DW_OP_reg18
.Ltmp1485:
	.quad	.Ltmp765
	.quad	.Ltmp766
.Lset149 = .Ltmp1487-.Ltmp1486          # Loc expr size
	.short	.Lset149
.Ltmp1486:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp1487:
	.quad	0
	.quad	0
.Ldebug_loc250:
	.quad	.Lfunc_begin16
	.quad	.Ltmp764
.Lset150 = .Ltmp1489-.Ltmp1488          # Loc expr size
	.short	.Lset150
.Ltmp1488:
	.byte	97                      # DW_OP_reg17
.Ltmp1489:
	.quad	.Ltmp764
	.quad	.Lfunc_end16
.Lset151 = .Ltmp1491-.Ltmp1490          # Loc expr size
	.short	.Lset151
.Ltmp1490:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp1491:
	.quad	0
	.quad	0
.Ldebug_loc253:
	.quad	.Lfunc_begin17
	.quad	.Ltmp796
.Lset152 = .Ltmp1493-.Ltmp1492          # Loc expr size
	.short	.Lset152
.Ltmp1492:
	.byte	98                      # DW_OP_reg18
.Ltmp1493:
	.quad	.Ltmp796
	.quad	.Ltmp797
.Lset153 = .Ltmp1495-.Ltmp1494          # Loc expr size
	.short	.Lset153
.Ltmp1494:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\001"
.Ltmp1495:
	.quad	0
	.quad	0
.Ldebug_loc256:
	.quad	.Lfunc_begin17
	.quad	.Ltmp795
.Lset154 = .Ltmp1497-.Ltmp1496          # Loc expr size
	.short	.Lset154
.Ltmp1496:
	.byte	97                      # DW_OP_reg17
.Ltmp1497:
	.quad	.Ltmp795
	.quad	.Lfunc_end17
.Lset155 = .Ltmp1499-.Ltmp1498          # Loc expr size
	.short	.Lset155
.Ltmp1498:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\001"
.Ltmp1499:
	.quad	0
	.quad	0
.Ldebug_loc259:
	.quad	.Lfunc_begin19
	.quad	.Ltmp837
.Lset156 = .Ltmp1501-.Ltmp1500          # Loc expr size
	.short	.Lset156
.Ltmp1500:
	.byte	97                      # DW_OP_reg17
.Ltmp1501:
	.quad	.Ltmp837
	.quad	.Ltmp838
.Lset157 = .Ltmp1503-.Ltmp1502          # Loc expr size
	.short	.Lset157
.Ltmp1502:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\001"
.Ltmp1503:
	.quad	0
	.quad	0
.Ldebug_loc262:
	.quad	.Lfunc_begin20
	.quad	.Ltmp854
.Lset158 = .Ltmp1505-.Ltmp1504          # Loc expr size
	.short	.Lset158
.Ltmp1504:
	.byte	80                      # DW_OP_reg0
.Ltmp1505:
	.quad	.Ltmp854
	.quad	.Ltmp861
.Lset159 = .Ltmp1507-.Ltmp1506          # Loc expr size
	.short	.Lset159
.Ltmp1506:
	.byte	118                     # DW_OP_breg6
	.byte	87
.Ltmp1507:
	.quad	0
	.quad	0
.Ldebug_loc265:
	.quad	.Lfunc_begin20
	.quad	.Ltmp859
.Lset160 = .Ltmp1509-.Ltmp1508          # Loc expr size
	.short	.Lset160
.Ltmp1508:
	.byte	88                      # DW_OP_reg8
.Ltmp1509:
	.quad	.Ltmp859
	.quad	.Ltmp861
.Lset161 = .Ltmp1511-.Ltmp1510          # Loc expr size
	.short	.Lset161
.Ltmp1510:
	.byte	118                     # DW_OP_breg6
	.ascii	"\270~"
.Ltmp1511:
	.quad	0
	.quad	0
.Ldebug_loc268:
	.quad	.Lfunc_begin20
	.quad	.Ltmp858
.Lset162 = .Ltmp1513-.Ltmp1512          # Loc expr size
	.short	.Lset162
.Ltmp1512:
	.byte	81                      # DW_OP_reg1
.Ltmp1513:
	.quad	.Ltmp858
	.quad	.Ltmp861
.Lset163 = .Ltmp1515-.Ltmp1514          # Loc expr size
	.short	.Lset163
.Ltmp1514:
	.byte	118                     # DW_OP_breg6
	.ascii	"\310~"
.Ltmp1515:
	.quad	0
	.quad	0
.Ldebug_loc271:
	.quad	.Lfunc_begin20
	.quad	.Ltmp856
.Lset164 = .Ltmp1517-.Ltmp1516          # Loc expr size
	.short	.Lset164
.Ltmp1516:
	.byte	84                      # DW_OP_reg4
.Ltmp1517:
	.quad	.Ltmp856
	.quad	.Ltmp861
.Lset165 = .Ltmp1519-.Ltmp1518          # Loc expr size
	.short	.Lset165
.Ltmp1518:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200\177"
.Ltmp1519:
	.quad	0
	.quad	0
.Ldebug_loc274:
	.quad	.Lfunc_begin20
	.quad	.Ltmp857
.Lset166 = .Ltmp1521-.Ltmp1520          # Loc expr size
	.short	.Lset166
.Ltmp1520:
	.byte	85                      # DW_OP_reg5
.Ltmp1521:
	.quad	.Ltmp857
	.quad	.Ltmp861
.Lset167 = .Ltmp1523-.Ltmp1522          # Loc expr size
	.short	.Lset167
.Ltmp1522:
	.byte	118                     # DW_OP_breg6
	.ascii	"\324~"
.Ltmp1523:
	.quad	0
	.quad	0
.Ldebug_loc277:
	.quad	.Ltmp860
	.quad	.Ltmp861
.Lset168 = .Ltmp1525-.Ltmp1524          # Loc expr size
	.short	.Lset168
.Ltmp1524:
	.byte	118                     # DW_OP_breg6
	.ascii	"\240}"
	.byte	6
.Ltmp1525:
	.quad	0
	.quad	0
.Ldebug_loc279:
	.quad	.Ltmp860
	.quad	.Ltmp863
.Lset169 = .Ltmp1527-.Ltmp1526          # Loc expr size
	.short	.Lset169
.Ltmp1526:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1527:
	.quad	.Ltmp863
	.quad	.Ltmp864
.Lset170 = .Ltmp1529-.Ltmp1528          # Loc expr size
	.short	.Lset170
.Ltmp1528:
	.byte	118                     # DW_OP_breg6
	.ascii	"\264z"
.Ltmp1529:
	.quad	0
	.quad	0
.Ldebug_loc282:
	.quad	.Lfunc_begin21
	.quad	.Ltmp891
.Lset171 = .Ltmp1531-.Ltmp1530          # Loc expr size
	.short	.Lset171
.Ltmp1530:
	.byte	119                     # DW_OP_breg7
	.asciz	"\354\325"
.Ltmp1531:
	.quad	0
	.quad	0
.Ldebug_loc284:
	.quad	.Lfunc_begin21
	.quad	.Ltmp891
.Lset172 = .Ltmp1533-.Ltmp1532          # Loc expr size
	.short	.Lset172
.Ltmp1532:
	.byte	119                     # DW_OP_breg7
	.asciz	"\340\326"
.Ltmp1533:
	.quad	0
	.quad	0
.Ldebug_loc286:
	.quad	.Lfunc_begin21
	.quad	.Ltmp891
.Lset173 = .Ltmp1535-.Ltmp1534          # Loc expr size
	.short	.Lset173
.Ltmp1534:
	.byte	119                     # DW_OP_breg7
	.asciz	"\330\325"
.Ltmp1535:
	.quad	0
	.quad	0
.Ldebug_loc288:
	.quad	.Lfunc_begin21
	.quad	.Ltmp891
.Lset174 = .Ltmp1537-.Ltmp1536          # Loc expr size
	.short	.Lset174
.Ltmp1536:
	.byte	119                     # DW_OP_breg7
	.asciz	"\320\325"
.Ltmp1537:
	.quad	0
	.quad	0
.Ldebug_loc290:
	.quad	.Lfunc_begin21
	.quad	.Ltmp891
.Lset175 = .Ltmp1539-.Ltmp1538          # Loc expr size
	.short	.Lset175
.Ltmp1538:
	.byte	119                     # DW_OP_breg7
	.asciz	"\310\325"
.Ltmp1539:
	.quad	0
	.quad	0
.Ldebug_loc292:
	.quad	.Ltmp890
	.quad	.Lfunc_end21
.Lset176 = .Ltmp1541-.Ltmp1540          # Loc expr size
	.short	.Lset176
.Ltmp1540:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1541:
	.quad	0
	.quad	0
.Ldebug_loc295:
	.quad	.Ltmp909
	.quad	.Ltmp910
.Lset177 = .Ltmp1543-.Ltmp1542          # Loc expr size
	.short	.Lset177
.Ltmp1542:
	.byte	119                     # DW_OP_breg7
	.asciz	"\260\305"
.Ltmp1543:
	.quad	0
	.quad	0
.Ldebug_loc297:
	.quad	.Ltmp909
	.quad	.Ltmp930
.Lset178 = .Ltmp1545-.Ltmp1544          # Loc expr size
	.short	.Lset178
.Ltmp1544:
.Ltmp1545:
	.quad	.Ltmp930
	.quad	.Ltmp931
.Lset179 = .Ltmp1547-.Ltmp1546          # Loc expr size
	.short	.Lset179
.Ltmp1546:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2201"
.Ltmp1547:
	.quad	.Ltmp935
	.quad	.Ltmp937
.Lset180 = .Ltmp1549-.Ltmp1548          # Loc expr size
	.short	.Lset180
.Ltmp1548:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220*"
.Ltmp1549:
	.quad	.Ltmp957
	.quad	.Ltmp958
.Lset181 = .Ltmp1551-.Ltmp1550          # Loc expr size
	.short	.Lset181
.Ltmp1550:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\023"
.Ltmp1551:
	.quad	0
	.quad	0
.Ldebug_loc302:
	.quad	.Ltmp909
	.quad	.Ltmp912
.Lset182 = .Ltmp1553-.Ltmp1552          # Loc expr size
	.short	.Lset182
.Ltmp1552:
.Ltmp1553:
	.quad	.Ltmp912
	.quad	.Ltmp913
.Lset183 = .Ltmp1555-.Ltmp1554          # Loc expr size
	.short	.Lset183
.Ltmp1554:
	.byte	119                     # DW_OP_breg7
	.asciz	"\250\302"
.Ltmp1555:
	.quad	0
	.quad	0
.Ldebug_loc305:
	.quad	.Ltmp932
	.quad	.Ltmp933
.Lset184 = .Ltmp1557-.Ltmp1556          # Loc expr size
	.short	.Lset184
.Ltmp1556:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320-"
.Ltmp1557:
	.quad	.Ltmp943
	.quad	.Ltmp946
.Lset185 = .Ltmp1559-.Ltmp1558          # Loc expr size
	.short	.Lset185
.Ltmp1558:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\""
.Ltmp1559:
	.quad	.Ltmp955
	.quad	.Ltmp956
.Lset186 = .Ltmp1561-.Ltmp1560          # Loc expr size
	.short	.Lset186
.Ltmp1560:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\025"
.Ltmp1561:
	.quad	.Ltmp964
	.quad	.Ltmp967
.Lset187 = .Ltmp1563-.Ltmp1562          # Loc expr size
	.short	.Lset187
.Ltmp1562:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\f"
.Ltmp1563:
	.quad	.Ltmp974
	.quad	.Ltmp976
.Lset188 = .Ltmp1565-.Ltmp1564          # Loc expr size
	.short	.Lset188
.Ltmp1564:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp1565:
	.quad	0
	.quad	0
.Ldebug_loc311:
	.quad	.Ltmp934
	.quad	.Ltmp937
.Lset189 = .Ltmp1567-.Ltmp1566          # Loc expr size
	.short	.Lset189
.Ltmp1566:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260*"
.Ltmp1567:
	.quad	.Ltmp944
	.quad	.Ltmp946
.Lset190 = .Ltmp1569-.Ltmp1568          # Loc expr size
	.short	.Lset190
.Ltmp1568:
	.byte	119                     # DW_OP_breg7
	.ascii	"\200\""
.Ltmp1569:
	.quad	.Ltmp948
	.quad	.Ltmp950
.Lset191 = .Ltmp1571-.Ltmp1570          # Loc expr size
	.short	.Lset191
.Ltmp1570:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\034"
.Ltmp1571:
	.quad	.Ltmp965
	.quad	.Ltmp967
.Lset192 = .Ltmp1573-.Ltmp1572          # Loc expr size
	.short	.Lset192
.Ltmp1572:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\013"
.Ltmp1573:
	.quad	0
	.quad	0
.Ldebug_loc316:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1001
.Lset193 = .Ltmp1575-.Ltmp1574          # Loc expr size
	.short	.Lset193
.Ltmp1574:
	.byte	119                     # DW_OP_breg7
	.asciz	"\214\310"
.Ltmp1575:
	.quad	0
	.quad	0
.Ldebug_loc318:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1001
.Lset194 = .Ltmp1577-.Ltmp1576          # Loc expr size
	.short	.Lset194
.Ltmp1576:
	.byte	119                     # DW_OP_breg7
	.asciz	"\200\310"
.Ltmp1577:
	.quad	0
	.quad	0
.Ldebug_loc320:
	.quad	.Lfunc_begin22
	.quad	.Ltmp1001
.Lset195 = .Ltmp1579-.Ltmp1578          # Loc expr size
	.short	.Lset195
.Ltmp1578:
	.byte	119                     # DW_OP_breg7
	.asciz	"\370\307"
.Ltmp1579:
	.quad	0
	.quad	0
.Ldebug_loc322:
	.quad	.Ltmp1000
	.quad	.Ltmp1016
.Lset196 = .Ltmp1581-.Ltmp1580          # Loc expr size
	.short	.Lset196
.Ltmp1580:
.Ltmp1581:
	.quad	.Ltmp1016
	.quad	.Ltmp1018
.Lset197 = .Ltmp1583-.Ltmp1582          # Loc expr size
	.short	.Lset197
.Ltmp1582:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2408"
.Ltmp1583:
	.quad	0
	.quad	0
.Ldebug_loc325:
	.quad	.Ltmp1000
	.quad	.Ltmp1017
.Lset198 = .Ltmp1585-.Ltmp1584          # Loc expr size
	.short	.Lset198
.Ltmp1584:
.Ltmp1585:
	.quad	.Ltmp1017
	.quad	.Ltmp1018
.Lset199 = .Ltmp1587-.Ltmp1586          # Loc expr size
	.short	.Lset199
.Ltmp1586:
	.byte	119                     # DW_OP_breg7
	.ascii	"\2308"
.Ltmp1587:
	.quad	0
	.quad	0
.Ldebug_loc328:
	.quad	.Ltmp1000
	.quad	.Ltmp1033
.Lset200 = .Ltmp1589-.Ltmp1588          # Loc expr size
	.short	.Lset200
.Ltmp1588:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1589:
	.quad	.Ltmp1033
	.quad	.Ltmp1034
.Lset201 = .Ltmp1591-.Ltmp1590          # Loc expr size
	.short	.Lset201
.Ltmp1590:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214*"
.Ltmp1591:
	.quad	0
	.quad	0
.Ldebug_loc331:
	.quad	.Ltmp1004
	.quad	.Ltmp1048
.Lset202 = .Ltmp1593-.Ltmp1592          # Loc expr size
	.short	.Lset202
.Ltmp1592:
.Ltmp1593:
	.quad	.Ltmp1048
	.quad	.Ltmp1049
.Lset203 = .Ltmp1595-.Ltmp1594          # Loc expr size
	.short	.Lset203
.Ltmp1594:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\036"
.Ltmp1595:
	.quad	0
	.quad	0
.Ldebug_loc334:
	.quad	.Ltmp1004
	.quad	.Ltmp1015
.Lset204 = .Ltmp1597-.Ltmp1596          # Loc expr size
	.short	.Lset204
.Ltmp1596:
.Ltmp1597:
	.quad	.Ltmp1015
	.quad	.Ltmp1018
.Lset205 = .Ltmp1599-.Ltmp1598          # Loc expr size
	.short	.Lset205
.Ltmp1598:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230:"
.Ltmp1599:
	.quad	0
	.quad	0
.Ldebug_loc337:
	.quad	.Ltmp1005
	.quad	.Ltmp1098
.Lset206 = .Ltmp1601-.Ltmp1600          # Loc expr size
	.short	.Lset206
.Ltmp1600:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1601:
	.quad	.Ltmp1098
	.quad	.Ltmp1099
.Lset207 = .Ltmp1603-.Ltmp1602          # Loc expr size
	.short	.Lset207
.Ltmp1602:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\001"
.Ltmp1603:
	.quad	0
	.quad	0
.Ldebug_loc340:
	.quad	.Ltmp1012
	.quad	.Ltmp1035
.Lset208 = .Ltmp1605-.Ltmp1604          # Loc expr size
	.short	.Lset208
.Ltmp1604:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp1605:
	.quad	.Ltmp1035
	.quad	.Ltmp1036
.Lset209 = .Ltmp1607-.Ltmp1606          # Loc expr size
	.short	.Lset209
.Ltmp1606:
	.byte	119                     # DW_OP_breg7
	.ascii	"\254'"
.Ltmp1607:
	.quad	0
	.quad	0
.Ldebug_loc343:
	.quad	.Ltmp1013
	.quad	.Ltmp1014
.Lset210 = .Ltmp1609-.Ltmp1608          # Loc expr size
	.short	.Lset210
.Ltmp1608:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230:"
.Ltmp1609:
	.quad	.Ltmp1043
	.quad	.Ltmp1044
.Lset211 = .Ltmp1611-.Ltmp1610          # Loc expr size
	.short	.Lset211
.Ltmp1610:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220#"
.Ltmp1611:
	.quad	.Ltmp1057
	.quad	.Ltmp1058
.Lset212 = .Ltmp1613-.Ltmp1612          # Loc expr size
	.short	.Lset212
.Ltmp1612:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\035"
.Ltmp1613:
	.quad	.Ltmp1077
	.quad	.Ltmp1078
.Lset213 = .Ltmp1615-.Ltmp1614          # Loc expr size
	.short	.Lset213
.Ltmp1614:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\025"
.Ltmp1615:
	.quad	0
	.quad	0
.Ldebug_loc348:
	.quad	.Ltmp1020
	.quad	.Ltmp1021
.Lset214 = .Ltmp1617-.Ltmp1616          # Loc expr size
	.short	.Lset214
.Ltmp1616:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp1617:
	.quad	.Ltmp1024
	.quad	.Ltmp1025
.Lset215 = .Ltmp1619-.Ltmp1618          # Loc expr size
	.short	.Lset215
.Ltmp1618:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3444"
.Ltmp1619:
	.quad	0
	.quad	0
.Ldebug_loc351:
	.quad	.Ltmp1037
	.quad	.Ltmp1044
.Lset216 = .Ltmp1621-.Ltmp1620          # Loc expr size
	.short	.Lset216
.Ltmp1620:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230'"
.Ltmp1621:
	.quad	.Ltmp1057
	.quad	.Ltmp1066
.Lset217 = .Ltmp1623-.Ltmp1622          # Loc expr size
	.short	.Lset217
.Ltmp1622:
.Ltmp1623:
	.quad	.Ltmp1066
	.quad	.Ltmp1067
.Lset218 = .Ltmp1625-.Ltmp1624          # Loc expr size
	.short	.Lset218
.Ltmp1624:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\027"
.Ltmp1625:
	.quad	0
	.quad	0
.Ldebug_loc355:
	.quad	.Ltmp1038
	.quad	.Ltmp1044
.Lset219 = .Ltmp1627-.Ltmp1626          # Loc expr size
	.short	.Lset219
.Ltmp1626:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220'"
.Ltmp1627:
	.quad	.Ltmp1050
	.quad	.Ltmp1051
.Lset220 = .Ltmp1629-.Ltmp1628          # Loc expr size
	.short	.Lset220
.Ltmp1628:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\036"
.Ltmp1629:
	.quad	.Ltmp1054
	.quad	.Ltmp1055
.Lset221 = .Ltmp1631-.Ltmp1630          # Loc expr size
	.short	.Lset221
.Ltmp1630:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3706"
.Ltmp1631:
	.quad	.Ltmp1068
	.quad	.Ltmp1069
.Lset222 = .Ltmp1633-.Ltmp1632          # Loc expr size
	.short	.Lset222
.Ltmp1632:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\026"
.Ltmp1633:
	.quad	.Ltmp1074
	.quad	.Ltmp1075
.Lset223 = .Ltmp1635-.Ltmp1634          # Loc expr size
	.short	.Lset223
.Ltmp1634:
	.byte	119                     # DW_OP_breg7
	.ascii	"\3706"
.Ltmp1635:
	.quad	0
	.quad	0
.Ldebug_loc361:
	.quad	.Ltmp1039
	.quad	.Ltmp1040
.Lset224 = .Ltmp1637-.Ltmp1636          # Loc expr size
	.short	.Lset224
.Ltmp1636:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360&"
.Ltmp1637:
	.quad	.Ltmp1062
	.quad	.Ltmp1063
.Lset225 = .Ltmp1639-.Ltmp1638          # Loc expr size
	.short	.Lset225
.Ltmp1638:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\031"
.Ltmp1639:
	.quad	.Ltmp1085
	.quad	.Ltmp1086
.Lset226 = .Ltmp1641-.Ltmp1640          # Loc expr size
	.short	.Lset226
.Ltmp1640:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\f"
.Ltmp1641:
	.quad	0
	.quad	0
.Ldebug_loc365:
	.quad	.Ltmp1041
	.quad	.Ltmp1042
.Lset227 = .Ltmp1643-.Ltmp1642          # Loc expr size
	.short	.Lset227
.Ltmp1642:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250&"
.Ltmp1643:
	.quad	.Ltmp1064
	.quad	.Ltmp1065
.Lset228 = .Ltmp1645-.Ltmp1644          # Loc expr size
	.short	.Lset228
.Ltmp1644:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\030"
.Ltmp1645:
	.quad	0
	.quad	0
.Ldebug_loc368:
	.quad	.Ltmp1057
	.quad	.Ltmp1058
.Lset229 = .Ltmp1647-.Ltmp1646          # Loc expr size
	.short	.Lset229
.Ltmp1646:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260-"
.Ltmp1647:
	.quad	0
	.quad	0
.Ldebug_loc370:
	.quad	.Ltmp1060
	.quad	.Ltmp1061
.Lset230 = .Ltmp1649-.Ltmp1648          # Loc expr size
	.short	.Lset230
.Ltmp1648:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\031"
.Ltmp1649:
	.quad	.Ltmp1085
	.quad	.Ltmp1086
.Lset231 = .Ltmp1651-.Ltmp1650          # Loc expr size
	.short	.Lset231
.Ltmp1650:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314>"
.Ltmp1651:
	.quad	.Ltmp1096
	.quad	.Ltmp1097
.Lset232 = .Ltmp1653-.Ltmp1652          # Loc expr size
	.short	.Lset232
.Ltmp1652:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\004"
.Ltmp1653:
	.quad	0
	.quad	0
.Ldebug_loc374:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1126
.Lset233 = .Ltmp1655-.Ltmp1654          # Loc expr size
	.short	.Lset233
.Ltmp1654:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\026"
.Ltmp1655:
	.quad	0
	.quad	0
.Ldebug_loc376:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1126
.Lset234 = .Ltmp1657-.Ltmp1656          # Loc expr size
	.short	.Lset234
.Ltmp1656:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\026"
.Ltmp1657:
	.quad	0
	.quad	0
.Ldebug_loc378:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1126
.Lset235 = .Ltmp1659-.Ltmp1658          # Loc expr size
	.short	.Lset235
.Ltmp1658:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\026"
.Ltmp1659:
	.quad	0
	.quad	0
.Ldebug_loc380:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1126
.Lset236 = .Ltmp1661-.Ltmp1660          # Loc expr size
	.short	.Lset236
.Ltmp1660:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\027"
.Ltmp1661:
	.quad	0
	.quad	0
.Ldebug_loc382:
	.quad	.Lfunc_begin23
	.quad	.Ltmp1126
.Lset237 = .Ltmp1663-.Ltmp1662          # Loc expr size
	.short	.Lset237
.Ltmp1662:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\026"
.Ltmp1663:
	.quad	0
	.quad	0
.Ldebug_loc384:
	.quad	.Ltmp1135
	.quad	.Ltmp1136
.Lset238 = .Ltmp1665-.Ltmp1664          # Loc expr size
	.short	.Lset238
.Ltmp1664:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\n"
.Ltmp1665:
	.quad	.Ltmp1137
	.quad	.Ltmp1139
.Lset239 = .Ltmp1667-.Ltmp1666          # Loc expr size
	.short	.Lset239
.Ltmp1666:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\007"
.Ltmp1667:
	.quad	0
	.quad	0
.Ldebug_loc387:
	.quad	.Ltmp1144
	.quad	.Ltmp1145
.Lset240 = .Ltmp1669-.Ltmp1668          # Loc expr size
	.short	.Lset240
.Ltmp1668:
	.byte	119                     # DW_OP_breg7
	.byte	20
.Ltmp1669:
	.quad	0
	.quad	0
.Ldebug_loc389:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset241 = .Lfunc_begin3-.Lfunc_begin0
	.quad	.Lset241
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin1    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin3
.Lset242 = .Lfunc_begin15-.Lfunc_begin3
	.quad	.Lset242
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin2    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin15
.Lset243 = .Ldebug_end0-.Lfunc_begin15
	.quad	.Lset243
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp33
	.quad	0
	.quad	0
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp34
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp60
	.quad	.Ltmp62
	.quad	.Ltmp66
	.quad	0
	.quad	0
	.quad	.Ltmp60
	.quad	.Ltmp61
	.quad	.Ltmp67
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp61
	.quad	.Ltmp62
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp55
	.quad	.Ltmp56
	.quad	.Ltmp59
	.quad	.Ltmp71
	.quad	0
	.quad	0
	.quad	.Ltmp75
	.quad	.Ltmp76
	.quad	.Ltmp77
	.quad	.Ltmp78
	.quad	0
	.quad	0
	.quad	.Ltmp57
	.quad	.Ltmp58
	.quad	.Ltmp73
	.quad	.Ltmp80
	.quad	0
	.quad	0
	.quad	.Ltmp81
	.quad	.Ltmp82
	.quad	.Ltmp83
	.quad	.Ltmp84
	.quad	.Ltmp88
	.quad	.Ltmp96
	.quad	0
	.quad	0
	.quad	.Ltmp85
	.quad	.Ltmp87
	.quad	.Ltmp97
	.quad	.Ltmp103
	.quad	0
	.quad	0
	.quad	.Ltmp104
	.quad	.Ltmp105
	.quad	.Ltmp106
	.quad	.Ltmp107
	.quad	.Ltmp110
	.quad	.Ltmp117
	.quad	0
	.quad	0
	.quad	.Ltmp121
	.quad	.Ltmp122
	.quad	.Ltmp123
	.quad	.Ltmp131
	.quad	0
	.quad	0
	.quad	.Ltmp108
	.quad	.Ltmp109
	.quad	.Ltmp119
	.quad	.Ltmp133
	.quad	0
	.quad	0
	.quad	.Ltmp139
	.quad	.Ltmp140
	.quad	.Ltmp143
	.quad	.Ltmp152
	.quad	0
	.quad	0
	.quad	.Ltmp139
	.quad	.Ltmp141
	.quad	.Ltmp142
	.quad	.Ltmp153
	.quad	0
	.quad	0
	.quad	.Ltmp135
	.quad	.Ltmp136
	.quad	.Ltmp139
	.quad	.Ltmp154
	.quad	0
	.quad	0
	.quad	.Ltmp157
	.quad	.Ltmp158
	.quad	.Ltmp161
	.quad	.Ltmp170
	.quad	0
	.quad	0
	.quad	.Ltmp157
	.quad	.Ltmp159
	.quad	.Ltmp160
	.quad	.Ltmp171
	.quad	0
	.quad	0
	.quad	.Ltmp137
	.quad	.Ltmp138
	.quad	.Ltmp155
	.quad	.Ltmp172
	.quad	0
	.quad	0
	.quad	.Ltmp179
	.quad	.Ltmp180
	.quad	.Ltmp181
	.quad	.Ltmp186
	.quad	0
	.quad	0
	.quad	.Ltmp179
	.quad	.Ltmp180
	.quad	.Ltmp181
	.quad	.Ltmp186
	.quad	0
	.quad	0
	.quad	.Ltmp173
	.quad	.Ltmp174
	.quad	.Ltmp175
	.quad	.Ltmp176
	.quad	.Ltmp179
	.quad	.Ltmp187
	.quad	0
	.quad	0
	.quad	.Ltmp192
	.quad	.Ltmp193
	.quad	.Ltmp198
	.quad	.Ltmp207
	.quad	0
	.quad	0
	.quad	.Ltmp192
	.quad	.Ltmp194
	.quad	.Ltmp195
	.quad	.Ltmp196
	.quad	.Ltmp197
	.quad	.Ltmp208
	.quad	0
	.quad	0
	.quad	.Ltmp192
	.quad	.Ltmp194
	.quad	.Ltmp195
	.quad	.Ltmp209
	.quad	0
	.quad	0
	.quad	.Ltmp192
	.quad	.Ltmp194
	.quad	.Ltmp195
	.quad	.Ltmp209
	.quad	0
	.quad	0
	.quad	.Ltmp177
	.quad	.Ltmp178
	.quad	.Ltmp190
	.quad	.Ltmp210
	.quad	0
	.quad	0
	.quad	.Ltmp286
	.quad	.Ltmp287
	.quad	.Ltmp288
	.quad	.Ltmp295
	.quad	0
	.quad	0
	.quad	.Ltmp500
	.quad	.Ltmp501
	.quad	.Ltmp507
	.quad	.Ltmp518
	.quad	0
	.quad	0
	.quad	.Ltmp499
	.quad	.Ltmp501
	.quad	.Ltmp506
	.quad	.Ltmp520
	.quad	0
	.quad	0
	.quad	.Ltmp498
	.quad	.Ltmp501
	.quad	.Ltmp502
	.quad	.Ltmp520
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset244 = .Lpubnames_end2-.Lpubnames_begin2 # Length of Public Names Info
	.long	.Lset244
.Lpubnames_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset245 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset245
	.long	1107                    # DIE offset
	.asciz	"tred1"                 # External Name
	.long	184                     # DIE offset
	.asciz	"r8_epsilon"            # External Name
	.long	432                     # DIE offset
	.asciz	"rs"                    # External Name
	.long	931                     # DIE offset
	.asciz	"trbak1"                # External Name
	.long	587                     # DIE offset
	.asciz	"tqlrat"                # External Name
	.long	376                     # DIE offset
	.asciz	"r8_sign"               # External Name
	.long	49                      # DIE offset
	.asciz	"pythag"                # External Name
	.long	305                     # DIE offset
	.asciz	"r8_min"                # External Name
	.long	234                     # DIE offset
	.asciz	"r8_max"                # External Name
	.long	0                       # End Mark
.Lpubnames_end2:
.Lset246 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset246
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset247 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset247
	.long	617                     # DIE offset
	.asciz	"kiss_fft_cleanup"      # External Name
	.long	1377                    # DIE offset
	.asciz	"kf_bfly4"              # External Name
	.long	1171                    # DIE offset
	.asciz	"kf_bfly5"              # External Name
	.long	62                      # DIE offset
	.asciz	"kiss_fft_alloc"        # External Name
	.long	451                     # DIE offset
	.asciz	"kiss_fft_stride"       # External Name
	.long	1732                    # DIE offset
	.asciz	"kf_bfly2"              # External Name
	.long	724                     # DIE offset
	.asciz	"kf_work"               # External Name
	.long	542                     # DIE offset
	.asciz	"kiss_fft"              # External Name
	.long	917                     # DIE offset
	.asciz	"kf_bfly_generic"       # External Name
	.long	1859                    # DIE offset
	.asciz	"kf_factor"             # External Name
	.long	643                     # DIE offset
	.asciz	"kiss_fft_next_fast_size" # External Name
	.long	1564                    # DIE offset
	.asciz	"kf_bfly3"              # External Name
	.long	0                       # End Mark
.Lpubnames_end1:
.Lset248 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset248
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset249 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset249
	.long	1236                    # DIE offset
	.asciz	"main"                  # External Name
	.long	241                     # DIE offset
	.asciz	"process_data"          # External Name
	.long	98                      # DIE offset
	.asciz	"test_stores"           # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
	.section	.debug_pubtypes,"",@progbits
.Lset250 = .Lpubtypes_end2-.Lpubtypes_begin2 # Length of Public Types Info
	.long	.Lset250
.Lpubtypes_begin2:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin2    # Offset of Compilation Unit Info
.Lset251 = .L.debug_info_end2-.L.debug_info_begin2 # Compilation Unit Length
	.long	.Lset251
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1340                    # DIE offset
	.asciz	"_Bool"                 # External Name
	.long	0                       # End Mark
.Lpubtypes_end2:
.Lset252 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset252
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset253 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset253
	.long	409                     # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	299                     # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	315                     # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1967                    # DIE offset
	.asciz	"long unsigned int"     # External Name
	.long	1956                    # DIE offset
	.asciz	"size_t"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end1:
.Lset254 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset254
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset255 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset255
	.long	1405                    # DIE offset
	.asciz	"TYPE"                  # External Name
	.long	1507                    # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	1416                    # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	1432                    # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	1589                    # DIE offset
	.asciz	"XCORR_TYPE"            # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
