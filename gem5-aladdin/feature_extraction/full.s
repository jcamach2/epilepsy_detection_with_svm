	.file	"full.llvm"
	.section	.debug_info,"",@progbits
.Lsection_info:
	.section	.debug_abbrev,"",@progbits
.Lsection_abbrev:
	.section	.debug_aranges,"",@progbits
	.section	.debug_macinfo,"",@progbits
	.section	.debug_line,"",@progbits
.Lsection_line:
	.section	.debug_loc,"",@progbits
	.section	.debug_pubnames,"",@progbits
	.section	.debug_pubtypes,"",@progbits
	.section	.debug_str,"MS",@progbits,1
.Linfo_string:
	.section	.debug_ranges,"",@progbits
.Ldebug_range:
	.section	.debug_loc,"",@progbits
.Lsection_debug_loc:
	.text
.Ltext_begin:
	.data
	.file	1 "feature_extraction.c"
	.file	2 "kiss_fft.c"
	.file	3 "./_kiss_fft_guts.h"
	.file	4 "./kiss_fft.h"
	.text
	.globl	test_stores
	.align	16, 0x90
	.type	test_stores,@function
test_stores:                            # @test_stores
	.cfi_startproc
.Lfunc_begin0:
	.loc	1 23 0                  # feature_extraction.c:23:0
# BB#0:
	pushq	%rbp
.Ltmp7:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp8:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp9:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp10:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp11:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp12:
	.cfi_def_cfa_offset 56
	subq	$1928, %rsp             # imm = 0x788
.Ltmp13:
	.cfi_def_cfa_offset 1984
.Ltmp14:
	.cfi_offset %rbx, -56
.Ltmp15:
	.cfi_offset %r12, -48
.Ltmp16:
	.cfi_offset %r13, -40
.Ltmp17:
	.cfi_offset %r14, -32
.Ltmp18:
	.cfi_offset %r15, -24
.Ltmp19:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str6, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$2, %r11
	leaq	.L.str12, %rbx
	movabsq	$3, %r14
	leaq	.L.str11, %r15
	movabsq	$24, %r12
	leaq	.L.str4, %r13
	leaq	.L.str5, %rbp
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str10, %rax
	movl	%ecx, 1916(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 1912(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str49, %rax
	.loc	1 23 0 prologue_end     # feature_extraction.c:23:0
.Ltmp20:
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1816(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1816(%rsp), %rax        # 8-byte Reload
	movl	%edx, 1804(%rsp)        # 4-byte Spill
	movq	%rax, %rdx
	movq	1920(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1800(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1792(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1784(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 1776(%rsp)        # 8-byte Spill
	movq	%r13, 1768(%rsp)        # 8-byte Spill
	movq	%rbp, 1760(%rsp)        # 8-byte Spill
	movq	%r15, 1752(%rsp)        # 8-byte Spill
	movq	%r14, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	movq	%r11, 1720(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1808(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1804(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1848(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1916(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1856(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: test_stores:time_data <- [RSP+1816]
	#DEBUG_VALUE: test_stores:freq_data <- [RSP+1808]
	#DEBUG_VALUE: test_stores:n_samples <- [RSP+1804]
	#DEBUG_VALUE: test_stores:n_channels <- [RSP+1916]
.Ltmp21:
	#DEBUG_VALUE: j <- 0
	.loc	1 24 0                  # feature_extraction.c:24:0
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1864(%rsp), %r8         # 8-byte Reload
	movl	1912(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	1872(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1916(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1888(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1916(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1920(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1719(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1768(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movl	1912(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1784(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1719(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1920(%rsp), %rsi        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1784(%rsp), %r9         # 8-byte Reload
	movq	1728(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1719(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB0_1
	jmp	.LBB0_6
.Ltmp22:
.LBB0_1:                                # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdx
	movabsq	$24, %rdi
	leaq	.L.str4, %rsi
	leaq	.L.str11, %r9
	leaq	.L.str15, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	leaq	.L.str13, %r15
	movabsq	$32, %r12
	leaq	.L.str14, %r13
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movabsq	$26, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 26 0                  # feature_extraction.c:26:0
.Ltmp23:
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movq	1688(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1672(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1664(%rsp)        # 8-byte Spill
	movq	%rdx, 1656(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1680(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1640(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1632(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1624(%rsp)        # 8-byte Spill
	movl	%ebp, 1620(%rsp)        # 4-byte Spill
	movq	%r15, 1608(%rsp)        # 8-byte Spill
	movq	%r13, 1600(%rsp)        # 8-byte Spill
	movq	%r12, 1592(%rsp)        # 8-byte Spill
	movl	%ebx, 1588(%rsp)        # 4-byte Spill
	movq	%r10, 1576(%rsp)        # 8-byte Spill
	movq	%r11, 1568(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1704(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1704(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1804(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1648(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1704(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1804(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp24:
	.loc	1 24 0                  # feature_extraction.c:24:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	1704(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1567(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1664(%rsp), %rsi        # 8-byte Reload
	movq	1632(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1588(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1648(%rsp), %rdi        # 8-byte Reload
	movq	1704(%rsp), %rsi        # 8-byte Reload
	movq	1704(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1704(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
.LBB0_2:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB0_4 Depth 2
	movq	1552(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str13, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str19, %r9
	movabsq	$3, %r10
	leaq	.L.str23, %r11
	movabsq	$26, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str16, %r15
	leaq	.L.str22, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	stdout, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str21, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str11, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str18, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 28 0                  # feature_extraction.c:28:0
.Ltmp25:
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movq	1448(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1432(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1424(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1416(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1400(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1392(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1384(%rsp)        # 8-byte Spill
	movq	%r14, 1376(%rsp)        # 8-byte Spill
	movq	%r12, 1368(%rsp)        # 8-byte Spill
	movl	%ebp, 1364(%rsp)        # 4-byte Spill
	movl	%r13d, 1360(%rsp)       # 4-byte Spill
	movq	%rbx, 1352(%rsp)        # 8-byte Spill
	movq	%r10, 1344(%rsp)        # 8-byte Spill
	movq	%r11, 1336(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1384(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movl	1364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp26:
	.loc	1 26 0                  # feature_extraction.c:26:0
	movq	1536(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1352(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	movq	1384(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1416(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	1567(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1416(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1567(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1320(%rsp)        # 8-byte Spill
	jne	.LBB0_3
	jmp	.LBB0_5
.LBB0_3:                                # %.lr.ph
                                        #   in Loop: Header=BB0_2 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str28, %r8
	leaq	.L.str8, %rdx
	movabsq	$26, %rsi
	leaq	.L.str4, %rdi
	leaq	.L.str23, %r9
	leaq	.L.str27, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str26, %r12
	movabsq	$32, %r13
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str17, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	.loc	1 28 0                  # feature_extraction.c:28:0
.Ltmp27:
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movq	1272(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1240(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1240(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1232(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1224(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1208(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1200(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1192(%rsp)        # 8-byte Spill
	movl	%ebp, 1188(%rsp)        # 4-byte Spill
	movq	%r15, 1176(%rsp)        # 8-byte Spill
	movq	%r12, 1168(%rsp)        # 8-byte Spill
	movq	%r13, 1160(%rsp)        # 8-byte Spill
	movl	%ebx, 1156(%rsp)        # 4-byte Spill
	movq	%r10, 1144(%rsp)        # 8-byte Spill
	movq	%r11, 1136(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, 1132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1804(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1132(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1132(%rsp), %ebx        # 4-byte Reload
	movl	1804(%rsp), %ebp        # 4-byte Reload
	imull	%ebp, %ebx
.Ltmp28:
	.loc	1 26 0                  # feature_extraction.c:26:0
	movl	%ebx, %esi
	movl	%esi, %edx
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 1128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movl	1156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1128(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1160(%rsp), %rsi        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1128(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	1192(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	1240(%rsp), %rsi        # 8-byte Reload
	movq	1200(%rsp), %rdx        # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movl	1156(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rdx        # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1312(%rsp), %r9         # 8-byte Reload
	movq	1224(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1312(%rsp), %rax        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
.LBB0_4:                                #   Parent Loop BB0_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1104(%rsp), %rax        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movabsq	$2, %rdx
	movabsq	$64, %rsi
	leaq	.L.str, %rdi
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str31, %rbx
	movabsq	$5, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$28, %r13
	leaq	.L.str4, %rbp
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1072(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1068(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str26, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str23, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rax
	.loc	1 28 0                  # feature_extraction.c:28:0
.Ltmp29:
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 892(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	1088(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	912(%rsp), %rax         # 8-byte Reload
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1068(%rsp), %eax        # 4-byte Reload
	movq	%r9, 856(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 848(%rsp)         # 8-byte Spill
	movq	%r12, 840(%rsp)         # 8-byte Spill
	movq	%r13, 832(%rsp)         # 8-byte Spill
	movq	%rbp, 824(%rsp)         # 8-byte Spill
	movq	%r14, 816(%rsp)         # 8-byte Spill
	movq	%rbx, 808(%rsp)         # 8-byte Spill
	movq	%r10, 800(%rsp)         # 8-byte Spill
	movq	%r11, 792(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	1088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	944(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	944(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	808(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	1088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	944(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	944(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 784(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1808(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	784(%rsp), %rcx         # 8-byte Reload
	shlq	$2, %rcx
	movq	1808(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 776(%rsp)         # 8-byte Spill
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1040(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 772(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	784(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1040(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 768(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	864(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movl	768(%rsp), %edx         # 4-byte Reload
	movl	772(%rsp), %ecx         # 4-byte Reload
	callq	fprintf
	movabsq	$1, %rsi
	leaq	.L.str41, %rdi
	movabsq	$0, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	.L.str28, %r11
	movabsq	$3, %rbx
	leaq	.L.str19, %r14
	movabsq	$26, %r15
	leaq	.L.str4, %r12
	leaq	.L.str42, %rcx
	movl	$0, %edx
	movl	$1, %ebp
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str40, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	leaq	.L.str14, %rcx
	movq	%rcx, 736(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	leaq	.L.str30, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str29, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	leaq	.L.str38, %rcx
.Ltmp30:
	.loc	1 26 0                  # feature_extraction.c:26:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rdi, 632(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movq	752(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 616(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	624(%rsp), %rax         # 8-byte Reload
	movl	%edx, 612(%rsp)         # 4-byte Spill
	movq	%rax, %rdx
	movq	616(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	600(%rsp), %rax         # 8-byte Reload
	movq	%r8, 592(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%r9, 584(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r13, 576(%rsp)         # 8-byte Spill
	movl	%ebp, 572(%rsp)         # 4-byte Spill
	movq	%r12, 560(%rsp)         # 8-byte Spill
	movq	%r15, 552(%rsp)         # 8-byte Spill
	movq	%r10, 544(%rsp)         # 8-byte Spill
	movq	%r11, 536(%rsp)         # 8-byte Spill
	movq	%rbx, 528(%rsp)         # 8-byte Spill
	movq	%r14, 520(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	612(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rax         # 8-byte Reload
	addq	$1, %rax
	.loc	1 28 0                  # feature_extraction.c:28:0
.Ltmp31:
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 512(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	672(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	612(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp32:
	.loc	1 26 0                  # feature_extraction.c:26:0
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 504(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	612(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	720(%rsp), %rsi         # 8-byte Reload
	movq	512(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 500(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	612(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1804(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	752(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %ebp         # 4-byte Reload
	movl	1804(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 499(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	552(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	612(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	592(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	592(%rsp), %rsi         # 8-byte Reload
	movq	592(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	499(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	616(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	592(%rsp), %r9          # 8-byte Reload
	movq	584(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	499(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	movq	%rdx, 1104(%rsp)        # 8-byte Spill
	movq	%rsi, 1320(%rsp)        # 8-byte Spill
	jne	.LBB0_5
	jmp	.LBB0_4
.Ltmp33:
.LBB0_5:                                # %._crit_edge
                                        #   in Loop: Header=BB0_2 Depth=1
	movq	1320(%rsp), %rax        # 8-byte Reload
	movabsq	$2, %rcx
	movabsq	$64, %rdx
	leaq	.L.str1, %rsi
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$1, %r10
	leaq	.L.str43, %r11
	movabsq	$3, %rbx
	leaq	fprintf, %r14
	leaq	.L.str39, %r15
	movabsq	$30, %r12
	leaq	.L.str4, %r13
	leaq	.L.str19, %rbp
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 472(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 468(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str28, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 30 0                  # feature_extraction.c:30:0
	movq	%rax, 400(%rsp)         # 8-byte Spill
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 392(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 388(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 376(%rsp)         # 8-byte Spill
	movq	%rbp, %rdx
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	400(%rsp), %rax         # 8-byte Reload
	movq	%r8, 360(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	468(%rsp), %eax         # 4-byte Reload
	movq	%r9, 352(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 344(%rsp)         # 8-byte Spill
	movq	%r12, 336(%rsp)         # 8-byte Spill
	movq	%r13, 328(%rsp)         # 8-byte Spill
	movq	%rbp, 320(%rsp)         # 8-byte Spill
	movq	%r14, 312(%rsp)         # 8-byte Spill
	movq	%rbx, 304(%rsp)         # 8-byte Spill
	movq	%r10, 296(%rsp)         # 8-byte Spill
	movq	%r11, 288(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	296(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	392(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	296(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	440(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movl	468(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	296(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	movq	352(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str1, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
                                        # kill: AL<def> AL<kill> EAX<kill>
	movq	488(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movabsq	$1, %rcx
	leaq	.L.str46, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str16, %r9
	movabsq	$3, %r10
	leaq	.L.str12, %r11
	movabsq	$24, %rbx
	leaq	.L.str4, %r14
	leaq	.L.str19, %r15
	leaq	.L.str47, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str45, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str9, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str18, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str17, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str44, %rcx
.Ltmp34:
	.loc	1 24 0                  # feature_extraction.c:24:0
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 176(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	264(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 160(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%r8, 144(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	168(%rsp), %rax         # 8-byte Reload
	movq	%r9, 136(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 132(%rsp)        # 4-byte Spill
	movq	%r15, 120(%rsp)         # 8-byte Spill
	movq	%r12, 112(%rsp)         # 8-byte Spill
	movl	%ebp, 108(%rsp)         # 4-byte Spill
	movq	%r14, 96(%rsp)          # 8-byte Spill
	movq	%rbx, 88(%rsp)          # 8-byte Spill
	movq	%r10, 80(%rsp)          # 8-byte Spill
	movq	%r11, 72(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movl	108(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	108(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	232(%rsp), %rsi         # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 60(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	160(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movl	108(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1916(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	60(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	60(%rsp), %ebp          # 4-byte Reload
	movl	1916(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 59(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	108(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	168(%rsp), %rsi         # 8-byte Reload
	movq	168(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	59(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	59(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	jne	.LBB0_6
	jmp	.LBB0_2
.Ltmp35:
.LBB0_6:                                # %._crit_edge3
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %rdi
	leaq	.L.str4, %r9
	leaq	.L.str12, %r10
	leaq	.L.str48, %r11
	movl	$1, %ebx
	.loc	1 32 0                  # feature_extraction.c:32:0
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	24(%rsp), %r9           # 8-byte Reload
	movq	%r8, 16(%rsp)           # 8-byte Spill
	movq	%r9, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	movl	%ebx, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	12(%rsp), %eax          # 4-byte Reload
	addq	$1928, %rsp             # imm = 0x788
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp36:
.Ltmp37:
	.size	test_stores, .Ltmp37-test_stores
.Lfunc_end0:
	.cfi_endproc

	.globl	process_data
	.align	16, 0x90
	.type	process_data,@function
process_data:                           # @process_data
	.cfi_startproc
.Lfunc_begin1:
	.loc	1 36 0                  # feature_extraction.c:36:0
# BB#0:
	pushq	%rbp
.Ltmp41:
	.cfi_def_cfa_offset 16
.Ltmp42:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp43:
	.cfi_def_cfa_register %rbp
	pushq	%r15
	pushq	%r14
	pushq	%r13
	pushq	%r12
	pushq	%rbx
	subq	$8616, %rsp             # imm = 0x21A8
.Ltmp44:
	.cfi_offset %rbx, -56
.Ltmp45:
	.cfi_offset %r12, -48
.Ltmp46:
	.cfi_offset %r13, -40
.Ltmp47:
	.cfi_offset %r14, -32
.Ltmp48:
	.cfi_offset %r15, -24
	#DEBUG_VALUE: process_data:time_data <- RDI
	#DEBUG_VALUE: process_data:freq_data <- RSI
	#DEBUG_VALUE: process_data:n_samples <- EDX
	#DEBUG_VALUE: process_data:n_channels <- ECX
	#DEBUG_VALUE: process_data:cfg <- R8
	movabsq	$1, %rax
	leaq	.L.str25, %r9
	movabsq	$0, %r10
	leaq	.L.str8, %r11
	movabsq	$2, %rbx
	leaq	.L.str53, %r14
	movabsq	$3, %r15
	leaq	.L.str52, %r12
	movabsq	$44, %r13
	movq	%rax, -48(%rbp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, -56(%rbp)         # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, -64(%rbp)         # 8-byte Spill
	leaq	.L.str51, %rax
	movl	%ecx, -68(%rbp)         # 4-byte Spill
.Ltmp49:
	#DEBUG_VALUE: process_data:n_channels <- [RBP+-68]
	movl	$0, %ecx
	movl	%ecx, -72(%rbp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, -80(%rbp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -88(%rbp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -96(%rbp)         # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -104(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -112(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -120(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -128(%rbp)        # 8-byte Spill
	leaq	.L.str24, %rax
	.loc	1 36 0 prologue_end     # feature_extraction.c:36:0
.Ltmp50:
	subq	$16, %rsp
	movq	%rax, -136(%rbp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str49, %eax
                                        # kill: RAX<def> EAX<kill>
	movl	%ecx, -140(%rbp)        # 4-byte Spill
	movl	$24601, %ecx            # imm = 0x6019
                                        # kill: RCX<def> ECX<kill>
	movl	%edx, -144(%rbp)        # 4-byte Spill
.Ltmp51:
	#DEBUG_VALUE: process_data:n_samples <- [RBP+-144]
	movl	$64, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	%rsi, -152(%rbp)        # 8-byte Spill
.Ltmp52:
	#DEBUG_VALUE: process_data:freq_data <- [RBP+-152]
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -160(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -168(%rbp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rdi, -176(%rbp)        # 8-byte Spill
.Ltmp53:
	#DEBUG_VALUE: process_data:time_data <- [RBP+-176]
	movq	%rcx, %rdi
	movl	%esi, -180(%rbp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rax, -192(%rbp)        # 8-byte Spill
	movq	-176(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -200(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-160(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -208(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-168(%rbp), %rax        # 8-byte Reload
	movq	%r8, -216(%rbp)         # 8-byte Spill
.Ltmp54:
	#DEBUG_VALUE: process_data:cfg <- [RBP+-216]
	movq	%rax, %r8
	movq	-192(%rbp), %rax        # 8-byte Reload
	movq	%r9, -224(%rbp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r14, -232(%rbp)        # 8-byte Spill
	movq	%r15, -240(%rbp)        # 8-byte Spill
	movq	%r12, -248(%rbp)        # 8-byte Spill
	movq	%rbx, -256(%rbp)        # 8-byte Spill
	movq	%r13, -264(%rbp)        # 8-byte Spill
	movq	%r11, -272(%rbp)        # 8-byte Spill
	movq	%r10, -280(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str35, %esi
	movl	%esi, %r8d
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-144(%rbp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str14, %esi
	movl	%esi, %ecx
	movl	$32, %esi
	movl	%esi, %edx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	%rdx, %rsi
	movq	%rdx, -288(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -296(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	%rax, -304(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %esi
	movl	%esi, %ecx
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -312(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	%rax, -320(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$.L.str90, %esi
	movl	%esi, %r8d
	movq	-208(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 42 0                  # feature_extraction.c:42:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %esi
	movl	%esi, %eax
	movl	$.L.str5, %esi
	movl	%esi, %ecx
	movl	$.L.str6, %esi
	movl	%esi, %edx
	movl	$42, %esi
	movl	%esi, %edi
	movl	$12, %esi
	movl	%esi, %r8d
	movq	%rdi, -328(%rbp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -336(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-336(%rbp), %r9         # 8-byte Reload
	movq	%rcx, -344(%rbp)        # 8-byte Spill
	movq	%r9, %rcx
	movl	-180(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -352(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movl	$2, %r9d
	movl	%r9d, %edi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-304(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-296(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-320(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-312(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	-144(%rbp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %eax
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %esi            # imm = 0x4ABE
	movl	%esi, %ecx
	movq	%rcx, %rdi
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -360(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-336(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	movq	%rax, -368(%rbp)        # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str13, %esi
	movl	%esi, %eax
	movl	$34, %esi
	movl	%esi, %r8d
	movq	-328(%rbp), %rdi        # 8-byte Reload
	movq	-352(%rbp), %rsi        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rax, %rcx
	movl	-180(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -376(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-288(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-336(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str20, %esi
	movl	%esi, %eax
	movl	$26, %esi
	movl	%esi, %ecx
	movq	-328(%rbp), %rdi        # 8-byte Reload
	movq	-352(%rbp), %rsi        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -384(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-180(%rbp), %r9d        # 4-byte Reload
	movq	%rax, -392(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-368(%rbp), %rax        # 8-byte Reload
	leaq	15(,%rax,8), %rcx
	andq	$-16, %rcx
	movq	%rsp, %rdx
	subq	%rcx, %rdx
	movq	%rdx, %rsp
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-360(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	%rdx, -400(%rbp)        # 8-byte Spill
	movq	-160(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -408(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-392(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 43 0                  # feature_extraction.c:43:0
	subq	$16, %rsp
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str24, %esi
	movl	%esi, %ecx
	movl	$43, %esi
	movl	%esi, %edi
	movq	-352(%rbp), %rsi        # 8-byte Reload
	movq	-344(%rbp), %rdx        # 8-byte Reload
	movq	-384(%rbp), %r8         # 8-byte Reload
	movl	-180(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rax
	movq	$.L.str8, (%rax)
	movq	-160(%rbp), %rdi        # 8-byte Reload
	movq	-200(%rbp), %rsi        # 8-byte Reload
	movq	-368(%rbp), %rdx        # 8-byte Reload
	movq	-160(%rbp), %rcx        # 8-byte Reload
	movq	-376(%rbp), %r8         # 8-byte Reload
	movq	-192(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rax
	movq	-408(%rbp), %rcx        # 8-byte Reload
	subq	%rcx, %rax
	movq	%rax, %rsp
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-128(%rbp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-136(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -416(%rbp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp55:
	#DEBUG_VALUE: process_data:out <- [RBP+-416]
	#DEBUG_VALUE: channel <- 0
	.loc	1 44 0                  # feature_extraction.c:44:0
	subq	$16, %rsp
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-224(%rbp), %rcx        # 8-byte Reload
	movq	-120(%rbp), %r8         # 8-byte Reload
	movl	-72(%rbp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	-280(%rbp), %rcx        # 8-byte Reload
	movq	-112(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-96(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-104(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %esi         # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-224(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -417(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-264(%rbp), %rdi        # 8-byte Reload
	movq	-56(%rbp), %rsi         # 8-byte Reload
	movq	-64(%rbp), %rdx         # 8-byte Reload
	movq	-80(%rbp), %rcx         # 8-byte Reload
	movq	-256(%rbp), %r8         # 8-byte Reload
	movl	-72(%rbp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-240(%rbp), %rdi        # 8-byte Reload
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-248(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-256(%rbp), %rdi        # 8-byte Reload
	movq	-280(%rbp), %rsi        # 8-byte Reload
	movq	-280(%rbp), %rdx        # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-232(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-48(%rbp), %rdi         # 8-byte Reload
	movq	-48(%rbp), %rsi         # 8-byte Reload
	movq	-48(%rbp), %rcx         # 8-byte Reload
	movq	-224(%rbp), %r8         # 8-byte Reload
	movq	-280(%rbp), %r9         # 8-byte Reload
	movq	-272(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-417(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_2
.Ltmp56:
# BB#1:                                 # %._crit_edge36.thread
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str56, %r8
	leaq	.L.str8, %rdx
	movabsq	$65, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str53, %r9
	leaq	.L.str55, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str31, %r13
	.loc	1 64 0                  # feature_extraction.c:64:0
	subq	$16, %rsp
	movq	%rax, -432(%rbp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -440(%rbp)        # 8-byte Spill
	movl	$.L.str53, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -448(%rbp)        # 8-byte Spill
	movl	$.L.str26, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -456(%rbp)        # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -464(%rbp)        # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -472(%rbp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -480(%rbp)        # 8-byte Spill
	movq	-464(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -488(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	-480(%rbp), %rax        # 8-byte Reload
	movl	%esi, -492(%rbp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	-448(%rbp), %rax        # 8-byte Reload
	movq	%rdx, -504(%rbp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	-456(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -512(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-472(%rbp), %rax        # 8-byte Reload
	movq	%r8, -520(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movl	-492(%rbp), %eax        # 4-byte Reload
	movq	%r9, -528(%rbp)         # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -536(%rbp)        # 8-byte Spill
	movl	%r14d, -540(%rbp)       # 4-byte Spill
	movl	%ebx, -544(%rbp)        # 4-byte Spill
	movq	%r15, -552(%rbp)        # 8-byte Spill
	movq	%r12, -560(%rbp)        # 8-byte Spill
	movq	%r11, -568(%rbp)        # 8-byte Spill
	movq	%r10, -576(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	movl	-492(%rbp), %eax        # 4-byte Reload
	movl	%eax, %esi
	movq	%rsi, -584(%rbp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	-584(%rbp), %r10        # 8-byte Reload
	movq	%rcx, -592(%rbp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %ebx
	movl	%ebx, %r8d
	movl	$1, %ebx
	movl	%ebx, %ecx
	movq	%rcx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rcx, -600(%rbp)        # 8-byte Spill
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %ebx
	movl	%ebx, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edx
	movq	%rdx, %rdi
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	%rdx, -608(%rbp)        # 8-byte Spill
	movq	%rcx, %rdx
	movq	-600(%rbp), %r8         # 8-byte Reload
	movq	%rcx, -616(%rbp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	-456(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-464(%rbp), %rdi        # 8-byte Reload
	movq	-480(%rbp), %rsi        # 8-byte Reload
	movq	-448(%rbp), %rdx        # 8-byte Reload
	movq	%rcx, -624(%rbp)        # 8-byte Spill
	movl	-492(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-592(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-456(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-608(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-464(%rbp), %rdi        # 8-byte Reload
	movq	-480(%rbp), %rsi        # 8-byte Reload
	movq	-448(%rbp), %rdx        # 8-byte Reload
	movl	-492(%rbp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-600(%rbp), %rdi        # 8-byte Reload
	movq	-464(%rbp), %rsi        # 8-byte Reload
	movq	-616(%rbp), %rdx        # 8-byte Reload
	movq	-600(%rbp), %rcx        # 8-byte Reload
	movq	-624(%rbp), %r8         # 8-byte Reload
	movq	-584(%rbp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-616(%rbp), %rcx        # 8-byte Reload
	leaq	15(,%rcx,4), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-552(%rbp), %rdi        # 8-byte Reload
	movq	-560(%rbp), %rdx        # 8-byte Reload
	movq	%rsi, -632(%rbp)        # 8-byte Spill
	movq	%rdx, %rsi
	movq	-632(%rbp), %rdx        # 8-byte Reload
	movq	-432(%rbp), %rcx        # 8-byte Reload
	movq	-536(%rbp), %r8         # 8-byte Reload
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp57:
	#DEBUG_VALUE: process_data:fft_data <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 65 0                  # feature_extraction.c:65:0
	subq	$16, %rsp
	movq	-488(%rbp), %rdi        # 8-byte Reload
	movq	-440(%rbp), %rsi        # 8-byte Reload
	movq	-528(%rbp), %rdx        # 8-byte Reload
	movq	-576(%rbp), %rcx        # 8-byte Reload
	movq	-568(%rbp), %r8         # 8-byte Reload
	movl	-544(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-432(%rbp), %rdi        # 8-byte Reload
	movq	-512(%rbp), %rsi        # 8-byte Reload
	movq	-512(%rbp), %rdx        # 8-byte Reload
	movq	-432(%rbp), %rcx        # 8-byte Reload
	movq	-520(%rbp), %r8         # 8-byte Reload
	movq	-512(%rbp), %r9         # 8-byte Reload
	movq	-504(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-632(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -640(%rbp)        # 8-byte Spill
	jmp	.LBB1_14
.Ltmp58:
.LBB1_2:                                # %.preheader26.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str58, %r8
	leaq	.L.str8, %rdx
	movabsq	$44, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str52, %r9
	leaq	.L.str57, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str34, %r12
	movabsq	$32, %r13
	movq	%rax, -648(%rbp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -656(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -664(%rbp)        # 8-byte Spill
	movabsq	$54, %rax
	movq	%rax, -672(%rbp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -680(%rbp)        # 8-byte Spill
	leaq	.L.str33, %rax
	.loc	1 46 0                  # feature_extraction.c:46:0
.Ltmp59:
	subq	$16, %rsp
	movq	%rax, -688(%rbp)        # 8-byte Spill
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%rdi, -696(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -704(%rbp)        # 8-byte Spill
	movq	%rdx, -712(%rbp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	-688(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -720(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-680(%rbp), %rax        # 8-byte Reload
	movq	%r8, -728(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -736(%rbp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -740(%rbp)       # 4-byte Spill
	movl	%ebx, -744(%rbp)        # 4-byte Spill
	movq	%r15, -752(%rbp)        # 8-byte Spill
	movq	%r13, -760(%rbp)        # 8-byte Spill
	movq	%r12, -768(%rbp)        # 8-byte Spill
	movq	%r11, -776(%rbp)        # 8-byte Spill
	movq	%r10, -784(%rbp)        # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-776(%rbp), %rdi        # 8-byte Reload
	movq	-760(%rbp), %rsi        # 8-byte Reload
	movq	-648(%rbp), %rdx        # 8-byte Reload
	movq	-648(%rbp), %rcx        # 8-byte Reload
	movq	-664(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-144(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-720(%rbp), %rdi        # 8-byte Reload
	movq	-760(%rbp), %rsi        # 8-byte Reload
	movq	-720(%rbp), %rcx        # 8-byte Reload
	movq	-656(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-144(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp60:
	.loc	1 54 0                  # feature_extraction.c:54:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-752(%rbp), %rdi        # 8-byte Reload
	movq	-720(%rbp), %rsi        # 8-byte Reload
	movq	-720(%rbp), %rcx        # 8-byte Reload
	movq	-688(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -785(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-672(%rbp), %rdi        # 8-byte Reload
	movq	-704(%rbp), %rsi        # 8-byte Reload
	movq	-736(%rbp), %rdx        # 8-byte Reload
	movq	-768(%rbp), %rcx        # 8-byte Reload
	movq	-680(%rbp), %r8         # 8-byte Reload
	movl	-744(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-776(%rbp), %rdi        # 8-byte Reload
	movq	-760(%rbp), %rsi        # 8-byte Reload
	movq	-648(%rbp), %rdx        # 8-byte Reload
	movq	-648(%rbp), %rcx        # 8-byte Reload
	movq	-664(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-144(%rbp), %ebx        # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-720(%rbp), %rdi        # 8-byte Reload
	movq	-760(%rbp), %rsi        # 8-byte Reload
	movq	-720(%rbp), %rcx        # 8-byte Reload
	movq	-656(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-144(%rbp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp61:
	.loc	1 44 0                  # feature_extraction.c:44:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-752(%rbp), %rdi        # 8-byte Reload
	movq	-720(%rbp), %rsi        # 8-byte Reload
	movq	-720(%rbp), %rcx        # 8-byte Reload
	movq	-768(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -786(%rbp)         # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-696(%rbp), %rdi        # 8-byte Reload
	movq	-704(%rbp), %rsi        # 8-byte Reload
	movq	-736(%rbp), %rdx        # 8-byte Reload
	movq	-784(%rbp), %rcx        # 8-byte Reload
	movq	-776(%rbp), %r8         # 8-byte Reload
	movl	-744(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-720(%rbp), %rdi        # 8-byte Reload
	movq	-648(%rbp), %rsi        # 8-byte Reload
	movq	-648(%rbp), %rdx        # 8-byte Reload
	movq	-720(%rbp), %rcx        # 8-byte Reload
	movq	-728(%rbp), %r8         # 8-byte Reload
	movq	-648(%rbp), %r9         # 8-byte Reload
	movq	-712(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-648(%rbp), %rcx        # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
.LBB1_3:                                # %.preheader26
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_5 Depth 2
                                        #     Child Loop BB1_8 Depth 2
	movq	-800(%rbp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str33, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str64, %r9
	movabsq	$3, %r10
	leaq	.L.str63, %r11
	movabsq	$46, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str58, %r15
	leaq	.L.str62, %r12
	movl	$0, %r13d
	movq	%rsi, -808(%rbp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -816(%rbp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -824(%rbp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -832(%rbp)        # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -840(%rbp)        # 8-byte Spill
	leaq	.L.str36, %rax
	movq	%rax, -848(%rbp)        # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -856(%rbp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -864(%rbp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -872(%rbp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -880(%rbp)        # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -888(%rbp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -896(%rbp)        # 8-byte Spill
	leaq	.L.str52, %rax
	movq	%rax, -904(%rbp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -912(%rbp)        # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -920(%rbp)        # 8-byte Spill
	leaq	.L.str61, %rax
	movq	%rax, -928(%rbp)        # 8-byte Spill
	movabsq	$-1, %rax
	.loc	1 48 0                  # feature_extraction.c:48:0
.Ltmp62:
	subq	$16, %rsp
	movq	%rdi, -936(%rbp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -940(%rbp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -952(%rbp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	-888(%rbp), %rax        # 8-byte Reload
	movq	%rcx, -960(%rbp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	-864(%rbp), %rax        # 8-byte Reload
	movq	%r8, -968(%rbp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -976(%rbp)         # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movl	%r13d, -980(%rbp)       # 4-byte Spill
	movq	%rbx, -992(%rbp)        # 8-byte Spill
	movq	%r14, -1000(%rbp)       # 8-byte Spill
	movq	%r15, -1008(%rbp)       # 8-byte Spill
	movq	%r12, -1016(%rbp)       # 8-byte Spill
	movq	%r11, -1024(%rbp)       # 8-byte Spill
	movq	%r10, -1032(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-936(%rbp), %rdi        # 8-byte Reload
	movq	-880(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-920(%rbp), %r8         # 8-byte Reload
	movq	-960(%rbp), %r9         # 8-byte Reload
	movq	-928(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-880(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-952(%rbp), %rcx        # 8-byte Reload
	movq	-912(%rbp), %r8         # 8-byte Reload
	movq	-960(%rbp), %r9         # 8-byte Reload
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-880(%rbp), %rsi        # 8-byte Reload
	movq	-816(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-888(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-904(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-864(%rbp), %rdi        # 8-byte Reload
	movq	-1000(%rbp), %rsi       # 8-byte Reload
	movq	-1008(%rbp), %rdx       # 8-byte Reload
	movq	-848(%rbp), %rcx        # 8-byte Reload
	movq	-896(%rbp), %r8         # 8-byte Reload
	movl	-980(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-880(%rbp), %rsi        # 8-byte Reload
	movq	-816(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-888(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-816(%rbp), %rax        # 8-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-832(%rbp), %rsi        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-848(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r13d, -1036(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-864(%rbp), %rdi        # 8-byte Reload
	movq	-1000(%rbp), %rsi       # 8-byte Reload
	movq	-1008(%rbp), %rdx       # 8-byte Reload
	movq	-840(%rbp), %rcx        # 8-byte Reload
	movq	-872(%rbp), %r8         # 8-byte Reload
	movl	-980(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-144(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-936(%rbp), %rdi        # 8-byte Reload
	movq	-832(%rbp), %rsi        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-856(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1036(%rbp), %r13d      # 4-byte Reload
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-832(%rbp), %rsi        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-848(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1036(%rbp), %r13d      # 4-byte Reload
	movl	-144(%rbp), %esi        # 4-byte Reload
	imull	%esi, %r13d
.Ltmp63:
	.loc	1 46 0                  # feature_extraction.c:46:0
	movl	%r13d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-824(%rbp), %rdi        # 8-byte Reload
	movq	-832(%rbp), %rsi        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-840(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, -1040(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-992(%rbp), %rdi        # 8-byte Reload
	movq	-1000(%rbp), %rsi       # 8-byte Reload
	movq	-1008(%rbp), %rdx       # 8-byte Reload
	movq	-1016(%rbp), %rcx       # 8-byte Reload
	movq	-936(%rbp), %r8         # 8-byte Reload
	movl	-980(%rbp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1032(%rbp), %rdi       # 8-byte Reload
	movq	-952(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-1024(%rbp), %r8        # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-936(%rbp), %rdi        # 8-byte Reload
	movq	-952(%rbp), %rsi        # 8-byte Reload
	movq	-952(%rbp), %rdx        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-976(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-785(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-960(%rbp), %rdi        # 8-byte Reload
	movq	-960(%rbp), %rsi        # 8-byte Reload
	movq	-960(%rbp), %rcx        # 8-byte Reload
	movq	-968(%rbp), %r8         # 8-byte Reload
	movq	-952(%rbp), %r9         # 8-byte Reload
	movq	-808(%rbp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-785(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_4
	jmp	.LBB1_6
.LBB1_4:                                # %.lr.ph29
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str66, %r8
	leaq	.L.str8, %rdx
	movabsq	$46, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str63, %r9
	leaq	.L.str65, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str38, %r13
	movq	%rax, -1048(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1056(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1064(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -1072(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -1080(%rbp)       # 8-byte Spill
	movq	-1072(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -1088(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -1096(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -1104(%rbp)       # 8-byte Spill
	movq	%r13, %rcx
	movq	-1080(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1112(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -1120(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -1124(%rbp)      # 4-byte Spill
	movl	%ebx, -1128(%rbp)       # 4-byte Spill
	movq	%r15, -1136(%rbp)       # 8-byte Spill
	movq	%r12, -1144(%rbp)       # 8-byte Spill
	movq	%r13, -1152(%rbp)       # 8-byte Spill
	movq	%r11, -1160(%rbp)       # 8-byte Spill
	movq	%r10, -1168(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1040(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-1104(%rbp), %rdi       # 8-byte Reload
	movq	-1056(%rbp), %rsi       # 8-byte Reload
	movq	-1104(%rbp), %rcx       # 8-byte Reload
	movq	-1064(%rbp), %r8        # 8-byte Reload
	movq	-1048(%rbp), %r9        # 8-byte Reload
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1040(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-1136(%rbp), %rdi       # 8-byte Reload
	movq	-1144(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-1104(%rbp), %rcx       # 8-byte Reload
	movq	-1152(%rbp), %r8        # 8-byte Reload
	movq	-1048(%rbp), %r9        # 8-byte Reload
	movq	-1096(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -1176(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1088(%rbp), %rdi       # 8-byte Reload
	movq	-1072(%rbp), %rsi       # 8-byte Reload
	movq	-1120(%rbp), %rdx       # 8-byte Reload
	movq	-1168(%rbp), %rcx       # 8-byte Reload
	movq	-1160(%rbp), %r8        # 8-byte Reload
	movl	-1128(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1104(%rbp), %rdi       # 8-byte Reload
	movq	-1048(%rbp), %rsi       # 8-byte Reload
	movq	-1048(%rbp), %rdx       # 8-byte Reload
	movq	-1104(%rbp), %rcx       # 8-byte Reload
	movq	-1112(%rbp), %r8        # 8-byte Reload
	movq	-1048(%rbp), %r9        # 8-byte Reload
	movq	-1096(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1048(%rbp), %rax       # 8-byte Reload
	movq	%rax, -1184(%rbp)       # 8-byte Spill
.LBB1_5:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-1184(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str83, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str66, %r9
	movabsq	$3, %r10
	leaq	.L.str64, %r11
	movabsq	$46, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str84, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -1192(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -1200(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1208(%rbp)       # 8-byte Spill
	leaq	.L.str82, %rax
	movq	%rax, -1216(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -1224(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -1232(%rbp)       # 8-byte Spill
	leaq	.L.str68, %rax
	movq	%rax, -1240(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -1248(%rbp)       # 8-byte Spill
	leaq	.L.str67, %rax
	movq	%rax, -1256(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -1264(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	vxorps	%xmm0, %xmm0, %xmm0
	vxorps	%xmm1, %xmm1, %xmm1
	movq	%rax, -1272(%rbp)       # 8-byte Spill
	leaq	.L.str80, %rax
	movq	%rax, -1280(%rbp)       # 8-byte Spill
	movabsq	$51, %rax
	movq	%rax, -1288(%rbp)       # 8-byte Spill
	leaq	.L.str81, %rax
	movq	%rax, -1296(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -1304(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -1312(%rbp)       # 8-byte Spill
	leaq	.L.str44, %rax
	movq	%rax, -1320(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1328(%rbp)       # 8-byte Spill
	leaq	.L.str77, %rax
	movq	%rax, -1336(%rbp)       # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, -1344(%rbp)       # 8-byte Spill
	leaq	.L.str79, %rax
	movq	%rax, -1352(%rbp)       # 8-byte Spill
	leaq	.L.str75, %rax
	movq	%rax, -1360(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rax, -1368(%rbp)       # 8-byte Spill
	leaq	.L.str76, %rax
	movq	%rax, -1376(%rbp)       # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, -1384(%rbp)       # 8-byte Spill
	leaq	.L.str71, %rax
	movq	%rax, -1392(%rbp)       # 8-byte Spill
	leaq	.L.str72, %rax
	movq	%rax, -1400(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -1408(%rbp)       # 8-byte Spill
	leaq	.L.str74, %rax
	.loc	1 48 0                  # feature_extraction.c:48:0
.Ltmp64:
	subq	$16, %rsp
	movq	%rax, -1416(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -1424(%rbp)       # 8-byte Spill
	movl	$.L.str66, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -1432(%rbp)       # 8-byte Spill
	movl	$.L.str67, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -1440(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -1448(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -1456(%rbp)       # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, -1464(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-1448(%rbp), %rax       # 8-byte Reload
	movl	%esi, -1468(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-1432(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1480(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1440(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1488(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1456(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1496(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-1468(%rbp), %eax       # 4-byte Reload
	movq	%r9, -1504(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm1, -1512(%rbp)      # 8-byte Spill
	movl	%r12d, -1516(%rbp)      # 4-byte Spill
	movl	%r13d, -1520(%rbp)      # 4-byte Spill
	vmovss	%xmm0, -1524(%rbp)      # 4-byte Spill
	movq	%r15, -1536(%rbp)       # 8-byte Spill
	movq	%r14, -1544(%rbp)       # 8-byte Spill
	movq	%r10, -1552(%rbp)       # 8-byte Spill
	movq	%r11, -1560(%rbp)       # 8-byte Spill
	movq	%rbx, -1568(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str66, (%rcx)
	movl	$.L.str68, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movl	-1468(%rbp), %eax       # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, -1576(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -1584(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-1584(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -1592(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-1576(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -1600(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str63, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movq	-1576(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1584(%rbp), %rdx       # 8-byte Reload
	movq	-1584(%rbp), %rcx       # 8-byte Reload
	movq	-1576(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str63, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1608(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1440(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str44, %eax
	movl	%eax, %ecx
	movl	$8, %eax
	movl	%eax, %r8d
	movq	-1456(%rbp), %rdi       # 8-byte Reload
	movq	-1448(%rbp), %rsi       # 8-byte Reload
	movq	-1432(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1616(%rbp)       # 8-byte Spill
	movl	-1468(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str38, %eax
	movl	%eax, %r8d
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1176(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-1576(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1440(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	movq	-1176(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	%rsp, %rsi
	movq	$.L.str8, (%rsi)
	movq	-1608(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1576(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1624(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1616(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str69, %eax
	movl	%eax, %ecx
	movl	$29, %eax
	movl	%eax, %r8d
	movq	-1456(%rbp), %rdi       # 8-byte Reload
	movq	-1448(%rbp), %rsi       # 8-byte Reload
	movq	-1432(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1632(%rbp)       # 8-byte Spill
	movl	-1468(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-1600(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1616(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str49, %eax
	movl	%eax, %r8d
	movq	-1576(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-176(%rbp), %rdx        # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	leaq	(%rcx,%rdx,4), %rsi
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-1608(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -1640(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-1640(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1632(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str70, %eax
	movl	%eax, %ecx
	movl	$27, %eax
	movl	%eax, %r8d
	movq	-1456(%rbp), %rdi       # 8-byte Reload
	movq	-1448(%rbp), %rsi       # 8-byte Reload
	movq	-1432(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -1648(%rbp)       # 8-byte Spill
	movl	-1468(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-1576(%rbp), %rdi       # 8-byte Reload
	movq	-1592(%rbp), %rsi       # 8-byte Reload
	movq	-1640(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1632(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-176(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %esi
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movl	$32, %r12d
	movl	%r12d, %edi
	movq	-1608(%rbp), %r8        # 8-byte Reload
	movq	%rdi, -1656(%rbp)       # 8-byte Spill
	movq	%r8, %rdi
	movq	-1656(%rbp), %r9        # 8-byte Reload
	movq	%rsi, -1664(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	-1664(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1648(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	movl	%eax, -1668(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str71, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	-1456(%rbp), %rdi       # 8-byte Reload
	movq	-1448(%rbp), %rsi       # 8-byte Reload
	movq	-1432(%rbp), %rdx       # 8-byte Reload
	movl	-1468(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-1576(%rbp), %rdi       # 8-byte Reload
	movq	-1656(%rbp), %rsi       # 8-byte Reload
	movq	-1664(%rbp), %rdx       # 8-byte Reload
	movq	-1576(%rbp), %rcx       # 8-byte Reload
	movq	-1648(%rbp), %r8        # 8-byte Reload
	movq	-1584(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-1668(%rbp), %eax       # 4-byte Reload
	vcvtsi2ssl	%eax, %xmm0, %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	vmovss	%xmm0, -1672(%rbp)      # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	-1392(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1464(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-1408(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1400(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1552(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1320(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1624(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1680(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1400(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1408(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1416(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1680(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1400(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	vmovss	-1672(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	-1392(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1464(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-400(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	vmovss	-1672(%rbp), %xmm0      # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	1 49 0                  # feature_extraction.c:49:0
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1360(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1552(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1320(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1384(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1624(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1688(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1368(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1376(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1688(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1360(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1512(%rbp), %xmm0      # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1464(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-400(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	vmovss	-1524(%rbp), %xmm0      # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
	.loc	1 50 0                  # feature_extraction.c:50:0
	subq	$16, %rsp
	movq	-1344(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1336(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1552(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1320(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1312(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1624(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1696(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1344(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1352(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1696(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1336(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1512(%rbp), %xmm0      # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1464(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-416(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	vmovss	-1524(%rbp), %xmm0      # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	1 51 0                  # feature_extraction.c:51:0
	subq	$16, %rsp
	movq	-1288(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1280(%rbp), %rcx       # 8-byte Reload
	movq	-1328(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1552(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1320(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1312(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1624(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1704(%rbp)       # 8-byte Spill
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1288(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1296(%rbp), %rcx       # 8-byte Reload
	movq	-1304(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1704(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1280(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	vmovsd	-1512(%rbp), %xmm0      # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1264(%rbp), %rcx       # 8-byte Reload
	movq	-1424(%rbp), %r8        # 8-byte Reload
	movq	-1464(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	movq	-416(%rbp), %rcx        # 8-byte Reload
	movq	-1624(%rbp), %rdx       # 8-byte Reload
	vmovss	-1524(%rbp), %xmm0      # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp65:
	.loc	1 46 0                  # feature_extraction.c:46:0
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1240(%rbp), %rcx       # 8-byte Reload
	movq	-1272(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rdx       # 8-byte Reload
	movq	-1424(%rbp), %rcx       # 8-byte Reload
	movq	-1264(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1192(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1256(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1192(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1488(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1712(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1216(%rbp), %rcx       # 8-byte Reload
	movq	-1248(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1232(%rbp), %rsi       # 8-byte Reload
	movq	-1712(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1240(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-1712(%rbp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1216(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -1716(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1480(%rbp), %rcx       # 8-byte Reload
	movq	-1568(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-144(%rbp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1224(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1208(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1216(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1716(%rbp), %eax       # 4-byte Reload
	movl	-144(%rbp), %r12d       # 4-byte Reload
	cmpl	%r12d, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-1200(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -1717(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1568(%rbp), %rdi       # 8-byte Reload
	movq	-1544(%rbp), %rsi       # 8-byte Reload
	movq	-1504(%rbp), %rdx       # 8-byte Reload
	movq	-1536(%rbp), %rcx       # 8-byte Reload
	movq	-1496(%rbp), %r8        # 8-byte Reload
	movl	-1516(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1552(%rbp), %rdi       # 8-byte Reload
	movq	-1424(%rbp), %rsi       # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1560(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1496(%rbp), %rdi       # 8-byte Reload
	movq	-1424(%rbp), %rsi       # 8-byte Reload
	movq	-1424(%rbp), %rdx       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1504(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1717(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-1488(%rbp), %rdi       # 8-byte Reload
	movq	-1488(%rbp), %rsi       # 8-byte Reload
	movq	-1488(%rbp), %rcx       # 8-byte Reload
	movq	-1480(%rbp), %r8        # 8-byte Reload
	movq	-1424(%rbp), %r9        # 8-byte Reload
	movq	-1464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-1717(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-1712(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -1184(%rbp)       # 8-byte Spill
	jne	.LBB1_6
	jmp	.LBB1_5
.Ltmp66:
.LBB1_6:                                # %._crit_edge30
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$3, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str87, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str86, %r10
	leaq	.L.str90, %r11
	movabsq	$4, %rbx
	leaq	kiss_fft, %r14
	leaq	.L.str89, %r15
	movabsq	$53, %r12
	leaq	.L.str50, %r13
	movq	%rax, -1728(%rbp)       # 8-byte Spill
	leaq	.L.str64, %rax
	movq	%rax, -1736(%rbp)       # 8-byte Spill
	leaq	.L.str88, %rax
	movq	%rax, -1744(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, -1752(%rbp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -1756(%rbp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, -1768(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -1776(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -1784(%rbp)       # 8-byte Spill
	leaq	.L.str85, %rax
	movq	%rax, -1792(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -1800(%rbp)       # 8-byte Spill
	leaq	.L.str73, %rax
	movq	%rax, -1808(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -1816(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -1824(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	.loc	1 53 0                  # feature_extraction.c:53:0
	subq	$16, %rsp
	movq	%rdi, -1832(%rbp)       # 8-byte Spill
	movq	%r12, %rdi
	movl	%esi, -1836(%rbp)       # 4-byte Spill
	movq	%r13, %rsi
	movq	%rax, -1848(%rbp)       # 8-byte Spill
	movq	-1736(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -1856(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-1792(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -1864(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-1848(%rbp), %rax       # 8-byte Reload
	movq	%r8, -1872(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-1756(%rbp), %eax       # 4-byte Reload
	movq	%r9, -1880(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r13, -1888(%rbp)       # 8-byte Spill
	movq	%r14, -1896(%rbp)       # 8-byte Spill
	movq	%r15, -1904(%rbp)       # 8-byte Spill
	movq	%r12, -1912(%rbp)       # 8-byte Spill
	movq	%rbx, -1920(%rbp)       # 8-byte Spill
	movq	%r11, -1928(%rbp)       # 8-byte Spill
	movq	%r10, -1936(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1040(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1816(%rbp), %rsi       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1824(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1040(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	subq	$16, %rsp
	movq	-1776(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-1864(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -1944(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-1792(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1912(%rbp), %rdi       # 8-byte Reload
	movq	-1888(%rbp), %rsi       # 8-byte Reload
	movq	-1736(%rbp), %rdx       # 8-byte Reload
	movq	-1936(%rbp), %rcx       # 8-byte Reload
	movq	-1800(%rbp), %r8        # 8-byte Reload
	movl	-1756(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1880(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1944(%rbp), %rdx       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1792(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-400(%rbp), %rdx        # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1808(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-400(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1776(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1952(%rbp)       # 8-byte Spill
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1936(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1912(%rbp), %rdi       # 8-byte Reload
	movq	-1888(%rbp), %rsi       # 8-byte Reload
	movq	-1736(%rbp), %rdx       # 8-byte Reload
	movq	-1856(%rbp), %rcx       # 8-byte Reload
	movq	-1800(%rbp), %r8        # 8-byte Reload
	movl	-1756(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1880(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1944(%rbp), %rdx       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1792(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1784(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-1944(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-1776(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -1960(%rbp)       # 8-byte Spill
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1856(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1912(%rbp), %rdi       # 8-byte Reload
	movq	-1888(%rbp), %rsi       # 8-byte Reload
	movq	-1736(%rbp), %rdx       # 8-byte Reload
	movq	-1744(%rbp), %rcx       # 8-byte Reload
	movq	-1768(%rbp), %r8        # 8-byte Reload
	movl	-1756(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1920(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1896(%rbp), %rdx       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1904(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1864(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-216(%rbp), %rdx        # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1928(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1880(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1952(%rbp), %rdx       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1936(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1832(%rbp), %rdi       # 8-byte Reload
	movq	-1728(%rbp), %rsi       # 8-byte Reload
	movq	-1960(%rbp), %rdx       # 8-byte Reload
	movq	-1864(%rbp), %rcx       # 8-byte Reload
	movq	-1856(%rbp), %r8        # 8-byte Reload
	movq	-1752(%rbp), %r9        # 8-byte Reload
	movq	-1872(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-216(%rbp), %rdi        # 8-byte Reload
	movq	-1952(%rbp), %rsi       # 8-byte Reload
	movq	-1960(%rbp), %rdx       # 8-byte Reload
	callq	kiss_fft
	movabsq	$1, %rcx
	leaq	.L.str34, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str61, %r9
	movabsq	$3, %r10
	leaq	.L.str92, %r11
	movabsq	$54, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str64, %r15
	leaq	.L.str91, %r12
	movl	$0, %eax
	movl	$1, %r13d
.Ltmp67:
	#DEBUG_VALUE: i <- 0
	.loc	1 54 0                  # feature_extraction.c:54:0
	subq	$16, %rsp
	movq	%rdi, -1968(%rbp)       # 8-byte Spill
	movq	%rbx, %rdi
	movq	%rsi, -1976(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -1984(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, -1992(%rbp)       # 8-byte Spill
	movq	%r12, %rcx
	movq	-1968(%rbp), %rbx       # 8-byte Reload
	movq	%r8, -2000(%rbp)        # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, -2008(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r10, -2016(%rbp)       # 8-byte Spill
	movl	%r13d, -2020(%rbp)      # 4-byte Spill
	movq	%r11, -2032(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2016(%rbp), %rdi       # 8-byte Reload
	movq	-1984(%rbp), %rsi       # 8-byte Reload
	movq	-1984(%rbp), %rdx       # 8-byte Reload
	movq	-1992(%rbp), %rcx       # 8-byte Reload
	movq	-2032(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-1976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-1968(%rbp), %rdi       # 8-byte Reload
	movq	-1984(%rbp), %rsi       # 8-byte Reload
	movq	-1984(%rbp), %rdx       # 8-byte Reload
	movq	-1992(%rbp), %rcx       # 8-byte Reload
	movq	-2008(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-1976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-786(%rbp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-1992(%rbp), %rdi       # 8-byte Reload
	movq	-1992(%rbp), %rsi       # 8-byte Reload
	movq	-1992(%rbp), %rcx       # 8-byte Reload
	movq	-2000(%rbp), %r8        # 8-byte Reload
	movq	-1984(%rbp), %r9        # 8-byte Reload
	movq	-1976(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-786(%rbp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_7
	jmp	.LBB1_9
.LBB1_7:                                # %.lr.ph33
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str95, %r8
	leaq	.L.str8, %rdx
	movabsq	$54, %rsi
	leaq	.L.str50, %rdi
	leaq	.L.str92, %r9
	leaq	.L.str94, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str93, %r13
	movq	%rax, -2040(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2048(%rbp)       # 8-byte Spill
	leaq	.L.str37, %rax
	movq	%rax, -2056(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	subq	$16, %rsp
	movq	%rdi, -2064(%rbp)       # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, -2072(%rbp)       # 8-byte Spill
	movq	-2064(%rbp), %rax       # 8-byte Reload
	movq	%rsi, -2080(%rbp)       # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, -2088(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -2096(%rbp)       # 8-byte Spill
	movq	%r13, %rcx
	movq	-2072(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2104(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2112(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -2116(%rbp)      # 4-byte Spill
	movl	%ebx, -2120(%rbp)       # 4-byte Spill
	movq	%r15, -2128(%rbp)       # 8-byte Spill
	movq	%r12, -2136(%rbp)       # 8-byte Spill
	movq	%r13, -2144(%rbp)       # 8-byte Spill
	movq	%r11, -2152(%rbp)       # 8-byte Spill
	movq	%r10, -2160(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-1040(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-2096(%rbp), %rdi       # 8-byte Reload
	movq	-2048(%rbp), %rsi       # 8-byte Reload
	movq	-2096(%rbp), %rcx       # 8-byte Reload
	movq	-2056(%rbp), %r8        # 8-byte Reload
	movq	-2040(%rbp), %r9        # 8-byte Reload
	movq	-2088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-1040(%rbp), %ebx       # 4-byte Reload
	movslq	%ebx, %rax
	subq	$16, %rsp
	movq	-2128(%rbp), %rdi       # 8-byte Reload
	movq	-2136(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2096(%rbp), %rcx       # 8-byte Reload
	movq	-2144(%rbp), %r8        # 8-byte Reload
	movq	-2040(%rbp), %r9        # 8-byte Reload
	movq	-2088(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2168(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2080(%rbp), %rdi       # 8-byte Reload
	movq	-2064(%rbp), %rsi       # 8-byte Reload
	movq	-2112(%rbp), %rdx       # 8-byte Reload
	movq	-2160(%rbp), %rcx       # 8-byte Reload
	movq	-2152(%rbp), %r8        # 8-byte Reload
	movl	-2120(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2096(%rbp), %rdi       # 8-byte Reload
	movq	-2040(%rbp), %rsi       # 8-byte Reload
	movq	-2040(%rbp), %rdx       # 8-byte Reload
	movq	-2096(%rbp), %rcx       # 8-byte Reload
	movq	-2104(%rbp), %r8        # 8-byte Reload
	movq	-2040(%rbp), %r9        # 8-byte Reload
	movq	-2088(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2040(%rbp), %rax       # 8-byte Reload
	movq	%rax, -2176(%rbp)       # 8-byte Spill
.LBB1_8:                                #   Parent Loop BB1_3 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-2176(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str105, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str95, %r9
	movabsq	$3, %r10
	leaq	.L.str61, %r11
	movabsq	$54, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str106, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -2184(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -2192(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2200(%rbp)       # 8-byte Spill
	leaq	.L.str104, %rax
	movq	%rax, -2208(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -2216(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2224(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2232(%rbp)       # 8-byte Spill
	leaq	.L.str97, %rax
	movq	%rax, -2240(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2248(%rbp)       # 8-byte Spill
	leaq	.L.str96, %rax
	movq	%rax, -2256(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2264(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -2272(%rbp)       # 8-byte Spill
	leaq	.L.str101, %rax
	movq	%rax, -2280(%rbp)       # 8-byte Spill
	leaq	.L.str102, %rax
	movq	%rax, -2288(%rbp)       # 8-byte Spill
	movabsq	$56, %rax
	movq	%rax, -2296(%rbp)       # 8-byte Spill
	leaq	.L.str103, %rax
	movq	%rax, -2304(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -2312(%rbp)       # 8-byte Spill
	leaq	.L.str35, %rax
	movq	%rax, -2320(%rbp)       # 8-byte Spill
	leaq	.L.str98, %rax
	movq	%rax, -2328(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -2336(%rbp)       # 8-byte Spill
	leaq	.L.str100, %rax
	movq	%rax, -2344(%rbp)       # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, -2352(%rbp)       # 8-byte Spill
	leaq	.L.str99, %rax
	movq	%rax, -2360(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -2368(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -2376(%rbp)       # 8-byte Spill
	leaq	.L.str93, %rax
	movq	%rax, -2384(%rbp)       # 8-byte Spill
	leaq	.L.str92, %rax
	movq	%rax, -2392(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -2400(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 56 0                  # feature_extraction.c:56:0
.Ltmp68:
	subq	$16, %rsp
	movq	%rax, -2408(%rbp)       # 8-byte Spill
	movq	-2400(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -2416(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -2424(%rbp)       # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -2432(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-2256(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2440(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2408(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2448(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2456(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2464(%rbp)       # 8-byte Spill
	movq	%r15, -2472(%rbp)       # 8-byte Spill
	movl	%r12d, -2476(%rbp)      # 4-byte Spill
	movl	%r13d, -2480(%rbp)      # 4-byte Spill
	movq	%rbx, -2488(%rbp)       # 8-byte Spill
	movq	%r11, -2496(%rbp)       # 8-byte Spill
	movq	%r10, -2504(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2240(%rbp), %r8        # 8-byte Reload
	movq	-2440(%rbp), %r9        # 8-byte Reload
	movq	-2456(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2424(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2440(%rbp), %r9        # 8-byte Reload
	movq	-2392(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2184(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2256(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2392(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2328(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2168(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2384(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2184(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2256(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2184(%rbp), %rax       # 8-byte Reload
	movq	-2168(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2512(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2360(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2504(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2424(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2512(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2376(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2512(%rbp), %rax       # 8-byte Reload
	shlq	$3, %rax
	movq	-416(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2440(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2520(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2360(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2368(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2520(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2360(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-416(%rbp), %rax        # 8-byte Reload
	movq	-2512(%rbp), %rcx       # 8-byte Reload
	vmovss	(%rax,%rcx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	vmovss	%xmm0, -2524(%rbp)      # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	-2440(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2424(%rbp), %r8        # 8-byte Reload
	movq	-2416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2280(%rbp), %rcx       # 8-byte Reload
	movq	-2352(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	vmovss	-2524(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rdx       # 8-byte Reload
	movq	-2344(%rbp), %rcx       # 8-byte Reload
	movq	-2424(%rbp), %r8        # 8-byte Reload
	movq	-2416(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-2524(%rbp), %xmm0      # 4-byte Reload
	vcvttss2si	%xmm0, %r12d
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r12d, -2528(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2288(%rbp), %rcx       # 8-byte Reload
	movq	-2336(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2512(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2328(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-152(%rbp), %rdx        # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2320(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-2512(%rbp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	-152(%rbp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-2440(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2536(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2288(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2296(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2304(%rbp), %rcx       # 8-byte Reload
	movq	-2312(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2536(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2288(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-2528(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2280(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-152(%rbp), %rax        # 8-byte Reload
	movq	-2512(%rbp), %rcx       # 8-byte Reload
	movl	-2528(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, (%rax,%rcx,4)
.Ltmp69:
	.loc	1 54 0                  # feature_extraction.c:54:0
	subq	$16, %rsp
	movq	-2488(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2240(%rbp), %rcx       # 8-byte Reload
	movq	-2272(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rdx       # 8-byte Reload
	movq	-2424(%rbp), %rcx       # 8-byte Reload
	movq	-2264(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2184(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2256(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2184(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2240(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2544(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2488(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2208(%rbp), %rcx       # 8-byte Reload
	movq	-2248(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2232(%rbp), %rsi       # 8-byte Reload
	movq	-2544(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2240(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2544(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2548(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2488(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2432(%rbp), %rcx       # 8-byte Reload
	movq	-2224(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-144(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2216(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2548(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2200(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2208(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2548(%rbp), %r12d      # 4-byte Reload
	movl	-144(%rbp), %r13d       # 4-byte Reload
	cmpl	%r13d, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2192(%rbp), %rdi       # 8-byte Reload
	movq	-2440(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2432(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2549(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2488(%rbp), %rdi       # 8-byte Reload
	movq	-2464(%rbp), %rsi       # 8-byte Reload
	movq	-2456(%rbp), %rdx       # 8-byte Reload
	movq	-2472(%rbp), %rcx       # 8-byte Reload
	movq	-2448(%rbp), %r8        # 8-byte Reload
	movl	-2476(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2504(%rbp), %rdi       # 8-byte Reload
	movq	-2424(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2496(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2448(%rbp), %rdi       # 8-byte Reload
	movq	-2424(%rbp), %rsi       # 8-byte Reload
	movq	-2424(%rbp), %rdx       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2456(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2549(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2440(%rbp), %rdi       # 8-byte Reload
	movq	-2440(%rbp), %rsi       # 8-byte Reload
	movq	-2440(%rbp), %rcx       # 8-byte Reload
	movq	-2432(%rbp), %r8        # 8-byte Reload
	movq	-2424(%rbp), %r9        # 8-byte Reload
	movq	-2416(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2549(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2544(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -2176(%rbp)       # 8-byte Spill
	jne	.LBB1_9
	jmp	.LBB1_8
.Ltmp70:
.LBB1_9:                                # %._crit_edge34
                                        #   in Loop: Header=BB1_3 Depth=1
	movabsq	$1, %rax
	leaq	.L.str108, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str58, %r8
	movabsq	$3, %r9
	leaq	.L.str110, %r10
	movabsq	$44, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str61, %r14
	leaq	.L.str109, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -2560(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -2568(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2576(%rbp)       # 8-byte Spill
	leaq	.L.str107, %rax
	movq	%rax, -2584(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2592(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2600(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2608(%rbp)       # 8-byte Spill
	leaq	.L.str60, %rax
	movq	%rax, -2616(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -2624(%rbp)       # 8-byte Spill
	leaq	.L.str59, %rax
	movq	%rax, -2632(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2640(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 44 0                  # feature_extraction.c:44:0
	subq	$16, %rsp
	movq	%rdi, -2648(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -2656(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -2664(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -2672(%rbp)       # 8-byte Spill
	movq	-2616(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2680(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2672(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2688(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -2696(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -2704(%rbp)       # 8-byte Spill
	movq	%r15, -2712(%rbp)       # 8-byte Spill
	movl	%r12d, -2716(%rbp)      # 4-byte Spill
	movl	%r13d, -2720(%rbp)      # 4-byte Spill
	movq	%rbx, -2728(%rbp)       # 8-byte Spill
	movq	%r11, -2736(%rbp)       # 8-byte Spill
	movq	%r10, -2744(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2608(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rdx       # 8-byte Reload
	movq	-2664(%rbp), %rcx       # 8-byte Reload
	movq	-2640(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2560(%rbp), %rdi       # 8-byte Reload
	movq	-2608(%rbp), %rsi       # 8-byte Reload
	movq	-816(%rbp), %rdx        # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2632(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-816(%rbp), %rax        # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-2568(%rbp), %rdi       # 8-byte Reload
	movq	-2608(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2616(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -2752(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2736(%rbp), %rdi       # 8-byte Reload
	movq	-2728(%rbp), %rsi       # 8-byte Reload
	movq	-2704(%rbp), %rdx       # 8-byte Reload
	movq	-2584(%rbp), %rcx       # 8-byte Reload
	movq	-2624(%rbp), %r8        # 8-byte Reload
	movl	-2716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2560(%rbp), %rdi       # 8-byte Reload
	movq	-2608(%rbp), %rsi       # 8-byte Reload
	movq	-2752(%rbp), %rdx       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2616(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-2752(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2568(%rbp), %rdi       # 8-byte Reload
	movq	-2576(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -2756(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2736(%rbp), %rdi       # 8-byte Reload
	movq	-2728(%rbp), %rsi       # 8-byte Reload
	movq	-2704(%rbp), %rdx       # 8-byte Reload
	movq	-2680(%rbp), %rcx       # 8-byte Reload
	movq	-2600(%rbp), %r8        # 8-byte Reload
	movl	-2716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2576(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2592(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2756(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-2560(%rbp), %rdi       # 8-byte Reload
	movq	-2576(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2584(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-2756(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %r13d        # 4-byte Reload
	cmpl	%r13d, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-2568(%rbp), %rdi       # 8-byte Reload
	movq	-2560(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2680(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -2757(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2736(%rbp), %rdi       # 8-byte Reload
	movq	-2728(%rbp), %rsi       # 8-byte Reload
	movq	-2704(%rbp), %rdx       # 8-byte Reload
	movq	-2712(%rbp), %rcx       # 8-byte Reload
	movq	-2648(%rbp), %r8        # 8-byte Reload
	movl	-2716(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2696(%rbp), %rdi       # 8-byte Reload
	movq	-2664(%rbp), %rsi       # 8-byte Reload
	movq	-2664(%rbp), %rdx       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2744(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2648(%rbp), %rdi       # 8-byte Reload
	movq	-2664(%rbp), %rsi       # 8-byte Reload
	movq	-2664(%rbp), %rdx       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2688(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2757(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2560(%rbp), %rdi       # 8-byte Reload
	movq	-2560(%rbp), %rsi       # 8-byte Reload
	movq	-2560(%rbp), %rcx       # 8-byte Reload
	movq	-2680(%rbp), %r8        # 8-byte Reload
	movq	-2664(%rbp), %r9        # 8-byte Reload
	movq	-2656(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-2757(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2752(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -800(%rbp)        # 8-byte Spill
	jne	.LBB1_10
	jmp	.LBB1_3
.Ltmp71:
.LBB1_10:                               # %._crit_edge36
	#DEBUG_VALUE: process_data:low_index <- 1
	#DEBUG_VALUE: process_data:high_index <- 47
	#DEBUG_VALUE: process_data:n_fft_items <- 47
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str114, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str56, %r8
	movabsq	$3, %r9
	leaq	.L.str116, %r10
	movabsq	$65, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str110, %r14
	leaq	.L.str115, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -2768(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -2776(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -2784(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -2792(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -2800(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -2808(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -2816(%rbp)       # 8-byte Spill
	leaq	.L.str113, %rax
	.loc	1 64 0                  # feature_extraction.c:64:0
	subq	$16, %rsp
	movq	%rax, -2824(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -2832(%rbp)       # 8-byte Spill
	movl	$.L.str110, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2840(%rbp)       # 8-byte Spill
	movl	$.L.str111, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2848(%rbp)       # 8-byte Spill
	movl	$64, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2856(%rbp)       # 8-byte Spill
	movl	$12, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -2864(%rbp)       # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -2872(%rbp)       # 8-byte Spill
	movq	-2856(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -2880(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-2872(%rbp), %rax       # 8-byte Reload
	movl	%esi, -2884(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-2840(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -2896(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-2848(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -2904(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-2864(%rbp), %rax       # 8-byte Reload
	movq	%r8, -2912(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-2884(%rbp), %eax       # 4-byte Reload
	movq	%r9, -2920(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	%r13d, -2924(%rbp)      # 4-byte Spill
	movq	%r14, -2936(%rbp)       # 8-byte Spill
	movq	%r15, -2944(%rbp)       # 8-byte Spill
	movl	%r12d, -2948(%rbp)      # 4-byte Spill
	movq	%rbx, -2960(%rbp)       # 8-byte Spill
	movq	%r11, -2968(%rbp)       # 8-byte Spill
	movq	%r10, -2976(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$32, %eax
	movl	%eax, %ecx
	movl	$47, %eax
	movl	%eax, %edx
	movl	-2884(%rbp), %eax       # 4-byte Reload
	movl	%eax, %esi
	movq	%rsi, -2984(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	-2984(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -2992(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str9, %r12d
	movl	%r12d, %r8d
	movl	$1, %r12d
	movl	%r12d, %ecx
	movq	%rcx, %rdi
	movq	-2992(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -3000(%rbp)       # 8-byte Spill
	movq	-2984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	imull	$47, %eax, %r12d
	movl	%r12d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %r12d           # imm = 0x4ABE
	movl	%r12d, %edx
	movq	%rdx, %rdi
	movq	-2992(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3008(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3000(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3016(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-2848(%rbp), %r8        # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str112, %eax
	movl	%eax, %ecx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	-2856(%rbp), %rdi       # 8-byte Reload
	movq	-2872(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -3024(%rbp)       # 8-byte Spill
	movl	-2884(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-3000(%rbp), %rdi       # 8-byte Reload
	movq	-2992(%rbp), %rsi       # 8-byte Reload
	movq	-3016(%rbp), %rdx       # 8-byte Reload
	movq	-3000(%rbp), %rcx       # 8-byte Reload
	movq	-2848(%rbp), %r8        # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-3008(%rbp), %rdi       # 8-byte Reload
	movq	-2856(%rbp), %rsi       # 8-byte Reload
	movq	-3016(%rbp), %rdx       # 8-byte Reload
	movq	-3000(%rbp), %rcx       # 8-byte Reload
	movq	-3024(%rbp), %r8        # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str113, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %r8d
	movq	-2856(%rbp), %rdi       # 8-byte Reload
	movq	-2872(%rbp), %rsi       # 8-byte Reload
	movq	-2840(%rbp), %rdx       # 8-byte Reload
	movl	-2884(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-3000(%rbp), %rdi       # 8-byte Reload
	movq	-2856(%rbp), %rsi       # 8-byte Reload
	movq	-3016(%rbp), %rdx       # 8-byte Reload
	movq	-3000(%rbp), %rcx       # 8-byte Reload
	movq	-3024(%rbp), %r8        # 8-byte Reload
	movq	-2984(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3016(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,4), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	-2776(%rbp), %rdi       # 8-byte Reload
	movq	-2816(%rbp), %rdx       # 8-byte Reload
	movq	%rsi, -3032(%rbp)       # 8-byte Spill
.Ltmp72:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-3032]
	movq	%rdx, %rsi
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2824(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp73:
	#DEBUG_VALUE: process_data:fft_data <- [RBP+-3032]
	#DEBUG_VALUE: channel <- 0
	.loc	1 65 0                  # feature_extraction.c:65:0
	subq	$16, %rsp
	movq	-2968(%rbp), %rdi       # 8-byte Reload
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	movq	-2936(%rbp), %rdx       # 8-byte Reload
	movq	-2896(%rbp), %rcx       # 8-byte Reload
	movq	-2808(%rbp), %r8        # 8-byte Reload
	movl	-2948(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2880(%rbp), %rdi       # 8-byte Reload
	movq	-2784(%rbp), %rsi       # 8-byte Reload
	movq	-2768(%rbp), %rdx       # 8-byte Reload
	movq	-2768(%rbp), %rcx       # 8-byte Reload
	movq	-2800(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2784(%rbp), %rsi       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2792(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2776(%rbp), %rdi       # 8-byte Reload
	movq	-2904(%rbp), %rsi       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2896(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -3033(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2968(%rbp), %rdi       # 8-byte Reload
	movq	-2960(%rbp), %rsi       # 8-byte Reload
	movq	-2936(%rbp), %rdx       # 8-byte Reload
	movq	-2944(%rbp), %rcx       # 8-byte Reload
	movq	-2880(%rbp), %r8        # 8-byte Reload
	movl	-2948(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2920(%rbp), %rdi       # 8-byte Reload
	movq	-2768(%rbp), %rsi       # 8-byte Reload
	movq	-2768(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2976(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-2880(%rbp), %rdi       # 8-byte Reload
	movq	-2768(%rbp), %rsi       # 8-byte Reload
	movq	-2768(%rbp), %rdx       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2912(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3033(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-2904(%rbp), %rdi       # 8-byte Reload
	movq	-2904(%rbp), %rsi       # 8-byte Reload
	movq	-2904(%rbp), %rcx       # 8-byte Reload
	movq	-2896(%rbp), %r8        # 8-byte Reload
	movq	-2768(%rbp), %r9        # 8-byte Reload
	movq	-2832(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-3033(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-2768(%rbp), %rcx       # 8-byte Reload
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	movq	%rcx, -3048(%rbp)       # 8-byte Spill
	movq	%rdx, -640(%rbp)        # 8-byte Spill
	jne	.LBB1_11
	jmp	.LBB1_14
.Ltmp74:
.LBB1_11:                               # %.preheader22
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_12 Depth 2
	movq	-3048(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str127, %r8
	leaq	.L.str8, %rsi
	movabsq	$67, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str116, %r10
	leaq	.L.str126, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -3056(%rbp)       # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, -3064(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3072(%rbp)       # 8-byte Spill
	leaq	.L.str122, %rax
	movq	%rax, -3080(%rbp)       # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, -3088(%rbp)       # 8-byte Spill
	leaq	.L.str124, %rax
	movq	%rax, -3096(%rbp)       # 8-byte Spill
	leaq	.L.str123, %rax
	movq	%rax, -3104(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3112(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -3120(%rbp)       # 8-byte Spill
	leaq	.L.str117, %rax
	movq	%rax, -3128(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -3136(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -3144(%rbp)       # 8-byte Spill
	leaq	.L.str121, %rax
	movq	%rax, -3152(%rbp)       # 8-byte Spill
	movabsq	$69, %rax
	movq	%rax, -3160(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3168(%rbp)       # 8-byte Spill
	leaq	.L.str120, %rax
	movq	%rax, -3176(%rbp)       # 8-byte Spill
	leaq	.L.str14, %rax
	movq	%rax, -3184(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -3192(%rbp)       # 8-byte Spill
	leaq	.L.str119, %rax
	movq	%rax, -3200(%rbp)       # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, -3208(%rbp)       # 8-byte Spill
	leaq	.L.str110, %rax
	movq	%rax, -3216(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3224(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 69 0                  # feature_extraction.c:69:0
.Ltmp75:
	subq	$16, %rsp
	movq	%rax, -3232(%rbp)       # 8-byte Spill
	movq	-3224(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3240(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -3248(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -3256(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-3128(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3264(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3232(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3272(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -3280(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -3284(%rbp)      # 4-byte Spill
	movl	%r15d, -3288(%rbp)      # 4-byte Spill
	movq	%rbx, -3296(%rbp)       # 8-byte Spill
	movq	%r12, -3304(%rbp)       # 8-byte Spill
	movq	%r13, -3312(%rbp)       # 8-byte Spill
	movq	%r11, -3320(%rbp)       # 8-byte Spill
	movq	%r10, -3328(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3296(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3264(%rbp), %rdx       # 8-byte Reload
	movq	-3264(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3256(%rbp), %r9        # 8-byte Reload
	movq	-3216(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3264(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3208(%rbp), %r8        # 8-byte Reload
	movq	-3256(%rbp), %r9        # 8-byte Reload
	movq	-3200(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3056(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3128(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3200(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3176(%rbp), %rcx       # 8-byte Reload
	movq	-3192(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3056(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3128(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3056(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r14d
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3176(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -3332(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3152(%rbp), %rcx       # 8-byte Reload
	movq	-3144(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-144(%rbp), %r9d        # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3296(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3184(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3332(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3176(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3332(%rbp), %r14d      # 4-byte Reload
	movl	-144(%rbp), %r15d       # 4-byte Reload
	imull	%r15d, %r14d
	movl	%r14d, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3152(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3336(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3160(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3080(%rbp), %rcx       # 8-byte Reload
	movq	-3168(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3296(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rdx       # 8-byte Reload
	movq	-3264(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3336(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3152(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3336(%rbp), %r14d      # 4-byte Reload
	addl	$1, %r14d
.Ltmp76:
	.loc	1 67 0                  # feature_extraction.c:67:0
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r14d, -3340(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3240(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3104(%rbp), %rcx       # 8-byte Reload
	movq	-3144(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3296(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3136(%rbp), %rdx       # 8-byte Reload
	movq	-3264(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3056(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3128(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	-3056(%rbp), %rcx       # 8-byte Reload
	imulq	%rax, %rcx
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3256(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3352(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3104(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3240(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3096(%rbp), %rcx       # 8-byte Reload
	movq	-3120(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3296(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3072(%rbp), %rdx       # 8-byte Reload
	movq	-3264(%rbp), %rcx       # 8-byte Reload
	movq	-3112(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	-3352(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3104(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3352(%rbp), %rax       # 8-byte Reload
	sarq	$32, %rax
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3096(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3360(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3240(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3064(%rbp), %rcx       # 8-byte Reload
	movq	-3088(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-3340(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3072(%rbp), %rsi       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3080(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-3340(%rbp), %r14d      # 4-byte Reload
	movslq	%r14d, %rax
	subq	$16, %rsp
	movq	-3304(%rbp), %rdi       # 8-byte Reload
	movq	-3312(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3064(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -3368(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3240(%rbp), %rdi       # 8-byte Reload
	movq	-3280(%rbp), %rsi       # 8-byte Reload
	movq	-3328(%rbp), %rdx       # 8-byte Reload
	movq	-3320(%rbp), %rcx       # 8-byte Reload
	movq	-3296(%rbp), %r8        # 8-byte Reload
	movl	-3284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3256(%rbp), %rdi       # 8-byte Reload
	movq	-3264(%rbp), %rsi       # 8-byte Reload
	movq	-3264(%rbp), %rdx       # 8-byte Reload
	movq	-3256(%rbp), %rcx       # 8-byte Reload
	movq	-3272(%rbp), %r8        # 8-byte Reload
	movq	-3264(%rbp), %r9        # 8-byte Reload
	movq	-3248(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3264(%rbp), %rax       # 8-byte Reload
	movq	%rax, -3376(%rbp)       # 8-byte Spill
.LBB1_12:                               #   Parent Loop BB1_11 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-3376(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	leaq	.L.str139, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	log10, %r10
	leaq	.L.str142, %r11
	movabsq	$71, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str127, %r15
	leaq	.L.str141, %r12
	movabsq	$49, %r13
	movq	%rsi, -3384(%rbp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -3388(%rbp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, -3400(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -3408(%rbp)       # 8-byte Spill
	leaq	.L.str138, %rax
	movq	%rax, -3416(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -3424(%rbp)       # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, -3432(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -3440(%rbp)       # 8-byte Spill
	leaq	.L.str137, %rax
	movq	%rax, -3448(%rbp)       # 8-byte Spill
	movabsq	$41, %rax
	movq	%rax, -3456(%rbp)       # 8-byte Spill
	leaq	.L.str135, %rax
	movq	%rax, -3464(%rbp)       # 8-byte Spill
	leaq	.L.str136, %rax
	movq	%rax, -3472(%rbp)       # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, -3480(%rbp)       # 8-byte Spill
	leaq	.L.str134, %rax
	movq	%rax, -3488(%rbp)       # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, -3496(%rbp)       # 8-byte Spill
	leaq	.L.str132, %rax
	movq	%rax, -3504(%rbp)       # 8-byte Spill
	leaq	.L.str133, %rax
	movq	%rax, -3512(%rbp)       # 8-byte Spill
	movabsq	$70, %rax
	movq	%rax, -3520(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -3528(%rbp)       # 8-byte Spill
	leaq	.L.str78, %rax
	movq	%rax, -3536(%rbp)       # 8-byte Spill
	leaq	.L.str130, %rax
	movq	%rax, -3544(%rbp)       # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, -3552(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -3560(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -3568(%rbp)       # 8-byte Spill
	leaq	.L.str131, %rax
	movq	%rax, -3576(%rbp)       # 8-byte Spill
	leaq	.L.str125, %rax
	movq	%rax, -3584(%rbp)       # 8-byte Spill
	leaq	.L.str128, %rax
	movq	%rax, -3592(%rbp)       # 8-byte Spill
	movabsq	$69, %rax
	movq	%rax, -3600(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -3608(%rbp)       # 8-byte Spill
	leaq	.L.str116, %rax
	movq	%rax, -3616(%rbp)       # 8-byte Spill
	leaq	.L.str129, %rax
	movq	%rax, -3624(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -3632(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 69 0                  # feature_extraction.c:69:0
.Ltmp77:
	subq	$16, %rsp
	movq	%rax, -3640(%rbp)       # 8-byte Spill
	movq	-3632(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -3648(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -3652(%rbp)       # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -3664(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-3592(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -3672(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-3640(%rbp), %rax       # 8-byte Reload
	movq	%r8, -3680(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-3388(%rbp), %eax       # 4-byte Reload
	movq	%r9, -3688(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -3696(%rbp)       # 8-byte Spill
	movq	%r15, -3704(%rbp)       # 8-byte Spill
	movq	%r12, -3712(%rbp)       # 8-byte Spill
	movq	%r13, -3720(%rbp)       # 8-byte Spill
	movq	%rbx, -3728(%rbp)       # 8-byte Spill
	movq	%r11, -3736(%rbp)       # 8-byte Spill
	movq	%r10, -3744(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3648(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3624(%rbp), %r8        # 8-byte Reload
	movq	-3672(%rbp), %r9        # 8-byte Reload
	movq	-3704(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3648(%rbp), %rdx       # 8-byte Reload
	movq	-3648(%rbp), %rcx       # 8-byte Reload
	movq	-3560(%rbp), %r8        # 8-byte Reload
	movq	-3672(%rbp), %r9        # 8-byte Reload
	movq	-3616(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3400(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3592(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3616(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3600(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3544(%rbp), %rcx       # 8-byte Reload
	movq	-3608(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3400(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3592(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3368(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3584(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3368(%rbp), %rcx       # 8-byte Reload
	movq	-3400(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	.loc	1 70 0                  # feature_extraction.c:70:0
	subq	$16, %rsp
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3672(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -3752(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3544(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3520(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3576(%rbp), %rcx       # 8-byte Reload
	movq	-3568(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3648(%rbp), %rdx       # 8-byte Reload
	movq	-3648(%rbp), %rcx       # 8-byte Reload
	movq	-3560(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3752(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3544(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3752(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3760(%rbp)       # 8-byte Spill
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3576(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3520(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3504(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3760(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3576(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-416(%rbp), %rcx        # 8-byte Reload
	movq	-3752(%rbp), %rdx       # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	vmovss	%xmm0, -3764(%rbp)      # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3504(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3520(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3512(%rbp), %rcx       # 8-byte Reload
	movq	-3568(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3552(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3648(%rbp), %rcx       # 8-byte Reload
	movq	-3560(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3752(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3544(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-416(%rbp), %rdx        # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3536(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3752(%rbp), %rcx       # 8-byte Reload
	shlq	$3, %rcx
	movq	-416(%rbp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	subq	$16, %rsp
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -3776(%rbp)       # 8-byte Spill
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3512(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3520(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3488(%rbp), %rcx       # 8-byte Reload
	movq	-3528(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3776(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3512(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-416(%rbp), %rcx        # 8-byte Reload
	movq	-3752(%rbp), %rdx       # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	.loc	1 71 0                  # feature_extraction.c:71:0
	cvtss2sd	%xmm0, %xmm1
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	vmovss	%xmm0, -3780(%rbp)      # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3488(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	movq	-3496(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	vmovss	-3764(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3504(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3764(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3504(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3764(%rbp), %xmm0      # 4-byte Reload
	vmulss	%xmm0, %xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	vmovss	%xmm1, -3784(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3472(%rbp), %rcx       # 8-byte Reload
	movq	-3496(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	vmovss	-3780(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3488(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3780(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3488(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3780(%rbp), %xmm0      # 4-byte Reload
	vmulss	%xmm0, %xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3472(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	vmovss	%xmm1, -3788(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3448(%rbp), %rcx       # 8-byte Reload
	movq	-3480(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	vmovss	-3788(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3472(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3784(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3464(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3784(%rbp), %xmm0      # 4-byte Reload
	vmovss	-3788(%rbp), %xmm1      # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3448(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	vmovss	%xmm2, -3792(%rbp)      # 4-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3416(%rbp), %rcx       # 8-byte Reload
	movq	-3456(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	vmovss	-3792(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3440(%rbp), %rsi       # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3448(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	-3792(%rbp), %xmm0      # 4-byte Reload
	cvtss2sd	%xmm0, %xmm1
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3416(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	vmovsd	%xmm1, -3800(%rbp)      # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3720(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3424(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3432(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3800(%rbp), %xmm0      # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3416(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3800(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-3408(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -3808(%rbp)      # 8-byte Spill
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3728(%rbp), %rdi       # 8-byte Reload
	movq	-3696(%rbp), %rsi       # 8-byte Reload
	movq	-3704(%rbp), %rdx       # 8-byte Reload
	movq	-3712(%rbp), %rcx       # 8-byte Reload
	movq	-3720(%rbp), %r8        # 8-byte Reload
	movl	-3388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3688(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	movq	-3744(%rbp), %rdx       # 8-byte Reload
	movq	-3672(%rbp), %rcx       # 8-byte Reload
	movq	-3736(%rbp), %r8        # 8-byte Reload
	movq	-3648(%rbp), %r9        # 8-byte Reload
	movq	-3680(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3672(%rbp), %rdi       # 8-byte Reload
	movq	-3664(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3808(%rbp), %xmm0      # 8-byte Reload
	movq	-3672(%rbp), %rdx       # 8-byte Reload
	movq	-3384(%rbp), %rcx       # 8-byte Reload
	movq	-3648(%rbp), %r8        # 8-byte Reload
	movq	-3680(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3808(%rbp), %xmm0      # 8-byte Reload
	callq	log10
	movabsq	$1, %rcx
	leaq	.L.str148, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str127, %r9
	movabsq	$3, %r10
	leaq	.L.str119, %r11
	movabsq	$67, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str149, %r15
	movl	$0, %eax
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, -3816(%rbp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, -3824(%rbp)       # 8-byte Spill
	leaq	.L.str129, %rcx
	movq	%rcx, -3832(%rbp)       # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, -3840(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -3848(%rbp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -3856(%rbp)       # 8-byte Spill
	leaq	.L.str128, %rcx
	movq	%rcx, -3864(%rbp)       # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, -3872(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -3880(%rbp)       # 8-byte Spill
	leaq	.L.str143, %rcx
	movq	%rcx, -3888(%rbp)       # 8-byte Spill
	leaq	.L.str145, %rcx
	movq	%rcx, -3896(%rbp)       # 8-byte Spill
	movabsq	$71, %rcx
	movq	%rcx, -3904(%rbp)       # 8-byte Spill
	leaq	.L.str147, %rcx
	movq	%rcx, -3912(%rbp)       # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, -3920(%rbp)       # 8-byte Spill
	leaq	.L.str146, %rcx
	movq	%rcx, -3928(%rbp)       # 8-byte Spill
	leaq	.L.str144, %rcx
	movq	%rcx, -3936(%rbp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, -3944(%rbp)       # 8-byte Spill
	leaq	.L.str124, %rcx
	movq	%rcx, -3952(%rbp)       # 8-byte Spill
	leaq	.L.str141, %rcx
	movq	%rcx, -3960(%rbp)       # 8-byte Spill
	movabsq	$37, %rcx
	movq	%rdi, -3968(%rbp)       # 8-byte Spill
	movq	%r13, %rdi
	movq	%rcx, -3976(%rbp)       # 8-byte Spill
	movq	-3824(%rbp), %rcx       # 8-byte Reload
	movq	%rsi, -3984(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	vmovsd	%xmm0, -3992(%rbp)      # 8-byte Spill
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	%rdx, -4000(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-3960(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -4008(%rbp)        # 8-byte Spill
	movq	-3984(%rbp), %r8        # 8-byte Reload
	movq	%r9, -4016(%rbp)        # 8-byte Spill
	movq	-3968(%rbp), %r9        # 8-byte Reload
	movl	%eax, -4020(%rbp)       # 4-byte Spill
	movq	%r14, -4032(%rbp)       # 8-byte Spill
	movq	%r15, -4040(%rbp)       # 8-byte Spill
	movl	%r12d, -4044(%rbp)      # 4-byte Spill
	movq	%r13, -4056(%rbp)       # 8-byte Spill
	movq	%rbx, -4064(%rbp)       # 8-byte Spill
	movq	%r11, -4072(%rbp)       # 8-byte Spill
	movq	%r10, -4080(%rbp)       # 8-byte Spill
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-3888(%rbp), %rcx       # 8-byte Reload
	movq	-3976(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	vmovsd	-3992(%rbp), %xmm0      # 8-byte Reload
	movq	-3816(%rbp), %rdx       # 8-byte Reload
	movq	-3960(%rbp), %rcx       # 8-byte Reload
	movq	-3984(%rbp), %r8        # 8-byte Reload
	movq	-3968(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-3992(%rbp), %xmm0      # 8-byte Reload
	vcvttsd2si	%xmm0, %eax
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3880(%rbp), %rsi       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3888(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -4084(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-3936(%rbp), %rcx       # 8-byte Reload
	movq	-3872(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3360(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3952(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3400(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3864(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3400(%rbp), %rcx       # 8-byte Reload
	movq	-3360(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4096(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3936(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-3896(%rbp), %rcx       # 8-byte Reload
	movq	-3944(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-4096(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3936(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3928(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4096(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -4104(%rbp)       # 8-byte Spill
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3896(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3904(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-3912(%rbp), %rcx       # 8-byte Reload
	movq	-3920(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-4104(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3896(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-4084(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3880(%rbp), %rsi       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3888(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3032(%rbp), %rcx       # 8-byte Reload
	movq	-4096(%rbp), %rdx       # 8-byte Reload
	movl	-4084(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rcx,%rdx,4)
.Ltmp78:
	.loc	1 67 0                  # feature_extraction.c:67:0
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-3832(%rbp), %rcx       # 8-byte Reload
	movq	-3872(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3816(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-3848(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3400(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3864(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3400(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-3816(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4112(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-3832(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-4000(%rbp), %rcx       # 8-byte Reload
	movq	-3856(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-3840(%rbp), %rdx       # 8-byte Reload
	movq	-3984(%rbp), %rcx       # 8-byte Reload
	movq	-3848(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3824(%rbp), %rsi       # 8-byte Reload
	movq	-4112(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-3832(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4112(%rbp), %rcx       # 8-byte Reload
	cmpq	$47, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4056(%rbp), %rdi       # 8-byte Reload
	movq	-3816(%rbp), %rsi       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-4000(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4113(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4064(%rbp), %rdi       # 8-byte Reload
	movq	-4032(%rbp), %rsi       # 8-byte Reload
	movq	-4016(%rbp), %rdx       # 8-byte Reload
	movq	-4040(%rbp), %rcx       # 8-byte Reload
	movq	-4008(%rbp), %r8        # 8-byte Reload
	movl	-4020(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4080(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-4072(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4008(%rbp), %rdi       # 8-byte Reload
	movq	-3984(%rbp), %rsi       # 8-byte Reload
	movq	-3984(%rbp), %rdx       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-4016(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4113(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-3816(%rbp), %rdi       # 8-byte Reload
	movq	-3816(%rbp), %rsi       # 8-byte Reload
	movq	-3816(%rbp), %rcx       # 8-byte Reload
	movq	-4000(%rbp), %r8        # 8-byte Reload
	movq	-3984(%rbp), %r9        # 8-byte Reload
	movq	-3968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4113(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4112(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -3376(%rbp)       # 8-byte Spill
	jne	.LBB1_13
	jmp	.LBB1_12
.Ltmp79:
.LBB1_13:                               #   in Loop: Header=BB1_11 Depth=1
	movabsq	$1, %rax
	leaq	.L.str151, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str116, %r8
	movabsq	$3, %r9
	leaq	.L.str153, %r10
	movabsq	$65, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str119, %r14
	leaq	.L.str152, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -4128(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -4136(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4144(%rbp)       # 8-byte Spill
	leaq	.L.str150, %rax
	movq	%rax, -4152(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4160(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4168(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4176(%rbp)       # 8-byte Spill
	leaq	.L.str118, %rax
	movq	%rax, -4184(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -4192(%rbp)       # 8-byte Spill
	leaq	.L.str117, %rax
	movq	%rax, -4200(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4208(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 65 0                  # feature_extraction.c:65:0
	subq	$16, %rsp
	movq	%rdi, -4216(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -4224(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -4232(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -4240(%rbp)       # 8-byte Spill
	movq	-4184(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4248(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4240(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4256(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -4264(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -4272(%rbp)       # 8-byte Spill
	movq	%r15, -4280(%rbp)       # 8-byte Spill
	movl	%r12d, -4284(%rbp)      # 4-byte Spill
	movl	%r13d, -4288(%rbp)      # 4-byte Spill
	movq	%rbx, -4296(%rbp)       # 8-byte Spill
	movq	%r11, -4304(%rbp)       # 8-byte Spill
	movq	%r10, -4312(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4216(%rbp), %rdi       # 8-byte Reload
	movq	-4176(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rdx       # 8-byte Reload
	movq	-4232(%rbp), %rcx       # 8-byte Reload
	movq	-4208(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4128(%rbp), %rdi       # 8-byte Reload
	movq	-4176(%rbp), %rsi       # 8-byte Reload
	movq	-3056(%rbp), %rdx       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4200(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-3056(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-4176(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4184(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -4320(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4304(%rbp), %rdi       # 8-byte Reload
	movq	-4296(%rbp), %rsi       # 8-byte Reload
	movq	-4272(%rbp), %rdx       # 8-byte Reload
	movq	-4152(%rbp), %rcx       # 8-byte Reload
	movq	-4192(%rbp), %r8        # 8-byte Reload
	movl	-4284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4128(%rbp), %rdi       # 8-byte Reload
	movq	-4176(%rbp), %rsi       # 8-byte Reload
	movq	-4320(%rbp), %rdx       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4184(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4320(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4152(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -4324(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4304(%rbp), %rdi       # 8-byte Reload
	movq	-4296(%rbp), %rsi       # 8-byte Reload
	movq	-4272(%rbp), %rdx       # 8-byte Reload
	movq	-4248(%rbp), %rcx       # 8-byte Reload
	movq	-4168(%rbp), %r8        # 8-byte Reload
	movl	-4284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4216(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4160(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4324(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-4128(%rbp), %rdi       # 8-byte Reload
	movq	-4144(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4152(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-4324(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %r13d        # 4-byte Reload
	cmpl	%r13d, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4136(%rbp), %rdi       # 8-byte Reload
	movq	-4128(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4248(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4325(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4304(%rbp), %rdi       # 8-byte Reload
	movq	-4296(%rbp), %rsi       # 8-byte Reload
	movq	-4272(%rbp), %rdx       # 8-byte Reload
	movq	-4280(%rbp), %rcx       # 8-byte Reload
	movq	-4216(%rbp), %r8        # 8-byte Reload
	movl	-4284(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4264(%rbp), %rdi       # 8-byte Reload
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4232(%rbp), %rdx       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4312(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4216(%rbp), %rdi       # 8-byte Reload
	movq	-4232(%rbp), %rsi       # 8-byte Reload
	movq	-4232(%rbp), %rdx       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4256(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4325(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4128(%rbp), %rdi       # 8-byte Reload
	movq	-4128(%rbp), %rsi       # 8-byte Reload
	movq	-4128(%rbp), %rcx       # 8-byte Reload
	movq	-4248(%rbp), %r8        # 8-byte Reload
	movq	-4232(%rbp), %r9        # 8-byte Reload
	movq	-4224(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4325(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4320(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -3048(%rbp)       # 8-byte Spill
	jne	.LBB1_15
	jmp	.LBB1_11
.Ltmp80:
.LBB1_14:                               # %._crit_edge25.thread
	movq	-640(%rbp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str159, %r8
	leaq	.L.str8, %rsi
	movabsq	$77, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str56, %r10
	leaq	.L.str158, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -4336(%rbp)       # 8-byte Spill
	leaq	.L.str157, %rax
	.loc	1 75 0                  # feature_extraction.c:75:0
	subq	$16, %rsp
	movq	%rax, -4344(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4352(%rbp)       # 8-byte Spill
	movl	$.L.str56, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4360(%rbp)       # 8-byte Spill
	movl	$.L.str154, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4368(%rbp)       # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, -4376(%rbp)       # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, -4384(%rbp)       # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, -4392(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-4376(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4396(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4360(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4408(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4368(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4416(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4384(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4424(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4396(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4432(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movq	%r13, -4440(%rbp)       # 8-byte Spill
	movl	%r14d, -4444(%rbp)      # 4-byte Spill
	movl	%r15d, -4448(%rbp)      # 4-byte Spill
	movq	%rbx, -4456(%rbp)       # 8-byte Spill
	movq	%r12, -4464(%rbp)       # 8-byte Spill
	movq	%r11, -4472(%rbp)       # 8-byte Spill
	movq	%r10, -4480(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str110, (%rcx)
	movl	$.L.str146, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	-4396(%rbp), %eax       # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, -4488(%rbp)       # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, -4496(%rbp)       # 8-byte Spill
	movq	-4488(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4504(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$.L.str31, %eax
	movl	%eax, %r8d
	movq	-4488(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4496(%rbp), %rdx       # 8-byte Reload
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4488(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str53, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4336(%rbp), %rdx       # 8-byte Reload
	movq	-4488(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4512(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4368(%rbp), %r8        # 8-byte Reload
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str155, %eax
	movl	%eax, %ecx
	movl	$75, %eax
	movl	%eax, %edx
	movl	$34, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4520(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, -4528(%rbp)       # 8-byte Spill
	movl	-4396(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movq	-4488(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4488(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4536(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4512(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4536(%rbp), %rdx       # 8-byte Reload
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4528(%rbp), %r8        # 8-byte Reload
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str156, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4520(%rbp), %rdi       # 8-byte Reload
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4544(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4552(%rbp)       # 8-byte Spill
	movq	-4544(%rbp), %r8        # 8-byte Reload
	movl	-4396(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4488(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4536(%rbp), %rdx       # 8-byte Reload
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4528(%rbp), %r8        # 8-byte Reload
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4536(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,4), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4512(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4560(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4560(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4568(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4552(%rbp), %r8        # 8-byte Reload
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 76 0                  # feature_extraction.c:76:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str157, %eax
	movl	%eax, %ecx
	movl	$76, %eax
	movl	%eax, %edi
	movq	-4376(%rbp), %rsi       # 8-byte Reload
	movq	-4360(%rbp), %rdx       # 8-byte Reload
	movq	-4544(%rbp), %r8        # 8-byte Reload
	movl	-4396(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4488(%rbp), %rdi       # 8-byte Reload
	movq	-4504(%rbp), %rsi       # 8-byte Reload
	movq	-4536(%rbp), %rdx       # 8-byte Reload
	movq	-4488(%rbp), %rcx       # 8-byte Reload
	movq	-4528(%rbp), %r8        # 8-byte Reload
	movq	-4496(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4568(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4464(%rbp), %rdi       # 8-byte Reload
	movq	-4440(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4416(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4576(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4344(%rbp), %r8        # 8-byte Reload
	movq	-4408(%rbp), %r9        # 8-byte Reload
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
.Ltmp81:
	#DEBUG_VALUE: process_data:fft_stddev <- undef
	#DEBUG_VALUE: channel <- 0
	.loc	1 77 0                  # feature_extraction.c:77:0
	subq	$16, %rsp
	movq	-4392(%rbp), %rdi       # 8-byte Reload
	movq	-4432(%rbp), %rsi       # 8-byte Reload
	movq	-4480(%rbp), %rdx       # 8-byte Reload
	movq	-4472(%rbp), %rcx       # 8-byte Reload
	movq	-4456(%rbp), %r8        # 8-byte Reload
	movl	-4444(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4416(%rbp), %rdi       # 8-byte Reload
	movq	-4408(%rbp), %rsi       # 8-byte Reload
	movq	-4408(%rbp), %rdx       # 8-byte Reload
	movq	-4416(%rbp), %rcx       # 8-byte Reload
	movq	-4424(%rbp), %r8        # 8-byte Reload
	movq	-4408(%rbp), %r9        # 8-byte Reload
	movq	-4352(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4576(%rbp), %rcx       # 8-byte Reload
	movq	-4560(%rbp), %rdx       # 8-byte Reload
	movq	-4336(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -4584(%rbp)       # 8-byte Spill
	movq	%rdx, -4592(%rbp)       # 8-byte Spill
	movq	%rsi, -4600(%rbp)       # 8-byte Spill
	jmp	.LBB1_16
.Ltmp82:
.LBB1_15:                               # %._crit_edge25
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str163, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str166, %r8
	movabsq	$3, %r9
	leaq	.L.str165, %r10
	movabsq	$77, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str153, %r14
	leaq	.L.str164, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -4608(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -4616(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4624(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4632(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4640(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4648(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4656(%rbp)       # 8-byte Spill
	leaq	.L.str162, %rax
	.loc	1 75 0                  # feature_extraction.c:75:0
	subq	$16, %rsp
	movq	%rax, -4664(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -4672(%rbp)       # 8-byte Spill
	movl	$.L.str153, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4680(%rbp)       # 8-byte Spill
	movl	$.L.str160, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4688(%rbp)       # 8-byte Spill
	movl	$75, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4696(%rbp)       # 8-byte Spill
	movl	$34, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -4704(%rbp)       # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -4712(%rbp)       # 8-byte Spill
	movq	-4696(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -4720(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-4712(%rbp), %rax       # 8-byte Reload
	movl	%esi, -4724(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-4680(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -4736(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-4688(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -4744(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-4704(%rbp), %rax       # 8-byte Reload
	movq	%r8, -4752(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4724(%rbp), %eax       # 4-byte Reload
	movq	%r9, -4760(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	%r13d, -4764(%rbp)      # 4-byte Spill
	movq	%r14, -4776(%rbp)       # 8-byte Spill
	movq	%r15, -4784(%rbp)       # 8-byte Spill
	movl	%r12d, -4788(%rbp)      # 4-byte Spill
	movq	%rbx, -4800(%rbp)       # 8-byte Spill
	movq	%r11, -4808(%rbp)       # 8-byte Spill
	movq	%r10, -4816(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$.L.str9, %r9d
	movl	%r9d, %r8d
	movl	$32, %r9d
	movl	%r9d, %esi
	movl	$1, %r9d
	movl	%r9d, %edx
	movl	-4724(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %edi
	movq	%rdi, -4824(%rbp)       # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rdx, -4832(%rbp)       # 8-byte Spill
	movq	%rcx, %rdx
	movq	-4832(%rbp), %r10       # 8-byte Reload
	movq	%rcx, -4840(%rbp)       # 8-byte Spill
	movq	%r10, %rcx
	movq	-4824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movl	$64, %eax
	movl	%eax, %edx
	movq	%rcx, %rdi
	movq	%rdx, %rsi
	movq	-4840(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4848(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	-4832(%rbp), %r9        # 8-byte Reload
	movq	%rcx, -4856(%rbp)       # 8-byte Spill
	movq	%r9, %rcx
	movq	-4688(%rbp), %r8        # 8-byte Reload
	movq	-4824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str161, %eax
	movl	%eax, %ecx
	movl	$26, %eax
	movl	%eax, %edx
	movq	-4696(%rbp), %rdi       # 8-byte Reload
	movq	-4712(%rbp), %rsi       # 8-byte Reload
	movq	-4680(%rbp), %r8        # 8-byte Reload
	movq	%rdx, -4864(%rbp)       # 8-byte Spill
	movq	%r8, %rdx
	movq	%rcx, -4872(%rbp)       # 8-byte Spill
	movq	-4864(%rbp), %r8        # 8-byte Reload
	movl	-4724(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4832(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4832(%rbp), %rcx       # 8-byte Reload
	movq	-4688(%rbp), %r8        # 8-byte Reload
	movq	-4824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4840(%rbp), %rcx       # 8-byte Reload
	leaq	15(,%rcx,4), %rdx
	andq	$-16, %rdx
	movq	%rsp, %rsi
	subq	%rdx, %rsi
	movq	%rsi, %rsp
	subq	$16, %rsp
	movq	%rsp, %rdi
	movq	$.L.str8, (%rdi)
	movq	-4856(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %r8        # 8-byte Reload
	movq	%rsi, -4880(%rbp)       # 8-byte Spill
	movq	%r8, %rsi
	movq	-4880(%rbp), %r9        # 8-byte Reload
	movq	%rdx, -4888(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-4832(%rbp), %rcx       # 8-byte Reload
	movq	-4872(%rbp), %r8        # 8-byte Reload
	movq	-4824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	.loc	1 76 0                  # feature_extraction.c:76:0
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str162, %eax
	movl	%eax, %ecx
	movl	$76, %eax
	movl	%eax, %edi
	movq	-4712(%rbp), %rsi       # 8-byte Reload
	movq	-4680(%rbp), %rdx       # 8-byte Reload
	movq	-4864(%rbp), %r8        # 8-byte Reload
	movl	-4724(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-4832(%rbp), %rdi       # 8-byte Reload
	movq	-4848(%rbp), %rsi       # 8-byte Reload
	movq	-4840(%rbp), %rdx       # 8-byte Reload
	movq	-4832(%rbp), %rcx       # 8-byte Reload
	movq	-4688(%rbp), %r8        # 8-byte Reload
	movq	-4824(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	%rsp, %rcx
	movq	-4888(%rbp), %rdx       # 8-byte Reload
	subq	%rdx, %rcx
	movq	%rcx, %rsp
	subq	$16, %rsp
	movq	-4616(%rbp), %rdi       # 8-byte Reload
	movq	-4656(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-4744(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -4896(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-4664(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	#DEBUG_VALUE: process_data:fft_stddev <- undef
.Ltmp83:
	#DEBUG_VALUE: channel <- 0
	.loc	1 77 0                  # feature_extraction.c:77:0
	subq	$16, %rsp
	movq	-4808(%rbp), %rdi       # 8-byte Reload
	movq	-4800(%rbp), %rsi       # 8-byte Reload
	movq	-4776(%rbp), %rdx       # 8-byte Reload
	movq	-4736(%rbp), %rcx       # 8-byte Reload
	movq	-4648(%rbp), %r8        # 8-byte Reload
	movl	-4788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4720(%rbp), %rdi       # 8-byte Reload
	movq	-4624(%rbp), %rsi       # 8-byte Reload
	movq	-4608(%rbp), %rdx       # 8-byte Reload
	movq	-4608(%rbp), %rcx       # 8-byte Reload
	movq	-4640(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4744(%rbp), %rdi       # 8-byte Reload
	movq	-4624(%rbp), %rsi       # 8-byte Reload
	movq	-4744(%rbp), %rcx       # 8-byte Reload
	movq	-4632(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4616(%rbp), %rdi       # 8-byte Reload
	movq	-4744(%rbp), %rsi       # 8-byte Reload
	movq	-4744(%rbp), %rcx       # 8-byte Reload
	movq	-4736(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -4897(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4808(%rbp), %rdi       # 8-byte Reload
	movq	-4800(%rbp), %rsi       # 8-byte Reload
	movq	-4776(%rbp), %rdx       # 8-byte Reload
	movq	-4784(%rbp), %rcx       # 8-byte Reload
	movq	-4720(%rbp), %r8        # 8-byte Reload
	movl	-4788(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4760(%rbp), %rdi       # 8-byte Reload
	movq	-4608(%rbp), %rsi       # 8-byte Reload
	movq	-4608(%rbp), %rdx       # 8-byte Reload
	movq	-4744(%rbp), %rcx       # 8-byte Reload
	movq	-4816(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4720(%rbp), %rdi       # 8-byte Reload
	movq	-4608(%rbp), %rsi       # 8-byte Reload
	movq	-4608(%rbp), %rdx       # 8-byte Reload
	movq	-4744(%rbp), %rcx       # 8-byte Reload
	movq	-4752(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4897(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-4744(%rbp), %rdi       # 8-byte Reload
	movq	-4744(%rbp), %rsi       # 8-byte Reload
	movq	-4744(%rbp), %rcx       # 8-byte Reload
	movq	-4736(%rbp), %r8        # 8-byte Reload
	movq	-4608(%rbp), %r9        # 8-byte Reload
	movq	-4672(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-4897(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4608(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -4912(%rbp)       # 8-byte Spill
	jne	.LBB1_17
	jmp	.LBB1_29
.Ltmp84:
.LBB1_16:                               # %.preheader14
	movq	-4600(%rbp), %rax       # 8-byte Reload
	movq	-4592(%rbp), %rcx       # 8-byte Reload
	movq	-4584(%rbp), %rdx       # 8-byte Reload
	movabsq	$0, %rsi
	movabsq	$1, %rdi
	leaq	.L.str171, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	.L.str166, %r11
	movabsq	$3, %rbx
	leaq	.L.str23, %r14
	movabsq	$87, %r15
	leaq	.L.str50, %r12
	leaq	.L.str159, %r13
	movq	%rax, -4920(%rbp)       # 8-byte Spill
	leaq	.L.str172, %rax
	movq	%rsi, -4928(%rbp)       # 8-byte Spill
	movl	$0, %esi
	movl	%esi, -4932(%rbp)       # 4-byte Spill
	movl	$1, %esi
	movq	%rax, -4944(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -4952(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -4960(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -4968(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -4976(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -4984(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -4992(%rbp)       # 8-byte Spill
	leaq	.L.str170, %rax
	movq	%rax, -5000(%rbp)       # 8-byte Spill
	leaq	.L.str56, %rax
	movq	%rax, -5008(%rbp)       # 8-byte Spill
	leaq	.L.str154, %rax
	movq	%rax, -5016(%rbp)       # 8-byte Spill
	leaq	.L.str146, %rax
	movq	%rax, -5024(%rbp)       # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, -5032(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -5040(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, -5048(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -5056(%rbp)       # 8-byte Spill
	leaq	.L.str156, %rax
	movq	%rax, -5064(%rbp)       # 8-byte Spill
	leaq	.L.str161, %rax
	movq	%rax, -5072(%rbp)       # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, -5080(%rbp)       # 8-byte Spill
	leaq	.L.str157, %rax
	movq	%rax, -5088(%rbp)       # 8-byte Spill
	leaq	.L.str162, %rax
	.loc	1 87 0                  # feature_extraction.c:87:0
.Ltmp85:
	subq	$16, %rsp
	movq	%rax, -5096(%rbp)       # 8-byte Spill
	movq	-5040(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5104(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -5108(%rbp)       # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, -5120(%rbp)       # 8-byte Spill
.Ltmp86:
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5120]
	#DEBUG_VALUE: process_data:fft_stddev <- [RBP+-5120]
	movq	%r13, %rdx
	movq	-5080(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5128(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5048(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5136(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-4932(%rbp), %eax       # 4-byte Reload
	movq	%r9, -5144(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -5152(%rbp)       # 8-byte Spill
	movq	%r15, -5160(%rbp)       # 8-byte Spill
	movq	%r12, -5168(%rbp)       # 8-byte Spill
	movq	%r13, -5176(%rbp)       # 8-byte Spill
	movq	%rbx, -5184(%rbp)       # 8-byte Spill
	movq	%r11, -5192(%rbp)       # 8-byte Spill
	movq	%r10, -5200(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5200(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5096(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5088(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5080(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5040(%rbp), %rdi       # 8-byte Reload
	movq	-5168(%rbp), %rsi       # 8-byte Reload
	movq	-5176(%rbp), %rdx       # 8-byte Reload
	movq	-5056(%rbp), %rcx       # 8-byte Reload
	movq	-5048(%rbp), %r8        # 8-byte Reload
	movl	-4932(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5200(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5072(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5064(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-5128(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5056(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5040(%rbp), %rdi       # 8-byte Reload
	movq	-5168(%rbp), %rsi       # 8-byte Reload
	movq	-5176(%rbp), %rdx       # 8-byte Reload
	movq	-5000(%rbp), %rcx       # 8-byte Reload
	movq	-5048(%rbp), %r8        # 8-byte Reload
	movl	-4932(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5200(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5024(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5032(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5016(%rbp), %r8        # 8-byte Reload
	movq	-5104(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-4992(%rbp), %rsi       # 8-byte Reload
	movq	-4920(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5000(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5008(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-5168(%rbp), %rsi       # 8-byte Reload
	movq	-5176(%rbp), %rdx       # 8-byte Reload
	movq	-5136(%rbp), %rcx       # 8-byte Reload
	movq	-4984(%rbp), %r8        # 8-byte Reload
	movl	-4932(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5200(%rbp), %rdi       # 8-byte Reload
	movq	-4960(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	movq	-4976(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-4960(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-4968(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-4952(%rbp), %rdi       # 8-byte Reload
	movq	-5104(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5136(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5201(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5160(%rbp), %rdi       # 8-byte Reload
	movq	-5168(%rbp), %rsi       # 8-byte Reload
	movq	-5176(%rbp), %rdx       # 8-byte Reload
	movq	-4944(%rbp), %rcx       # 8-byte Reload
	movq	-5200(%rbp), %r8        # 8-byte Reload
	movl	-4932(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5184(%rbp), %rdi       # 8-byte Reload
	movq	-4928(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5152(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5200(%rbp), %rdi       # 8-byte Reload
	movq	-4928(%rbp), %rsi       # 8-byte Reload
	movq	-4928(%rbp), %rdx       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5192(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5201(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	subq	$16, %rsp
	movq	-5104(%rbp), %rdi       # 8-byte Reload
	movq	-5104(%rbp), %rsi       # 8-byte Reload
	movq	-5104(%rbp), %rcx       # 8-byte Reload
	movq	-5136(%rbp), %r8        # 8-byte Reload
	movq	-4928(%rbp), %r9        # 8-byte Reload
	movq	-5144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5201(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4928(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -5216(%rbp)       # 8-byte Spill
	jne	.LBB1_21
	jmp	.LBB1_29
.Ltmp87:
.LBB1_17:                               # %.lr.ph21
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_18 Depth 2
	movq	-4912(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movl	$0, %edx
	movabsq	$1, %rsi
	leaq	.L.str180, %r8
	leaq	.L.str8, %rdi
	movabsq	$80, %r9
	leaq	.L.str50, %r10
	leaq	.L.str165, %r11
	leaq	.L.str179, %rbx
	movabsq	$2, %r14
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -5224(%rbp)       # 8-byte Spill
	leaq	.L.str178, %rax
	movq	%rax, -5232(%rbp)       # 8-byte Spill
	leaq	.L.str177, %rax
	movq	%rax, -5240(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5248(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5256(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -5264(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5272(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -5280(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -5288(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5296(%rbp)       # 8-byte Spill
	movabsq	$79, %rax
	movq	%rax, -5304(%rbp)       # 8-byte Spill
	leaq	.L.str176, %rax
	movq	%rax, -5312(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -5320(%rbp)       # 8-byte Spill
	leaq	.L.str161, %rax
	movq	%rax, -5328(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -5336(%rbp)       # 8-byte Spill
	leaq	.L.str168, %rax
	movq	%rax, -5344(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5352(%rbp)       # 8-byte Spill
	leaq	.L.str153, %rax
	movq	%rax, -5360(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -5368(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 79 0                  # feature_extraction.c:79:0
.Ltmp88:
	subq	$16, %rsp
	movq	%rax, -5376(%rbp)       # 8-byte Spill
	movq	-5368(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -5384(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -5392(%rbp)       # 8-byte Spill
	movq	%r10, %rsi
	movl	%edx, -5396(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-5272(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -5408(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-5376(%rbp), %rax       # 8-byte Reload
	movq	%r8, -5416(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-5396(%rbp), %eax       # 4-byte Reload
	movq	%r9, -5424(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -5432(%rbp)       # 8-byte Spill
	movl	%r15d, -5436(%rbp)      # 4-byte Spill
	movq	%r12, -5448(%rbp)       # 8-byte Spill
	movq	%rbx, -5456(%rbp)       # 8-byte Spill
	movq	%r13, -5464(%rbp)       # 8-byte Spill
	movq	%r11, -5472(%rbp)       # 8-byte Spill
	movq	%r10, -5480(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5432(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5408(%rbp), %rdx       # 8-byte Reload
	movq	-5408(%rbp), %rcx       # 8-byte Reload
	movq	-5256(%rbp), %r8        # 8-byte Reload
	movq	-5392(%rbp), %r9        # 8-byte Reload
	movq	-5360(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5408(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5352(%rbp), %r8        # 8-byte Reload
	movq	-5392(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5448(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5272(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5344(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5304(%rbp), %rdi       # 8-byte Reload
	movq	-5480(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5296(%rbp), %rcx       # 8-byte Reload
	movq	-5336(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5432(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5272(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-4880(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5328(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5224(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-4880(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-5448(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -5488(%rbp)       # 8-byte Spill
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5296(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5304(%rbp), %rdi       # 8-byte Reload
	movq	-5480(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5312(%rbp), %rcx       # 8-byte Reload
	movq	-5320(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5432(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5488(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5296(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5248(%rbp), %rsi       # 8-byte Reload
	movq	-5408(%rbp), %rdx       # 8-byte Reload
	movq	-5408(%rbp), %rcx       # 8-byte Reload
	movq	-5256(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4880(%rbp), %rcx       # 8-byte Reload
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	movl	$0, (%rcx,%rdx,4)
.Ltmp89:
	#DEBUG_VALUE: i <- 0
	.loc	1 80 0                  # feature_extraction.c:80:0
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5480(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5240(%rbp), %rcx       # 8-byte Reload
	movq	-5288(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5432(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5280(%rbp), %rdx       # 8-byte Reload
	movq	-5408(%rbp), %rcx       # 8-byte Reload
	movq	-5256(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5272(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rcx     # imm = 0x2F00000000
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	imulq	%rcx, %rdx
	subq	$16, %rsp
	movq	-5448(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -5496(%rbp)       # 8-byte Spill
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5480(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5232(%rbp), %rcx       # 8-byte Reload
	movq	-5264(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5432(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5248(%rbp), %rdx       # 8-byte Reload
	movq	-5408(%rbp), %rcx       # 8-byte Reload
	movq	-5256(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	-5496(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5240(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5496(%rbp), %rcx       # 8-byte Reload
	sarq	$32, %rcx
	subq	$16, %rsp
	movq	-5448(%rbp), %rdi       # 8-byte Reload
	movq	-5464(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5392(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -5504(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-5232(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5424(%rbp), %rdi       # 8-byte Reload
	movq	-5480(%rbp), %rsi       # 8-byte Reload
	movq	-5472(%rbp), %rdx       # 8-byte Reload
	movq	-5456(%rbp), %rcx       # 8-byte Reload
	movq	-5432(%rbp), %r8        # 8-byte Reload
	movl	-5396(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5392(%rbp), %rdi       # 8-byte Reload
	movq	-5408(%rbp), %rsi       # 8-byte Reload
	movq	-5408(%rbp), %rdx       # 8-byte Reload
	movq	-5392(%rbp), %rcx       # 8-byte Reload
	movq	-5416(%rbp), %r8        # 8-byte Reload
	movq	-5408(%rbp), %r9        # 8-byte Reload
	movq	-5384(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5408(%rbp), %rcx       # 8-byte Reload
	.loc	1 82 0                  # feature_extraction.c:82:0
.Ltmp90:
	movl	-5396(%rbp), %eax       # 4-byte Reload
	movq	%rcx, -5512(%rbp)       # 8-byte Spill
	movl	%eax, -5516(%rbp)       # 4-byte Spill
.LBB1_18:                               #   Parent Loop BB1_17 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-5516(%rbp), %eax       # 4-byte Reload
	movq	-5512(%rbp), %rcx       # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str188, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str180, %r10
	movabsq	$3, %r11
	leaq	.L.str168, %rbx
	movabsq	$80, %r14
	leaq	.L.str50, %r15
	leaq	.L.str189, %r12
	movl	$0, %r13d
	movl	%eax, -5520(%rbp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -5528(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -5536(%rbp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, -5544(%rbp)       # 8-byte Spill
	leaq	.L.str182, %rcx
	movq	%rcx, -5552(%rbp)       # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, -5560(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -5568(%rbp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -5576(%rbp)       # 8-byte Spill
	leaq	.L.str181, %rcx
	movq	%rcx, -5584(%rbp)       # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, -5592(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -5600(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rcx
	movq	%rcx, -5608(%rbp)       # 8-byte Spill
	leaq	.L.str183, %rcx
	movq	%rcx, -5616(%rbp)       # 8-byte Spill
	leaq	.L.str187, %rcx
	movq	%rcx, -5624(%rbp)       # 8-byte Spill
	movabsq	$82, %rcx
	movq	%rcx, -5632(%rbp)       # 8-byte Spill
	leaq	.L.str186, %rcx
	movq	%rcx, -5640(%rbp)       # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, -5648(%rbp)       # 8-byte Spill
	leaq	.L.str146, %rcx
	movq	%rcx, -5656(%rbp)       # 8-byte Spill
	leaq	.L.str185, %rcx
	movq	%rcx, -5664(%rbp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, -5672(%rbp)       # 8-byte Spill
	leaq	.L.str178, %rcx
	movq	%rcx, -5680(%rbp)       # 8-byte Spill
	leaq	.L.str165, %rcx
	movq	%rcx, -5688(%rbp)       # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, -5696(%rbp)       # 8-byte Spill
	movabsq	$-1, %rcx
	subq	$16, %rsp
	movq	%rdi, -5704(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -5712(%rbp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, -5720(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-5584(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -5728(%rbp)        # 8-byte Spill
	movq	-5696(%rbp), %r8        # 8-byte Reload
	movq	%r9, -5736(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -5740(%rbp)       # 4-byte Spill
	movl	%r13d, -5744(%rbp)      # 4-byte Spill
	movq	%r14, -5752(%rbp)       # 8-byte Spill
	movq	%r15, -5760(%rbp)       # 8-byte Spill
	movq	%r12, -5768(%rbp)       # 8-byte Spill
	movq	%rbx, -5776(%rbp)       # 8-byte Spill
	movq	%r11, -5784(%rbp)       # 8-byte Spill
	movq	%r10, -5792(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5720(%rbp), %r9        # 8-byte Reload
	movq	-5792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5704(%rbp), %rcx       # 8-byte Reload
	movq	-5568(%rbp), %r8        # 8-byte Reload
	movq	-5720(%rbp), %r9        # 8-byte Reload
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5528(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5584(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5632(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5616(%rbp), %rcx       # 8-byte Reload
	movq	-5696(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5608(%rbp), %r8        # 8-byte Reload
	movq	-5720(%rbp), %r9        # 8-byte Reload
	movq	-5792(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5704(%rbp), %rcx       # 8-byte Reload
	movq	-5568(%rbp), %r8        # 8-byte Reload
	movq	-5720(%rbp), %r9        # 8-byte Reload
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-5520(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5688(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5632(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5664(%rbp), %rcx       # 8-byte Reload
	movq	-5592(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5680(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5528(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5584(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5528(%rbp), %rcx       # 8-byte Reload
	movq	-5504(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5720(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -5800(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5632(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5640(%rbp), %rcx       # 8-byte Reload
	movq	-5672(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5800(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5664(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5656(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5800(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-3032(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -5808(%rbp)       # 8-byte Spill
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5640(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5632(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5624(%rbp), %rcx       # 8-byte Reload
	movq	-5648(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5808(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5640(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-3032(%rbp), %rcx       # 8-byte Reload
	movq	-5800(%rbp), %rdx       # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5624(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5812(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5632(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5608(%rbp), %rcx       # 8-byte Reload
	movq	-5592(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-5812(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5624(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-5520(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5616(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-5520(%rbp), %eax       # 4-byte Reload
	movl	-5812(%rbp), %r13d      # 4-byte Reload
	addl	%r13d, %eax
.Ltmp91:
	.loc	1 80 0                  # feature_extraction.c:80:0
	movl	%eax, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5600(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5608(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -5816(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5552(%rbp), %rcx       # 8-byte Reload
	movq	-5592(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rdx       # 8-byte Reload
	movq	-5704(%rbp), %rcx       # 8-byte Reload
	movq	-5568(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5528(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5584(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5528(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5720(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -5824(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5712(%rbp), %rcx       # 8-byte Reload
	movq	-5576(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5560(%rbp), %rdx       # 8-byte Reload
	movq	-5704(%rbp), %rcx       # 8-byte Reload
	movq	-5568(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5544(%rbp), %rsi       # 8-byte Reload
	movq	-5824(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5552(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	cmpq	$47, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5536(%rbp), %rdi       # 8-byte Reload
	movq	-5720(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5712(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -5825(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5752(%rbp), %rdi       # 8-byte Reload
	movq	-5760(%rbp), %rsi       # 8-byte Reload
	movq	-5792(%rbp), %rdx       # 8-byte Reload
	movq	-5768(%rbp), %rcx       # 8-byte Reload
	movq	-5736(%rbp), %r8        # 8-byte Reload
	movl	-5744(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5784(%rbp), %rdi       # 8-byte Reload
	movq	-5704(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5776(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5736(%rbp), %rdi       # 8-byte Reload
	movq	-5704(%rbp), %rsi       # 8-byte Reload
	movq	-5704(%rbp), %rdx       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5792(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5825(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5720(%rbp), %rdi       # 8-byte Reload
	movq	-5720(%rbp), %rsi       # 8-byte Reload
	movq	-5720(%rbp), %rcx       # 8-byte Reload
	movq	-5712(%rbp), %r8        # 8-byte Reload
	movq	-5704(%rbp), %r9        # 8-byte Reload
	movq	-5728(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-5825(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-5824(%rbp), %rcx       # 8-byte Reload
	.loc	1 82 0                  # feature_extraction.c:82:0
.Ltmp92:
	movl	-5816(%rbp), %r13d      # 4-byte Reload
.Ltmp93:
	.loc	1 80 0                  # feature_extraction.c:80:0
	movq	%rcx, -5512(%rbp)       # 8-byte Spill
	movl	%r13d, -5516(%rbp)      # 4-byte Spill
	jne	.LBB1_19
	jmp	.LBB1_18
.Ltmp94:
.LBB1_19:                               #   in Loop: Header=BB1_17 Depth=1
	movabsq	$1, %rax
	leaq	.L.str193, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str165, %r8
	movabsq	$3, %r9
	leaq	.L.str159, %r10
	movabsq	$77, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str168, %r14
	leaq	.L.str194, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -5840(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -5848(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -5856(%rbp)       # 8-byte Spill
	leaq	.L.str192, %rax
	movq	%rax, -5864(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -5872(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -5880(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -5888(%rbp)       # 8-byte Spill
	leaq	.L.str174, %rax
	movq	%rax, -5896(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -5904(%rbp)       # 8-byte Spill
	leaq	.L.str173, %rax
	movq	%rax, -5912(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -5920(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -5928(%rbp)       # 8-byte Spill
	leaq	.L.str190, %rax
	movq	%rax, -5936(%rbp)       # 8-byte Spill
	leaq	.L.str175, %rax
	movq	%rax, -5944(%rbp)       # 8-byte Spill
	movabsq	$84, %rax
	movq	%rax, -5952(%rbp)       # 8-byte Spill
	leaq	.L.str191, %rax
	movq	%rax, -5960(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rsi, -5968(%rbp)       # 8-byte Spill
	movl	$47, %esi
	movq	%rax, -5976(%rbp)       # 8-byte Spill
	leaq	.L.str184, %rax
	movq	%rax, -5984(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -5992(%rbp)       # 8-byte Spill
	movabsq	$15, %rax
	.loc	1 84 0                  # feature_extraction.c:84:0
	subq	$16, %rsp
	movq	%rax, -6000(%rbp)       # 8-byte Spill
	movq	-5952(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6008(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -6012(%rbp)       # 4-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -6024(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	-5936(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6032(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6000(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6040(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6048(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -6056(%rbp)       # 8-byte Spill
	movq	%r15, -6064(%rbp)       # 8-byte Spill
	movl	%r12d, -6068(%rbp)      # 4-byte Spill
	movl	%r13d, -6072(%rbp)      # 4-byte Spill
	movq	%rbx, -6080(%rbp)       # 8-byte Spill
	movq	%r11, -6088(%rbp)       # 8-byte Spill
	movq	%r10, -6096(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6008(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5992(%rbp), %rdx       # 8-byte Reload
	movq	-6024(%rbp), %rcx       # 8-byte Reload
	movq	-5920(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-5816(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5984(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-5816(%rbp), %eax       # 4-byte Reload
	cltd
	movl	-6012(%rbp), %r12d      # 4-byte Reload
	idivl	%r12d
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	subq	$16, %rsp
	movq	-5848(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5936(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6100(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5952(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5960(%rbp), %rcx       # 8-byte Reload
	movq	-5976(%rbp), %r8        # 8-byte Reload
	movl	-6068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6008(%rbp), %rdi       # 8-byte Reload
	movq	-5888(%rbp), %rsi       # 8-byte Reload
	movq	-5488(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5944(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5936(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5488(%rbp), %rcx       # 8-byte Reload
	movl	-6100(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rcx)
.Ltmp95:
	.loc	1 77 0                  # feature_extraction.c:77:0
	subq	$16, %rsp
	movq	-6088(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5896(%rbp), %rcx       # 8-byte Reload
	movq	-5928(%rbp), %r8        # 8-byte Reload
	movl	-6068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6008(%rbp), %rdi       # 8-byte Reload
	movq	-5888(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rdx       # 8-byte Reload
	movq	-6024(%rbp), %rcx       # 8-byte Reload
	movq	-5920(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5888(%rbp), %rsi       # 8-byte Reload
	movq	-5224(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5912(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5224(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-5848(%rbp), %rdi       # 8-byte Reload
	movq	-5888(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-5840(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -6112(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-5896(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6088(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-5864(%rbp), %rcx       # 8-byte Reload
	movq	-5904(%rbp), %r8        # 8-byte Reload
	movl	-6068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5888(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5896(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6112(%rbp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5848(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5864(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6116(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6088(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-6032(%rbp), %rcx       # 8-byte Reload
	movq	-5880(%rbp), %r8        # 8-byte Reload
	movl	-6068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-6008(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5872(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6116(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5856(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-5864(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6116(%rbp), %eax       # 4-byte Reload
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	%r12d, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-5848(%rbp), %rdi       # 8-byte Reload
	movq	-5840(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6032(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6117(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6088(%rbp), %rdi       # 8-byte Reload
	movq	-6080(%rbp), %rsi       # 8-byte Reload
	movq	-6056(%rbp), %rdx       # 8-byte Reload
	movq	-6064(%rbp), %rcx       # 8-byte Reload
	movq	-6008(%rbp), %r8        # 8-byte Reload
	movl	-6068(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6048(%rbp), %rdi       # 8-byte Reload
	movq	-6024(%rbp), %rsi       # 8-byte Reload
	movq	-6024(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6096(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6008(%rbp), %rdi       # 8-byte Reload
	movq	-6024(%rbp), %rsi       # 8-byte Reload
	movq	-6024(%rbp), %rdx       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6040(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6117(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-5840(%rbp), %rdi       # 8-byte Reload
	movq	-5840(%rbp), %rsi       # 8-byte Reload
	movq	-5840(%rbp), %rcx       # 8-byte Reload
	movq	-6032(%rbp), %r8        # 8-byte Reload
	movq	-6024(%rbp), %r9        # 8-byte Reload
	movq	-5968(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6117(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-4896(%rbp), %rcx       # 8-byte Reload
	movq	-4880(%rbp), %rdx       # 8-byte Reload
	movq	-3032(%rbp), %rsi       # 8-byte Reload
	movq	-6112(%rbp), %rdi       # 8-byte Reload
	movq	%rcx, -4584(%rbp)       # 8-byte Spill
	movq	%rdx, -4592(%rbp)       # 8-byte Spill
	movq	%rsi, -4600(%rbp)       # 8-byte Spill
	movq	%rdi, -4912(%rbp)       # 8-byte Spill
	jne	.LBB1_16
	jmp	.LBB1_17
.Ltmp96:
.LBB1_20:                               # %.preheader11
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str196, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str166, %r8
	movabsq	$3, %r9
	leaq	.L.str16, %r10
	movabsq	$99, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str195, %r14
	leaq	.L.str197, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -6128(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -6136(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6144(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -6152(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6160(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	.loc	1 99 0                  # feature_extraction.c:99:0
.Ltmp97:
	subq	$16, %rsp
	movq	%rdi, -6168(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -6176(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -6184(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -6192(%rbp)       # 8-byte Spill
	movq	-6184(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6200(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6192(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6208(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -6216(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -6224(%rbp)       # 8-byte Spill
	movq	%r15, -6232(%rbp)       # 8-byte Spill
	movl	%r12d, -6236(%rbp)      # 4-byte Spill
	movl	%r13d, -6240(%rbp)      # 4-byte Spill
	movq	%rbx, -6248(%rbp)       # 8-byte Spill
	movq	%r11, -6256(%rbp)       # 8-byte Spill
	movq	%r10, -6264(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6168(%rbp), %rdi       # 8-byte Reload
	movq	-6144(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6128(%rbp), %rcx       # 8-byte Reload
	movq	-6160(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6200(%rbp), %rdi       # 8-byte Reload
	movq	-6144(%rbp), %rsi       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6152(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	$0, %r12d
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6136(%rbp), %rdi       # 8-byte Reload
	movq	-6200(%rbp), %rsi       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6184(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6265(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6256(%rbp), %rdi       # 8-byte Reload
	movq	-6248(%rbp), %rsi       # 8-byte Reload
	movq	-6224(%rbp), %rdx       # 8-byte Reload
	movq	-6232(%rbp), %rcx       # 8-byte Reload
	movq	-6168(%rbp), %r8        # 8-byte Reload
	movl	-6236(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6216(%rbp), %rdi       # 8-byte Reload
	movq	-6128(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6264(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6168(%rbp), %rdi       # 8-byte Reload
	movq	-6128(%rbp), %rsi       # 8-byte Reload
	movq	-6128(%rbp), %rdx       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6208(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6265(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-6200(%rbp), %rdi       # 8-byte Reload
	movq	-6200(%rbp), %rsi       # 8-byte Reload
	movq	-6200(%rbp), %rcx       # 8-byte Reload
	movq	-6184(%rbp), %r8        # 8-byte Reload
	movq	-6128(%rbp), %r9        # 8-byte Reload
	movq	-6176(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6265(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-6128(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -6280(%rbp)       # 8-byte Spill
	jne	.LBB1_24
	jmp	.LBB1_29
.Ltmp98:
.LBB1_21:                               # %.lr.ph
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_22 Depth 2
	movq	-5216(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movl	$0, %edx
	movabsq	$1, %rsi
	leaq	.L.str207, %r8
	leaq	.L.str8, %rdi
	movabsq	$90, %r9
	leaq	.L.str50, %r10
	leaq	.L.str23, %r11
	leaq	.L.str206, %rbx
	movabsq	$2, %r14
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -6288(%rbp)       # 8-byte Spill
	leaq	.L.str205, %rax
	movq	%rax, -6296(%rbp)       # 8-byte Spill
	leaq	.L.str204, %rax
	movq	%rax, -6304(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -6312(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -6320(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -6328(%rbp)       # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, -6336(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -6344(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -6352(%rbp)       # 8-byte Spill
	leaq	.L.str203, %rax
	movq	%rax, -6360(%rbp)       # 8-byte Spill
	leaq	.L.str202, %rax
	movq	%rax, -6368(%rbp)       # 8-byte Spill
	movabsq	$92, %rax
	movq	%rax, -6376(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -6384(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -6392(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -6400(%rbp)       # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, -6408(%rbp)       # 8-byte Spill
	movabsq	$89, %rax
	movq	%rax, -6416(%rbp)       # 8-byte Spill
	leaq	.L.str27, %rax
	movq	%rax, -6424(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -6432(%rbp)       # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, -6440(%rbp)       # 8-byte Spill
	leaq	.L.str200, %rax
	movq	%rax, -6448(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -6456(%rbp)       # 8-byte Spill
	leaq	.L.str159, %rax
	movq	%rax, -6464(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -6472(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 89 0                  # feature_extraction.c:89:0
.Ltmp99:
	subq	$16, %rsp
	movq	%rax, -6480(%rbp)       # 8-byte Spill
	movq	-6472(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -6488(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -6496(%rbp)       # 8-byte Spill
	movq	%r10, %rsi
	movl	%edx, -6500(%rbp)       # 4-byte Spill
	movq	%r11, %rdx
	movq	-6336(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -6512(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-6480(%rbp), %rax       # 8-byte Reload
	movq	%r8, -6520(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-6500(%rbp), %eax       # 4-byte Reload
	movq	%r9, -6528(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, -6536(%rbp)       # 8-byte Spill
	movl	%r15d, -6540(%rbp)      # 4-byte Spill
	movq	%r12, -6552(%rbp)       # 8-byte Spill
	movq	%rbx, -6560(%rbp)       # 8-byte Spill
	movq	%r13, -6568(%rbp)       # 8-byte Spill
	movq	%r11, -6576(%rbp)       # 8-byte Spill
	movq	%r10, -6584(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6512(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6320(%rbp), %r8        # 8-byte Reload
	movq	-6496(%rbp), %r9        # 8-byte Reload
	movq	-6464(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6512(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6456(%rbp), %r8        # 8-byte Reload
	movq	-6496(%rbp), %r9        # 8-byte Reload
	movq	-6448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6336(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6448(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6416(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6408(%rbp), %rcx       # 8-byte Reload
	movq	-6400(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6336(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6440(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-5120(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -6592(%rbp)       # 8-byte Spill
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6408(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6416(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6424(%rbp), %rcx       # 8-byte Reload
	movq	-6432(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6592(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6408(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6312(%rbp), %rsi       # 8-byte Reload
	movq	-6512(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6320(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movl	$0, (%rcx,%rdx,4)
.Ltmp100:
	#DEBUG_VALUE: i <- 0
	.loc	1 92 0                  # feature_extraction.c:92:0
	subq	$16, %rsp
	movq	-6376(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6368(%rbp), %rcx       # 8-byte Reload
	movq	-6400(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6336(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-5128(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6392(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-5128(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -6600(%rbp)       # 8-byte Spill
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6368(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6376(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6360(%rbp), %rcx       # 8-byte Reload
	movq	-6384(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6600(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6368(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5128(%rbp), %rcx       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
.Ltmp101:
	.loc	1 90 0                  # feature_extraction.c:90:0
	movl	%eax, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6312(%rbp), %rsi       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6360(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6604(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6304(%rbp), %rcx       # 8-byte Reload
	movq	-6352(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6344(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6320(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6336(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rcx     # imm = 0x2F00000000
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	imulq	%rcx, %rdx
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -6616(%rbp)       # 8-byte Spill
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6304(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6296(%rbp), %rcx       # 8-byte Reload
	movq	-6328(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6536(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6312(%rbp), %rdx       # 8-byte Reload
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	movq	-6320(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	-6616(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6304(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6616(%rbp), %rcx       # 8-byte Reload
	sarq	$32, %rcx
	subq	$16, %rsp
	movq	-6552(%rbp), %rdi       # 8-byte Reload
	movq	-6568(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6496(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -6624(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-6296(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6528(%rbp), %rdi       # 8-byte Reload
	movq	-6584(%rbp), %rsi       # 8-byte Reload
	movq	-6576(%rbp), %rdx       # 8-byte Reload
	movq	-6560(%rbp), %rcx       # 8-byte Reload
	movq	-6536(%rbp), %r8        # 8-byte Reload
	movl	-6500(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6496(%rbp), %rdi       # 8-byte Reload
	movq	-6512(%rbp), %rsi       # 8-byte Reload
	movq	-6512(%rbp), %rdx       # 8-byte Reload
	movq	-6496(%rbp), %rcx       # 8-byte Reload
	movq	-6520(%rbp), %r8        # 8-byte Reload
	movq	-6512(%rbp), %r9        # 8-byte Reload
	movq	-6488(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6512(%rbp), %rcx       # 8-byte Reload
	.loc	1 92 0                  # feature_extraction.c:92:0
.Ltmp102:
	movl	-6500(%rbp), %eax       # 4-byte Reload
	movq	%rcx, -6632(%rbp)       # 8-byte Spill
	movl	%eax, -6636(%rbp)       # 4-byte Spill
.LBB1_22:                               #   Parent Loop BB1_21 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	-6636(%rbp), %eax       # 4-byte Reload
	movq	-6632(%rbp), %rcx       # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str217, %rsi
	movabsq	$0, %rdi
	leaq	.L.str8, %r8
	movabsq	$2, %r9
	leaq	.L.str207, %r10
	movabsq	$3, %r11
	leaq	.L.str200, %rbx
	movabsq	$90, %r14
	leaq	.L.str50, %r15
	leaq	.L.str218, %r12
	movl	$0, %r13d
	movl	%eax, -6640(%rbp)       # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, -6648(%rbp)       # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, -6656(%rbp)       # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, -6664(%rbp)       # 8-byte Spill
	leaq	.L.str209, %rcx
	movq	%rcx, -6672(%rbp)       # 8-byte Spill
	movabsq	$47, %rcx
	movq	%rcx, -6680(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rcx
	movq	%rcx, -6688(%rbp)       # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, -6696(%rbp)       # 8-byte Spill
	leaq	.L.str208, %rcx
	movq	%rcx, -6704(%rbp)       # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, -6712(%rbp)       # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, -6720(%rbp)       # 8-byte Spill
	leaq	.L.str211, %rcx
	movq	%rcx, -6728(%rbp)       # 8-byte Spill
	leaq	.L.str216, %rcx
	movq	%rcx, -6736(%rbp)       # 8-byte Spill
	leaq	.L.str210, %rcx
	movq	%rcx, -6744(%rbp)       # 8-byte Spill
	movabsq	$92, %rcx
	movq	%rcx, -6752(%rbp)       # 8-byte Spill
	leaq	.L.str215, %rcx
	movq	%rcx, -6760(%rbp)       # 8-byte Spill
	movabsq	$12, %rcx
	movq	%rcx, -6768(%rbp)       # 8-byte Spill
	leaq	.L.str214, %rcx
	movq	%rcx, -6776(%rbp)       # 8-byte Spill
	leaq	.L.str203, %rcx
	movq	%rcx, -6784(%rbp)       # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, -6792(%rbp)       # 8-byte Spill
	leaq	.L.str213, %rcx
	movq	%rcx, -6800(%rbp)       # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, -6808(%rbp)       # 8-byte Spill
	leaq	.L.str170, %rcx
	movq	%rcx, -6816(%rbp)       # 8-byte Spill
	leaq	.L.str212, %rcx
	movq	%rcx, -6824(%rbp)       # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, -6832(%rbp)       # 8-byte Spill
	leaq	.L.str205, %rcx
	movq	%rcx, -6840(%rbp)       # 8-byte Spill
	leaq	.L.str23, %rcx
	movq	%rcx, -6848(%rbp)       # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, -6856(%rbp)       # 8-byte Spill
	movabsq	$-1, %rcx
	subq	$16, %rsp
	movq	%rdi, -6864(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -6872(%rbp)       # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, -6880(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-6704(%rbp), %rcx       # 8-byte Reload
	movq	%r8, -6888(%rbp)        # 8-byte Spill
	movq	-6856(%rbp), %r8        # 8-byte Reload
	movq	%r9, -6896(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movl	%eax, -6900(%rbp)       # 4-byte Spill
	movl	%r13d, -6904(%rbp)      # 4-byte Spill
	movq	%r14, -6912(%rbp)       # 8-byte Spill
	movq	%r15, -6920(%rbp)       # 8-byte Spill
	movq	%r12, -6928(%rbp)       # 8-byte Spill
	movq	%rbx, -6936(%rbp)       # 8-byte Spill
	movq	%r11, -6944(%rbp)       # 8-byte Spill
	movq	%r10, -6952(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movq	-6880(%rbp), %r9        # 8-byte Reload
	movq	-6952(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6864(%rbp), %rcx       # 8-byte Reload
	movq	-6688(%rbp), %r8        # 8-byte Reload
	movq	-6880(%rbp), %r9        # 8-byte Reload
	movq	-6848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6704(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6744(%rbp), %rcx       # 8-byte Reload
	movq	-6856(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6728(%rbp), %r8        # 8-byte Reload
	movq	-6880(%rbp), %r9        # 8-byte Reload
	movq	-6952(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6864(%rbp), %rcx       # 8-byte Reload
	movq	-6688(%rbp), %r8        # 8-byte Reload
	movq	-6880(%rbp), %r9        # 8-byte Reload
	movq	-6848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6640(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6744(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6848(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6824(%rbp), %rcx       # 8-byte Reload
	movq	-6712(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6624(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6840(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6704(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6648(%rbp), %rcx       # 8-byte Reload
	movq	-6624(%rbp), %rdx       # 8-byte Reload
	addq	%rdx, %rcx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6880(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -6960(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-6824(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6800(%rbp), %rcx       # 8-byte Reload
	movq	-6832(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6960(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6824(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-4920(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6816(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-6960(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-4920(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -6968(%rbp)       # 8-byte Spill
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6800(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6776(%rbp), %rcx       # 8-byte Reload
	movq	-6808(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6968(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6800(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4920(%rbp), %rcx       # 8-byte Reload
	movq	-6960(%rbp), %rdx       # 8-byte Reload
	movl	(%rcx,%rdx,4), %eax
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6776(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6972(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6760(%rbp), %rcx       # 8-byte Reload
	movq	-6792(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-6604(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6784(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6972(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6776(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6972(%rbp), %eax       # 4-byte Reload
	movl	-6604(%rbp), %r13d      # 4-byte Reload
	subl	%r13d, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6760(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6976(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6736(%rbp), %rcx       # 8-byte Reload
	movq	-6768(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-6976(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6760(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6976(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6760(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6976(%rbp), %eax       # 4-byte Reload
	imull	%eax, %eax
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6736(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6980(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6752(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6728(%rbp), %rcx       # 8-byte Reload
	movq	-6712(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-6640(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6744(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6980(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6736(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6980(%rbp), %eax       # 4-byte Reload
	movl	-6640(%rbp), %r13d      # 4-byte Reload
	addl	%r13d, %eax
.Ltmp103:
	.loc	1 90 0                  # feature_extraction.c:90:0
	movl	%eax, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6720(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6728(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -6984(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6912(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6672(%rbp), %rcx       # 8-byte Reload
	movq	-6712(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rdx       # 8-byte Reload
	movq	-6864(%rbp), %rcx       # 8-byte Reload
	movq	-6688(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6648(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6704(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6648(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-6880(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -6992(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6912(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6872(%rbp), %rcx       # 8-byte Reload
	movq	-6696(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6680(%rbp), %rdx       # 8-byte Reload
	movq	-6864(%rbp), %rcx       # 8-byte Reload
	movq	-6688(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6664(%rbp), %rsi       # 8-byte Reload
	movq	-6992(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6672(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6992(%rbp), %rcx       # 8-byte Reload
	cmpq	$47, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6656(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6872(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -6993(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6912(%rbp), %rdi       # 8-byte Reload
	movq	-6920(%rbp), %rsi       # 8-byte Reload
	movq	-6952(%rbp), %rdx       # 8-byte Reload
	movq	-6928(%rbp), %rcx       # 8-byte Reload
	movq	-6896(%rbp), %r8        # 8-byte Reload
	movl	-6904(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6944(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6936(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-6896(%rbp), %rdi       # 8-byte Reload
	movq	-6864(%rbp), %rsi       # 8-byte Reload
	movq	-6864(%rbp), %rdx       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6952(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6993(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-6880(%rbp), %rdi       # 8-byte Reload
	movq	-6880(%rbp), %rsi       # 8-byte Reload
	movq	-6880(%rbp), %rcx       # 8-byte Reload
	movq	-6872(%rbp), %r8        # 8-byte Reload
	movq	-6864(%rbp), %r9        # 8-byte Reload
	movq	-6888(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-6993(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-6992(%rbp), %rcx       # 8-byte Reload
	.loc	1 92 0                  # feature_extraction.c:92:0
.Ltmp104:
	movl	-6984(%rbp), %r13d      # 4-byte Reload
.Ltmp105:
	.loc	1 90 0                  # feature_extraction.c:90:0
	movq	%rcx, -6632(%rbp)       # 8-byte Spill
	movl	%r13d, -6636(%rbp)      # 4-byte Spill
	jne	.LBB1_23
	jmp	.LBB1_22
.Ltmp106:
.LBB1_23:                               #   in Loop: Header=BB1_21 Depth=1
	movabsq	$1, %rax
	leaq	.L.str226, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str23, %r8
	movabsq	$3, %r9
	leaq	.L.str195, %r10
	movabsq	$87, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str200, %r14
	leaq	.L.str227, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -7008(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -7016(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7024(%rbp)       # 8-byte Spill
	leaq	.L.str225, %rax
	movq	%rax, -7032(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -7040(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -7048(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -7056(%rbp)       # 8-byte Spill
	leaq	.L.str199, %rax
	movq	%rax, -7064(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -7072(%rbp)       # 8-byte Spill
	leaq	.L.str198, %rax
	movq	%rax, -7080(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7088(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, -7096(%rbp)       # 8-byte Spill
	leaq	.L.str223, %rax
	movq	%rax, -7104(%rbp)       # 8-byte Spill
	leaq	.L.str201, %rax
	movq	%rax, -7112(%rbp)       # 8-byte Spill
	movabsq	$97, %rax
	movq	%rax, -7120(%rbp)       # 8-byte Spill
	leaq	.L.str224, %rax
	movq	%rax, -7128(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -7136(%rbp)       # 8-byte Spill
	leaq	.L.str222, %rax
	movq	%rax, -7144(%rbp)       # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, -7152(%rbp)       # 8-byte Spill
	leaq	.L.str221, %rax
	movq	%rax, -7160(%rbp)       # 8-byte Spill
	leaq	sqrt, %rax
	movq	%rax, -7168(%rbp)       # 8-byte Spill
	leaq	.L.str140, %rax
	movq	%rax, -7176(%rbp)       # 8-byte Spill
	movabsq	$49, %rax
	.loc	1 96 0                  # feature_extraction.c:96:0
	subq	$16, %rsp
	movq	%rax, -7184(%rbp)       # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str50, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, -7192(%rbp)       # 8-byte Spill
	movl	$.L.str200, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7200(%rbp)       # 8-byte Spill
	movl	$.L.str219, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7208(%rbp)       # 8-byte Spill
	movl	$96, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7216(%rbp)       # 8-byte Spill
	movl	$15, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, -7224(%rbp)       # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, -7232(%rbp)       # 8-byte Spill
	movq	-7216(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7240(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	-7232(%rbp), %rax       # 8-byte Reload
	movl	%esi, -7244(%rbp)       # 4-byte Spill
	movq	%rax, %rsi
	movq	-7200(%rbp), %rax       # 8-byte Reload
	movq	%rdx, -7256(%rbp)       # 8-byte Spill
	movq	%rax, %rdx
	movq	-7208(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7264(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7224(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7272(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movl	-7244(%rbp), %eax       # 4-byte Reload
	movq	%r9, -7280(%rbp)        # 8-byte Spill
	movl	%eax, %r9d
	movl	%r13d, -7284(%rbp)      # 4-byte Spill
	movq	%r14, -7296(%rbp)       # 8-byte Spill
	movq	%r15, -7304(%rbp)       # 8-byte Spill
	movl	%r12d, -7308(%rbp)      # 4-byte Spill
	movq	%rbx, -7320(%rbp)       # 8-byte Spill
	movq	%r11, -7328(%rbp)       # 8-byte Spill
	movq	%r10, -7336(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str7, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	$46, %eax
	movl	%eax, %esi
	movl	-7244(%rbp), %eax       # 4-byte Reload
	movl	%eax, %edi
	movq	%rdi, -7344(%rbp)       # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, -7352(%rbp)       # 8-byte Spill
	movq	%rdx, %rsi
	movq	-7352(%rbp), %r10       # 8-byte Reload
	movq	%rdx, -7360(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7344(%rbp), %r11       # 8-byte Reload
	movq	%rcx, -7368(%rbp)       # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6984(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str211, %r12d
	movl	%r12d, %r8d
	movl	$1, %r12d
	movl	%r12d, %ecx
	movq	%rcx, %rdi
	movq	-7360(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, -7376(%rbp)       # 8-byte Spill
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-6984(%rbp), %eax       # 4-byte Reload
	movslq	%eax, %rcx
	imulq	$-1307163959, %rcx, %rcx # imm = 0xFFFFFFFFB21642C9
	shrq	$32, %rcx
	movl	%ecx, %r12d
	addl	%eax, %r12d
	movl	%r12d, %r13d
	shrl	$31, %r13d
	sarl	$5, %r12d
	addl	%r13d, %r12d
	movl	%r12d, %ecx
	subq	$16, %rsp
	movq	%rsp, %rdx
	movq	$.L.str8, (%rdx)
	movl	$19134, %r13d           # imm = 0x4ABE
	movl	%r13d, %edi
	movq	-7360(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-7376(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7384(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7208(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	movl	%r12d, -7388(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str220, %eax
	movl	%eax, %ecx
	movl	$28, %eax
	movl	%eax, %r8d
	movq	-7216(%rbp), %rdi       # 8-byte Reload
	movq	-7232(%rbp), %rsi       # 8-byte Reload
	movq	-7200(%rbp), %rdx       # 8-byte Reload
	movl	-7244(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movl	$.L.str201, %eax
	movl	%eax, %r8d
	movl	$64, %eax
	movl	%eax, %esi
	movq	-7368(%rbp), %rdi       # 8-byte Reload
	movq	-6592(%rbp), %rdx       # 8-byte Reload
	movq	-7376(%rbp), %rcx       # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7376(%rbp), %rdi       # 8-byte Reload
	movq	-7360(%rbp), %rsi       # 8-byte Reload
	movq	-7384(%rbp), %rdx       # 8-byte Reload
	movq	-7376(%rbp), %rcx       # 8-byte Reload
	movq	-7208(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6592(%rbp), %rcx       # 8-byte Reload
	movl	-7388(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rcx)
	.loc	1 97 0                  # feature_extraction.c:97:0
	subq	$16, %rsp
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str221, %r12d
	movl	%r12d, %ecx
	movl	$97, %r12d
	movl	%r12d, %edi
	movl	$39, %r12d
	movl	%r12d, %r8d
	movq	-7232(%rbp), %rsi       # 8-byte Reload
	movq	-7200(%rbp), %rdx       # 8-byte Reload
	movl	-7244(%rbp), %r9d       # 4-byte Reload
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	%rsp, %rcx
	movq	$.L.str8, (%rcx)
	movq	-7376(%rbp), %rdi       # 8-byte Reload
	movq	-7360(%rbp), %rsi       # 8-byte Reload
	movq	-7384(%rbp), %rdx       # 8-byte Reload
	movq	-7376(%rbp), %rcx       # 8-byte Reload
	movq	-7208(%rbp), %r8        # 8-byte Reload
	movq	-7344(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_int
	addq	$16, %rsp
                                        # implicit-def: XMM0
	movl	-7388(%rbp), %eax       # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -7400(%rbp)      # 8-byte Spill
	movq	-7008(%rbp), %rdx       # 8-byte Reload
	movq	-7160(%rbp), %rcx       # 8-byte Reload
	movq	-7256(%rbp), %r8        # 8-byte Reload
	movq	-7192(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7144(%rbp), %rcx       # 8-byte Reload
	movq	-7184(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7240(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	-7168(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7176(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7400(%rbp), %xmm0      # 8-byte Reload
	movq	-7008(%rbp), %rdx       # 8-byte Reload
	movq	-7160(%rbp), %rcx       # 8-byte Reload
	movq	-7256(%rbp), %r8        # 8-byte Reload
	movq	-7192(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-7400(%rbp), %xmm0      # 8-byte Reload
	callq	sqrt
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	vmovsd	%xmm0, -7408(%rbp)      # 8-byte Spill
	movq	-7008(%rbp), %rdx       # 8-byte Reload
	movq	-7144(%rbp), %rcx       # 8-byte Reload
	movq	-7256(%rbp), %r8        # 8-byte Reload
	movq	-7192(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7104(%rbp), %rcx       # 8-byte Reload
	movq	-7152(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	vmovsd	-7408(%rbp), %xmm0      # 8-byte Reload
	movq	-7008(%rbp), %rdx       # 8-byte Reload
	movq	-7144(%rbp), %rcx       # 8-byte Reload
	movq	-7256(%rbp), %r8        # 8-byte Reload
	movq	-7192(%rbp), %r9        # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	-7408(%rbp), %xmm0      # 8-byte Reload
	vcvttsd2si	%xmm0, %eax
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7024(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7104(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7412(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7120(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7128(%rbp), %rcx       # 8-byte Reload
	movq	-7136(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7240(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	-6592(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7112(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-7412(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7024(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7104(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6592(%rbp), %rcx       # 8-byte Reload
	movl	-7412(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rcx)
.Ltmp107:
	.loc	1 87 0                  # feature_extraction.c:87:0
	subq	$16, %rsp
	movq	-7328(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7064(%rbp), %rcx       # 8-byte Reload
	movq	-7096(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7240(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rdx       # 8-byte Reload
	movq	-7256(%rbp), %rcx       # 8-byte Reload
	movq	-7088(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	-6288(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7080(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-6288(%rbp), %rcx       # 8-byte Reload
	addq	$1, %rcx
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-7008(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7424(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7064(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7328(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7032(%rbp), %rcx       # 8-byte Reload
	movq	-7072(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7056(%rbp), %rsi       # 8-byte Reload
	movq	-7424(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7064(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7424(%rbp), %rcx       # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7024(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -7428(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7328(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7264(%rbp), %rcx       # 8-byte Reload
	movq	-7048(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	subq	$16, %rsp
	movq	-7240(%rbp), %rdi       # 8-byte Reload
	movq	-7024(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7040(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7428(%rbp), %eax       # 4-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7024(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7032(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7428(%rbp), %eax       # 4-byte Reload
	movl	-68(%rbp), %r12d        # 4-byte Reload
	cmpl	%r12d, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-7016(%rbp), %rdi       # 8-byte Reload
	movq	-7008(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7264(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7429(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7328(%rbp), %rdi       # 8-byte Reload
	movq	-7320(%rbp), %rsi       # 8-byte Reload
	movq	-7296(%rbp), %rdx       # 8-byte Reload
	movq	-7304(%rbp), %rcx       # 8-byte Reload
	movq	-7240(%rbp), %r8        # 8-byte Reload
	movl	-7308(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7280(%rbp), %rdi       # 8-byte Reload
	movq	-7256(%rbp), %rsi       # 8-byte Reload
	movq	-7256(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7336(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7240(%rbp), %rdi       # 8-byte Reload
	movq	-7256(%rbp), %rsi       # 8-byte Reload
	movq	-7256(%rbp), %rdx       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7272(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7429(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-7008(%rbp), %rdi       # 8-byte Reload
	movq	-7008(%rbp), %rsi       # 8-byte Reload
	movq	-7008(%rbp), %rcx       # 8-byte Reload
	movq	-7264(%rbp), %r8        # 8-byte Reload
	movq	-7256(%rbp), %r9        # 8-byte Reload
	movq	-7192(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7429(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-7424(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -5216(%rbp)       # 8-byte Spill
	jne	.LBB1_20
	jmp	.LBB1_21
.Ltmp108:
.LBB1_24:                               # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB1_25 Depth 2
	movq	-6280(%rbp), %rax       # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str237, %r8
	leaq	.L.str8, %rsi
	movabsq	$101, %rdi
	leaq	.L.str50, %r9
	leaq	.L.str16, %r10
	leaq	.L.str22, %r11
	movabsq	$2, %rbx
	movl	$0, %r14d
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, -7440(%rbp)       # 8-byte Spill
	leaq	.L.str236, %rax
	movq	%rax, -7448(%rbp)       # 8-byte Spill
	leaq	.L.str235, %rax
	movq	%rax, -7456(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -7464(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7472(%rbp)       # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, -7480(%rbp)       # 8-byte Spill
	leaq	.L.str228, %rax
	movq	%rax, -7488(%rbp)       # 8-byte Spill
	movabsq	$201863462912, %rax     # imm = 0x2F00000000
	movq	%rax, -7496(%rbp)       # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, -7504(%rbp)       # 8-byte Spill
	leaq	.L.str234, %rax
	movq	%rax, -7512(%rbp)       # 8-byte Spill
	leaq	.L.str169, %rax
	movq	%rax, -7520(%rbp)       # 8-byte Spill
	movabsq	$105, %rax
	movq	%rax, -7528(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -7536(%rbp)       # 8-byte Spill
	leaq	.L.str233, %rax
	movq	%rax, -7544(%rbp)       # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, -7552(%rbp)       # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, -7560(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -7568(%rbp)       # 8-byte Spill
	leaq	.L.str231, %rax
	movq	%rax, -7576(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -7584(%rbp)       # 8-byte Spill
	leaq	.L.str167, %rax
	movq	%rax, -7592(%rbp)       # 8-byte Spill
	leaq	.L.str230, %rax
	movq	%rax, -7600(%rbp)       # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, -7608(%rbp)       # 8-byte Spill
	leaq	.L.str195, %rax
	movq	%rax, -7616(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -7624(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 103 0                 # feature_extraction.c:103:0
.Ltmp109:
	subq	$16, %rsp
	movq	%rax, -7632(%rbp)       # 8-byte Spill
	movq	-7624(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7640(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -7648(%rbp)       # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, -7656(%rbp)       # 8-byte Spill
	movq	%r10, %rdx
	movq	-7488(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7664(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7632(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7672(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -7680(%rbp)        # 8-byte Spill
	movl	%r14d, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -7684(%rbp)      # 4-byte Spill
	movl	%r15d, -7688(%rbp)      # 4-byte Spill
	movq	%rbx, -7696(%rbp)       # 8-byte Spill
	movq	%r12, -7704(%rbp)       # 8-byte Spill
	movq	%r13, -7712(%rbp)       # 8-byte Spill
	movq	%r11, -7720(%rbp)       # 8-byte Spill
	movq	%r10, -7728(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	-7664(%rbp), %rcx       # 8-byte Reload
	movq	-7472(%rbp), %r8        # 8-byte Reload
	movq	-7656(%rbp), %r9        # 8-byte Reload
	movq	-7616(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7608(%rbp), %r8        # 8-byte Reload
	movq	-7656(%rbp), %r9        # 8-byte Reload
	movq	-7600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7488(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7600(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7560(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7576(%rbp), %rcx       # 8-byte Reload
	movq	-7536(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7488(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-5120(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7592(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7440(%rbp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	-5120(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-7656(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7736(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7576(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7560(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7552(%rbp), %rcx       # 8-byte Reload
	movq	-7584(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7736(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7576(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-5120(%rbp), %rax       # 8-byte Reload
	movq	-7440(%rbp), %rcx       # 8-byte Reload
	movl	(%rax,%rcx,4), %r14d
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7464(%rbp), %rsi       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7552(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r14d, -7740(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7560(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7544(%rbp), %rcx       # 8-byte Reload
	movq	-7568(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7464(%rbp), %rsi       # 8-byte Reload
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	-7664(%rbp), %rcx       # 8-byte Reload
	movq	-7472(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7740(%rbp), %r14d      # 4-byte Reload
	movl	%r14d, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7464(%rbp), %rsi       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7552(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-7740(%rbp), %r14d      # 4-byte Reload
	cmpl	$0, %r14d
	sete	%al
	.loc	1 105 0                 # feature_extraction.c:105:0
.Ltmp110:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r15d
	movl	%r15d, %edx
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7656(%rbp), %rsi       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7544(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -7741(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7528(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7512(%rbp), %rcx       # 8-byte Reload
	movq	-7536(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7488(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-5128(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7520(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7440(%rbp), %rcx       # 8-byte Reload
	shlq	$2, %rcx
	movq	-5128(%rbp), %rdx       # 8-byte Reload
	addq	%rcx, %rdx
.Ltmp111:
	.loc	1 101 0                 # feature_extraction.c:101:0
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -7752(%rbp)       # 8-byte Spill
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7512(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7640(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7456(%rbp), %rcx       # 8-byte Reload
	movq	-7504(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7496(%rbp), %rdx       # 8-byte Reload
	movq	-7664(%rbp), %rcx       # 8-byte Reload
	movq	-7472(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7488(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movabsq	$201863462912, %rcx     # imm = 0x2F00000000
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	imulq	%rcx, %rdx
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	%rdx, -7760(%rbp)       # 8-byte Spill
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7456(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7640(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7448(%rbp), %rcx       # 8-byte Reload
	movq	-7480(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7696(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7464(%rbp), %rdx       # 8-byte Reload
	movq	-7664(%rbp), %rcx       # 8-byte Reload
	movq	-7472(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	-7760(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7456(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7760(%rbp), %rcx       # 8-byte Reload
	sarq	$32, %rcx
	subq	$16, %rsp
	movq	-7704(%rbp), %rdi       # 8-byte Reload
	movq	-7712(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-7656(%rbp), %r8        # 8-byte Reload
	movq	%rcx, -7768(%rbp)       # 8-byte Spill
	movq	%r8, %rcx
	movq	-7448(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7640(%rbp), %rdi       # 8-byte Reload
	movq	-7680(%rbp), %rsi       # 8-byte Reload
	movq	-7728(%rbp), %rdx       # 8-byte Reload
	movq	-7720(%rbp), %rcx       # 8-byte Reload
	movq	-7696(%rbp), %r8        # 8-byte Reload
	movl	-7684(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7656(%rbp), %rdi       # 8-byte Reload
	movq	-7664(%rbp), %rsi       # 8-byte Reload
	movq	-7664(%rbp), %rdx       # 8-byte Reload
	movq	-7656(%rbp), %rcx       # 8-byte Reload
	movq	-7672(%rbp), %r8        # 8-byte Reload
	movq	-7664(%rbp), %r9        # 8-byte Reload
	movq	-7648(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7664(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -7776(%rbp)       # 8-byte Spill
.LBB1_25:                               #   Parent Loop BB1_24 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	-7776(%rbp), %rax       # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str233, %r8
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str240, %r9
	movabsq	$3, %r10
	leaq	.L.str238, %r11
	movabsq	$103, %rbx
	leaq	.L.str50, %r14
	leaq	.L.str237, %r15
	leaq	.L.str239, %r12
	movl	$0, %r13d
	movq	%rsi, -7784(%rbp)       # 8-byte Spill
	movl	$1, %esi
	movq	%rax, -7792(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -7800(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -7808(%rbp)       # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -7816(%rbp)       # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, -7824(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -7832(%rbp)       # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, -7840(%rbp)       # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, -7848(%rbp)       # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 103 0                 # feature_extraction.c:103:0
.Ltmp112:
	subq	$16, %rsp
	movq	%rax, -7856(%rbp)       # 8-byte Spill
	movq	-7848(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -7864(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, -7868(%rbp)       # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, -7880(%rbp)       # 8-byte Spill
	movq	%r15, %rdx
	movq	-7816(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -7888(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7856(%rbp), %rax       # 8-byte Reload
	movq	%r8, -7896(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -7904(%rbp)        # 8-byte Spill
	movl	%r13d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -7912(%rbp)       # 8-byte Spill
	movq	%rbx, -7920(%rbp)       # 8-byte Spill
	movq	%r15, -7928(%rbp)       # 8-byte Spill
	movq	%r12, -7936(%rbp)       # 8-byte Spill
	movl	%r13d, -7940(%rbp)      # 4-byte Spill
	movq	%r11, -7952(%rbp)       # 8-byte Spill
	movq	%r10, -7960(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7864(%rbp), %rdi       # 8-byte Reload
	movq	-7808(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7888(%rbp), %rcx       # 8-byte Reload
	movq	-7840(%rbp), %r8        # 8-byte Reload
	movq	-7888(%rbp), %r9        # 8-byte Reload
	movq	-7952(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7888(%rbp), %rdi       # 8-byte Reload
	movq	-7808(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7880(%rbp), %rcx       # 8-byte Reload
	movq	-7832(%rbp), %r8        # 8-byte Reload
	movq	-7888(%rbp), %r9        # 8-byte Reload
	movq	-7824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7800(%rbp), %rdi       # 8-byte Reload
	movq	-7808(%rbp), %rsi       # 8-byte Reload
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	-7888(%rbp), %rcx       # 8-byte Reload
	movq	-7816(%rbp), %r8        # 8-byte Reload
	movq	-7880(%rbp), %r9        # 8-byte Reload
	movq	-7824(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7920(%rbp), %rdi       # 8-byte Reload
	movq	-7912(%rbp), %rsi       # 8-byte Reload
	movq	-7928(%rbp), %rdx       # 8-byte Reload
	movq	-7936(%rbp), %rcx       # 8-byte Reload
	movq	-7864(%rbp), %r8        # 8-byte Reload
	movl	-7940(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7960(%rbp), %rdi       # 8-byte Reload
	movq	-7880(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7888(%rbp), %rcx       # 8-byte Reload
	movq	-7952(%rbp), %r8        # 8-byte Reload
	movq	-7880(%rbp), %r9        # 8-byte Reload
	movq	-7784(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7864(%rbp), %rdi       # 8-byte Reload
	movq	-7880(%rbp), %rsi       # 8-byte Reload
	movq	-7880(%rbp), %rdx       # 8-byte Reload
	movq	-7888(%rbp), %rcx       # 8-byte Reload
	movq	-7904(%rbp), %r8        # 8-byte Reload
	movq	-7880(%rbp), %r9        # 8-byte Reload
	movq	-7784(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7741(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-7888(%rbp), %rdi       # 8-byte Reload
	movq	-7888(%rbp), %rsi       # 8-byte Reload
	movq	-7888(%rbp), %rcx       # 8-byte Reload
	movq	-7896(%rbp), %r8        # 8-byte Reload
	movq	-7880(%rbp), %r9        # 8-byte Reload
	movq	-7784(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-7741(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	jne	.LBB1_27
# BB#26:                                #   in Loop: Header=BB1_25 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str238, %r8
	leaq	.L.str8, %rdx
	movabsq	$107, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str240, %r9
	leaq	.L.str248, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %r14d
	movabsq	$32, %r15
	leaq	.L.str246, %r12
	movabsq	$64, %r13
	movq	%rax, -7968(%rbp)       # 8-byte Spill
	leaq	.L.str242, %rax
	movq	%rax, -7976(%rbp)       # 8-byte Spill
	movabsq	$105, %rax
	movq	%rax, -7984(%rbp)       # 8-byte Spill
	leaq	.L.str247, %rax
	movq	%rax, -7992(%rbp)       # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, -8000(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8008(%rbp)       # 8-byte Spill
	leaq	.L.str245, %rax
	movq	%rax, -8016(%rbp)       # 8-byte Spill
	leaq	.L.str232, %rax
	movq	%rax, -8024(%rbp)       # 8-byte Spill
	movabsq	$15, %rax
	movq	%rax, -8032(%rbp)       # 8-byte Spill
	leaq	.L.str243, %rax
	movq	%rax, -8040(%rbp)       # 8-byte Spill
	leaq	.L.str244, %rax
	movq	%rax, -8048(%rbp)       # 8-byte Spill
	movabsq	$10, %rax
	movq	%rax, -8056(%rbp)       # 8-byte Spill
	leaq	.L.str234, %rax
	movq	%rax, -8064(%rbp)       # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, -8072(%rbp)       # 8-byte Spill
	leaq	.L.str170, %rax
	movq	%rax, -8080(%rbp)       # 8-byte Spill
	leaq	.L.str241, %rax
	movq	%rax, -8088(%rbp)       # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, -8096(%rbp)       # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -8104(%rbp)       # 8-byte Spill
	leaq	.L.str236, %rax
	movq	%rax, -8112(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 105 0                 # feature_extraction.c:105:0
.Ltmp113:
	subq	$16, %rsp
	movq	%rax, -8120(%rbp)       # 8-byte Spill
	movq	-7984(%rbp), %rax       # 8-byte Reload
	movq	%rdi, -8128(%rbp)       # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, -8136(%rbp)       # 8-byte Spill
	movq	%rdx, -8144(%rbp)       # 8-byte Spill
	movq	%r9, %rdx
	movq	-8088(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8152(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8120(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8160(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8168(%rbp)        # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%r14d, -8172(%rbp)      # 4-byte Spill
	movl	%ebx, -8176(%rbp)       # 4-byte Spill
	movq	%r15, -8184(%rbp)       # 8-byte Spill
	movq	%r13, -8192(%rbp)       # 8-byte Spill
	movq	%r12, -8200(%rbp)       # 8-byte Spill
	movq	%r11, -8208(%rbp)       # 8-byte Spill
	movq	%r10, -8216(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8208(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-7768(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8112(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8104(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7792(%rbp), %rax       # 8-byte Reload
	movq	-7768(%rbp), %rcx       # 8-byte Reload
	addq	%rcx, %rax
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8088(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8224(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-7976(%rbp), %rcx       # 8-byte Reload
	movq	-8096(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8208(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8088(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-4920(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8080(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-8224(%rbp), %rax       # 8-byte Reload
	shlq	$2, %rax
	movq	-4920(%rbp), %rcx       # 8-byte Reload
	addq	%rax, %rcx
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	%rcx, %rdx
	movq	-7968(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8232(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-8040(%rbp), %rcx       # 8-byte Reload
	movq	-8072(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-8232(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-4920(%rbp), %rax       # 8-byte Reload
	movq	-8224(%rbp), %rcx       # 8-byte Reload
	movl	(%rax,%rcx,4), %ebx
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8040(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -8236(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-8048(%rbp), %rcx       # 8-byte Reload
	movq	-8072(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-7752(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8064(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movq	-7752(%rbp), %rax       # 8-byte Reload
	movl	(%rax), %ebx
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8048(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebx, -8240(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-8016(%rbp), %rcx       # 8-byte Reload
	movq	-8056(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-8240(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-8208(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8048(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8236(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8040(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8236(%rbp), %ebx       # 4-byte Reload
	movl	-8240(%rbp), %r14d      # 4-byte Reload
	subl	%r14d, %ebx
	movl	%ebx, %esi
	movl	%esi, %edx
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8016(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, -8244(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-8200(%rbp), %rcx       # 8-byte Reload
	movq	-8032(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-7740(%rbp), %r9d       # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-8208(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8024(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8244(%rbp), %ebx       # 4-byte Reload
	movl	%ebx, %r14d
	movl	%r14d, %edx
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8016(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8244(%rbp), %eax       # 4-byte Reload
	cltd
	movl	-7740(%rbp), %ebx       # 4-byte Reload
	idivl	%ebx
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	subq	$16, %rsp
	movq	-8008(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8200(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, -8248(%rbp)       # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7984(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-7992(%rbp), %rcx       # 8-byte Reload
	movq	-8000(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8208(%rbp), %rdi       # 8-byte Reload
	movq	-8192(%rbp), %rsi       # 8-byte Reload
	movq	-8232(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-7976(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	addq	$16, %rsp
	movl	-8248(%rbp), %eax       # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %edx
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8184(%rbp), %rsi       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8200(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-4920(%rbp), %rcx       # 8-byte Reload
	movq	-8224(%rbp), %rdx       # 8-byte Reload
	movl	-8248(%rbp), %eax       # 4-byte Reload
	movl	%eax, (%rcx,%rdx,4)
	.loc	1 107 0                 # feature_extraction.c:107:0
	subq	$16, %rsp
	movq	-8128(%rbp), %rdi       # 8-byte Reload
	movq	-8136(%rbp), %rsi       # 8-byte Reload
	movq	-8168(%rbp), %rdx       # 8-byte Reload
	movq	-8216(%rbp), %rcx       # 8-byte Reload
	movq	-8208(%rbp), %r8        # 8-byte Reload
	movl	-8176(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-7968(%rbp), %rdi       # 8-byte Reload
	movq	-8152(%rbp), %rsi       # 8-byte Reload
	movq	-8152(%rbp), %rdx       # 8-byte Reload
	movq	-7968(%rbp), %rcx       # 8-byte Reload
	movq	-8160(%rbp), %r8        # 8-byte Reload
	movq	-8152(%rbp), %r9        # 8-byte Reload
	movq	-8144(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
.Ltmp114:
.LBB1_27:                               #   in Loop: Header=BB1_25 Depth=2
	movabsq	$1, %rax
	leaq	.L.str41, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str237, %r8
	movabsq	$3, %r9
	leaq	.L.str230, %r10
	movabsq	$101, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str238, %r14
	leaq	.L.str249, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -8256(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8264(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8272(%rbp)       # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, -8280(%rbp)       # 8-byte Spill
	movabsq	$47, %rax
	movq	%rax, -8288(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8296(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -8304(%rbp)       # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, -8312(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 101 0                 # feature_extraction.c:101:0
	subq	$16, %rsp
	movq	%rdi, -8320(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -8328(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -8336(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -8344(%rbp)       # 8-byte Spill
	movq	-8280(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8352(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8344(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8360(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8368(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8376(%rbp)       # 8-byte Spill
	movq	%r15, -8384(%rbp)       # 8-byte Spill
	movl	%r12d, -8388(%rbp)      # 4-byte Spill
	movl	%r13d, -8392(%rbp)      # 4-byte Spill
	movq	%rbx, -8400(%rbp)       # 8-byte Spill
	movq	%r11, -8408(%rbp)       # 8-byte Spill
	movq	%r10, -8416(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8320(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rdx       # 8-byte Reload
	movq	-8336(%rbp), %rcx       # 8-byte Reload
	movq	-8296(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8256(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-7792(%rbp), %rdx       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8312(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7792(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-8264(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8280(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8424(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8408(%rbp), %rdi       # 8-byte Reload
	movq	-8400(%rbp), %rsi       # 8-byte Reload
	movq	-8376(%rbp), %rdx       # 8-byte Reload
	movq	-8352(%rbp), %rcx       # 8-byte Reload
	movq	-8304(%rbp), %r8        # 8-byte Reload
	movl	-8388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8320(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8288(%rbp), %rdx       # 8-byte Reload
	movq	-8336(%rbp), %rcx       # 8-byte Reload
	movq	-8296(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8256(%rbp), %rdi       # 8-byte Reload
	movq	-8272(%rbp), %rsi       # 8-byte Reload
	movq	-8424(%rbp), %rdx       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8280(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8424(%rbp), %rax       # 8-byte Reload
	cmpq	$47, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8264(%rbp), %rdi       # 8-byte Reload
	movq	-8256(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8352(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -8425(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8408(%rbp), %rdi       # 8-byte Reload
	movq	-8400(%rbp), %rsi       # 8-byte Reload
	movq	-8376(%rbp), %rdx       # 8-byte Reload
	movq	-8384(%rbp), %rcx       # 8-byte Reload
	movq	-8320(%rbp), %r8        # 8-byte Reload
	movl	-8388(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8368(%rbp), %rdi       # 8-byte Reload
	movq	-8336(%rbp), %rsi       # 8-byte Reload
	movq	-8336(%rbp), %rdx       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8416(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8320(%rbp), %rdi       # 8-byte Reload
	movq	-8336(%rbp), %rsi       # 8-byte Reload
	movq	-8336(%rbp), %rdx       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8360(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8425(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8256(%rbp), %rdi       # 8-byte Reload
	movq	-8256(%rbp), %rsi       # 8-byte Reload
	movq	-8256(%rbp), %rcx       # 8-byte Reload
	movq	-8352(%rbp), %r8        # 8-byte Reload
	movq	-8336(%rbp), %r9        # 8-byte Reload
	movq	-8328(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8425(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-8424(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -7776(%rbp)       # 8-byte Spill
	jne	.LBB1_28
	jmp	.LBB1_25
.Ltmp115:
.LBB1_28:                               #   in Loop: Header=BB1_24 Depth=1
	movabsq	$1, %rax
	leaq	.L.str250, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str16, %r8
	movabsq	$3, %r9
	leaq	.L.str166, %r10
	movabsq	$99, %r11
	leaq	.L.str50, %rbx
	leaq	.L.str230, %r14
	leaq	.L.str251, %r15
	movl	$0, %r12d
	movl	$1, %r13d
	movq	%rax, -8440(%rbp)       # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, -8448(%rbp)       # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, -8456(%rbp)       # 8-byte Spill
	leaq	.L.str40, %rax
	movq	%rax, -8464(%rbp)       # 8-byte Spill
	leaq	.L.str9, %rax
	movq	%rax, -8472(%rbp)       # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, -8480(%rbp)       # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, -8488(%rbp)       # 8-byte Spill
	leaq	.L.str229, %rax
	movq	%rax, -8496(%rbp)       # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, -8504(%rbp)       # 8-byte Spill
	leaq	.L.str228, %rax
	movq	%rax, -8512(%rbp)       # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, -8520(%rbp)       # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 99 0                  # feature_extraction.c:99:0
	subq	$16, %rsp
	movq	%rdi, -8528(%rbp)       # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, -8536(%rbp)       # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, -8544(%rbp)       # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, -8552(%rbp)       # 8-byte Spill
	movq	-8496(%rbp), %rax       # 8-byte Reload
	movq	%rcx, -8560(%rbp)       # 8-byte Spill
	movq	%rax, %rcx
	movq	-8552(%rbp), %rax       # 8-byte Reload
	movq	%r8, -8568(%rbp)        # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, -8576(%rbp)        # 8-byte Spill
	movl	%r12d, %r9d
	movl	$1, (%rsp)
	movq	%r14, -8584(%rbp)       # 8-byte Spill
	movq	%r15, -8592(%rbp)       # 8-byte Spill
	movl	%r12d, -8596(%rbp)      # 4-byte Spill
	movl	%r13d, -8600(%rbp)      # 4-byte Spill
	movq	%rbx, -8608(%rbp)       # 8-byte Spill
	movq	%r11, -8616(%rbp)       # 8-byte Spill
	movq	%r10, -8624(%rbp)       # 8-byte Spill
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8528(%rbp), %rdi       # 8-byte Reload
	movq	-8488(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rdx       # 8-byte Reload
	movq	-8544(%rbp), %rcx       # 8-byte Reload
	movq	-8520(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8440(%rbp), %rdi       # 8-byte Reload
	movq	-8488(%rbp), %rsi       # 8-byte Reload
	movq	-7440(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8512(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-7440(%rbp), %rax       # 8-byte Reload
	addq	$1, %rax
	subq	$16, %rsp
	movq	-8448(%rbp), %rdi       # 8-byte Reload
	movq	-8488(%rbp), %rsi       # 8-byte Reload
	movq	%rax, %rdx
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8496(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, -8632(%rbp)       # 8-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8616(%rbp), %rdi       # 8-byte Reload
	movq	-8608(%rbp), %rsi       # 8-byte Reload
	movq	-8584(%rbp), %rdx       # 8-byte Reload
	movq	-8464(%rbp), %rcx       # 8-byte Reload
	movq	-8504(%rbp), %r8        # 8-byte Reload
	movl	-8596(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8440(%rbp), %rdi       # 8-byte Reload
	movq	-8488(%rbp), %rsi       # 8-byte Reload
	movq	-8632(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8496(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movq	-8632(%rbp), %rax       # 8-byte Reload
	movl	%eax, %r12d
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-8448(%rbp), %rdi       # 8-byte Reload
	movq	-8456(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8464(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%r12d, -8636(%rbp)      # 4-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8616(%rbp), %rdi       # 8-byte Reload
	movq	-8608(%rbp), %rsi       # 8-byte Reload
	movq	-8584(%rbp), %rdx       # 8-byte Reload
	movq	-8560(%rbp), %rcx       # 8-byte Reload
	movq	-8480(%rbp), %r8        # 8-byte Reload
	movl	-8596(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	movl	-68(%rbp), %r9d         # 4-byte Reload
	movl	%r9d, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8528(%rbp), %rdi       # 8-byte Reload
	movq	-8456(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8472(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8636(%rbp), %r12d      # 4-byte Reload
	movl	%r12d, %r13d
	movl	%r13d, %edx
	subq	$16, %rsp
	movq	-8440(%rbp), %rdi       # 8-byte Reload
	movq	-8456(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8464(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %rax       # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movl	-8636(%rbp), %r12d      # 4-byte Reload
	movl	-68(%rbp), %r13d        # 4-byte Reload
	cmpl	%r13d, %r12d
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	subq	$16, %rsp
	movq	-8448(%rbp), %rdi       # 8-byte Reload
	movq	-8440(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8560(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, -8637(%rbp)        # 1-byte Spill
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8616(%rbp), %rdi       # 8-byte Reload
	movq	-8608(%rbp), %rsi       # 8-byte Reload
	movq	-8584(%rbp), %rdx       # 8-byte Reload
	movq	-8592(%rbp), %rcx       # 8-byte Reload
	movq	-8528(%rbp), %r8        # 8-byte Reload
	movl	-8596(%rbp), %r9d       # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8576(%rbp), %rdi       # 8-byte Reload
	movq	-8544(%rbp), %rsi       # 8-byte Reload
	movq	-8544(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8624(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	subq	$16, %rsp
	movq	-8528(%rbp), %rdi       # 8-byte Reload
	movq	-8544(%rbp), %rsi       # 8-byte Reload
	movq	-8544(%rbp), %rdx       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8568(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8637(%rbp), %al        # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %r12d
	movl	%r12d, %edx
	subq	$16, %rsp
	movq	-8440(%rbp), %rdi       # 8-byte Reload
	movq	-8440(%rbp), %rsi       # 8-byte Reload
	movq	-8440(%rbp), %rcx       # 8-byte Reload
	movq	-8560(%rbp), %r8        # 8-byte Reload
	movq	-8544(%rbp), %r9        # 8-byte Reload
	movq	-8536(%rbp), %r10       # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	addq	$16, %rsp
	movb	-8637(%rbp), %al        # 1-byte Reload
	testb	$1, %al
	movq	-8632(%rbp), %rcx       # 8-byte Reload
	movq	%rcx, -6280(%rbp)       # 8-byte Spill
	jne	.LBB1_29
	jmp	.LBB1_24
.Ltmp116:
.LBB1_29:                               # %._crit_edge
	movabsq	$130, %rdi
	leaq	.L.str50, %rsi
	leaq	.L.str166, %rdx
	leaq	.L.str252, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	1 130 0                 # feature_extraction.c:130:0
	subq	$16, %rsp
	movl	$1, (%rsp)
	movl	%eax, -8644(%rbp)       # 4-byte Spill
	callq	trace_logger_log0
	leaq	-40(%rbp), %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp117:
.Ltmp118:
	.size	process_data, .Ltmp118-process_data
.Lfunc_end1:
	.cfi_endproc

	.globl	main
	.align	16, 0x90
	.type	main,@function
main:                                   # @main
	.cfi_startproc
.Lfunc_begin2:
	.loc	1 132 0                 # feature_extraction.c:132:0
# BB#0:
	pushq	%rbp
.Ltmp126:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp127:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp128:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp129:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp130:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp131:
	.cfi_def_cfa_offset 56
	subq	$2040, %rsp             # imm = 0x7F8
.Ltmp132:
	.cfi_def_cfa_offset 2096
.Ltmp133:
	.cfi_offset %rbx, -56
.Ltmp134:
	.cfi_offset %r12, -48
.Ltmp135:
	.cfi_offset %r13, -40
.Ltmp136:
	.cfi_offset %r14, -32
.Ltmp137:
	.cfi_offset %r15, -24
.Ltmp138:
	.cfi_offset %rbp, -16
	leaq	.L.str269, %rdi
	movabsq	$680, %rsi              # imm = 0x2A8
	.loc	1 134 0 prologue_end    # feature_extraction.c:134:0
.Ltmp139:
	callq	trace_logger_write_labelmap
	movabsq	$1, %rsi
	movabsq	$64, %rdi
	movabsq	$3000, %rdx             # imm = 0xBB8
	movabsq	$0, %rax
	leaq	.L.str7, %r8
	leaq	.L.str8, %rcx
	movabsq	$2, %r9
	leaq	malloc, %r10
	leaq	.L.str254, %r11
	movabsq	$134, %rbx
	leaq	.L.str253, %r14
	leaq	.L.str5, %r15
	leaq	.L.str6, %r12
	movabsq	$49, %r13
	movl	$0, %ebp
	movq	%rsi, 2032(%rsp)        # 8-byte Spill
	movl	$1, %esi
	movq	%rdi, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, %rdi
	movl	%esi, 2020(%rsp)        # 4-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2008(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 2000(%rsp)        # 8-byte Spill
	movq	%r12, %rcx
	movq	%r8, 1992(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 1984(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r11, 1976(%rsp)        # 8-byte Spill
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	movq	%r10, 1960(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	1968(%rsp), %r9         # 8-byte Reload
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2024(%rsp), %rsi        # 8-byte Reload
	movq	2008(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	1968(%rsp), %r9         # 8-byte Reload
	movq	2000(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3000, %ebp             # imm = 0xBB8
	movl	%ebp, %edi
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$64, %rdx
	movabsq	$3000, %rsi             # imm = 0xBB8
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$2, %r10
	leaq	malloc, %r11
	leaq	.L.str254, %rbx
	movabsq	$135, %r14
	leaq	.L.str253, %r15
	leaq	.L.str5, %r12
	leaq	.L.str20, %r13
	movabsq	$49, %rbp
	movq	%rsi, 1952(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1948(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str6, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	movabsq	$134, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1888(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1884(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1872(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1864(%rsp)        # 8-byte Spill
	movq	1912(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1856(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1888(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1848(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 1840(%rsp)        # 8-byte Spill
	movq	%r12, 1832(%rsp)        # 8-byte Spill
	movq	%r13, 1824(%rsp)        # 8-byte Spill
	movq	%rbp, 1816(%rsp)        # 8-byte Spill
	movq	%r14, 1808(%rsp)        # 8-byte Spill
	movq	%rbx, 1800(%rsp)        # 8-byte Spill
	movq	%r10, 1792(%rsp)        # 8-byte Spill
	movq	%r11, 1784(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1904(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movl	1948(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1888(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1936(%rsp), %rax        # 8-byte Reload
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movq	1888(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp140:
	#DEBUG_VALUE: main:time_data <- [RSP+1776]
	.loc	1 135 0                 # feature_extraction.c:135:0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movl	1948(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1784(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1888(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1872(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1856(%rsp), %r8         # 8-byte Reload
	movq	1888(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$3000, %esi             # imm = 0xBB8
	movl	%esi, %edi
	callq	malloc
.Ltmp141:
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16, %r8
	leaq	.L.str8, %rdi
	movabsq	$138, %r9
	leaq	.L.str253, %r10
	leaq	.L.str5, %r11
	leaq	.L.str255, %rbx
	movabsq	$2, %r14
	movl	$0, %esi
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str24, %r13
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str20, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movabsq	$135, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 1744(%rsp)        # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 1740(%rsp)        # 4-byte Spill
	movq	%r12, %rsi
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1720(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1720(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1760(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1704(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1712(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1696(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 1692(%rsp)        # 4-byte Spill
	movq	%r15, 1680(%rsp)        # 8-byte Spill
	movq	%r12, 1672(%rsp)        # 8-byte Spill
	movq	%r13, 1664(%rsp)        # 8-byte Spill
	movq	%r14, 1656(%rsp)        # 8-byte Spill
	movq	%r10, 1648(%rsp)        # 8-byte Spill
	movq	%r11, 1640(%rsp)        # 8-byte Spill
	movq	%rbx, 1632(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	1740(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	1768(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rax        # 8-byte Reload
	movq	1680(%rsp), %rdi        # 8-byte Reload
	movq	1672(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp142:
	#DEBUG_VALUE: main:freq_data <- [RSP+1624]
	#DEBUG_VALUE: j <- 0
	.loc	1 138 0                 # feature_extraction.c:138:0
	movq	1696(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1740(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1744(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1712(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1616(%rsp)        # 8-byte Spill
.Ltmp143:
.LBB2_1:                                # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB2_2 Depth 2
	movq	1616(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str259, %r8
	leaq	.L.str8, %rsi
	movabsq	$140, %rdi
	leaq	.L.str253, %r9
	leaq	.L.str16, %r10
	leaq	.L.str22, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$19134, %r15            # imm = 0x4ABE
	movabsq	$64, %r12
	leaq	.L.str25, %r13
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	movabsq	$142, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str5, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str258, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 142 0                 # feature_extraction.c:142:0
.Ltmp144:
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	movq	1536(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1520(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1512(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1504(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1496(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1488(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1480(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 1476(%rsp)       # 4-byte Spill
	movq	%r15, 1464(%rsp)        # 8-byte Spill
	movl	%ebp, 1460(%rsp)        # 4-byte Spill
	movq	%r12, 1448(%rsp)        # 8-byte Spill
	movq	%r13, 1440(%rsp)        # 8-byte Spill
	movq	%rbx, 1432(%rsp)        # 8-byte Spill
	movq	%r10, 1424(%rsp)        # 8-byte Spill
	movq	%r11, 1416(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1544(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1504(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movl	1460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1432(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1608(%rsp), %rax        # 8-byte Reload
	imulq	$50, %rax, %rcx
.Ltmp145:
	.loc	1 140 0                 # feature_extraction.c:140:0
	movq	1464(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1512(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	1460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1504(%rsp), %rdi        # 8-byte Reload
	movq	1496(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	1496(%rsp), %r9         # 8-byte Reload
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1496(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1400(%rsp)        # 8-byte Spill
.LBB2_2:                                #   Parent Loop BB2_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	1400(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str41, %rdx
	movabsq	$0, %rsi
	leaq	.L.str8, %rdi
	movabsq	$2, %r8
	leaq	.L.str259, %r9
	movabsq	$3, %r10
	leaq	.L.str258, %r11
	movabsq	$140, %rbx
	leaq	.L.str253, %r14
	leaq	.L.str262, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str30, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	movabsq	$50, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str29, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str34, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$143, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str261, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str24, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str54, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str33, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str31, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$142, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str260, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str25, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str16, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	1 142 0                 # feature_extraction.c:142:0
.Ltmp146:
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	movq	1192(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1176(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1168(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	1344(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1144(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1136(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1128(%rsp)        # 8-byte Spill
	movl	%ebp, 1124(%rsp)        # 4-byte Spill
	movl	%r12d, 1120(%rsp)       # 4-byte Spill
	movq	%r13, 1112(%rsp)        # 8-byte Spill
	movq	%r14, 1104(%rsp)        # 8-byte Spill
	movq	%rbx, 1096(%rsp)        # 8-byte Spill
	movq	%r10, 1088(%rsp)        # 8-byte Spill
	movq	%r11, 1080(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1136(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1272(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1776(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1392(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 1060(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	1060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rax        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movl	1060(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax,%rcx,4)
	.loc	1 143 0                 # feature_extraction.c:143:0
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1072(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1072(%rsp), %rax        # 8-byte Reload
	shlq	$2, %rax
	movq	1624(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1152(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rax        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movl	$-1, (%rax,%rcx,4)
.Ltmp147:
	.loc	1 140 0                 # feature_extraction.c:140:0
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1392(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1360(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1040(%rsp), %rax        # 8-byte Reload
	cmpq	$50, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1039(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1096(%rsp), %rdi        # 8-byte Reload
	movq	1104(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movl	1124(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1152(%rsp), %rdi        # 8-byte Reload
	movq	1152(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1168(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1039(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	jne	.LBB2_3
	jmp	.LBB2_2
.Ltmp148:
.LBB2_3:                                #   in Loop: Header=BB2_1 Depth=1
	movabsq	$1, %rax
	leaq	.L.str263, %rcx
	movabsq	$0, %rdx
	leaq	.L.str8, %rsi
	movabsq	$2, %rdi
	leaq	.L.str16, %r8
	movabsq	$3, %r9
	leaq	.L.str265, %r10
	movabsq	$138, %r11
	leaq	.L.str253, %rbx
	leaq	.L.str258, %r14
	leaq	.L.str264, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str257, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$15, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str7, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str256, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	1 138 0                 # feature_extraction.c:138:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 960(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 952(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movq	1008(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	944(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 912(%rsp)         # 8-byte Spill
	movl	%ebp, 908(%rsp)         # 4-byte Spill
	movl	%r12d, 904(%rsp)        # 4-byte Spill
	movq	%r13, 896(%rsp)         # 8-byte Spill
	movq	%r14, 888(%rsp)         # 8-byte Spill
	movq	%rbx, 880(%rsp)         # 8-byte Spill
	movq	%r10, 872(%rsp)         # 8-byte Spill
	movq	%r11, 864(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1608(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	1000(%rsp), %rdx        # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1016(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rax         # 8-byte Reload
	cmpq	$15, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	896(%rsp), %rdi         # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 855(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	952(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1024(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	952(%rsp), %r9          # 8-byte Reload
	movq	960(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	855(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	jne	.LBB2_4
	jmp	.LBB2_1
.Ltmp149:
.LBB2_4:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$0, %rcx
	leaq	.L.str7, %rdx
	leaq	.L.str8, %rsi
	movabsq	$3, %r8
	movabsq	$2, %r9
	movabsq	$32, %r10
	movabsq	$1, %r11
	movabsq	$50, %rbx
	movabsq	$5, %r14
	leaq	kiss_fft_alloc, %r15
	leaq	.L.str266, %r12
	movabsq	$150, %r13
	leaq	.L.str253, %rbp
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str38, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 812(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 150 0                 # feature_extraction.c:150:0
	movq	%rdi, 800(%rsp)         # 8-byte Spill
	movq	%r13, %rdi
	movl	%esi, 796(%rsp)         # 4-byte Spill
	movq	%rbp, %rsi
	movq	832(%rsp), %r13         # 8-byte Reload
	movq	%rdx, 784(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	824(%rsp), %rbp         # 8-byte Reload
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movq	%rbp, %rcx
	movq	%r8, 768(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	812(%rsp), %ebp         # 4-byte Reload
	movq	%r9, 760(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r14, 744(%rsp)         # 8-byte Spill
	movq	%r15, 736(%rsp)         # 8-byte Spill
	movq	%rbx, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	movq	%r10, 712(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	736(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	760(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	840(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	xorl	%ebp, %ebp
	movl	%ebp, %eax
	movl	$50, %edi
	movl	%ebp, %esi
	movq	%rax, %rdx
	movq	%rax, %rcx
	callq	kiss_fft_alloc
	movabsq	$5, %rdi
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str38, %r8
	movabsq	$0, %r9
	leaq	.L.str8, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	movabsq	$15, %r14
	leaq	.L.str7, %r15
	movabsq	$3, %r12
	movabsq	$50, %r13
	movabsq	$2, %rsi
	leaq	.L.str24, %rbp
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str13, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$6, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	process_data, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str50, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$153, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str253, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str267, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 632(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 628(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rdi, 608(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 604(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	704(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 592(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 576(%rsp)          # 8-byte Spill
	movq	%r9, 568(%rsp)          # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%rbp, 560(%rsp)         # 8-byte Spill
	movq	%r13, 552(%rsp)         # 8-byte Spill
	movq	%r12, 544(%rsp)         # 8-byte Spill
	movq	%r15, 536(%rsp)         # 8-byte Spill
	movq	%r14, 528(%rsp)         # 8-byte Spill
	movq	%r10, 520(%rsp)         # 8-byte Spill
	movq	%r11, 512(%rsp)         # 8-byte Spill
	movq	%rbx, 504(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp150:
	#DEBUG_VALUE: main:cfg <- [RSP+704]
	.loc	1 153 0                 # feature_extraction.c:153:0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	656(%rsp), %rsi         # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	628(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	680(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	592(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1776(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	608(%rsp), %rdi         # 8-byte Reload
	movq	584(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	568(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$50, %edx
	movl	$15, %ecx
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1624(%rsp), %rsi        # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	callq	process_data
.Ltmp151:
	movabsq	$4, %rdi
	movabsq	$32, %rax
	movabsq	$15, %rdx
	movabsq	$0, %rsi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$3, %r10
	movabsq	$50, %r11
	movabsq	$2, %rbx
	movabsq	$64, %r14
	movabsq	$1, %r15
	leaq	.L.str24, %r12
                                        # implicit-def: R13
	movabsq	$5, %rbp
	leaq	test_stores, %rcx
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str4, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str253, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str265, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 448(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 444(%rsp)         # 4-byte Spill
	movl	$1, %esi
	.loc	1 167 0                 # feature_extraction.c:167:0
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	472(%rsp), %rax         # 8-byte Reload
	movl	%esi, 420(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 408(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 400(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 392(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	444(%rsp), %eax         # 4-byte Reload
	movq	%r9, 384(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 376(%rsp)         # 8-byte Spill
	movq	%r13, 368(%rsp)         # 8-byte Spill
	movq	%rbp, 360(%rsp)         # 8-byte Spill
	movq	%r15, 352(%rsp)         # 8-byte Spill
	movq	%r14, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	movq	%rbx, 320(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	384(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	$50, %edx
	movl	$15, %ecx
                                        # implicit-def: RDI
	movq	1624(%rsp), %rsi        # 8-byte Reload
	callq	test_stores
	movabsq	$2, %rdi
	movabsq	$64, %rsi
	leaq	.L.str3, %rdx
	movabsq	$0, %r8
	leaq	.L.str7, %r9
	leaq	.L.str8, %r10
	movabsq	$1, %r11
	leaq	.L.str44, %rbx
	movabsq	$3, %r14
	leaq	fprintf, %r15
	leaq	.L.str39, %r12
	movabsq	$172, %r13
	leaq	.L.str253, %rbp
	leaq	.L.str265, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str69, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$49, %rcx
	movl	%eax, 300(%rsp)         # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 296(%rsp)         # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	leaq	stdout, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str21, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$169, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	leaq	.L.str32, %rcx
	movl	%eax, 236(%rsp)         # 4-byte Spill
	movl	300(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 216(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 208(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	224(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	184(%rsp), %rax         # 8-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movq	%r12, 168(%rsp)         # 8-byte Spill
	movq	%rbp, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%r10, 128(%rsp)         # 8-byte Spill
	movq	%r11, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp152:
	#DEBUG_VALUE: main:num_failures <- 0
	.loc	1 169 0                 # feature_extraction.c:169:0
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	stdout, %rax
.Ltmp153:
	.loc	1 172 0                 # feature_extraction.c:172:0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 104(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	296(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	208(%rsp), %rsi         # 8-byte Reload
	movq	200(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	$.L.str3, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %al
	movq	104(%rsp), %rdi         # 8-byte Reload
	callq	fprintf
	movl	$0, %esi
	movabsq	$1, %rcx
	movabsq	$32, %rdx
	movabsq	$0, %rdi
	leaq	.L.str7, %r8
	leaq	.L.str8, %r9
	movabsq	$174, %r10
	leaq	.L.str253, %r11
	leaq	.L.str265, %rbx
	leaq	.L.str268, %r14
	movl	$1, %ebp
	movabsq	$19134, %r15            # imm = 0x4ABE
	leaq	.L.str69, %r12
	.loc	1 174 0                 # feature_extraction.c:174:0
	movl	%eax, %eax
	movl	%eax, %r13d
	movq	%rdi, 96(%rsp)          # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 92(%rsp)          # 4-byte Spill
	movq	%rdx, %rsi
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movq	%r13, %rdx
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, 64(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	96(%rsp), %r15          # 8-byte Reload
	movq	%r9, 56(%rsp)           # 8-byte Spill
	movq	%r15, %r9
	movq	56(%rsp), %r12          # 8-byte Reload
	movq	%r12, (%rsp)
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movl	%ebp, 44(%rsp)          # 4-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	movq	%rbx, 24(%rsp)          # 8-byte Spill
	movq	%r14, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	96(%rsp), %r9           # 8-byte Reload
	movq	56(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	92(%rsp), %eax          # 4-byte Reload
	addq	$2040, %rsp             # imm = 0x7F8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp154:
.Ltmp155:
	.size	main, .Ltmp155-main
.Lfunc_end2:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI3_0:
	.quad	-4604611780675359464    # double -6.2831853071795862
.LCPI3_1:
	.quad	-4616189618054758400    # double -1
	.text
	.globl	kiss_fft_alloc
	.align	16, 0x90
	.type	kiss_fft_alloc,@function
kiss_fft_alloc:                         # @kiss_fft_alloc
	.cfi_startproc
.Lfunc_begin3:
	.loc	2 348 0                 # kiss_fft.c:348:0
# BB#0:
	pushq	%rbp
.Ltmp163:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp164:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp165:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp166:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp167:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp168:
	.cfi_def_cfa_offset 56
	subq	$3208, %rsp             # imm = 0xC88
.Ltmp169:
	.cfi_def_cfa_offset 3264
.Ltmp170:
	.cfi_offset %rbx, -56
.Ltmp171:
	.cfi_offset %r12, -48
.Ltmp172:
	.cfi_offset %r13, -40
.Ltmp173:
	.cfi_offset %r14, -32
.Ltmp174:
	.cfi_offset %r15, -24
.Ltmp175:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str9279, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %r10
	movabsq	$2, %r11
	leaq	.L.str13283, %rbx
	movabsq	$3, %r14
	leaq	.L.str12282, %r15
	movabsq	$353, %r12              # imm = 0x161
	leaq	.L.str270, %r13
	leaq	.L.str1271, %rbp
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	leaq	.L.str11281, %rax
	movl	%esi, 3196(%rsp)        # 4-byte Spill
	movl	$0, %esi
	movl	%esi, 3192(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3176(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str10280, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	movabsq	$272, %rax              # imm = 0x110
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$350, %rax              # imm = 0x15E
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str5275, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	leaq	.L.str20290, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	leaq	.L.str42312, %rax
	.loc	2 347 0 prologue_end    # kiss_fft.c:347:0
.Ltmp176:
	movl	%esi, 3028(%rsp)        # 4-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movq	3040(%rsp), %rax        # 8-byte Reload
	movl	%edi, 3012(%rsp)        # 4-byte Spill
	movq	%rax, %rdi
	movq	3080(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3000(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2992(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3200(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2984(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3056(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2976(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2968(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r12, 2960(%rsp)        # 8-byte Spill
	movq	%rbp, 2952(%rsp)        # 8-byte Spill
	movq	%r13, 2944(%rsp)        # 8-byte Spill
	movq	%r15, 2936(%rsp)        # 8-byte Spill
	movq	%r14, 2928(%rsp)        # 8-byte Spill
	movq	%rbx, 2920(%rsp)        # 8-byte Spill
	movq	%r10, 2912(%rsp)        # 8-byte Spill
	movq	%r11, 2904(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movl	3196(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3032(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3040(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_alloc:nfft <- [RSP+3012]
	#DEBUG_VALUE: kiss_fft_alloc:inverse_fft <- [RSP+3196]
	#DEBUG_VALUE: kiss_fft_alloc:mem <- [RSP+2992]
	#DEBUG_VALUE: kiss_fft_alloc:lenmem <- [RSP+2984]
	.loc	2 350 0                 # kiss_fft.c:350:0
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3048(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3012(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3012(%rsp), %esi        # 4-byte Reload
	addl	$4294967295, %esi       # imm = 0xFFFFFFFF
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2900(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2900(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2928(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2888(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	3120(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2880(%rsp), %rax        # 8-byte Reload
	addq	$272, %rax              # imm = 0x110
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp177:
	#DEBUG_VALUE: kiss_fft_alloc:memneeded <- [RSP+2872]
	.loc	2 353 0                 # kiss_fft.c:353:0
	movq	2960(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	2976(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	2968(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3168(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2984(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3176(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2871(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2960(%rsp), %rdi        # 8-byte Reload
	movq	2944(%rsp), %rsi        # 8-byte Reload
	movq	2952(%rsp), %rdx        # 8-byte Reload
	movq	3184(%rsp), %rcx        # 8-byte Reload
	movq	2904(%rsp), %r8         # 8-byte Reload
	movl	3192(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2928(%rsp), %rdi        # 8-byte Reload
	movq	2968(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2904(%rsp), %rdi        # 8-byte Reload
	movq	2968(%rsp), %rsi        # 8-byte Reload
	movq	2968(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2920(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2871(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2968(%rsp), %r9         # 8-byte Reload
	movq	2912(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2871(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_1
	jmp	.LBB3_2
.Ltmp178:
.LBB3_1:
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str8278, %r8
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	malloc, %r9
	leaq	.L.str15285, %r10
	movabsq	$354, %r11              # imm = 0x162
	leaq	.L.str270, %rbx
	leaq	.L.str12282, %r14
	leaq	.L.str14284, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 354 0                 # kiss_fft.c:354:0
.Ltmp179:
	movq	%rdi, 2856(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2848(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2840(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 2832(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 2824(%rsp)         # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 2816(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	movq	%r10, 2800(%rsp)        # 8-byte Spill
	movl	%r13d, 2796(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	2832(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2800(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2808(%rsp), %rdi        # 8-byte Reload
	movq	2832(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2840(%rsp), %r9         # 8-byte Reload
	movq	2848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2872(%rsp), %rdi        # 8-byte Reload
	callq	malloc
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18288, %r8
	leaq	.L.str4274, %rsi
	movabsq	$355, %rdi              # imm = 0x163
	leaq	.L.str270, %r9
	leaq	.L.str12282, %r10
	leaq	.L.str17287, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r13d
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str16286, %r12
	movq	%rax, 2784(%rsp)        # 8-byte Spill
	leaq	.L.str14284, %rax
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	movabsq	$354, %rax              # imm = 0x162
	movq	%rax, 2768(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rdi, 2760(%rsp)        # 8-byte Spill
	movq	%r14, %rdi
	movq	%rsi, 2752(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2736(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movq	2776(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2720(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2736(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2712(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	2752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%r13d, 2708(%rsp)       # 4-byte Spill
	movq	%r14, 2696(%rsp)        # 8-byte Spill
	movl	%ebp, 2692(%rsp)        # 4-byte Spill
	movq	%r15, 2680(%rsp)        # 8-byte Spill
	movq	%r12, 2672(%rsp)        # 8-byte Spill
	movq	%rbx, 2664(%rsp)        # 8-byte Spill
	movq	%r10, 2656(%rsp)        # 8-byte Spill
	movq	%r11, 2648(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2768(%rsp), %rdi        # 8-byte Reload
	movq	2712(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2672(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2680(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2784(%rsp), %rax        # 8-byte Reload
	movq	2696(%rsp), %rdi        # 8-byte Reload
	movq	2680(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2752(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp180:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2640]
	.loc	2 355 0                 # kiss_fft.c:355:0
	movq	2760(%rsp), %rdi        # 8-byte Reload
	movq	2712(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2648(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2728(%rsp), %rdi        # 8-byte Reload
	movq	2736(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movq	2736(%rsp), %r9         # 8-byte Reload
	movq	2752(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2640(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	jmp	.LBB3_6
.Ltmp181:
.LBB3_2:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str19289, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str23293, %r8
	movabsq	$3, %r9
	leaq	.L.str22292, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str270, %rbx
	leaq	.L.str13283, %r14
	leaq	.L.str21291, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str20290, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	.loc	2 356 0                 # kiss_fft.c:356:0
.Ltmp182:
	movq	%rdi, 2592(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2584(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2576(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	movq	2576(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2560(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2568(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2552(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2544(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2536(%rsp)        # 8-byte Spill
	movl	%ebp, 2532(%rsp)        # 4-byte Spill
	movl	%r12d, 2528(%rsp)       # 4-byte Spill
	movq	%r13, 2520(%rsp)        # 8-byte Spill
	movq	%r14, 2512(%rsp)        # 8-byte Spill
	movq	%rbx, 2504(%rsp)        # 8-byte Spill
	movq	%r10, 2496(%rsp)        # 8-byte Spill
	movq	%r11, 2488(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2592(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2624(%rsp), %rdx        # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	2616(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2992(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2487(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2488(%rsp), %rdi        # 8-byte Reload
	movq	2504(%rsp), %rsi        # 8-byte Reload
	movq	2512(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2532(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2624(%rsp), %rsi        # 8-byte Reload
	movq	2624(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2496(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2592(%rsp), %rdi        # 8-byte Reload
	movq	2624(%rsp), %rsi        # 8-byte Reload
	movq	2624(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2487(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2560(%rsp), %rdi        # 8-byte Reload
	movq	2560(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2624(%rsp), %r9         # 8-byte Reload
	movq	2584(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2487(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#3:
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str25295, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str27297, %r8
	movabsq	$3, %r9
	leaq	.L.str22292, %r10
	movabsq	$356, %r11              # imm = 0x164
	leaq	.L.str270, %rbx
	leaq	.L.str23293, %r14
	leaq	.L.str26296, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str10280, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rdi, 2416(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2408(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2400(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	movq	2448(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2384(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2376(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2368(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2360(%rsp)        # 8-byte Spill
	movl	%ebp, 2356(%rsp)        # 4-byte Spill
	movl	%r12d, 2352(%rsp)       # 4-byte Spill
	movq	%r13, 2344(%rsp)        # 8-byte Spill
	movq	%r14, 2336(%rsp)        # 8-byte Spill
	movq	%rbx, 2328(%rsp)        # 8-byte Spill
	movq	%r10, 2320(%rsp)        # 8-byte Spill
	movq	%r11, 2312(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2456(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2424(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2984(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2456(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2304(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	2328(%rsp), %rsi        # 8-byte Reload
	movq	2336(%rsp), %rdx        # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2416(%rsp), %rdi        # 8-byte Reload
	movq	2456(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2456(%rsp), %rsi        # 8-byte Reload
	movq	2304(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2304(%rsp), %rax        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	setb	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2344(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2303(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2312(%rsp), %rdi        # 8-byte Reload
	movq	2328(%rsp), %rsi        # 8-byte Reload
	movq	2336(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movl	2356(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2416(%rsp), %rdi        # 8-byte Reload
	movq	2464(%rsp), %rsi        # 8-byte Reload
	movq	2464(%rsp), %rdx        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2303(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2384(%rsp), %rdi        # 8-byte Reload
	movq	2384(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2464(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2303(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2472(%rsp)        # 8-byte Spill
	jne	.LBB3_5
# BB#4:
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str22292, %r8
	leaq	.L.str4274, %rdx
	movabsq	$357, %rsi              # imm = 0x165
	leaq	.L.str270, %rdi
	leaq	.L.str27297, %r9
	leaq	.L.str29299, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str20290, %r12
	leaq	.L.str28298, %r13
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	.loc	2 357 0                 # kiss_fft.c:357:0
	movq	%rdi, 2280(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	movq	2280(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2264(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2256(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2248(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2272(%rsp), %r13        # 8-byte Reload
	movq	%r8, 2240(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	%r9, 2232(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2228(%rsp)        # 4-byte Spill
	movq	%r15, 2216(%rsp)        # 8-byte Spill
	movq	%r12, 2208(%rsp)        # 8-byte Spill
	movq	%r14, 2200(%rsp)        # 8-byte Spill
	movl	%ebx, 2196(%rsp)        # 4-byte Spill
	movq	%r10, 2184(%rsp)        # 8-byte Spill
	movq	%r11, 2176(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2992(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2248(%rsp), %r9         # 8-byte Reload
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2992(%rsp), %rax        # 8-byte Reload
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2248(%rsp), %r9         # 8-byte Reload
	movq	2256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp183:
	#DEBUG_VALUE: kiss_fft_alloc:st <- [RSP+2168]
	movq	2264(%rsp), %rdi        # 8-byte Reload
	movq	2280(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2196(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2288(%rsp), %rdi        # 8-byte Reload
	movq	2248(%rsp), %rsi        # 8-byte Reload
	movq	2248(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2248(%rsp), %r9         # 8-byte Reload
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2168(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2472(%rsp)        # 8-byte Spill
.Ltmp184:
.LBB3_5:
	movq	2472(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str18288, %r8
	leaq	.L.str4274, %rsi
	movabsq	$-1, %rdi
	leaq	.L.str270, %r9
	leaq	.L.str22292, %r10
	leaq	.L.str32302, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$64, %r15
	leaq	.L.str8278, %r12
	leaq	.L.str10280, %r13
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	movabsq	$358, %rax              # imm = 0x166
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str31301, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str30300, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str27297, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str20290, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str23293, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str13283, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 358 0                 # kiss_fft.c:358:0
	movq	%rdi, 2064(%rsp)        # 8-byte Spill
	movq	%rsi, 2056(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 2048(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2032(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2040(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2024(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2016(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%r14d, 2012(%rsp)       # 4-byte Spill
	movq	%r15, 2000(%rsp)        # 8-byte Spill
	movl	%ebp, 1996(%rsp)        # 4-byte Spill
	movq	%r12, 1984(%rsp)        # 8-byte Spill
	movq	%r13, 1976(%rsp)        # 8-byte Spill
	movq	%rbx, 1968(%rsp)        # 8-byte Spill
	movq	%r10, 1960(%rsp)        # 8-byte Spill
	movq	%r11, 1952(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2080(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	movq	2072(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2032(%rsp), %r9         # 8-byte Reload
	movq	2112(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2160(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movq	2048(%rsp), %r9         # 8-byte Reload
	movq	2112(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2152(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2136(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	2048(%rsp), %r9         # 8-byte Reload
	movq	2056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2000(%rsp), %rsi        # 8-byte Reload
	movq	2872(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	1984(%rsp), %r8         # 8-byte Reload
	movq	2048(%rsp), %r9         # 8-byte Reload
	movq	2056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2984(%rsp), %rax        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	2064(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	1968(%rsp), %r8         # 8-byte Reload
	movl	1996(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2032(%rsp), %rdi        # 8-byte Reload
	movq	2048(%rsp), %rsi        # 8-byte Reload
	movq	2048(%rsp), %rdx        # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2024(%rsp), %r8         # 8-byte Reload
	movq	2048(%rsp), %r9         # 8-byte Reload
	movq	2056(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2160(%rsp), %rax        # 8-byte Reload
	movq	%rax, 2632(%rsp)        # 8-byte Spill
.Ltmp185:
.LBB3_6:
	movq	2632(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str34304, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str37307, %r9
	movabsq	$3, %r10
	leaq	.L.str36306, %r11
	movabsq	$360, %rbx              # imm = 0x168
	leaq	.L.str270, %r14
	leaq	.L.str18288, %r15
	leaq	.L.str35305, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str33303, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str12282, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str30300, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str22292, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 360 0                 # kiss_fft.c:360:0
.Ltmp186:
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1848(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1840(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1832(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1816(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1808(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1800(%rsp)        # 8-byte Spill
	movq	%r12, 1792(%rsp)        # 8-byte Spill
	movl	%ebp, 1788(%rsp)        # 4-byte Spill
	movl	%r13d, 1784(%rsp)       # 4-byte Spill
	movq	%r14, 1776(%rsp)        # 8-byte Spill
	movq	%rbx, 1768(%rsp)        # 8-byte Spill
	movq	%r10, 1760(%rsp)        # 8-byte Spill
	movq	%r11, 1752(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1824(%rsp), %r9         # 8-byte Reload
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1824(%rsp), %r9         # 8-byte Reload
	movq	1896(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1896(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1912(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1928(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1920(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rax        # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1936(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1751(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movl	1788(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1816(%rsp), %rdi        # 8-byte Reload
	movq	1840(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1751(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %r8         # 8-byte Reload
	movq	1840(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1751(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_13
# BB#7:
	movabsq	$1, %rax
	leaq	.L.str43313, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str46316, %r8
	movabsq	$3, %r9
	leaq	.L.str45315, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str270, %rbx
	leaq	.L.str37307, %r14
	leaq	.L.str44314, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str5275, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str42312, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	movabsq	$363, %rax              # imm = 0x16B
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str41311, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str33303, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	movabsq	$362, %rax              # imm = 0x16A
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str39309, %rax
	.loc	2 362 0                 # kiss_fft.c:362:0
.Ltmp187:
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	movq	1624(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1608(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1600(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 1592(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1576(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 1568(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1560(%rsp)        # 8-byte Spill
	movl	%ebp, 1556(%rsp)        # 4-byte Spill
	movl	%r12d, 1552(%rsp)       # 4-byte Spill
	movq	%r13, 1544(%rsp)        # 8-byte Spill
	movq	%r14, 1536(%rsp)        # 8-byte Spill
	movq	%rbx, 1528(%rsp)        # 8-byte Spill
	movq	%r10, 1520(%rsp)        # 8-byte Spill
	movq	%r11, 1512(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3012(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	movl	3012(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, (%rax)
	.loc	2 363 0                 # kiss_fft.c:363:0
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1672(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1688(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3196(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1944(%rsp), %rax        # 8-byte Reload
	movl	3196(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 4(%rax)
.Ltmp188:
	#DEBUG_VALUE: i <- 0
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movl	1556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3012(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3012(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r12d
	movl	%r12d, %edx
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1503(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1608(%rsp), %r8         # 8-byte Reload
	movl	1556(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1568(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1503(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1503(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB3_8
	jmp	.LBB3_12
.LBB3_8:                                # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str49319, %r8
	leaq	.L.str4274, %rdx
	movabsq	$365, %rdi              # imm = 0x16D
	leaq	.L.str270, %rsi
	leaq	.L.str45315, %r9
	leaq	.L.str48318, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str47317, %r12
	.loc	2 367 0                 # kiss_fft.c:367:0
.Ltmp189:
	movq	%rsp, %r13
	movl	$1, (%r13)
	movl	$.L.str270, %r13d
                                        # kill: R13<def> R13D<kill>
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movl	$.L.str45315, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	movl	$.L.str47317, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1472(%rsp)        # 8-byte Spill
	movl	$367, %esi              # imm = 0x16F
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1464(%rsp)        # 8-byte Spill
	movl	$39, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1456(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1440(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1436(%rsp)        # 4-byte Spill
	movq	%r13, %rsi
	movq	1480(%rsp), %r13        # 8-byte Reload
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	%r13, %rdx
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1456(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1408(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1436(%rsp), %r13d       # 4-byte Reload
	movq	%r9, 1400(%rsp)         # 8-byte Spill
	movl	%r13d, %r9d
	movq	%r14, 1392(%rsp)        # 8-byte Spill
	movl	%ebp, 1388(%rsp)        # 4-byte Spill
	movq	%r15, 1376(%rsp)        # 8-byte Spill
	movq	%r12, 1368(%rsp)        # 8-byte Spill
	movl	%ebx, 1364(%rsp)        # 4-byte Spill
	movq	%r10, 1352(%rsp)        # 8-byte Spill
	movq	%r11, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	3012(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str5275, %ebx
	movl	%ebx, %r8d
	movl	$32, %ebx
	movl	%ebx, %esi
	movl	$1, %ebx
	movl	%ebx, %eax
	movl	1436(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %r9d
	movq	%rax, %rdi
	movq	%rax, %rcx
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	3012(%rsp), %ebx        # 4-byte Reload
	vcvtsi2sdl	%ebx, %xmm0, %xmm0
.Ltmp190:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1376(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1336(%rsp)       # 8-byte Spill
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1440(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1364(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1416(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1448(%rsp), %rax        # 8-byte Reload
	movq	%rax, 1328(%rsp)        # 8-byte Spill
.LBB3_9:                                # =>This Inner Loop Header: Depth=1
	movq	1328(%rsp), %rax        # 8-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str58328, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str60330, %r9
	movabsq	$3, %r10
	leaq	.L.str52322, %r11
	movabsq	$368, %rbx              # imm = 0x170
	leaq	.L.str270, %r14
	leaq	.L.str49319, %r15
	leaq	.L.str59329, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str57327, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movabsq	$367, %rax              # imm = 0x16F
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$16, %rax
	vmovsd	.LCPI3_0, %xmm0
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 366 0                 # kiss_fft.c:366:0
.Ltmp191:
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str270, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1192(%rsp)        # 8-byte Spill
	movl	$.L.str49319, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1184(%rsp)        # 8-byte Spill
	movl	$.L.str50320, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1176(%rsp)        # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 1160(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 1152(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1168(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1148(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1184(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1136(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1176(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1160(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1120(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1148(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	vmovsd	%xmm0, 1104(%rsp)       # 8-byte Spill
	movq	%r12, 1096(%rsp)        # 8-byte Spill
	movl	%ebp, 1092(%rsp)        # 4-byte Spill
	movl	%r13d, 1088(%rsp)       # 4-byte Spill
	movq	%r15, 1080(%rsp)        # 8-byte Spill
	movq	%r14, 1072(%rsp)        # 8-byte Spill
	movq	%r10, 1064(%rsp)        # 8-byte Spill
	movq	%r11, 1056(%rsp)        # 8-byte Spill
	movq	%rbx, 1048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str52322, (%rcx)
	movl	$.L.str51321, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %edi
	movl	$64, %eax
	movl	%eax, %ecx
	movl	1148(%rsp), %eax        # 4-byte Reload
	movl	%eax, %edx
	movl	$1, %r9d
	movl	%r9d, %esi
	movq	%rsi, 1040(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	%rdx, 1032(%rsp)        # 8-byte Spill
	movq	1040(%rsp), %r10        # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%r10, %rcx
	movq	%r10, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45315, (%rcx)
	movl	$.L.str3273, %eax
	movl	%eax, %r8d
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1032(%rsp), %rdx        # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1040(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str45315, (%rcx)
	movl	$19134, %eax            # imm = 0x4ABE
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
.Ltmp192:
	#DEBUG_VALUE: pi <- 3.141593e+00
	.loc	2 367 0                 # kiss_fft.c:367:0
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str53323, %eax
	movl	%eax, %ecx
	movl	$367, %eax              # imm = 0x16F
	movl	%eax, %edx
	movl	$33, %eax
	movl	%eax, %r8d
	movq	%rdx, %rdi
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %r9         # 8-byte Reload
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movl	1148(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1024(%rsp), %rsi        # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rsi
	movq	$.L.str4274, (%rsi)
	movl	$32, %ebp
	movl	%ebp, %esi
	movq	1016(%rsp), %rdi        # 8-byte Reload
	movq	%rsi, 992(%rsp)         # 8-byte Spill
	movq	%rdx, 984(%rsp)         # 8-byte Spill
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movl	%eax, 980(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str54324, %eax
	movl	%eax, %ecx
	movl	$39, %eax
	movl	%eax, %r8d
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1168(%rsp), %rsi        # 8-byte Reload
	movq	1184(%rsp), %rdx        # 8-byte Reload
	movl	1148(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	992(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	980(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 968(%rsp)        # 8-byte Spill
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1092(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovsd	1104(%rsp), %xmm0       # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	968(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1104(%rsp), %xmm1       # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 960(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movl	1092(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	960(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm1       # 8-byte Reload
	vdivsd	%xmm1, %xmm0, %xmm2
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1152(%rsp), %r9         # 8-byte Reload
	vmovsd	%xmm2, 952(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp193:
	#DEBUG_VALUE: phase <- [RSP+952]
	.loc	2 368 0                 # kiss_fft.c:368:0
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1092(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movl	(%rcx), %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 948(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movl	1092(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	948(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1304(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	948(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 947(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	1092(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	1192(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	947(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1128(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	1192(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	947(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 936(%rsp)        # 8-byte Spill
	jne	.LBB3_11
.Ltmp194:
# BB#10:                                #   in Loop: Header=BB3_9 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str52322, %r8
	leaq	.L.str4274, %rdx
	movabsq	$369, %rsi              # imm = 0x171
	leaq	.L.str270, %rdi
	leaq	.L.str60330, %r9
	leaq	.L.str62332, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str61331, %r12
	movabsq	$-1, %r13
	vmovsd	.LCPI3_1, %xmm0
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	.loc	2 369 0                 # kiss_fft.c:369:0
	movq	%rdi, 904(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 896(%rsp)         # 8-byte Spill
	movq	904(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	896(%rsp), %rax         # 8-byte Reload
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 856(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r15, 848(%rsp)         # 8-byte Spill
	movq	%r14, 840(%rsp)         # 8-byte Spill
	movq	%r12, 832(%rsp)         # 8-byte Spill
	movq	%r13, 824(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 816(%rsp)        # 8-byte Spill
	movl	%ebp, 812(%rsp)         # 4-byte Spill
	movq	%r10, 800(%rsp)         # 8-byte Spill
	movq	%r11, 792(%rsp)         # 8-byte Spill
	movl	%ebx, 788(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	792(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	vmovsd	816(%rsp), %xmm0        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	952(%rsp), %xmm0        # 8-byte Reload
	vmovsd	816(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	840(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	928(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 776(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
.Ltmp195:
	#DEBUG_VALUE: phase <- [RSP+776]
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	904(%rsp), %rsi         # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movl	788(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	872(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	872(%rsp), %r9          # 8-byte Reload
	movq	880(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovsd	776(%rsp), %xmm0        # 8-byte Reload
	vmovsd	%xmm0, 936(%rsp)        # 8-byte Spill
.Ltmp196:
.LBB3_11:                               #   in Loop: Header=BB3_9 Depth=1
	vmovsd	936(%rsp), %xmm0        # 8-byte Reload
	movabsq	$1, %rax
	leaq	.L.str75345, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str49319, %r8
	movabsq	$3, %r9
	leaq	.L.str46316, %r10
	movabsq	$365, %r11              # imm = 0x16D
	leaq	.L.str270, %rbx
	leaq	.L.str52322, %r14
	leaq	.L.str76346, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str74344, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str5275, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str51321, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str50320, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str72342, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	movabsq	$370, %rax              # imm = 0x172
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str73343, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str33303, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str69339, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str63333, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	sin, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str70340, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	movabsq	$102, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str66336, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str67337, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str68338, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str64334, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	cos, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str65335, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movabsq	$103, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str60330, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str61331, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 370 0                 # kiss_fft.c:370:0
.Ltmp197:
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 464(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 456(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 448(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	472(%rsp), %rax         # 8-byte Reload
	movq	%r8, 432(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 424(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovsd	%xmm0, 416(%rsp)        # 8-byte Spill
	movq	%r15, 408(%rsp)         # 8-byte Spill
	movl	%ebp, 404(%rsp)         # 4-byte Spill
	movl	%r12d, 400(%rsp)        # 4-byte Spill
	movq	%r13, 392(%rsp)         # 8-byte Spill
	movq	%r14, 384(%rsp)         # 8-byte Spill
	movq	%rbx, 376(%rsp)         # 8-byte Spill
	movq	%r10, 368(%rsp)         # 8-byte Spill
	movq	%r11, 360(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	768(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	768(%rsp), %r9          # 8-byte Reload
	movq	504(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	504(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	callq	cos
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 352(%rsp)        # 8-byte Spill
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	352(%rsp), %xmm0        # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 348(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	424(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1320(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 336(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	348(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rax        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovss	348(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 264(%rax,%rcx,8)
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	callq	sin
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 328(%rsp)        # 8-byte Spill
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	328(%rsp), %xmm0        # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 324(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	424(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1320(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$4, %rax
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	456(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1944(%rsp), %rax        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 268(%rax,%rcx,8)
.Ltmp198:
	.loc	2 365 0                 # kiss_fft.c:365:0
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	1320(%rsp), %rdx        # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1320(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 304(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rax         # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 300(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3012(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	300(%rsp), %ebp         # 4-byte Reload
	movl	3012(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 299(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	360(%rsp), %rdi         # 8-byte Reload
	movq	376(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	404(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	768(%rsp), %rsi         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	456(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	299(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	jne	.LBB3_12
	jmp	.LBB3_9
.Ltmp199:
.LBB3_12:                               # %._crit_edge
	movabsq	$2, %rax
	movabsq	$64, %rcx
	movabsq	$1, %rdx
	leaq	.L.str77347, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4274, %r8
	movabsq	$32, %r9
	leaq	.L.str5275, %r10
	movabsq	$3, %r11
	leaq	kf_factor, %rbx
	leaq	.L.str79349, %r14
	movabsq	$373, %r15              # imm = 0x175
	leaq	.L.str270, %r12
	leaq	.L.str46316, %r13
	leaq	.L.str78348, %rbp
	movq	%rax, 288(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 280(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 276(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 264(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str33303, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	.loc	2 373 0                 # kiss_fft.c:373:0
	movq	%rdi, 224(%rsp)         # 8-byte Spill
	movq	%r15, %rdi
	movl	%esi, 220(%rsp)         # 4-byte Spill
	movq	%r12, %rsi
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	%r13, %rdx
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movq	280(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	200(%rsp), %rax         # 8-byte Reload
	movq	%r8, 184(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	276(%rsp), %eax         # 4-byte Reload
	movq	%r9, 176(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 168(%rsp)         # 8-byte Spill
	movq	%r12, 160(%rsp)         # 8-byte Spill
	movq	%r13, 152(%rsp)         # 8-byte Spill
	movq	%rbp, 144(%rsp)         # 8-byte Spill
	movq	%r14, 136(%rsp)         # 8-byte Spill
	movq	%rbx, 128(%rsp)         # 8-byte Spill
	movq	%r10, 120(%rsp)         # 8-byte Spill
	movq	%r11, 112(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	232(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	256(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movl	276(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	3012(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	176(%rsp), %rsi         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	192(%rsp), %rsi         # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	3012(%rsp), %edi        # 4-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	callq	kf_factor
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str36306, %r8
	leaq	.L.str4274, %rsi
	movabsq	$374, %rdi              # imm = 0x176
	leaq	.L.str270, %r9
	leaq	.L.str46316, %r10
	leaq	.L.str80350, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	.loc	2 374 0                 # kiss_fft.c:374:0
	movq	%rsi, 96(%rsp)          # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 80(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 72(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 68(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	96(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp200:
.LBB3_13:
	movabsq	$1, %rax
	movabsq	$64, %rsi
	leaq	.L.str33303, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %rcx
	movabsq	$375, %rdi              # imm = 0x177
	leaq	.L.str270, %rdx
	leaq	.L.str36306, %r10
	leaq	.L.str81351, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 375 0                 # kiss_fft.c:375:0
	movq	%rsi, 56(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1944(%rsp), %rax        # 8-byte Reload
	addq	$3208, %rsp             # imm = 0xC88
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp201:
.Ltmp202:
	.size	kiss_fft_alloc, .Ltmp202-kiss_fft_alloc
.Lfunc_end3:
	.cfi_endproc

	.globl	kiss_fft_stride
	.align	16, 0x90
	.type	kiss_fft_stride,@function
kiss_fft_stride:                        # @kiss_fft_stride
	.cfi_startproc
.Lfunc_begin4:
	.loc	2 380 0                 # kiss_fft.c:380:0
# BB#0:
	pushq	%rbp
.Ltmp210:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp211:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp212:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp213:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp214:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp215:
	.cfi_def_cfa_offset 56
	subq	$376, %rsp              # imm = 0x178
.Ltmp216:
	.cfi_def_cfa_offset 432
.Ltmp217:
	.cfi_offset %rbx, -56
.Ltmp218:
	.cfi_offset %r12, -48
.Ltmp219:
	.cfi_offset %r13, -40
.Ltmp220:
	.cfi_offset %r14, -32
.Ltmp221:
	.cfi_offset %r15, -24
.Ltmp222:
	.cfi_offset %rbp, -16
	leaq	360(%rsp), %rax
	leaq	368(%rsp), %r8
	movabsq	$1, %r9
	movabsq	$6, %r10
	movabsq	$64, %r11
	leaq	.L.str117387, %rbx
	movabsq	$0, %r14
	leaq	.L.str4274, %r15
	movabsq	$5, %r12
	leaq	.L.str7277, %r13
	movabsq	$4, %rbp
	movq	%rax, 352(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str120390, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movabsq	$2, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str114384, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str116386, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$391, %rax              # imm = 0x187
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str112382, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str118388, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 236(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 232(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 216(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str115385, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str113383, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$26, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rdi, 144(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 136(%rsp)         # 8-byte Spill
	movq	%r11, %rsi
	movq	%rax, 128(%rsp)         # 8-byte Spill
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movl	%ecx, 116(%rsp)         # 4-byte Spill
	movq	%r9, %rcx
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movq	%r14, %r9
	movq	%r15, (%rsp)
	movq	%r12, 88(%rsp)          # 8-byte Spill
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r15, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	152(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	.loc	2 379 0 prologue_end    # kiss_fft.c:379:0
.Ltmp223:
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft_stride:st <- [RSP+144]
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+136]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rax, 368(%rsp)
.Ltmp224:
	#DEBUG_VALUE: kiss_fft_stride:fin <- [RSP+104]
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+120]
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rax         # 8-byte Reload
	movq	%rax, 360(%rsp)
.Ltmp225:
	#DEBUG_VALUE: kiss_fft_stride:fout <- [RSP+352]
	#DEBUG_VALUE: kiss_fft_stride:in_stride <- [RSP+236]
	.loc	2 391 0                 # kiss_fft.c:391:0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rax         # 8-byte Reload
	addq	$8, %rax
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	%rax, %rdx
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	256(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	240(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	232(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	352(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	104(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rcx          # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	236(%rsp), %esi         # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	344(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movl	236(%rsp), %ecx         # 4-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	144(%rsp), %r9          # 8-byte Reload
	callq	kf_work
	movabsq	$392, %rdi              # imm = 0x188
	leaq	.L.str112382, %rsi
	leaq	.L.str1271, %rdx
	leaq	.L.str121391, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 392 0                 # kiss_fft.c:392:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$376, %rsp              # imm = 0x178
.Ltmp226:
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp227:
.Ltmp228:
	.size	kiss_fft_stride, .Ltmp228-kiss_fft_stride
.Lfunc_end4:
	.cfi_endproc

	.globl	kiss_fft
	.align	16, 0x90
	.type	kiss_fft,@function
kiss_fft:                               # @kiss_fft
	.cfi_startproc
.Lfunc_begin5:
	.loc	2 395 0                 # kiss_fft.c:395:0
# BB#0:
	pushq	%rbp
.Ltmp236:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp237:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp238:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp239:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp240:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp241:
	.cfi_def_cfa_offset 56
	subq	$232, %rsp
.Ltmp242:
	.cfi_def_cfa_offset 288
.Ltmp243:
	.cfi_offset %rbx, -56
.Ltmp244:
	.cfi_offset %r12, -48
.Ltmp245:
	.cfi_offset %r13, -40
.Ltmp246:
	.cfi_offset %r14, -32
.Ltmp247:
	.cfi_offset %r15, -24
.Ltmp248:
	.cfi_offset %rbp, -16
	movabsq	$4, %rax
	movabsq	$32, %rcx
	movabsq	$1, %r8
	movabsq	$0, %r9
	leaq	.L.str3273, %r10
	leaq	.L.str4274, %r11
	movabsq	$3, %rbx
	movabsq	$64, %r14
	leaq	.L.str116386, %r15
	movabsq	$2, %r12
	leaq	.L.str114384, %r13
	leaq	.L.str179449, %rbp
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	kiss_fft_stride, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	leaq	.L.str112382, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$396, %rax              # imm = 0x18C
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str177447, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str178448, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 160(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 156(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	.loc	2 394 0 prologue_end    # kiss_fft.c:394:0
.Ltmp249:
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 132(%rsp)         # 4-byte Spill
	movq	%r14, %rsi
	movq	%rax, 120(%rsp)         # 8-byte Spill
	movq	136(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 104(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movq	%rbp, %r8
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movq	%r11, (%rsp)
	movq	%r13, 80(%rsp)          # 8-byte Spill
	movq	%rbp, 72(%rsp)          # 8-byte Spill
	movq	%r12, 64(%rsp)          # 8-byte Spill
	movq	%r15, 56(%rsp)          # 8-byte Spill
	movq	%r14, 48(%rsp)          # 8-byte Spill
	movq	%rbx, 40(%rsp)          # 8-byte Spill
	movq	%r10, 32(%rsp)          # 8-byte Spill
	movq	%r11, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kiss_fft:cfg <- [RSP+136]
	#DEBUG_VALUE: kiss_fft:fin <- [RSP+160]
	#DEBUG_VALUE: kiss_fft:fout <- [RSP+112]
	.loc	2 396 0                 # kiss_fft.c:396:0
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movl	156(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	160(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	40(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	96(%rsp), %rcx          # 8-byte Reload
	movq	56(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	224(%rsp), %rdi         # 8-byte Reload
	movq	104(%rsp), %rsi         # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	88(%rsp), %r9           # 8-byte Reload
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	$1, %ecx
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	160(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	callq	kiss_fft_stride
.Ltmp250:
	movabsq	$397, %rdi              # imm = 0x18D
	leaq	.L.str177447, %rsi
	leaq	.L.str1271, %rdx
	leaq	.L.str85355, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %r10d
	.loc	2 397 0                 # kiss_fft.c:397:0
	movl	$1, (%rsp)
	movl	%r10d, 20(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	addq	$232, %rsp
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp251:
.Ltmp252:
	.size	kiss_fft, .Ltmp252-kiss_fft
.Lfunc_end5:
	.cfi_endproc

	.globl	kiss_fft_cleanup
	.align	16, 0x90
	.type	kiss_fft_cleanup,@function
kiss_fft_cleanup:                       # @kiss_fft_cleanup
	.cfi_startproc
.Lfunc_begin6:
	.loc	2 401 0                 # kiss_fft.c:401:0
# BB#0:
	subq	$24, %rsp
.Ltmp254:
	.cfi_def_cfa_offset 32
	movabsq	$403, %rdi              # imm = 0x193
	leaq	.L.str180450, %rsi
	leaq	.L.str1271, %rdx
	leaq	.L.str181451, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 403 0 prologue_end    # kiss_fft.c:403:0
.Ltmp255:
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$24, %rsp
	ret
.Ltmp256:
.Ltmp257:
	.size	kiss_fft_cleanup, .Ltmp257-kiss_fft_cleanup
.Lfunc_end6:
	.cfi_endproc

	.globl	kiss_fft_next_fast_size
	.align	16, 0x90
	.type	kiss_fft_next_fast_size,@function
kiss_fft_next_fast_size:                # @kiss_fft_next_fast_size
	.cfi_startproc
.Lfunc_begin7:
	.loc	2 406 0                 # kiss_fft.c:406:0
# BB#0:
	pushq	%rbp
.Ltmp265:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp266:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp267:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp268:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp269:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp270:
	.cfi_def_cfa_offset 56
	subq	$1832, %rsp             # imm = 0x728
.Ltmp271:
	.cfi_def_cfa_offset 1888
.Ltmp272:
	.cfi_offset %rbx, -56
.Ltmp273:
	.cfi_offset %r12, -48
.Ltmp274:
	.cfi_offset %r13, -40
.Ltmp275:
	.cfi_offset %r14, -32
.Ltmp276:
	.cfi_offset %r15, -24
.Ltmp277:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str184454, %r8
	leaq	.L.str4274, %rdx
	movabsq	$407, %rsi              # imm = 0x197
	leaq	.L.str182452, %r9
	leaq	.L.str1271, %r10
	leaq	.L.str183453, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
	movabsq	$24601, %r15            # imm = 0x6019
	movabsq	$32, %r12
	leaq	.L.str82352, %r13
	.loc	2 405 0 prologue_end    # kiss_fft.c:405:0
.Ltmp278:
	movq	%rsi, 1824(%rsp)        # 8-byte Spill
	movl	%edi, %esi
                                        # kill: RSI<def> ESI<kill>
	movl	%edi, 1820(%rsp)        # 4-byte Spill
	movq	%r15, %rdi
	movq	%rsi, 1808(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	1808(%rsp), %r15        # 8-byte Reload
	movq	%rdx, 1800(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	%r8, 1784(%rsp)         # 8-byte Spill
	movq	%r13, %r8
	movq	1792(%rsp), %r12        # 8-byte Reload
	movq	%r9, 1776(%rsp)         # 8-byte Spill
	movq	%r12, %r9
	movq	1800(%rsp), %r13        # 8-byte Reload
	movq	%r13, (%rsp)
	movl	%r14d, 1772(%rsp)       # 4-byte Spill
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movl	%ebp, 1756(%rsp)        # 4-byte Spill
	movq	%r11, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+1820]
	.loc	2 407 0                 # kiss_fft.c:407:0
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1776(%rsp), %rsi        # 8-byte Reload
	movq	1728(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1756(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1792(%rsp), %rsi        # 8-byte Reload
	movq	1792(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movq	1792(%rsp), %r9         # 8-byte Reload
	movq	1800(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
.Ltmp279:
.LBB7_1:                                # =>This Loop Header: Depth=1
                                        #     Child Loop BB7_2 Depth 2
                                        #     Child Loop BB7_4 Depth 2
                                        #     Child Loop BB7_6 Depth 2
	movl	1724(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str7277, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str187457, %r9
	movabsq	$3, %r10
	leaq	.L.str94364, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str182452, %r14
	leaq	.L.str184454, %r15
	leaq	.L.str186456, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str185455, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str82352, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str34304, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str88358, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 408 0                 # kiss_fft.c:408:0
.Ltmp280:
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1600(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1592(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1584(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1576(%rsp)         # 8-byte Spill
	movq	1608(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1568(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1564(%rsp)        # 4-byte Spill
	movq	%r15, 1552(%rsp)        # 8-byte Spill
	movq	%r12, 1544(%rsp)        # 8-byte Spill
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movl	%r13d, 1536(%rsp)       # 4-byte Spill
	movq	%r14, 1528(%rsp)        # 8-byte Spill
	movq	%rbx, 1520(%rsp)        # 8-byte Spill
	movq	%r10, 1512(%rsp)        # 8-byte Spill
	movq	%r11, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1624(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1820(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1712(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1648(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp281:
	#DEBUG_VALUE: m <- [RSP+1564]
	.loc	2 409 0                 # kiss_fft.c:409:0
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1500(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1696(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1500(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1499(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1528(%rsp), %rsi        # 8-byte Reload
	movq	1552(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1576(%rsp), %r8         # 8-byte Reload
	movl	1540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1576(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	1712(%rsp), %rsi        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1499(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
	jmp	.LBB7_3
.Ltmp282:
.LBB7_2:                                # %.lr.ph
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str125395, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str187457, %r9
	movabsq	$3, %r10
	leaq	.L.str94364, %r11
	movabsq	$409, %rbx              # imm = 0x199
	leaq	.L.str182452, %r14
	leaq	.L.str189459, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1480(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rcx
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 1456(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rcx
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movabsq	$23, %rcx
	movl	%eax, 1436(%rsp)        # 4-byte Spill
	movl	$2, %eax
	movq	%rcx, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str188458, %rcx
	movq	%rcx, 1416(%rsp)        # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 1408(%rsp)        # 8-byte Spill
	leaq	.L.str185455, %rcx
	movq	%rcx, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str184454, %rcx
	movq	%rcx, 1392(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1376(%rsp)        # 8-byte Spill
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1368(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1360(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1352(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1344(%rsp)         # 8-byte Spill
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1336(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1332(%rsp)        # 4-byte Spill
	movq	%r15, 1320(%rsp)        # 8-byte Spill
	movl	%ebp, 1316(%rsp)        # 4-byte Spill
	movl	%r12d, 1312(%rsp)       # 4-byte Spill
	movq	%r13, 1304(%rsp)        # 8-byte Spill
	movq	%r14, 1296(%rsp)        # 8-byte Spill
	movq	%rbx, 1288(%rsp)        # 8-byte Spill
	movq	%r10, 1280(%rsp)        # 8-byte Spill
	movq	%r11, 1272(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1392(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1480(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1272(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1436(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1332(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1268(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp283:
	#DEBUG_VALUE: m <- [RSP+1268]
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1268(%rsp), %eax        # 4-byte Reload
	andl	$1, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 1264(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1472(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1264(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1263(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movl	1316(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1280(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1344(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1480(%rsp), %rsi        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1360(%rsp), %r9         # 8-byte Reload
	movq	1368(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1263(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1268(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1492(%rsp)        # 4-byte Spill
	jne	.LBB7_2
.Ltmp284:
.LBB7_3:                                # %.loopexit
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1492(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str16286, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str193463, %r9
	movabsq	$3, %r10
	leaq	.L.str192462, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str182452, %r14
	leaq	.L.str187457, %r15
	leaq	.L.str191461, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str14284, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 1212(%rsp)        # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str190460, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str184454, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str185455, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str94364, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 410 0                 # kiss_fft.c:410:0
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1128(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1120(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1104(%rsp)         # 8-byte Spill
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1096(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1092(%rsp)        # 4-byte Spill
	movq	%r15, 1080(%rsp)        # 8-byte Spill
	movq	%r12, 1072(%rsp)        # 8-byte Spill
	movl	%ebp, 1068(%rsp)        # 4-byte Spill
	movl	%r13d, 1064(%rsp)       # 4-byte Spill
	movq	%r14, 1056(%rsp)        # 8-byte Spill
	movq	%rbx, 1048(%rsp)        # 8-byte Spill
	movq	%r10, 1040(%rsp)        # 8-byte Spill
	movq	%r11, 1032(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1152(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1248(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1176(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1040(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1212(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1092(%rsp), %ebp        # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1028(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1028(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1240(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1027(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1048(%rsp), %rdi        # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movl	1068(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1120(%rsp), %rsi        # 8-byte Reload
	movq	1120(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1096(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1248(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	1120(%rsp), %r9         # 8-byte Reload
	movq	1128(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1027(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1212(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
	jmp	.LBB7_5
.LBB7_4:                                # %.lr.ph4
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str105375, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str193463, %r9
	movabsq	$3, %r10
	leaq	.L.str192462, %r11
	movabsq	$410, %rbx              # imm = 0x19A
	leaq	.L.str182452, %r14
	leaq	.L.str195465, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str19289, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 980(%rsp)         # 4-byte Spill
	movl	$3, %eax
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str104374, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	leaq	.L.str194464, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str190460, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	leaq	.L.str187457, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 896(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 872(%rsp)          # 8-byte Spill
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	%r9, 864(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movq	%r15, 848(%rsp)         # 8-byte Spill
	movl	%ebp, 844(%rsp)         # 4-byte Spill
	movl	%r12d, 840(%rsp)        # 4-byte Spill
	movq	%r13, 832(%rsp)         # 8-byte Spill
	movq	%r14, 824(%rsp)         # 8-byte Spill
	movq	%rbx, 816(%rsp)         # 8-byte Spill
	movq	%r10, 808(%rsp)         # 8-byte Spill
	movq	%r11, 800(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	920(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	1008(%rsp), %r9         # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	800(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	980(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 796(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp285:
	#DEBUG_VALUE: m <- [RSP+796]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	796(%rsp), %eax         # 4-byte Reload
	cltd
	movl	860(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 792(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	792(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 791(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movl	844(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	888(%rsp), %rsi         # 8-byte Reload
	movq	888(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	888(%rsp), %r9          # 8-byte Reload
	movq	896(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	791(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	796(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1020(%rsp)        # 4-byte Spill
	jne	.LBB7_4
.Ltmp286:
.LBB7_5:                                # %.loopexit2
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	1020(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str25295, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str88358, %r9
	movabsq	$3, %r10
	leaq	.L.str198468, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str182452, %r14
	leaq	.L.str193463, %r15
	leaq	.L.str197467, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 760(%rsp)         # 8-byte Spill
	leaq	.L.str24294, %rcx
	movq	%rcx, 752(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 740(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	leaq	.L.str196466, %rcx
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 712(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	leaq	.L.str187457, %rcx
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	leaq	.L.str190460, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str104374, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str192462, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 411 0                 # kiss_fft.c:411:0
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 648(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 640(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 632(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	720(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 624(%rsp)          # 8-byte Spill
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	%r9, 616(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 612(%rsp)         # 4-byte Spill
	movq	%r15, 600(%rsp)         # 8-byte Spill
	movq	%r12, 592(%rsp)         # 8-byte Spill
	movl	%ebp, 588(%rsp)         # 4-byte Spill
	movl	%r13d, 584(%rsp)        # 4-byte Spill
	movq	%r14, 576(%rsp)         # 8-byte Spill
	movq	%rbx, 568(%rsp)         # 8-byte Spill
	movq	%r10, 560(%rsp)         # 8-byte Spill
	movq	%r11, 552(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	776(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	696(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	740(%rsp), %eax         # 4-byte Reload
	cltd
	movl	612(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 548(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	548(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 547(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	568(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movl	588(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	640(%rsp), %rsi         # 8-byte Reload
	movq	640(%rsp), %rdx         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	776(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	640(%rsp), %r9          # 8-byte Reload
	movq	648(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	547(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	740(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
	jmp	.LBB7_7
.LBB7_6:                                # %.lr.ph7
                                        #   Parent Loop BB7_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str110380, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str88358, %r9
	movabsq	$3, %r10
	leaq	.L.str198468, %r11
	movabsq	$411, %rbx              # imm = 0x19B
	leaq	.L.str182452, %r14
	leaq	.L.str200470, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 528(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rcx
	movq	%rcx, 512(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movl	%eax, 500(%rsp)         # 4-byte Spill
	movl	$5, %eax
	movq	%rcx, 488(%rsp)         # 8-byte Spill
	leaq	.L.str107377, %rcx
	movq	%rcx, 480(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 472(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	leaq	.L.str199469, %rcx
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	leaq	.L.str196466, %rcx
	movq	%rcx, 440(%rsp)         # 8-byte Spill
	leaq	.L.str193463, %rcx
	movq	%rcx, 432(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 408(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 392(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	%r9, 376(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 372(%rsp)         # 4-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	500(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp287:
	#DEBUG_VALUE: m <- [RSP+308]
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %eax         # 4-byte Reload
	cltd
	movl	372(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 304(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	520(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	304(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 303(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	528(%rsp), %rdi         # 8-byte Reload
	movq	528(%rsp), %rsi         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	303(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 540(%rsp)         # 4-byte Spill
	jne	.LBB7_6
.Ltmp288:
.LBB7_7:                                # %._crit_edge
                                        #   in Loop: Header=BB7_1 Depth=1
	movl	540(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str132402, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str184454, %r9
	movabsq	$3, %r10
	leaq	.L.str37307, %r11
	movabsq	$412, %rbx              # imm = 0x19C
	leaq	.L.str182452, %r14
	leaq	.L.str88358, %r15
	leaq	.L.str202472, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str34304, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	leaq	.L.str185455, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	movabsq	$414, %rcx              # imm = 0x19E
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str201471, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str193463, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str196466, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	leaq	.L.str107377, %rcx
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	leaq	.L.str198468, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 412 0                 # kiss_fft.c:412:0
.Ltmp289:
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	176(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 160(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 152(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 144(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 124(%rsp)         # 4-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r12, 104(%rsp)         # 8-byte Spill
	movl	%ebp, 100(%rsp)         # 4-byte Spill
	movl	%r13d, 96(%rsp)         # 4-byte Spill
	movq	%r14, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	192(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	184(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	288(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	208(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	124(%rsp), %eax         # 4-byte Reload
	cmpl	$2, %eax
	setl	%al
.Ltmp290:
	.loc	2 414 0                 # kiss_fft.c:414:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 63(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	240(%rsp), %rdi         # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rdx         # 8-byte Reload
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 56(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp291:
	#DEBUG_VALUE: kiss_fft_next_fast_size:n <- [RSP+56]
	.loc	2 412 0                 # kiss_fft.c:412:0
	movq	80(%rsp), %rdi          # 8-byte Reload
	movq	88(%rsp), %rsi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	104(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	100(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	64(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	152(%rsp), %rsi         # 8-byte Reload
	movq	152(%rsp), %rdx         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	128(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	288(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	288(%rsp), %rcx         # 8-byte Reload
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	63(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movl	56(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, 1724(%rsp)        # 4-byte Spill
	jne	.LBB7_8
	jmp	.LBB7_1
.Ltmp292:
.LBB7_8:
	movabsq	$1, %rax
	movabsq	$32, %rsi
	leaq	.L.str185455, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %rcx
	movabsq	$416, %rdi              # imm = 0x1A0
	leaq	.L.str182452, %rdx
	leaq	.L.str37307, %r10
	leaq	.L.str39309, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	.loc	2 416 0                 # kiss_fft.c:416:0
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rdx, %rsi
	movq	%r10, %rdx
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 32(%rsp)           # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 24(%rsp)           # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movl	%ebp, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movl	1564(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	16(%rsp), %rcx          # 8-byte Reload
	movq	32(%rsp), %r8           # 8-byte Reload
	movq	24(%rsp), %r9           # 8-byte Reload
	movq	40(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1564(%rsp), %eax        # 4-byte Reload
	addq	$1832, %rsp             # imm = 0x728
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp293:
.Ltmp294:
	.size	kiss_fft_next_fast_size, .Ltmp294-kiss_fft_next_fast_size
.Lfunc_end7:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_factor,@function
kf_factor:                              # @kf_factor
	.cfi_startproc
.Lfunc_begin8:
	.loc	2 318 0                 # kiss_fft.c:318:0
# BB#0:
	pushq	%rbp
.Ltmp302:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp303:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp304:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp305:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp306:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp307:
	.cfi_def_cfa_offset 56
	subq	$1608, %rsp             # imm = 0x648
.Ltmp308:
	.cfi_def_cfa_offset 1664
.Ltmp309:
	.cfi_offset %rbx, -56
.Ltmp310:
	.cfi_offset %r12, -48
.Ltmp311:
	.cfi_offset %r13, -40
.Ltmp312:
	.cfi_offset %r14, -32
.Ltmp313:
	.cfi_offset %r15, -24
.Ltmp314:
	.cfi_offset %rbp, -16
	#DEBUG_VALUE: kf_factor:facbuf <- RSI
	#DEBUG_VALUE: kf_factor:n <- EDI
	movl	$4, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str86356, %r8
	leaq	.L.str4274, %r9
	movabsq	$324, %r10              # imm = 0x144
	leaq	.L.str79349, %r11
	leaq	.L.str1271, %rbx
	leaq	.L.str85355, %r14
	movabsq	$2, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rcx
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rcx
	movq	%rcx, 1576(%rsp)        # 8-byte Spill
	leaq	floor, %rcx
	movq	%rcx, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str84354, %rcx
	movq	%rcx, 1560(%rsp)        # 8-byte Spill
	movabsq	$321, %rcx              # imm = 0x141
	movq	%rcx, 1552(%rsp)        # 8-byte Spill
	movabsq	$49, %rcx
	movq	%rcx, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rcx
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	leaq	sqrt, %rcx
	movq	%rcx, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str83353, %rcx
	.loc	2 317 0 prologue_end    # kiss_fft.c:317:0
.Ltmp315:
	movl	%eax, 1524(%rsp)        # 4-byte Spill
	movl	%edi, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str82352, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 1504(%rsp)        # 8-byte Spill
.Ltmp316:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+1504]
	movl	$24601, %esi            # imm = 0x6019
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1496(%rsp)        # 8-byte Spill
	movl	$32, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1488(%rsp)        # 8-byte Spill
	movl	$1, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 1480(%rsp)        # 8-byte Spill
	xorl	%esi, %esi
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movl	%esi, %eax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movq	1496(%rsp), %rax        # 8-byte Reload
	movl	%edi, 1460(%rsp)        # 4-byte Spill
.Ltmp317:
	#DEBUG_VALUE: kf_factor:n <- [RSP+1460]
	movq	%rax, %rdi
	movq	1488(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1456(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1512(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1440(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1472(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1432(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1464(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1424(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movl	%r12d, 1420(%rsp)       # 4-byte Spill
	movq	%r13, 1408(%rsp)        # 8-byte Spill
	movq	%r15, 1400(%rsp)        # 8-byte Spill
	movl	%ebp, 1396(%rsp)        # 4-byte Spill
	movq	%r14, 1384(%rsp)        # 8-byte Spill
	movq	%rbx, 1376(%rsp)        # 8-byte Spill
	movq	%r10, 1368(%rsp)        # 8-byte Spill
	movq	%r11, 1360(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp318:
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str89359, %ebp
	movl	%ebp, %r8d
	movl	$64, %ebp
	movl	%ebp, %esi
	movq	1496(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
.Ltmp319:
	#DEBUG_VALUE: kf_factor:p <- 4
	.loc	2 321 0                 # kiss_fft.c:321:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str79349, %ebp
	movl	%ebp, %esi
	movl	$.L.str1271, %ebp
	movl	%ebp, %edx
	movl	$.L.str2272, %ebp
	movl	%ebp, %ecx
	movl	$321, %ebp              # imm = 0x141
	movl	%ebp, %edi
	movl	$39, %ebp
	movl	%ebp, %r8d
	movl	1456(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movq	1480(%rsp), %rdi        # 8-byte Reload
	movq	1488(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1464(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	1460(%rsp), %ebp        # 4-byte Reload
	vcvtsi2sdl	%ebp, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1352(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	1352(%rsp), %xmm0       # 8-byte Reload
	callq	sqrt
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1344(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1568(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	1344(%rsp), %xmm0       # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
                                        # implicit-def: XMM0
	vmovsd	1344(%rsp), %xmm1       # 8-byte Reload
	vroundsd	$1, %xmm1, %xmm0, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	vmovsd	%xmm0, 1336(%rsp)       # 8-byte Spill
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1424(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp320:
	#DEBUG_VALUE: kf_factor:floor_sqrt <- [RSP+1336]
	.loc	2 324 0                 # kiss_fft.c:324:0
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1360(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	1396(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1600(%rsp), %rdi        # 8-byte Reload
	movq	1448(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movq	1448(%rsp), %r9         # 8-byte Reload
	movq	1424(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1504(%rsp), %rax        # 8-byte Reload
	movl	1524(%rsp), %ebp        # 4-byte Reload
	movl	1460(%rsp), %r12d       # 4-byte Reload
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r12d, 1320(%rsp)       # 4-byte Spill
.Ltmp321:
.LBB8_1:                                # %.outer
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB8_2 Depth 2
	movl	1320(%rsp), %eax        # 4-byte Reload
	movl	1324(%rsp), %ecx        # 4-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movabsq	$1, %rsi
	leaq	.L.str9279, %rdi
	movabsq	$0, %r8
	leaq	.L.str4274, %r9
	movabsq	$2, %r10
	leaq	.L.str94364, %r11
	movabsq	$3, %rbx
	leaq	.L.str88358, %r14
	movabsq	$325, %r15              # imm = 0x145
	leaq	.L.str79349, %r12
	leaq	.L.str86356, %r13
	leaq	.L.str93363, %rbp
	movl	%eax, 1316(%rsp)        # 4-byte Spill
	movl	$0, %eax
	movl	%eax, 1312(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rdx, 1304(%rsp)        # 8-byte Spill
	movabsq	$19134, %rdx            # imm = 0x4ABE
	movq	%rdx, 1296(%rsp)        # 8-byte Spill
	movabsq	$32, %rdx
	movq	%rdx, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rdx
	movq	%rdx, 1280(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rdx
	movq	%rdx, 1272(%rsp)        # 8-byte Spill
	movabsq	$46, %rdx
	movq	%rdx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str92362, %rdx
	movq	%rdx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str90360, %rdx
	movq	%rdx, 1248(%rsp)        # 8-byte Spill
	movabsq	$18, %rdx
	movq	%rdx, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rdx
	movq	%rdx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str82352, %rdx
	movq	%rdx, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str25295, %rdx
	movq	%rdx, 1216(%rsp)        # 8-byte Spill
	movabsq	$-1, %rdx
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movabsq	$48, %rdx
	movq	%rdx, 1200(%rsp)        # 8-byte Spill
	movabsq	$4, %rdx
	movq	%rdx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str91361, %rdx
	movq	%rdx, 1184(%rsp)        # 8-byte Spill
	movabsq	$64, %rdx
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str87357, %rdx
	movq	%rdx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str89359, %rdx
	movq	%rdx, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str28298, %rdx
	.loc	2 325 0                 # kiss_fft.c:325:0
.Ltmp322:
	movq	%rdx, 1152(%rsp)        # 8-byte Spill
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	%rdi, 1144(%rsp)        # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 1136(%rsp)        # 8-byte Spill
	movq	%r12, %rsi
	movq	%r13, %rdx
	movq	%r8, 1128(%rsp)         # 8-byte Spill
	movq	1168(%rsp), %r8         # 8-byte Reload
	movl	%ecx, 1124(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	%eax, 1120(%rsp)        # 4-byte Spill
	movl	1312(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1112(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1104(%rsp)        # 8-byte Spill
	movq	%r12, 1096(%rsp)        # 8-byte Spill
	movq	%r13, 1088(%rsp)        # 8-byte Spill
	movq	%rbp, 1080(%rsp)        # 8-byte Spill
	movq	%r14, 1072(%rsp)        # 8-byte Spill
	movq	%rbx, 1064(%rsp)        # 8-byte Spill
	movq	%r10, 1056(%rsp)        # 8-byte Spill
	movq	%r11, 1048(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1176(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1192(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1208(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1072(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1460(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	1136(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1232(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	1124(%rsp), %esi        # 4-byte Reload
	idivl	%esi
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movl	%edx, 1044(%rsp)        # 4-byte Spill
	movq	%rcx, %rdx
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1044(%rsp), %eax        # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1043(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1104(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1088(%rsp), %rdx        # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movl	1312(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1064(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1072(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1128(%rsp), %rdx        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1136(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	1128(%rsp), %r9         # 8-byte Reload
	movq	1112(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1043(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movl	1124(%rsp), %eax        # 4-byte Reload
	movl	%eax, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
.LBB8_2:                                # %.lr.ph
                                        #   Parent Loop BB8_1 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movl	1036(%rsp), %eax        # 4-byte Reload
	movl	$2, %ecx
	.loc	2 326 0                 # kiss_fft.c:326:0
.Ltmp323:
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str79349, %esi
	movl	%esi, %edx
	movl	$.L.str94364, %esi
	movl	%esi, %edi
	movl	$.L.str95365, %esi
	movl	%esi, %r8d
	movl	$48, %esi
	movl	%esi, %r9d
	movq	$-1, %r10
	xorl	%esi, %esi
	movq	%rdi, 1024(%rsp)        # 8-byte Spill
	movq	%r10, %rdi
	movl	%esi, 1020(%rsp)        # 4-byte Spill
	movq	%rdx, %rsi
	movq	1024(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1008(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movl	%ecx, 1004(%rsp)        # 4-byte Spill
	movq	%r8, %rcx
	movq	%r8, 992(%rsp)          # 8-byte Spill
	movq	%r9, %r8
	movl	1020(%rsp), %r9d        # 4-byte Reload
	movl	%eax, 988(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str86356, (%rcx)
	movl	$.L.str90360, %eax
	movl	%eax, %r8d
	movl	$2, %eax
	movl	%eax, %ecx
	movl	$32, %eax
	movl	%eax, %edx
	movl	1020(%rsp), %eax        # 4-byte Reload
	movl	%eax, %esi
	movl	$1, %r9d
	movl	%r9d, %edi
	movq	%rdi, 976(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 968(%rsp)         # 8-byte Spill
	movq	%rdx, %rsi
	movq	968(%rsp), %r10         # 8-byte Reload
	movq	%rdx, 960(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	976(%rsp), %r11         # 8-byte Reload
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r11, %r9
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str97367, (%rcx)
	movl	$.L.str96366, %eax
	movl	%eax, %r8d
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	$.L.str97367, %eax
	movl	%eax, %r8d
	movl	988(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebx
	movl	%ebx, %ecx
	movq	%rsp, %rdx
	movq	$.L.str97367, (%rdx)
	movl	$19134, %ebx            # imm = 0x4ABE
	movl	%ebx, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	976(%rsp), %r9          # 8-byte Reload
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	movq	%r9, %rcx
	movq	992(%rsp), %r10         # 8-byte Reload
	movq	%r8, 936(%rsp)          # 8-byte Spill
	movq	%r10, %r8
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str98368, %eax
	movl	%eax, %ecx
	movl	$326, %eax              # imm = 0x146
	movl	%eax, %edi
	movl	$3, %eax
	movl	%eax, %edx
	movq	1008(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 928(%rsp)         # 8-byte Spill
	movq	%r8, %rdx
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	1020(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movl	$.L.str99369, %eax
	movl	%eax, %r8d
	movl	$6, %eax
	movl	%eax, %edi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movl	$.L.str3273, %eax
	movl	%eax, %ecx
	movl	$5, %eax
	movl	%eax, %edi
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movl	$4, %eax
	movl	%eax, %ecx
	movq	%rcx, %rdi
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movq	928(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	912(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movl	$.L.str100370, %eax
	movl	%eax, %r8d
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	968(%rsp), %rsi         # 8-byte Reload
	movq	968(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	960(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	968(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$4, %eax
	movl	$2, %ebx
	movl	%eax, 908(%rsp)         # 4-byte Spill
	movl	%ebx, 904(%rsp)         # 4-byte Spill
	je	.LBB8_5
	jmp	.LBB8_8
.LBB8_8:                                # %.lr.ph
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	988(%rsp), %eax         # 4-byte Reload
	subl	$2, %eax
	movl	%eax, 900(%rsp)         # 4-byte Spill
	jne	.LBB8_4
	jmp	.LBB8_3
.LBB8_3:                                #   in Loop: Header=BB8_2 Depth=2
	movl	$3, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str97367, %r8
	leaq	.L.str4274, %rsi
	movabsq	$328, %rdi              # imm = 0x148
	leaq	.L.str79349, %r9
	leaq	.L.str99369, %r10
	leaq	.L.str101371, %r11
	movabsq	$2, %rbx
	movl	$0, %ebp
	movl	$1, %r14d
.Ltmp324:
	#DEBUG_VALUE: kf_factor:p <- 3
	.loc	2 328 0                 # kiss_fft.c:328:0
	movq	%rsi, 888(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 860(%rsp)         # 4-byte Spill
	movl	%r14d, 856(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	880(%rsp), %r9          # 8-byte Reload
	movq	888(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	860(%rsp), %eax         # 4-byte Reload
	movl	%eax, 904(%rsp)         # 4-byte Spill
	jmp	.LBB8_5
.LBB8_4:                                #   in Loop: Header=BB8_2 Depth=2
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str97367, %r8
	leaq	.L.str4274, %rdx
	movabsq	$329, %rsi              # imm = 0x149
	leaq	.L.str79349, %rdi
	leaq	.L.str100370, %r9
	leaq	.L.str102372, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str16286, %r12
	leaq	.L.str95365, %r13
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 329 0                 # kiss_fft.c:329:0
	movq	%rdi, 832(%rsp)         # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 824(%rsp)         # 8-byte Spill
	movq	832(%rsp), %rax         # 8-byte Reload
	movq	%rsi, 816(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movq	%r12, %rcx
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	%r8, 792(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 784(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 776(%rsp)         # 8-byte Spill
	movl	%ebp, 772(%rsp)         # 4-byte Spill
	movq	%r15, 760(%rsp)         # 8-byte Spill
	movq	%r12, 752(%rsp)         # 8-byte Spill
	movq	%r13, 744(%rsp)         # 8-byte Spill
	movl	%ebx, 740(%rsp)         # 4-byte Spill
	movq	%r10, 728(%rsp)         # 8-byte Spill
	movq	%r11, 720(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	988(%rsp), %ebx         # 4-byte Reload
	addl	$2, %ebx
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 716(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp325:
	#DEBUG_VALUE: kf_factor:p <- [RSP+716]
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	832(%rsp), %rsi         # 8-byte Reload
	movq	784(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movl	740(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	800(%rsp), %rsi         # 8-byte Reload
	movq	800(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	800(%rsp), %r9          # 8-byte Reload
	movq	808(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	716(%rsp), %ebx         # 4-byte Reload
	movl	%ebx, 904(%rsp)         # 4-byte Spill
.Ltmp326:
.LBB8_5:                                # %.backedge
                                        #   in Loop: Header=BB8_2 Depth=2
	movl	904(%rsp), %eax         # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str24294, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str94364, %r9
	movabsq	$3, %r10
	leaq	.L.str88358, %r11
	movabsq	$325, %rbx              # imm = 0x145
	leaq	.L.str79349, %r14
	leaq	.L.str97367, %r15
	leaq	.L.str106376, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 704(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	leaq	.L.str105375, %rcx
	movq	%rcx, 680(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 672(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	leaq	.L.str92362, %rcx
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	leaq	.L.str96366, %rcx
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movabsq	$18, %rcx
	movq	%rcx, 640(%rsp)         # 8-byte Spill
	leaq	.L.str19289, %rcx
	movq	%rcx, 632(%rsp)         # 8-byte Spill
	leaq	.L.str103373, %rcx
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movabsq	$331, %rcx              # imm = 0x14B
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	leaq	.L.str104374, %rcx
	movq	%rcx, 592(%rsp)         # 8-byte Spill
	leaq	.L.str7277, %rcx
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movabsq	$47, %rcx
	.loc	2 331 0                 # kiss_fft.c:331:0
.Ltmp327:
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str79349, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	%eax, 572(%rsp)         # 4-byte Spill
	movl	$.L.str97367, %eax
                                        # kill: RAX<def> EAX<kill>
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movl	$.L.str103373, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rsi, 552(%rsp)         # 8-byte Spill
	movl	$48, %esi
                                        # kill: RSI<def> ESI<kill>
	movq	%rax, 544(%rsp)         # 8-byte Spill
	movq	$-1, %rax
	movq	%rsi, 536(%rsp)         # 8-byte Spill
	xorl	%esi, %esi
	movq	%rdi, 528(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 524(%rsp)         # 4-byte Spill
	movq	%rcx, %rsi
	movq	544(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 512(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	552(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	536(%rsp), %rax         # 8-byte Reload
	movq	%r8, 496(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	524(%rsp), %eax         # 4-byte Reload
	movq	%r9, 488(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movq	%r15, 480(%rsp)         # 8-byte Spill
	movl	%r13d, 476(%rsp)        # 4-byte Spill
	movq	%r12, 464(%rsp)         # 8-byte Spill
	movl	%ebp, 460(%rsp)         # 4-byte Spill
	movq	%r14, 448(%rsp)         # 8-byte Spill
	movq	%rbx, 440(%rsp)         # 8-byte Spill
	movq	%r10, 432(%rsp)         # 8-byte Spill
	movq	%r11, 424(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str94364, (%rcx)
	movl	$.L.str3273, %eax
	movl	%eax, %ecx
	movl	$3, %eax
	movl	%eax, %edx
	movl	$32, %eax
	movl	%eax, %esi
	movl	$2, %eax
	movl	%eax, %edi
	movl	524(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r8d
	movl	$1, %r9d
	movl	%r9d, %r10d
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%rdx, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	416(%rsp), %r11         # 8-byte Reload
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%rcx, 392(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	392(%rsp), %rbx         # 8-byte Reload
	movq	%r8, 384(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movq	%r10, %r9
	movq	%r10, 376(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str99369, (%rcx)
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movq	$.L.str100370, (%rcx)
	movl	$.L.str16286, %eax
	movl	%eax, %r8d
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movl	572(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	%rsp, %rdx
	movq	$.L.str100370, (%rdx)
	movl	$19134, %ebp            # imm = 0x4ABE
	movl	%ebp, %edi
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 368(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rcx
	movl	$1, (%rcx)
	movl	$.L.str104374, %eax
	movl	%eax, %ecx
	movl	$331, %eax              # imm = 0x14B
	movl	%eax, %edi
	movl	$39, %eax
	movl	%eax, %r8d
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	544(%rsp), %rdx         # 8-byte Reload
	movl	524(%rsp), %r9d         # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rcx
	movq	$.L.str4274, (%rcx)
	movq	376(%rsp), %rdi         # 8-byte Reload
	movq	408(%rsp), %rsi         # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	552(%rsp), %r8          # 8-byte Reload
	movq	384(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_int
                                        # implicit-def: XMM0
	movl	572(%rsp), %eax         # 4-byte Reload
	vcvtsi2sdl	%eax, %xmm0, %xmm0
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	%xmm0, 360(%rsp)        # 8-byte Spill
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	1336(%rsp), %xmm0       # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	600(%rsp), %rsi         # 8-byte Reload
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	movq	704(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	528(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	360(%rsp), %xmm0        # 8-byte Reload
	vmovsd	1336(%rsp), %xmm1       # 8-byte Reload
	vucomisd	%xmm1, %xmm0
	seta	%al
	.loc	2 332 0                 # kiss_fft.c:332:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 359(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
.Ltmp328:
	#DEBUG_VALUE: kf_factor:p <- [RSP+1316]
	.loc	2 331 0                 # kiss_fft.c:331:0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	572(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	359(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	1316(%rsp), %ebp        # 4-byte Reload
	movl	572(%rsp), %r13d        # 4-byte Reload
	cmovel	%r13d, %ebp
.Ltmp329:
	.loc	2 325 0                 # kiss_fft.c:325:0
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 352(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	352(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	352(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%edx, %eax
	movl	%eax, %ecx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movl	%edx, 348(%rsp)         # 4-byte Spill
	movq	%rcx, %rdx
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	348(%rsp), %eax         # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 347(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	480(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movl	460(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	560(%rsp), %rsi         # 8-byte Reload
	movq	560(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	560(%rsp), %r9          # 8-byte Reload
	movq	528(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	347(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movl	352(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, 1036(%rsp)        # 4-byte Spill
	jne	.LBB8_6
	jmp	.LBB8_2
.Ltmp330:
.LBB8_6:                                # %._crit_edge
                                        #   in Loop: Header=BB8_1 Depth=1
	movl	1036(%rsp), %eax        # 4-byte Reload
	movabsq	$1, %rcx
	leaq	.L.str110380, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str18288, %r9
	movabsq	$3, %r10
	leaq	.L.str86356, %r11
	movabsq	$337, %rbx              # imm = 0x151
	leaq	.L.str79349, %r14
	leaq	.L.str88358, %r15
	leaq	.L.str111381, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 320(%rsp)         # 8-byte Spill
	leaq	.L.str25295, %rcx
	movq	%rcx, 312(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 304(%rsp)         # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 288(%rsp)         # 8-byte Spill
	leaq	.L.str107377, %rcx
	movq	%rcx, 280(%rsp)         # 8-byte Spill
	movabsq	$336, %rcx              # imm = 0x150
	movq	%rcx, 272(%rsp)         # 8-byte Spill
	leaq	.L.str109379, %rcx
	movq	%rcx, 264(%rsp)         # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rcx
	movq	%rcx, 248(%rsp)         # 8-byte Spill
	leaq	.L.str87357, %rcx
	movq	%rcx, 240(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 232(%rsp)         # 8-byte Spill
	leaq	.L.str91361, %rcx
	movq	%rcx, 224(%rsp)         # 8-byte Spill
	movabsq	$335, %rcx              # imm = 0x14F
	movq	%rcx, 216(%rsp)         # 8-byte Spill
	leaq	.L.str108378, %rcx
	movq	%rcx, 208(%rsp)         # 8-byte Spill
	leaq	.L.str92362, %rcx
	movq	%rcx, 200(%rsp)         # 8-byte Spill
	movabsq	$334, %rcx              # imm = 0x14E
	movq	%rcx, 192(%rsp)         # 8-byte Spill
	movabsq	$15, %rcx
	movq	%rcx, 184(%rsp)         # 8-byte Spill
	leaq	.L.str90360, %rcx
	movq	%rcx, 176(%rsp)         # 8-byte Spill
	leaq	.L.str96366, %rcx
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	leaq	.L.str97367, %rcx
	movq	%rcx, 160(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 334 0                 # kiss_fft.c:334:0
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	152(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	%r8, 112(%rsp)          # 8-byte Spill
	movq	144(%rsp), %r8          # 8-byte Reload
	movq	%r9, 104(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 100(%rsp)         # 4-byte Spill
	movq	%r15, 88(%rsp)          # 8-byte Spill
	movq	%r12, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r13d, 72(%rsp)         # 4-byte Spill
	movq	%r14, 64(%rsp)          # 8-byte Spill
	movq	%rbx, 56(%rsp)          # 8-byte Spill
	movq	%r10, 48(%rsp)          # 8-byte Spill
	movq	%r11, 40(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	160(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	336(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	40(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	312(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1316(%rsp), %eax        # 4-byte Reload
	cltd
	movl	100(%rsp), %ebp         # 4-byte Reload
	idivl	%ebp
	movl	%eax, %edx
                                        # kill: RDX<def> EDX<kill>
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 36(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp331:
	#DEBUG_VALUE: kf_factor:n <- [RSP+36]
	.loc	2 335 0                 # kiss_fft.c:335:0
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp332:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+24]
	movq	216(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	208(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	100(%rsp), %eax         # 4-byte Reload
	movl	%eax, (%rcx)
	.loc	2 336 0                 # kiss_fft.c:336:0
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	248(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	240(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 16(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp333:
	#DEBUG_VALUE: kf_factor:facbuf <- [RSP+16]
	movq	272(%rsp), %rdi         # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	288(%rsp), %rsi         # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, 4(%rcx)
	.loc	2 337 0                 # kiss_fft.c:337:0
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	128(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	36(%rsp), %eax          # 4-byte Reload
	cmpl	$1, %eax
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	328(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	64(%rsp), %rsi          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	128(%rsp), %rsi         # 8-byte Reload
	movq	128(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	336(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	movq	136(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	16(%rsp), %rcx          # 8-byte Reload
	movl	100(%rsp), %ebp         # 4-byte Reload
	movl	36(%rsp), %r13d         # 4-byte Reload
	movq	%rcx, 1328(%rsp)        # 8-byte Spill
	movl	%ebp, 1324(%rsp)        # 4-byte Spill
	movl	%r13d, 1320(%rsp)       # 4-byte Spill
	jne	.LBB8_1
.Ltmp334:
# BB#7:
	movabsq	$338, %rdi              # imm = 0x152
	leaq	.L.str79349, %rsi
	leaq	.L.str18288, %rdx
	leaq	.L.str35305, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 338 0                 # kiss_fft.c:338:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$1608, %rsp             # imm = 0x648
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp335:
.Ltmp336:
	.size	kf_factor, .Ltmp336-kf_factor
.Lfunc_end8:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_work,@function
kf_work:                                # @kf_work
	.cfi_startproc
.Lfunc_begin9:
	.loc	2 252 0                 # kiss_fft.c:252:0
# BB#0:
	pushq	%rbp
.Ltmp344:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp345:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp346:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp347:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp348:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp349:
	.cfi_def_cfa_offset 56
	subq	$3208, %rsp             # imm = 0xC88
.Ltmp350:
	.cfi_def_cfa_offset 3264
.Ltmp351:
	.cfi_offset %rbx, -56
.Ltmp352:
	.cfi_offset %r12, -48
.Ltmp353:
	.cfi_offset %r13, -40
.Ltmp354:
	.cfi_offset %r14, -32
.Ltmp355:
	.cfi_offset %r15, -24
.Ltmp356:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str19289, %r10
	movabsq	$0, %r11
	leaq	.L.str4274, %rbx
	movabsq	$2, %r14
	leaq	.L.str128398, %r15
	movabsq	$3, %r12
	leaq	.L.str127397, %r13
	movabsq	$283, %rbp              # imm = 0x11B
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	leaq	.L.str126396, %rax
	movl	%ecx, 3180(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3176(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	movabsq	$257, %rax              # imm = 0x101
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str14284, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	movabsq	$256, %rax              # imm = 0x100
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	leaq	.L.str124394, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	movabsq	$255, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str123393, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	movabsq	$254, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$253, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str120390, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	.loc	2 245 0 prologue_end    # kiss_fft.c:245:0
.Ltmp357:
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movq	2952(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2920(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3120(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2912(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2904(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3200(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 2900(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2888(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2880(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 2872(%rsp)        # 8-byte Spill
	movq	%rbx, 2864(%rsp)        # 8-byte Spill
	movq	%r14, 2856(%rsp)        # 8-byte Spill
	movq	%r15, 2848(%rsp)        # 8-byte Spill
	movq	%r12, 2840(%rsp)        # 8-byte Spill
	movq	%rbp, 2832(%rsp)        # 8-byte Spill
	movq	%r10, 2824(%rsp)        # 8-byte Spill
	movq	%r11, 2816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3180(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2952(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	#DEBUG_VALUE: kf_work:Fout <- [RSP+2920]
	#DEBUG_VALUE: kf_work:f <- [RSP+2912]
	#DEBUG_VALUE: kf_work:fstride <- [RSP+2904]
	#DEBUG_VALUE: kf_work:in_stride <- [RSP+3180]
	#DEBUG_VALUE: kf_work:factors <- [RSP+2888]
	#DEBUG_VALUE: kf_work:st <- [RSP+2880]
	.loc	2 253 0                 # kiss_fft.c:253:0
	movq	2960(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3104(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2808(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp358:
	#DEBUG_VALUE: kf_work:Fout_beg <- [RSP+2808]
	.loc	2 254 0                 # kiss_fft.c:254:0
	movq	2976(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	2992(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3200(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2800(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp359:
	#DEBUG_VALUE: kf_work:f_beg <- [RSP+2800]
	.loc	2 255 0                 # kiss_fft.c:255:0
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2792(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp360:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2792]
	movq	3000(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3056(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2788(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp361:
	#DEBUG_VALUE: kf_work:p <- [RSP+2788]
	.loc	2 256 0                 # kiss_fft.c:256:0
	movq	3032(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2856(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2888(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2776(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp362:
	#DEBUG_VALUE: kf_work:factors <- [RSP+2776]
	movq	3032(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3144(%rsp), %rcx        # 8-byte Reload
	movq	3024(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2792(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2888(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 2772(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp363:
	#DEBUG_VALUE: kf_work:m <- [RSP+2772]
	.loc	2 257 0                 # kiss_fft.c:257:0
	movq	3088(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3048(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2788(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3056(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %esi        # 4-byte Reload
	movl	2788(%rsp), %edi        # 4-byte Reload
	imull	%edi, %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rax        # 8-byte Reload
	movl	%esi, 2768(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3088(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2768(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2768(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3088(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3112(%rsp), %rcx        # 8-byte Reload
	movq	3080(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2760(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2760(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	2808(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3120(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	3200(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2752(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	3112(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp364:
	#DEBUG_VALUE: kf_work:Fout_end <- [RSP+2752]
	.loc	2 283 0                 # kiss_fft.c:283:0
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rdx        # 8-byte Reload
	movq	2816(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	3144(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %esi        # 4-byte Reload
	cmpl	$1, %esi
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3160(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2751(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2832(%rsp), %rdi        # 8-byte Reload
	movq	3192(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3168(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movl	3176(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2816(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2856(%rsp), %rdi        # 8-byte Reload
	movq	2816(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2848(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2751(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3200(%rsp), %rdi        # 8-byte Reload
	movq	3200(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	2816(%rsp), %r9         # 8-byte Reload
	movq	2864(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2751(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_2
.Ltmp365:
# BB#1:                                 # %.preheader1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str131401, %r8
	leaq	.L.str4274, %rdx
	movabsq	$294, %rsi              # imm = 0x126
	leaq	.L.str119389, %rdi
	leaq	.L.str128398, %r9
	leaq	.L.str130400, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str28298, %r12
	movabsq	$32, %r13
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	movabsq	$296, %rax              # imm = 0x128
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str25295, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$295, %rax              # imm = 0x127
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str120390, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp366:
	movq	%rdi, 2640(%rsp)        # 8-byte Spill
	movq	%rsi, %rdi
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	movq	2640(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2624(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 2616(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2648(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2608(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2712(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2600(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2592(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2584(%rsp)        # 8-byte Spill
	movl	%ebp, 2580(%rsp)        # 4-byte Spill
	movq	%r15, 2568(%rsp)        # 8-byte Spill
	movq	%r12, 2560(%rsp)        # 8-byte Spill
	movq	%r13, 2552(%rsp)        # 8-byte Spill
	movl	%ebx, 2548(%rsp)        # 4-byte Spill
	movq	%r10, 2536(%rsp)        # 8-byte Spill
	movq	%r11, 2528(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	2788(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2552(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2788(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2624(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2548(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2688(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2520(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2520(%rsp), %rax        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2680(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2696(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movl	2548(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3180(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2552(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3180(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2680(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2548(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2688(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	2504(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2504(%rsp), %rax        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2704(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2720(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movl	2548(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2772(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2552(%rsp), %rsi        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2728(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 294 0                 # kiss_fft.c:294:0
	movq	2584(%rsp), %rdi        # 8-byte Reload
	movq	2568(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2624(%rsp), %rdi        # 8-byte Reload
	movq	2640(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movl	2548(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2736(%rsp), %rdi        # 8-byte Reload
	movq	2608(%rsp), %rsi        # 8-byte Reload
	movq	2608(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	2608(%rsp), %r9         # 8-byte Reload
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_4
.Ltmp367:
.LBB9_2:                                # %.preheader
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str134404, %r8
	leaq	.L.str4274, %rdx
	movabsq	$285, %rdi              # imm = 0x11D
	leaq	.L.str119389, %rsi
	leaq	.L.str127397, %r9
	leaq	.L.str133403, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str132402, %r12
	leaq	.L.str110380, %r13
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str120390, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	.loc	2 286 0                 # kiss_fft.c:286:0
.Ltmp368:
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movq	2464(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2424(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2416(%rsp)        # 8-byte Spill
	movq	%rdx, 2408(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	%rcx, 2400(%rsp)        # 8-byte Spill
	movq	%r13, %rcx
	movq	2432(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2392(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2384(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2376(%rsp)        # 8-byte Spill
	movl	%ebp, 2372(%rsp)        # 4-byte Spill
	movq	%r15, 2360(%rsp)        # 8-byte Spill
	movq	%r13, 2352(%rsp)        # 8-byte Spill
	movq	%r12, 2344(%rsp)        # 8-byte Spill
	movl	%ebx, 2340(%rsp)        # 4-byte Spill
	movq	%r10, 2328(%rsp)        # 8-byte Spill
	movq	%r11, 2320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movl	3180(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2448(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3180(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2464(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2320(%rsp), %rdi        # 8-byte Reload
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2472(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	2312(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2312(%rsp), %rax        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	.loc	2 285 0                 # kiss_fft.c:285:0
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2360(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2344(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2424(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movl	2340(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2400(%rsp), %rsi        # 8-byte Reload
	movq	2400(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movq	2400(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
.LBB9_3:                                # =>This Inner Loop Header: Depth=1
	movabsq	$1, %rax
	leaq	.L.str56326, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str134404, %r8
	movabsq	$3, %r9
	leaq	.L.str141411, %r10
	movabsq	$287, %r11              # imm = 0x11F
	leaq	.L.str119389, %rbx
	leaq	.L.str140410, %r14
	movl	$0, %ebp
	movl	$1, %r15d
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str139409, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str53323, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	leaq	.L.str123393, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	movabsq	$286, %rax              # imm = 0x11E
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str138408, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	movabsq	$285, %rax              # imm = 0x11D
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str136406, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str135405, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movq	2144(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2096(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2088(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2080(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2072(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2064(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2056(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 2052(%rsp)        # 4-byte Spill
	movl	%r15d, 2048(%rsp)       # 4-byte Spill
	movq	%r12, 2040(%rsp)        # 8-byte Spill
	movq	%r13, 2032(%rsp)        # 8-byte Spill
	movq	%r14, 2024(%rsp)        # 8-byte Spill
	movq	%rbx, 2016(%rsp)        # 8-byte Spill
	movq	%r10, 2008(%rsp)        # 8-byte Spill
	movq	%r11, 2000(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1992(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2120(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1984(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1984(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2128(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1992(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1976(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2128(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1984(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1960(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2144(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1968(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1960(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2160(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1992(%rsp), %rax        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 286 0                 # kiss_fft.c:286:0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1952(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2304(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2304(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	1952(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1944(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2200(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1944(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 287 0                 # kiss_fft.c:287:0
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2240(%rsp), %rcx        # 8-byte Reload
	movq	2216(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	(%rax), %rcx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1936(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1936(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1936(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2248(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2032(%rsp), %rsi        # 8-byte Reload
	movq	1928(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1928(%rsp), %rax        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	cmpq	%rcx, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2040(%rsp), %rdi        # 8-byte Reload
	movq	2296(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1927(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2064(%rsp), %rdx        # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %r8         # 8-byte Reload
	movl	2052(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2080(%rsp), %rsi        # 8-byte Reload
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	2080(%rsp), %rsi        # 8-byte Reload
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2296(%rsp), %rdi        # 8-byte Reload
	movq	2296(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	2080(%rsp), %r9         # 8-byte Reload
	movq	2088(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1927(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_3
.Ltmp369:
.LBB9_4:                                # =>This Inner Loop Header: Depth=1
	movabsq	$6, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str117387, %r8
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$5, %r9
	leaq	.L.str9279, %r10
	movabsq	$4, %r11
	movabsq	$32, %rbx
	leaq	.L.str120390, %r14
	movabsq	$3, %r15
	leaq	.L.str24294, %r12
	movabsq	$2, %r13
	leaq	.L.str123393, %rbp
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$7, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	kf_work, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$294, %rax              # imm = 0x126
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str131401, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str142412, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1848(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1844(%rsp)        # 4-byte Spill
	movl	$1, %esi
	.loc	2 294 0                 # kiss_fft.c:294:0
.Ltmp370:
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movq	1872(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1824(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1880(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1820(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1864(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1808(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1792(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1844(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1784(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1776(%rsp)        # 8-byte Spill
	movq	%r15, 1768(%rsp)        # 8-byte Spill
	movq	%r14, 1760(%rsp)        # 8-byte Spill
	movq	%r12, 1752(%rsp)        # 8-byte Spill
	movq	%r13, 1744(%rsp)        # 8-byte Spill
	movq	%rbx, 1736(%rsp)        # 8-byte Spill
	movq	%r10, 1728(%rsp)        # 8-byte Spill
	movq	%r11, 1720(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	1888(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1904(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1768(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2512(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3180(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1720(%rsp), %rdi        # 8-byte Reload
	movq	1736(%rsp), %rsi        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2776(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1824(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1792(%rsp), %r8         # 8-byte Reload
	movq	1808(%rsp), %r9         # 8-byte Reload
	movq	1848(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2912(%rsp), %rsi        # 8-byte Reload
	movq	2512(%rsp), %rdx        # 8-byte Reload
	movl	3180(%rsp), %ecx        # 4-byte Reload
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2880(%rsp), %r9         # 8-byte Reload
	callq	kf_work
	movabsq	$1, %rdx
	leaq	.L.str64334, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4274, %r8
	movabsq	$2, %r9
	leaq	.L.str131401, %r10
	movabsq	$3, %r11
	leaq	.L.str141411, %rbx
	movabsq	$296, %r14              # imm = 0x128
	leaq	.L.str119389, %r15
	leaq	.L.str147417, %rcx
	movl	$0, %eax
	movl	$1, %ebp
	movabsq	$19134, %r12            # imm = 0x4ABE
	movabsq	$64, %r13
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str145415, %rcx
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str104374, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str146416, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str61331, %rcx
	movq	%rcx, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str28298, %rcx
	movq	%rcx, 1648(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1640(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str143413, %rcx
	movq	%rcx, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str123393, %rcx
	movq	%rcx, 1616(%rsp)        # 8-byte Spill
	movabsq	$295, %rcx              # imm = 0x127
	movq	%rcx, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str144414, %rcx
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str58328, %rcx
	movq	%rcx, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str107377, %rcx
	.loc	2 295 0                 # kiss_fft.c:295:0
	movq	%rcx, 1584(%rsp)        # 8-byte Spill
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1576(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1568(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1560(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1552(%rsp)         # 8-byte Spill
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1544(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1540(%rsp)        # 4-byte Spill
	movq	%r12, 1528(%rsp)        # 8-byte Spill
	movq	%r13, 1520(%rsp)        # 8-byte Spill
	movl	%eax, 1516(%rsp)        # 4-byte Spill
	movq	%r15, 1504(%rsp)        # 8-byte Spill
	movq	%r10, 1496(%rsp)        # 8-byte Spill
	movq	%r11, 1488(%rsp)        # 8-byte Spill
	movq	%rbx, 1480(%rsp)        # 8-byte Spill
	movq	%r14, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1464(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1464(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2496(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1464(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1616(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	.loc	2 296 0                 # kiss_fft.c:296:0
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1448(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2488(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1448(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1440(%rsp)        # 8-byte Spill
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rcx)
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1520(%rsp), %rsi        # 8-byte Reload
	movq	1440(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	cmpq	%rdx, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 1439(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	1472(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1544(%rsp), %r8         # 8-byte Reload
	movl	1516(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	1576(%rsp), %rsi        # 8-byte Reload
	movq	1576(%rsp), %rdx        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1560(%rsp), %rsi        # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1576(%rsp), %r9         # 8-byte Reload
	movq	1552(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	1439(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB9_5
	jmp	.LBB9_4
.Ltmp371:
.LBB9_5:                                # %.loopexit
	.loc	2 299 0                 # kiss_fft.c:299:0
	movq	%rsp, %rax
	movl	$1, (%rax)
	movl	$.L.str119389, %ecx
	movl	%ecx, %eax
	movl	$.L.str141411, %ecx
	movl	%ecx, %edx
	movl	$.L.str148418, %ecx
                                        # kill: RCX<def> ECX<kill>
	movl	$299, %esi              # imm = 0x12B
	movl	%esi, %edi
	movl	$28, %esi
	movl	%esi, %r8d
	xorl	%esi, %esi
	movl	%esi, 1432(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 1424(%rsp)        # 8-byte Spill
	movq	%r8, 1416(%rsp)         # 8-byte Spill
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str122392, %r9d
	movl	%r9d, %r8d
	movl	$2, %r9d
	movl	%r9d, %eax
	movl	$64, %r9d
	movl	%r9d, %ecx
	movl	$1, %r9d
	movl	%r9d, %edx
	movl	1432(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movq	%rax, %rdi
	movq	%rsi, 1400(%rsp)        # 8-byte Spill
	movq	%rcx, %rsi
	movq	2920(%rsp), %r10        # 8-byte Reload
	movq	%rdx, 1392(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1392(%rsp), %r11        # 8-byte Reload
	movq	%rcx, 1384(%rsp)        # 8-byte Spill
	movq	%r11, %rcx
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str2272, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	2808(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 300 0                 # kiss_fft.c:300:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str149419, %ebx
	movl	%ebx, %ecx
	movl	$300, %ebx              # imm = 0x12C
	movl	%ebx, %edi
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %rdx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str123393, %r9d
	movl	%r9d, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2912(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str6276, %ebx
	movl	%ebx, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_ptr
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	2800(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, (%rax)
	.loc	2 303 0                 # kiss_fft.c:303:0
	movq	%rsp, %rdx
	movl	$1, (%rdx)
	movl	$.L.str150420, %ebx
	movl	%ebx, %ecx
	movl	$303, %ebx              # imm = 0x12F
	movl	%ebx, %edi
	movl	$3, %ebx
	movl	%ebx, %edx
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	%rdx, 1368(%rsp)        # 8-byte Spill
	movq	%r8, %rdx
	movq	1368(%rsp), %r8         # 8-byte Reload
	movl	1432(%rsp), %r9d        # 4-byte Reload
	callq	trace_logger_log0
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str151421, %r9d
	movl	%r9d, %r8d
	movl	$10, %r9d
	movl	%r9d, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str3273, %ebx
	movl	%ebx, %eax
	movl	$9, %ebx
	movl	%ebx, %edi
	movl	$32, %ebx
	movl	%ebx, %ecx
	movl	$5, %ebx
	movl	%ebx, %edx
	movq	%rcx, %rsi
	movq	%rdx, 1360(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1352(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	%rax, %r8
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str152422, %ebx
	movl	%ebx, %r8d
	movl	$8, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$7, %ebx
	movl	%ebx, %edi
	movl	$4, %ebx
	movl	%ebx, %eax
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str153423, %ebx
	movl	%ebx, %r8d
	movl	$6, %ebx
	movl	%ebx, %edi
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1368(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str154424, %ebx
	movl	%ebx, %r8d
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movq	1368(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1376(%rsp), %rdx        # 8-byte Reload
	movq	1400(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str155425, %ebx
	movl	%ebx, %r8d
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1400(%rsp), %rdx        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2788(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	%rsp, %rax
	movq	$.L.str4274, (%rax)
	movl	$.L.str8278, %ebp
	movl	%ebp, %r8d
	movq	1392(%rsp), %rdi        # 8-byte Reload
	movq	1352(%rsp), %rsi        # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_int
	movl	2788(%rsp), %ebx        # 4-byte Reload
	addl	$-2, %ebx
	movl	%ebx, %eax
	subl	$3, %ebx
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movl	%ebx, 1324(%rsp)        # 4-byte Spill
	ja	.LBB9_10
# BB#12:                                # %.loopexit
	movq	1328(%rsp), %rax        # 8-byte Reload
	movq	.LJTI9_0(,%rax,8), %rcx
	jmpq	*%rcx
.LBB9_6:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str125395, %r8
	movabsq	$0, %rcx
	leaq	.L.str4274, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str117387, %r11
	movabsq	$2, %rbx
	leaq	.L.str129399, %r14
	leaq	.L.str67337, %r15
	movabsq	$5, %r12
	leaq	kf_bfly2, %r13
	leaq	.L.str157427, %rbp
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	movabsq	$304, %rax              # imm = 0x130
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str154424, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str156426, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1272(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1268(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 304 0                 # kiss_fft.c:304:0
.Ltmp372:
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	movq	1304(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1224(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1296(%rsp), %rax        # 8-byte Reload
	movl	%esi, 1220(%rsp)        # 4-byte Spill
	movq	%rax, %rsi
	movq	1288(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1208(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	1232(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1192(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1268(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1184(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 1176(%rsp)        # 8-byte Spill
	movq	%r13, 1168(%rsp)        # 8-byte Spill
	movq	%r14, 1160(%rsp)        # 8-byte Spill
	movq	%r15, 1152(%rsp)        # 8-byte Spill
	movq	%r12, 1144(%rsp)        # 8-byte Spill
	movq	%rbx, 1136(%rsp)        # 8-byte Spill
	movq	%r10, 1128(%rsp)        # 8-byte Spill
	movq	%r11, 1120(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1248(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1112(%rsp)        # 8-byte Spill
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rdi        # 8-byte Reload
	movq	1296(%rsp), %rsi        # 8-byte Reload
	movq	1288(%rsp), %rdx        # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movl	1268(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1144(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1168(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	1112(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1136(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1184(%rsp), %rdi        # 8-byte Reload
	movq	1128(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2772(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	1224(%rsp), %rdi        # 8-byte Reload
	movq	1272(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movq	1200(%rsp), %r9         # 8-byte Reload
	movq	1208(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1112(%rsp), %rdi        # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movl	2772(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly2
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str159429, %r8
	leaq	.L.str4274, %rdi
	movabsq	$304, %r9               # imm = 0x130
	leaq	.L.str119389, %r10
	leaq	.L.str154424, %r11
	leaq	.L.str158428, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 1104(%rsp)        # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 1096(%rsp)        # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 1088(%rsp)        # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 1080(%rsp)         # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 1076(%rsp)        # 4-byte Spill
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1096(%rsp), %rsi        # 8-byte Reload
	movq	1096(%rsp), %rdx        # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1080(%rsp), %r8         # 8-byte Reload
	movq	1096(%rsp), %r9         # 8-byte Reload
	movq	1104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_7:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str72342, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %r8
	movabsq	$3, %r9
	leaq	.L.str117387, %r10
	movabsq	$2, %r11
	leaq	.L.str129399, %rbx
	leaq	.L.str71341, %r14
	movabsq	$5, %r15
	leaq	kf_bfly3, %r12
	leaq	.L.str161431, %r13
	movabsq	$305, %rbp              # imm = 0x131
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str153423, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str160430, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 1032(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1028(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 305 0                 # kiss_fft.c:305:0
	movq	%rdi, 968(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movq	1056(%rsp), %rax        # 8-byte Reload
	movl	%esi, 956(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	1048(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	960(%rsp), %rax         # 8-byte Reload
	movq	%r8, 928(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1028(%rsp), %eax        # 4-byte Reload
	movq	%r9, 920(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 912(%rsp)         # 8-byte Spill
	movq	%r15, 904(%rsp)         # 8-byte Spill
	movq	%r12, 896(%rsp)         # 8-byte Spill
	movq	%r13, 888(%rsp)         # 8-byte Spill
	movq	%r14, 880(%rsp)         # 8-byte Spill
	movq	%rbx, 872(%rsp)         # 8-byte Spill
	movq	%r10, 864(%rsp)         # 8-byte Spill
	movq	%r11, 856(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 848(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2772(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1000(%rsp), %rsi        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	1008(%rsp), %rdi        # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	912(%rsp), %rdi         # 8-byte Reload
	movq	1056(%rsp), %rsi        # 8-byte Reload
	movq	1048(%rsp), %rdx        # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	1028(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1064(%rsp), %rsi        # 8-byte Reload
	movq	840(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	1032(%rsp), %r9         # 8-byte Reload
	movq	928(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly3
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str159429, %r8
	leaq	.L.str4274, %rsi
	movabsq	$305, %rdi              # imm = 0x131
	leaq	.L.str119389, %r9
	leaq	.L.str153423, %r10
	leaq	.L.str162432, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 832(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 824(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 808(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 804(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	816(%rsp), %rdi         # 8-byte Reload
	movq	824(%rsp), %rsi         # 8-byte Reload
	movq	824(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	824(%rsp), %r9          # 8-byte Reload
	movq	832(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_8:
	movabsq	$4, %rdi
	movabsq	$64, %rax
	movabsq	$1, %rcx
	leaq	.L.str164434, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %r8
	movabsq	$3, %r9
	leaq	.L.str117387, %r10
	movabsq	$2, %r11
	leaq	.L.str129399, %rbx
	leaq	.L.str163433, %r14
	movabsq	$5, %r15
	leaq	kf_bfly4, %r12
	leaq	.L.str166436, %r13
	movabsq	$306, %rbp              # imm = 0x132
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str152422, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	leaq	.L.str165435, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 760(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 756(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 736(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 306 0                 # kiss_fft.c:306:0
	movq	%rdi, 696(%rsp)         # 8-byte Spill
	movq	%rbp, %rdi
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movq	784(%rsp), %rax         # 8-byte Reload
	movl	%esi, 684(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	776(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 664(%rsp)         # 8-byte Spill
	movq	%r14, %rcx
	movq	688(%rsp), %rax         # 8-byte Reload
	movq	%r8, 656(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	756(%rsp), %eax         # 4-byte Reload
	movq	%r9, 648(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 640(%rsp)         # 8-byte Spill
	movq	%r15, 632(%rsp)         # 8-byte Spill
	movq	%r12, 624(%rsp)         # 8-byte Spill
	movq	%r13, 616(%rsp)         # 8-byte Spill
	movq	%r14, 608(%rsp)         # 8-byte Spill
	movq	%rbx, 600(%rsp)         # 8-byte Spill
	movq	%r10, 592(%rsp)         # 8-byte Spill
	movq	%r11, 584(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	704(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 576(%rsp)         # 8-byte Spill
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2772(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2772(%rsp), %eax        # 4-byte Reload
	movslq	%eax, %rcx
	movq	736(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	640(%rsp), %rdi         # 8-byte Reload
	movq	784(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	768(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movl	756(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	632(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	616(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	584(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	600(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	656(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	576(%rsp), %rdi         # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	callq	kf_bfly4
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str159429, %r8
	leaq	.L.str4274, %rsi
	movabsq	$306, %rdi              # imm = 0x132
	leaq	.L.str119389, %r9
	leaq	.L.str152422, %r10
	leaq	.L.str167437, %r11
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rsi, 560(%rsp)         # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	%rcx, 544(%rsp)         # 8-byte Spill
	movq	%r11, %rcx
	movq	%r8, 536(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 532(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	544(%rsp), %rdi         # 8-byte Reload
	movq	552(%rsp), %rsi         # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	552(%rsp), %r9          # 8-byte Reload
	movq	560(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_9:
	movabsq	$4, %rdi
	movabsq	$32, %rsi
	movabsq	$1, %rax
	leaq	.L.str125395, %r8
	movabsq	$0, %rcx
	leaq	.L.str4274, %rdx
	movabsq	$3, %r9
	movabsq	$64, %r10
	leaq	.L.str117387, %r11
	movabsq	$2, %rbx
	leaq	.L.str129399, %r14
	leaq	.L.str168438, %r15
	movabsq	$5, %r12
	leaq	kf_bfly5, %r13
	leaq	.L.str170440, %rbp
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movabsq	$307, %rax              # imm = 0x133
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str151421, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str169439, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 480(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 476(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 464(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 307 0                 # kiss_fft.c:307:0
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movq	512(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 432(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	504(%rsp), %rax         # 8-byte Reload
	movl	%esi, 428(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	496(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 416(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 408(%rsp)         # 8-byte Spill
	movq	%r15, %rcx
	movq	440(%rsp), %rax         # 8-byte Reload
	movq	%r8, 400(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	476(%rsp), %eax         # 4-byte Reload
	movq	%r9, 392(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 384(%rsp)         # 8-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r14, 368(%rsp)         # 8-byte Spill
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movq	%r12, 352(%rsp)         # 8-byte Spill
	movq	%rbx, 344(%rsp)         # 8-byte Spill
	movq	%r10, 336(%rsp)         # 8-byte Spill
	movq	%r11, 328(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	456(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 320(%rsp)         # 8-byte Spill
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	464(%rsp), %r8          # 8-byte Reload
	movl	476(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	352(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	520(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	360(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	368(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	392(%rsp), %rdi         # 8-byte Reload
	movq	336(%rsp), %rsi         # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2772(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	432(%rsp), %rdi         # 8-byte Reload
	movq	480(%rsp), %rsi         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	400(%rsp), %r8          # 8-byte Reload
	movq	408(%rsp), %r9          # 8-byte Reload
	movq	416(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movl	2772(%rsp), %ecx        # 4-byte Reload
	callq	kf_bfly5
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str159429, %r8
	leaq	.L.str4274, %rdi
	movabsq	$307, %r9               # imm = 0x133
	leaq	.L.str119389, %r10
	leaq	.L.str151421, %r11
	leaq	.L.str171441, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 312(%rsp)         # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 304(%rsp)         # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 288(%rsp)          # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 284(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	296(%rsp), %rdi         # 8-byte Reload
	movq	304(%rsp), %rsi         # 8-byte Reload
	movq	304(%rsp), %rdx         # 8-byte Reload
	movq	296(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	304(%rsp), %r9          # 8-byte Reload
	movq	312(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	jmp	.LBB9_11
.LBB9_10:
	movabsq	$5, %rdi
	movabsq	$32, %rax
	movabsq	$1, %rcx
	leaq	.L.str8278, %r8
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$4, %r9
	leaq	.L.str125395, %r10
	movabsq	$3, %r11
	movabsq	$64, %rbx
	leaq	.L.str117387, %r14
	movabsq	$2, %r15
	leaq	.L.str129399, %r12
	leaq	.L.str172442, %r13
	movabsq	$6, %rbp
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	kf_bfly_generic, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str174444, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$308, %rax              # imm = 0x134
	movq	%rax, 248(%rsp)         # 8-byte Spill
	leaq	.L.str119389, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str155425, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	leaq	.L.str173443, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	movabsq	$49, %rax
	movq	%rsi, 216(%rsp)         # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 212(%rsp)         # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 200(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 192(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	.loc	2 308 0                 # kiss_fft.c:308:0
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	248(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	240(%rsp), %rax         # 8-byte Reload
	movl	%esi, 164(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 152(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%r13, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 136(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	212(%rsp), %eax         # 4-byte Reload
	movq	%r9, 128(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%rbp, 120(%rsp)         # 8-byte Spill
	movq	%r15, 112(%rsp)         # 8-byte Spill
	movq	%r14, 104(%rsp)         # 8-byte Spill
	movq	%r12, 96(%rsp)          # 8-byte Spill
	movq	%r13, 88(%rsp)          # 8-byte Spill
	movq	%rbx, 80(%rsp)          # 8-byte Spill
	movq	%r10, 72(%rsp)          # 8-byte Spill
	movq	%r11, 64(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
	movq	192(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	232(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	212(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	120(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	144(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	88(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	112(%rsp), %rdi         # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	96(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	80(%rsp), %rsi          # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movl	2772(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	72(%rsp), %r8           # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	2788(%rsp), %eax        # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	168(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movq	152(%rsp), %r9          # 8-byte Reload
	movq	216(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	56(%rsp), %rdi          # 8-byte Reload
	movq	2904(%rsp), %rsi        # 8-byte Reload
	movq	2880(%rsp), %rdx        # 8-byte Reload
	movl	2772(%rsp), %ecx        # 4-byte Reload
	movl	2788(%rsp), %r8d        # 4-byte Reload
	callq	kf_bfly_generic
	movabsq	$1, %rdx
	movabsq	$0, %rsi
	leaq	.L.str159429, %r8
	leaq	.L.str4274, %rdi
	movabsq	$308, %r9               # imm = 0x134
	leaq	.L.str119389, %r10
	leaq	.L.str155425, %r11
	leaq	.L.str175445, %rcx
	movabsq	$2, %rbx
	movl	$0, %eax
	movl	$1, %ebp
	movq	%rdi, 48(%rsp)          # 8-byte Spill
	movq	%r9, %rdi
	movq	%rsi, 40(%rsp)          # 8-byte Spill
	movq	%r10, %rsi
	movq	%rdx, 32(%rsp)          # 8-byte Spill
	movq	%r11, %rdx
	movq	%r8, 24(%rsp)           # 8-byte Spill
	movq	%rbx, %r8
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%ebp, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	movq	40(%rsp), %rdx          # 8-byte Reload
	movq	32(%rsp), %rcx          # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movq	48(%rsp), %r10          # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp373:
.LBB9_11:
	movabsq	$310, %rdi              # imm = 0x136
	leaq	.L.str119389, %rsi
	leaq	.L.str159429, %rdx
	leaq	.L.str176446, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 310 0                 # kiss_fft.c:310:0
	movl	$1, (%rsp)
	movl	%eax, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3208, %rsp             # imm = 0xC88
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp374:
.Ltmp375:
	.size	kf_work, .Ltmp375-kf_work
.Lfunc_end9:
	.cfi_endproc
	.section	.rodata,"a",@progbits
	.align	8
.LJTI9_0:
	.quad	.LBB9_6
	.quad	.LBB9_7
	.quad	.LBB9_8
	.quad	.LBB9_9

	.text
	.align	16, 0x90
	.type	kf_bfly_generic,@function
kf_bfly_generic:                        # @kf_bfly_generic
	.cfi_startproc
.Lfunc_begin10:
	.loc	2 211 0                 # kiss_fft.c:211:0
# BB#0:
	pushq	%rbp
.Ltmp383:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp384:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp385:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp386:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp387:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp388:
	.cfi_def_cfa_offset 56
	subq	$3512, %rsp             # imm = 0xDB8
.Ltmp389:
	.cfi_def_cfa_offset 3568
.Ltmp390:
	.cfi_offset %rbx, -56
.Ltmp391:
	.cfi_offset %r12, -48
.Ltmp392:
	.cfi_offset %r13, -40
.Ltmp393:
	.cfi_offset %r14, -32
.Ltmp394:
	.cfi_offset %r15, -24
.Ltmp395:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$64, %r9
	leaq	.L.str8278, %r10
	movabsq	$0, %r11
	leaq	.L.str4274, %rbx
	movabsq	$2, %r14
	leaq	malloc, %r15
	leaq	.L.str15285, %r12
	movabsq	$217, %r13
	leaq	.L.str174444, %rbp
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	movabsq	$49, %rax
	movl	%ecx, 3484(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3480(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 3416(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$215, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3360(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3352(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 3344(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 3336(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	.loc	2 205 0 prologue_end    # kiss_fft.c:205:0
.Ltmp396:
	movq	%rax, 3328(%rsp)        # 8-byte Spill
	movq	3352(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3320(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 3312(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	3320(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3304(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3504(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3300(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3328(%rsp), %rax        # 8-byte Reload
	movl	%r8d, 3296(%rsp)        # 4-byte Spill
	movq	%rax, %r8
	movq	%r9, 3288(%rsp)         # 8-byte Spill
	movq	%r11, %r9
	movq	%rbx, (%rsp)
	movq	%r13, 3280(%rsp)        # 8-byte Spill
	movq	%r14, 3272(%rsp)        # 8-byte Spill
	movq	%r15, 3264(%rsp)        # 8-byte Spill
	movq	%r12, 3256(%rsp)        # 8-byte Spill
	movq	%rbp, 3248(%rsp)        # 8-byte Spill
	movq	%rbx, 3240(%rsp)        # 8-byte Spill
	movq	%r10, 3232(%rsp)        # 8-byte Spill
	movq	%r11, 3224(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3352(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3336(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3352(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3484(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3352(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3344(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3352(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly_generic:Fout <- [RSP+3320]
	#DEBUG_VALUE: kf_bfly_generic:fstride <- [RSP+3312]
	#DEBUG_VALUE: kf_bfly_generic:st <- [RSP+3304]
	#DEBUG_VALUE: kf_bfly_generic:m <- [RSP+3484]
	#DEBUG_VALUE: kf_bfly_generic:p <- [RSP+3296]
	.loc	2 215 0                 # kiss_fft.c:215:0
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3360(%rsp), %r8         # 8-byte Reload
	movl	3480(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3448(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3224(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3272(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3224(%rsp), %rdx        # 8-byte Reload
	movq	3224(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3368(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3384(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3376(%rsp), %r8         # 8-byte Reload
	movl	3480(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3304(%rsp), %rax        # 8-byte Reload
	movl	(%rax), %esi
	movl	%esi, %edi
	movl	%edi, %edx
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movl	%esi, 3220(%rsp)        # 4-byte Spill
	movq	%rcx, %rsi
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3400(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp397:
	#DEBUG_VALUE: kf_bfly_generic:Norig <- [RSP+3220]
	.loc	2 217 0                 # kiss_fft.c:217:0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	3456(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movl	3480(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3296(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3424(%rsp), %rsi        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3416(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3208(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	3232(%rsp), %rcx        # 8-byte Reload
	movq	3432(%rsp), %r8         # 8-byte Reload
	movl	3480(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3272(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3448(%rsp), %rdx        # 8-byte Reload
	movq	3224(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3208(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3208(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3464(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3248(%rsp), %rsi        # 8-byte Reload
	movq	3496(%rsp), %rdx        # 8-byte Reload
	movq	3488(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movl	3480(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3272(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3264(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3256(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3288(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rdx        # 8-byte Reload
	movq	3504(%rsp), %rcx        # 8-byte Reload
	movq	3232(%rsp), %r8         # 8-byte Reload
	movq	3224(%rsp), %r9         # 8-byte Reload
	movq	3240(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3200(%rsp), %rdi        # 8-byte Reload
	callq	malloc
.Ltmp398:
	movabsq	$1, %rcx
	leaq	.L.str14284, %rdx
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r8
	leaq	.L.str399, %r9
	movabsq	$3, %r10
	leaq	.L.str398, %r11
	movabsq	$219, %rbx
	leaq	.L.str174444, %r14
	leaq	.L.str1271, %r15
	leaq	.L.str121391, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3176(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 3160(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	movabsq	$217, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movq	3184(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3104(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3144(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3096(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3192(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3088(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	%rcx, 3080(%rsp)        # 8-byte Spill
	movq	3128(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3072(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	3096(%rsp), %rax        # 8-byte Reload
	movq	%r9, 3064(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	3104(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movq	%r15, 3056(%rsp)        # 8-byte Spill
	movq	%r12, 3048(%rsp)        # 8-byte Spill
	movl	%ebp, 3044(%rsp)        # 4-byte Spill
	movl	%r13d, 3040(%rsp)       # 4-byte Spill
	movq	%r14, 3032(%rsp)        # 8-byte Spill
	movq	%rbx, 3024(%rsp)        # 8-byte Spill
	movq	%r10, 3016(%rsp)        # 8-byte Spill
	movq	%r11, 3008(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3120(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3136(%rsp), %rcx        # 8-byte Reload
	movq	3112(%rsp), %r8         # 8-byte Reload
	movl	3044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3144(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3192(%rsp), %rax        # 8-byte Reload
	movq	3184(%rsp), %rdi        # 8-byte Reload
	movq	3144(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp399:
	#DEBUG_VALUE: kf_bfly_generic:scratch <- [RSP+3000]
	#DEBUG_VALUE: kf_bfly_generic:u <- 0
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3152(%rsp), %r8         # 8-byte Reload
	movl	3044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3160(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3484(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3176(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3168(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3484(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	3184(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2999(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3024(%rsp), %rdi        # 8-byte Reload
	movq	3032(%rsp), %rsi        # 8-byte Reload
	movq	3056(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3072(%rsp), %r8         # 8-byte Reload
	movl	3044(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3016(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3072(%rsp), %rdi        # 8-byte Reload
	movq	3096(%rsp), %rsi        # 8-byte Reload
	movq	3096(%rsp), %rdx        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2999(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	3080(%rsp), %rsi        # 8-byte Reload
	movq	3080(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3096(%rsp), %r9         # 8-byte Reload
	movq	3104(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2999(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_1
	jmp	.LBB10_11
.Ltmp400:
.LBB10_1:                               # %.preheader.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str401, %r8
	leaq	.L.str4274, %rdx
	movabsq	$219, %rdi
	leaq	.L.str174444, %rsi
	leaq	.L.str398, %r9
	leaq	.L.str400, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str25295, %r12
	movabsq	$32, %r13
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 2944(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 2936(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2928(%rsp)        # 8-byte Spill
	movabsq	$231, %rax
	movq	%rax, 2920(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2912(%rsp)        # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 2904(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 2896(%rsp)        # 8-byte Spill
	movabsq	$230, %rax
	movq	%rax, 2888(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2880(%rsp)        # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 2872(%rsp)        # 8-byte Spill
	movabsq	$228, %rax
	movq	%rax, 2864(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 2856(%rsp)        # 8-byte Spill
	movabsq	$221, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp401:
	movq	%rdi, 2848(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2840(%rsp)        # 8-byte Spill
	movq	%rdx, 2832(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2856(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2824(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2912(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2816(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2808(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r13, 2800(%rsp)        # 8-byte Spill
	movl	%ebp, 2796(%rsp)        # 4-byte Spill
	movq	%r14, 2784(%rsp)        # 8-byte Spill
	movq	%r12, 2776(%rsp)        # 8-byte Spill
	movq	%r15, 2768(%rsp)        # 8-byte Spill
	movl	%ebx, 2764(%rsp)        # 4-byte Spill
	movq	%r10, 2752(%rsp)        # 8-byte Spill
	movq	%r11, 2744(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
.Ltmp402:
	.loc	2 228 0                 # kiss_fft.c:228:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2856(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2743(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2864(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2872(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	cmpl	$0, %ebx
	setg	%al
	.loc	2 230 0                 # kiss_fft.c:230:0
.Ltmp403:
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2742(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2888(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2904(%rsp), %rcx        # 8-byte Reload
	movq	2880(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2896(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3192(%rsp), %rcx        # 8-byte Reload
	.loc	2 231 0                 # kiss_fft.c:231:0
.Ltmp404:
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2728(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2904(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2944(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rdx        # 8-byte Reload
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	2928(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2936(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3296(%rsp), %ebx        # 4-byte Reload
	cmpl	$1, %ebx
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2824(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2944(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2727(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2968(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2952(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3484(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3484(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2712(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2952(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2968(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rcx        # 8-byte Reload
	movq	2960(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3484(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2800(%rsp), %rsi        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	3484(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rcx
.Ltmp405:
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2768(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2824(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2704(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2776(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2848(%rsp), %rdi        # 8-byte Reload
	movq	2840(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2744(%rsp), %r8         # 8-byte Reload
	movl	2764(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2824(%rsp), %rdi        # 8-byte Reload
	movq	2984(%rsp), %rsi        # 8-byte Reload
	movq	2984(%rsp), %rdx        # 8-byte Reload
	movq	2824(%rsp), %rcx        # 8-byte Reload
	movq	2816(%rsp), %r8         # 8-byte Reload
	movq	2984(%rsp), %r9         # 8-byte Reload
	movq	2832(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2984(%rsp), %rcx        # 8-byte Reload
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
.LBB10_2:                               # %.preheader
                                        # =>This Loop Header: Depth=1
                                        #     Child Loop BB10_3 Depth 2
                                        #     Child Loop BB10_6 Depth 2
                                        #       Child Loop BB10_8 Depth 3
	movq	2696(%rsp), %rax        # 8-byte Reload
	movabsq	$0, %rcx
	movabsq	$1, %rdx
	leaq	.L.str16286, %r8
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str187457, %r9
	movabsq	$3, %r10
	leaq	.L.str94364, %r11
	movabsq	$221, %rbx
	leaq	.L.str174444, %r14
	leaq	.L.str401, %r15
	leaq	.L.str405, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str398, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str404, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 221 0                 # kiss_fft.c:221:0
.Ltmp406:
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	movq	2624(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2608(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2600(%rsp)        # 8-byte Spill
	movq	%r14, %rsi
	movq	%rdx, 2592(%rsp)        # 8-byte Spill
	movq	%r15, %rdx
	movq	2664(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2584(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2616(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2576(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2568(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2560(%rsp)        # 8-byte Spill
	movq	%r12, 2552(%rsp)        # 8-byte Spill
	movq	%r14, 2544(%rsp)        # 8-byte Spill
	movl	%ebp, 2540(%rsp)        # 4-byte Spill
	movl	%r13d, 2536(%rsp)       # 4-byte Spill
	movq	%rbx, 2528(%rsp)        # 8-byte Spill
	movq	%r10, 2520(%rsp)        # 8-byte Spill
	movq	%r11, 2512(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2608(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2592(%rsp), %r9         # 8-byte Reload
	movq	2632(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2592(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	2592(%rsp), %r9         # 8-byte Reload
	movq	2656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2680(%rsp), %rdi        # 8-byte Reload
	movq	2672(%rsp), %rsi        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2656(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2544(%rsp), %rsi        # 8-byte Reload
	movq	2560(%rsp), %rdx        # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movl	2540(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2608(%rsp), %rdi        # 8-byte Reload
	movq	2584(%rsp), %rsi        # 8-byte Reload
	movq	2584(%rsp), %rdx        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2568(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2600(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2743(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2592(%rsp), %rdi        # 8-byte Reload
	movq	2592(%rsp), %rsi        # 8-byte Reload
	movq	2592(%rsp), %rcx        # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	2584(%rsp), %r9         # 8-byte Reload
	movq	2600(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2743(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2504(%rsp)        # 8-byte Spill
	movq	%rdx, 2496(%rsp)        # 8-byte Spill
	jne	.LBB10_3
	jmp	.LBB10_4
.LBB10_3:                               # %.lr.ph
                                        #   Parent Loop BB10_2 Depth=1
                                        # =>  This Inner Loop Header: Depth=2
	movq	2496(%rsp), %rax        # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str75345, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4274, %r8
	movabsq	$2, %r9
	leaq	.L.str94364, %r10
	movabsq	$3, %r11
	leaq	.L.str187457, %rbx
	movabsq	$221, %r14
	leaq	.L.str174444, %r15
	leaq	.L.str189459, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str74344, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	leaq	.L.str407, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str409, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str408, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str406, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	leaq	.L.str34304, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$222, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str98368, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str110380, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$44, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str401, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 222 0                 # kiss_fft.c:222:0
.Ltmp407:
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	movq	2248(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2232(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2224(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 2216(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	2384(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2208(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2240(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2200(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2192(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 2184(%rsp)        # 8-byte Spill
	movq	%r12, 2176(%rsp)        # 8-byte Spill
	movl	%ebp, 2172(%rsp)        # 4-byte Spill
	movl	%r13d, 2168(%rsp)       # 4-byte Spill
	movq	%r14, 2160(%rsp)        # 8-byte Spill
	movq	%rbx, 2152(%rsp)        # 8-byte Spill
	movq	%r10, 2144(%rsp)        # 8-byte Spill
	movq	%r11, 2136(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	2216(%rsp), %r9         # 8-byte Reload
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2216(%rsp), %r9         # 8-byte Reload
	movq	2144(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2144(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2248(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2240(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2264(%rsp), %r8         # 8-byte Reload
	movq	2216(%rsp), %r9         # 8-byte Reload
	movq	2256(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2216(%rsp), %r9         # 8-byte Reload
	movq	2144(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2144(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	3000(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2272(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2208(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3000(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2128(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2288(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2488(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3320(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2216(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2120(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2120(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2296(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2120(%rsp), %rax        # 8-byte Reload
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2304(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2128(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2312(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2128(%rsp), %rax        # 8-byte Reload
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2368(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2112(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2328(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3320(%rsp), %rax        # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	(%rax,%rcx,8), %rdx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 2096(%rsp)        # 8-byte Spill
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2352(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2104(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2360(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2368(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3000(%rsp), %rax        # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2096(%rsp), %rdx        # 8-byte Reload
	movq	%rdx, (%rax,%rcx,8)
.Ltmp408:
	.loc	2 221 0                 # kiss_fft.c:221:0
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2432(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2208(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2208(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2400(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2408(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2488(%rsp), %rax        # 8-byte Reload
	movq	2712(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	2424(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2440(%rsp), %rsi        # 8-byte Reload
	movq	2088(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2088(%rsp), %rax        # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2472(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2464(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2076(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2448(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3296(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2472(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2076(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2472(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2464(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2076(%rsp), %ebp        # 4-byte Reload
	movl	3296(%rsp), %r13d       # 4-byte Reload
	cmpl	%r13d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2480(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2075(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2160(%rsp), %rdi        # 8-byte Reload
	movq	2184(%rsp), %rsi        # 8-byte Reload
	movq	2144(%rsp), %rdx        # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	2192(%rsp), %r8         # 8-byte Reload
	movl	2172(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2136(%rsp), %rdi        # 8-byte Reload
	movq	2232(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2192(%rsp), %rdi        # 8-byte Reload
	movq	2232(%rsp), %rsi        # 8-byte Reload
	movq	2232(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2144(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2075(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	2216(%rsp), %rdi        # 8-byte Reload
	movq	2216(%rsp), %rsi        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2224(%rsp), %r8         # 8-byte Reload
	movq	2232(%rsp), %r9         # 8-byte Reload
	movq	2200(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2075(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %rdx        # 8-byte Reload
	movq	%rcx, 2504(%rsp)        # 8-byte Spill
	movq	%rdx, 2496(%rsp)        # 8-byte Spill
	jne	.LBB10_4
	jmp	.LBB10_3
.Ltmp409:
.LBB10_4:                               # %.loopexit
                                        #   in Loop: Header=BB10_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str104374, %r8
	movabsq	$0, %rcx
	leaq	.L.str4274, %rdx
	movabsq	$2, %rsi
	leaq	.L.str404, %rdi
	movabsq	$3, %r9
	leaq	.L.str410, %r10
	movabsq	$228, %r11
	leaq	.L.str174444, %rbx
	leaq	.L.str187457, %r14
	leaq	.L.str191461, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	.loc	2 228 0                 # kiss_fft.c:228:0
.Ltmp410:
	movq	%rdi, 2064(%rsp)        # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 2056(%rsp)        # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 2048(%rsp)        # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 2040(%rsp)        # 8-byte Spill
	movq	%r15, %rcx
	movq	2056(%rsp), %r11        # 8-byte Reload
	movq	%r8, 2032(%rsp)         # 8-byte Spill
	movq	%r11, %r8
	movq	%r9, 2024(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	movq	%r10, 2008(%rsp)        # 8-byte Spill
	movl	%r12d, 2004(%rsp)       # 4-byte Spill
	callq	trace_logger_log0
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	2040(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	2040(%rsp), %rsi        # 8-byte Reload
	movq	2040(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	2040(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2742(%rsp), %r13b       # 1-byte Reload
	andb	$1, %r13b
	movzbl	%r13b, %ebp
	movl	%ebp, %edx
	movq	2016(%rsp), %rdi        # 8-byte Reload
	movq	2016(%rsp), %rsi        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	2040(%rsp), %r9         # 8-byte Reload
	movq	2048(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movb	2742(%rsp), %r13b       # 1-byte Reload
	testb	$1, %r13b
	jne	.LBB10_5
	jmp	.LBB10_10
.LBB10_5:                               # %.lr.ph8
                                        #   in Loop: Header=BB10_2 Depth=1
	movl	$0, %eax
	movabsq	$1, %rcx
	movabsq	$0, %rdx
	leaq	.L.str412, %r8
	leaq	.L.str4274, %rsi
	movabsq	$228, %rdi
	leaq	.L.str174444, %r9
	leaq	.L.str410, %r10
	leaq	.L.str411, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str135405, %r12
	leaq	.L.str19289, %r13
	movq	%rcx, 1992(%rsp)        # 8-byte Spill
	movabsq	$230, %rcx
	movq	%rcx, 1984(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	.loc	2 230 0                 # kiss_fft.c:230:0
.Ltmp411:
	movq	%rcx, 1976(%rsp)        # 8-byte Spill
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1968(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1960(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1952(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	%r12, %rcx
	movq	%r8, 1944(%rsp)         # 8-byte Spill
	movq	1976(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1936(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1932(%rsp)        # 4-byte Spill
	movq	%r14, 1920(%rsp)        # 8-byte Spill
	movq	%r15, 1912(%rsp)        # 8-byte Spill
	movl	%ebp, 1908(%rsp)        # 4-byte Spill
	movq	%r12, 1896(%rsp)        # 8-byte Spill
	movq	%r13, 1888(%rsp)        # 8-byte Spill
	movq	%rbx, 1880(%rsp)        # 8-byte Spill
	movq	%r10, 1872(%rsp)        # 8-byte Spill
	movq	%r11, 1864(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	2728(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1888(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	(%rcx), %rdx
.Ltmp412:
	.loc	2 228 0                 # kiss_fft.c:228:0
	movq	1920(%rsp), %rdi        # 8-byte Reload
	movq	1912(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1856(%rsp)        # 8-byte Spill
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1896(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1968(%rsp), %rdi        # 8-byte Reload
	movq	1936(%rsp), %rsi        # 8-byte Reload
	movq	1872(%rsp), %rdx        # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	1880(%rsp), %r8         # 8-byte Reload
	movl	1932(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1992(%rsp), %rdi        # 8-byte Reload
	movq	1952(%rsp), %rsi        # 8-byte Reload
	movq	1952(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	1944(%rsp), %r8         # 8-byte Reload
	movq	1952(%rsp), %r9         # 8-byte Reload
	movq	1960(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rcx        # 8-byte Reload
	movl	1932(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	movl	%eax, 1844(%rsp)        # 4-byte Spill
.LBB10_6:                               #   Parent Loop BB10_2 Depth=1
                                        # =>  This Loop Header: Depth=2
                                        #       Child Loop BB10_8 Depth 3
	movl	1844(%rsp), %eax        # 4-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str105375, %r8
	movabsq	$0, %rsi
	leaq	.L.str4274, %rdi
	movabsq	$2, %r9
	leaq	.L.str415, %r10
	movabsq	$3, %r11
	leaq	.L.str419, %rbx
	movabsq	$231, %r14
	leaq	.L.str174444, %r15
	leaq	.L.str412, %r12
	leaq	.L.str418, %r13
	movl	$0, %ebp
	movl	%eax, 1840(%rsp)        # 4-byte Spill
	movl	$1, %eax
	movq	%rcx, 1832(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str135405, %rcx
	movq	%rcx, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str43313, %rcx
	movq	%rcx, 1808(%rsp)        # 8-byte Spill
	movabsq	$230, %rcx
	movq	%rcx, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str417, %rcx
	movq	%rcx, 1792(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1784(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rcx
	movq	%rcx, 1768(%rsp)        # 8-byte Spill
	movabsq	$44, %rcx
	movq	%rcx, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rcx
	movq	%rcx, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str413, %rcx
	movq	%rcx, 1744(%rsp)        # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 1736(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str416, %rcx
	movq	%rcx, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str410, %rcx
	movq	%rcx, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str229499, %rcx
	movq	%rcx, 1696(%rsp)        # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 1688(%rsp)        # 8-byte Spill
	movabsq	$48, %rcx
	movq	%rcx, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str402, %rcx
	movq	%rcx, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str414, %rcx
	.loc	2 229 0                 # kiss_fft.c:229:0
.Ltmp413:
	movq	%rcx, 1664(%rsp)        # 8-byte Spill
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	%rdi, 1656(%rsp)        # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 1648(%rsp)        # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 1640(%rsp)        # 8-byte Spill
	movq	%r12, %rdx
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 1632(%rsp)         # 8-byte Spill
	movq	1680(%rsp), %r8         # 8-byte Reload
	movq	%r9, 1624(%rsp)         # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 1620(%rsp)        # 4-byte Spill
	movq	%r15, 1608(%rsp)        # 8-byte Spill
	movq	%r12, 1600(%rsp)        # 8-byte Spill
	movq	%r14, 1592(%rsp)        # 8-byte Spill
	movq	%r13, 1584(%rsp)        # 8-byte Spill
	movl	%ebp, 1580(%rsp)        # 4-byte Spill
	movq	%rbx, 1568(%rsp)        # 8-byte Spill
	movq	%r10, 1560(%rsp)        # 8-byte Spill
	movq	%r11, 1552(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1680(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1560(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	1704(%rsp), %r8         # 8-byte Reload
	movq	1640(%rsp), %r9         # 8-byte Reload
	movq	1712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	1840(%rsp), %eax        # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1728(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1720(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1712(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp414:
	#DEBUG_VALUE: twidx <- 0
	.loc	2 230 0                 # kiss_fft.c:230:0
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	1736(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1744(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1752(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	3320(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1544(%rsp)        # 8-byte Spill
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1536(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1800(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1536(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1856(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rsi        # 8-byte Reload
	movq	%rsi, (%rcx,%rdx,8)
.Ltmp415:
	#DEBUG_VALUE: kf_bfly_generic:q <- 1
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1592(%rsp), %rdi        # 8-byte Reload
	movq	1608(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1624(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1552(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1624(%rsp), %rdi        # 8-byte Reload
	movq	1648(%rsp), %rsi        # 8-byte Reload
	movq	1648(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2727(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1640(%rsp), %rsi        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	1632(%rsp), %r8         # 8-byte Reload
	movq	1648(%rsp), %r9         # 8-byte Reload
	movq	1656(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2727(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB10_7
	jmp	.LBB10_9
.LBB10_7:                               # %.lr.ph5
                                        #   in Loop: Header=BB10_6 Depth=2
	movabsq	$1, %rax
	movl	$0, %ecx
	movabsq	$0, %rdx
	leaq	.L.str421, %r8
	leaq	.L.str4274, %rsi
	movabsq	$231, %rdi
	leaq	.L.str174444, %r9
	leaq	.L.str419, %r10
	leaq	.L.str420, %r11
	movabsq	$2, %rbx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str53323, %r12
	leaq	.L.str122392, %r13
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str413, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	movabsq	$235, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	movabsq	$232, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp416:
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1424(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 1416(%rsp)        # 8-byte Spill
	movq	%r9, %rsi
	movq	%rdx, 1408(%rsp)        # 8-byte Spill
	movq	%r10, %rdx
	movq	1456(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 1404(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	1432(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1392(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	1404(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1384(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r14, 1376(%rsp)        # 8-byte Spill
	movq	%r15, 1368(%rsp)        # 8-byte Spill
	movl	%ebp, 1364(%rsp)        # 4-byte Spill
	movq	%r12, 1352(%rsp)        # 8-byte Spill
	movq	%r13, 1344(%rsp)        # 8-byte Spill
	movq	%rbx, 1336(%rsp)        # 8-byte Spill
	movq	%r10, 1328(%rsp)        # 8-byte Spill
	movq	%r11, 1320(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	3312(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	.loc	2 235 0                 # kiss_fft.c:235:0
.Ltmp417:
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1528(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1312(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	1404(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1488(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	1404(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1512(%rsp), %rdi        # 8-byte Reload
	movq	1504(%rsp), %rsi        # 8-byte Reload
	movq	1528(%rsp), %rdx        # 8-byte Reload
	movq	1408(%rsp), %rcx        # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1336(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1832(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	3320(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
.Ltmp418:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	1368(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1304(%rsp)        # 8-byte Spill
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1424(%rsp), %rdi        # 8-byte Reload
	movq	1384(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movl	1404(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1408(%rsp), %rsi        # 8-byte Reload
	movq	1408(%rsp), %rdx        # 8-byte Reload
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	1408(%rsp), %r9         # 8-byte Reload
	movq	1416(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1528(%rsp), %rcx        # 8-byte Reload
	movl	1404(%rsp), %eax        # 4-byte Reload
	movq	%rcx, 1296(%rsp)        # 8-byte Spill
	movl	%eax, 1292(%rsp)        # 4-byte Spill
.LBB10_8:                               #   Parent Loop BB10_2 Depth=1
                                        #     Parent Loop BB10_6 Depth=2
                                        # =>    This Inner Loop Header: Depth=3
	movl	1292(%rsp), %eax        # 4-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movabsq	$1, %rdx
	leaq	.L.str429, %rsi
	movabsq	$0, %rdi
	leaq	.L.str4274, %r8
	movabsq	$2, %r9
	leaq	.L.str421, %r10
	movabsq	$3, %r11
	leaq	.L.str415, %rbx
	movabsq	$231, %r14
	leaq	.L.str174444, %r15
	leaq	.L.str430, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rcx, 1280(%rsp)        # 8-byte Spill
	movabsq	$19134, %rcx            # imm = 0x4ABE
	movq	%rcx, 1272(%rsp)        # 8-byte Spill
	movabsq	$32, %rcx
	movq	%rcx, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str428, %rcx
	movq	%rcx, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str397, %rcx
	movq	%rcx, 1248(%rsp)        # 8-byte Spill
	movabsq	$46, %rcx
	movq	%rcx, 1240(%rsp)        # 8-byte Spill
	movabsq	$64, %rcx
	movq	%rcx, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str423, %rcx
	movq	%rcx, 1224(%rsp)        # 8-byte Spill
	movabsq	$33, %rcx
	movq	%rcx, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str422, %rcx
	movq	%rcx, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rcx
	movq	%rcx, 1200(%rsp)        # 8-byte Spill
	movabsq	$8, %rcx
	movq	%rcx, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str228498, %rcx
	movq	%rcx, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str53323, %rcx
	movq	%rcx, 1176(%rsp)        # 8-byte Spill
	movabsq	$235, %rcx
	movq	%rcx, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str427, %rcx
	movq	%rcx, 1160(%rsp)        # 8-byte Spill
	movabsq	$28, %rcx
	movq	%rcx, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str227497, %rcx
	movq	%rcx, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str172442, %rcx
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	movabsq	$9, %rcx
	movq	%rcx, 1128(%rsp)        # 8-byte Spill
	movabsq	$27, %rcx
	movq	%rcx, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str225495, %rcx
	movq	%rcx, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str137407, %rcx
	movq	%rcx, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str426, %rcx
	movq	%rcx, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str224494, %rcx
	movq	%rcx, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str222492, %rcx
	movq	%rcx, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str223493, %rcx
	movq	%rcx, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str168438, %rcx
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movabsq	$234, %rcx
	movq	%rcx, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str67337, %rcx
	movq	%rcx, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str72342, %rcx
	movq	%rcx, 1040(%rsp)        # 8-byte Spill
	movabsq	$13, %rcx
	movq	%rcx, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str145415, %rcx
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str163433, %rcx
	movq	%rcx, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str69339, %rcx
	movq	%rcx, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str164434, %rcx
	movq	%rcx, 1000(%rsp)        # 8-byte Spill
	movabsq	$11, %rcx
	movq	%rcx, 992(%rsp)         # 8-byte Spill
	leaq	.L.str77347, %rcx
	movq	%rcx, 984(%rsp)         # 8-byte Spill
	leaq	.L.str117387, %rcx
	movq	%rcx, 976(%rsp)         # 8-byte Spill
	movabsq	$4, %rcx
	movq	%rcx, 968(%rsp)         # 8-byte Spill
	leaq	.L.str64334, %rcx
	movq	%rcx, 960(%rsp)         # 8-byte Spill
	movabsq	$5, %rcx
	movq	%rcx, 952(%rsp)         # 8-byte Spill
	movabsq	$29, %rcx
	movq	%rcx, 944(%rsp)         # 8-byte Spill
	leaq	.L.str71341, %rcx
	movq	%rcx, 936(%rsp)         # 8-byte Spill
	leaq	.L.str125395, %rcx
	movq	%rcx, 928(%rsp)         # 8-byte Spill
	leaq	.L.str66336, %rcx
	movq	%rcx, 920(%rsp)         # 8-byte Spill
	leaq	.L.str425, %rcx
	movq	%rcx, 912(%rsp)         # 8-byte Spill
	movabsq	$35, %rcx
	movq	%rcx, 904(%rsp)         # 8-byte Spill
	leaq	.L.str61331, %rcx
	movq	%rcx, 896(%rsp)         # 8-byte Spill
	leaq	.L.str57327, %rcx
	movq	%rcx, 888(%rsp)         # 8-byte Spill
	leaq	.L.str143413, %rcx
	movq	%rcx, 880(%rsp)         # 8-byte Spill
	movabsq	$233, %rcx
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movabsq	$10, %rcx
	movq	%rcx, 864(%rsp)         # 8-byte Spill
	leaq	.L.str58328, %rcx
	movq	%rcx, 856(%rsp)         # 8-byte Spill
	leaq	.L.str6276, %rcx
	movq	%rcx, 848(%rsp)         # 8-byte Spill
	movabsq	$50, %rcx
	movq	%rcx, 840(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rcx
	movq	%rcx, 832(%rsp)         # 8-byte Spill
	movabsq	$232, %rcx
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	leaq	.L.str55325, %rcx
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	leaq	.L.str47317, %rcx
	movq	%rcx, 808(%rsp)         # 8-byte Spill
	leaq	.L.str424, %rcx
	movq	%rcx, 800(%rsp)         # 8-byte Spill
	movabsq	$34, %rcx
	movq	%rcx, 792(%rsp)         # 8-byte Spill
	leaq	.L.str419, %rcx
	movq	%rcx, 784(%rsp)         # 8-byte Spill
	movabsq	$-1, %rcx
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movabsq	$48, %rcx
	.loc	2 232 0                 # kiss_fft.c:232:0
.Ltmp419:
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movq	776(%rsp), %rcx         # 8-byte Reload
	movq	%rdi, 760(%rsp)         # 8-byte Spill
	movq	%rcx, %rdi
	movq	%rsi, 752(%rsp)         # 8-byte Spill
	movq	%r15, %rsi
	movq	%rdx, 744(%rsp)         # 8-byte Spill
	movq	%r10, %rdx
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	%r8, 736(%rsp)          # 8-byte Spill
	movq	768(%rsp), %r8          # 8-byte Reload
	movq	%r9, 728(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movl	%eax, 724(%rsp)         # 4-byte Spill
	movq	%r15, 712(%rsp)         # 8-byte Spill
	movq	%r12, 704(%rsp)         # 8-byte Spill
	movl	%ebp, 700(%rsp)         # 4-byte Spill
	movl	%r13d, 696(%rsp)        # 4-byte Spill
	movq	%r14, 688(%rsp)         # 8-byte Spill
	movq	%rbx, 680(%rsp)         # 8-byte Spill
	movq	%r10, 672(%rsp)         # 8-byte Spill
	movq	%r11, 664(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	768(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	672(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	744(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	724(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	724(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	724(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %ecx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1312(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	1312(%rsp), %rdx        # 8-byte Reload
	addq	%rdx, %rcx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 648(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	648(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	832(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	648(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 644(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp420:
	#DEBUG_VALUE: twidx <- [RSP+644]
	.loc	2 233 0                 # kiss_fft.c:233:0
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3220(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	3220(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	setl	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 643(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3220(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	643(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	643(%rsp), %al          # 1-byte Reload
	testb	%al, %al
	movl	700(%rsp), %ebp         # 4-byte Reload
	movl	3220(%rsp), %r13d       # 4-byte Reload
	cmovel	%r13d, %ebp
	movl	%ebp, %eax
	movl	%eax, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 636(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	872(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	864(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	636(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	880(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	644(%rsp), %eax         # 4-byte Reload
	movl	636(%rsp), %ebp         # 4-byte Reload
	subl	%ebp, %eax
.Ltmp421:
	.loc	2 234 0                 # kiss_fft.c:234:0
	movl	%eax, %r13d
	movl	%r13d, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 632(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	3000(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	3000(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 624(%rsp)         # 8-byte Spill
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 620(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	632(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	632(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 608(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	664(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3304(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	608(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 600(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	600(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3304(%rsp), %rcx        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	vmovss	264(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 596(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	596(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	620(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	620(%rsp), %xmm0        # 4-byte Reload
	vmovss	596(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 592(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	936(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	3000(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1280(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	3000(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 584(%rsp)         # 8-byte Spill
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 580(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	984(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	952(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	664(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	3304(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3304(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	608(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	addq	$4, %rcx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3304(%rsp), %rcx        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	vmovss	268(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 564(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	564(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	580(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	580(%rsp), %xmm0        # 4-byte Reload
	vmovss	564(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 560(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	560(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	592(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	592(%rsp), %xmm0        # 4-byte Reload
	vmovss	560(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 556(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	564(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	620(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	620(%rsp), %xmm0        # 4-byte Reload
	vmovss	564(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 552(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	580(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	596(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	596(%rsp), %xmm0        # 4-byte Reload
	vmovss	580(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 548(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1056(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	552(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	548(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	548(%rsp), %xmm0        # 4-byte Reload
	vmovss	552(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp422:
	.loc	2 235 0                 # kiss_fft.c:235:0
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 544(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1544(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 540(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	556(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	540(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	540(%rsp), %xmm0        # 4-byte Reload
	vmovss	556(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 536(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1104(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	536(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1544(%rsp), %rcx        # 8-byte Reload
	vmovss	536(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 532(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	544(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	532(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	532(%rsp), %xmm0        # 4-byte Reload
	vmovss	544(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 528(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1168(%rsp), %rdi        # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1304(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	528(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	760(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1304(%rsp), %rcx        # 8-byte Reload
	vmovss	528(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx)
.Ltmp423:
	.loc	2 231 0                 # kiss_fft.c:231:0
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1192(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1200(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	1280(%rsp), %rdx        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1208(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1280(%rsp), %rcx        # 8-byte Reload
	addq	$1, %rcx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 520(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1216(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1232(%rsp), %rsi        # 8-byte Reload
	movq	520(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 516(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3296(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	516(%rsp), %eax         # 4-byte Reload
	movl	3296(%rsp), %ebp        # 4-byte Reload
	cmpl	%ebp, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 515(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	688(%rsp), %rdi         # 8-byte Reload
	movq	712(%rsp), %rsi         # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movl	700(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	664(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	680(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	744(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	760(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	515(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	520(%rsp), %rcx         # 8-byte Reload
	movl	632(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1296(%rsp)        # 8-byte Spill
	movl	%ebp, 1292(%rsp)        # 4-byte Spill
	jne	.LBB10_9
	jmp	.LBB10_8
.Ltmp424:
.LBB10_9:                               # %._crit_edge
                                        #   in Loop: Header=BB10_6 Depth=2
	movabsq	$1, %rax
	leaq	.L.str431, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str412, %r8
	movabsq	$3, %r9
	leaq	.L.str404, %r10
	movabsq	$228, %r11
	leaq	.L.str174444, %rbx
	leaq	.L.str415, %r14
	leaq	.L.str432, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str229499, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str397, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str414, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str413, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str25295, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	leaq	.L.str416, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	.loc	2 228 0                 # kiss_fft.c:228:0
	movq	%rdi, 416(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 408(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 400(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 392(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%r8, 376(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 368(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 360(%rsp)         # 8-byte Spill
	movl	%ebp, 356(%rsp)         # 4-byte Spill
	movl	%r12d, 352(%rsp)        # 4-byte Spill
	movq	%r13, 344(%rsp)         # 8-byte Spill
	movq	%r14, 336(%rsp)         # 8-byte Spill
	movq	%rbx, 328(%rsp)         # 8-byte Spill
	movq	%r10, 320(%rsp)         # 8-byte Spill
	movq	%r11, 312(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	400(%rsp), %rcx         # 8-byte Reload
	movq	392(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1840(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	1840(%rsp), %ebp        # 4-byte Reload
	addl	$1, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 308(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp425:
	#DEBUG_VALUE: kf_bfly_generic:q1 <- [RSP+308]
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	2704(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	1832(%rsp), %rdx        # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1832(%rsp), %rax        # 8-byte Reload
	movq	2704(%rsp), %rcx        # 8-byte Reload
	addq	%rcx, %rax
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	464(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 296(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3296(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	480(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	496(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	308(%rsp), %ebp         # 4-byte Reload
	movl	3296(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 295(%rsp)          # 1-byte Spill
	callq	trace_logger_log_int
	movq	312(%rsp), %rdi         # 8-byte Reload
	movq	328(%rsp), %rsi         # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movl	356(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	368(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	320(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	416(%rsp), %rdi         # 8-byte Reload
	movq	400(%rsp), %rsi         # 8-byte Reload
	movq	400(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	504(%rsp), %rdi         # 8-byte Reload
	movq	504(%rsp), %rsi         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movq	400(%rsp), %r9          # 8-byte Reload
	movq	408(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	295(%rsp), %al          # 1-byte Reload
	testb	$1, %al
	movq	296(%rsp), %rcx         # 8-byte Reload
	movl	308(%rsp), %ebp         # 4-byte Reload
	movq	%rcx, 1848(%rsp)        # 8-byte Spill
	movl	%ebp, 1844(%rsp)        # 4-byte Spill
	jne	.LBB10_10
	jmp	.LBB10_6
.Ltmp426:
.LBB10_10:                              # %._crit_edge9
                                        #   in Loop: Header=BB10_2 Depth=1
	movabsq	$1, %rax
	leaq	.L.str434, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str401, %r8
	movabsq	$3, %r9
	leaq	.L.str399, %r10
	movabsq	$219, %r11
	leaq	.L.str174444, %rbx
	leaq	.L.str404, %r14
	leaq	.L.str435, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	leaq	.L.str433, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	leaq	.L.str403, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str402, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	.loc	2 219 0                 # kiss_fft.c:219:0
	movq	%rdi, 200(%rsp)         # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 192(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 184(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	%rax, 176(%rsp)         # 8-byte Spill
	movq	232(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 168(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%r8, 160(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 152(%rsp)          # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%r15, 144(%rsp)         # 8-byte Spill
	movl	%ebp, 140(%rsp)         # 4-byte Spill
	movl	%r12d, 136(%rsp)        # 4-byte Spill
	movq	%r13, 128(%rsp)         # 8-byte Spill
	movq	%r14, 120(%rsp)         # 8-byte Spill
	movq	%rbx, 112(%rsp)         # 8-byte Spill
	movq	%r10, 104(%rsp)         # 8-byte Spill
	movq	%r11, 96(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rdx         # 8-byte Reload
	movq	184(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	2688(%rsp), %rdx        # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2688(%rsp), %rax        # 8-byte Reload
	addq	$1, %rax
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 88(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	240(%rsp), %rsi         # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	88(%rsp), %rax          # 8-byte Reload
	movl	%eax, %ebp
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 84(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	168(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3484(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	%ebp, %r12d
	movl	%r12d, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	272(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	84(%rsp), %ebp          # 4-byte Reload
	movl	3484(%rsp), %r12d       # 4-byte Reload
	cmpl	%r12d, %ebp
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	128(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 83(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	144(%rsp), %rcx         # 8-byte Reload
	movq	200(%rsp), %r8          # 8-byte Reload
	movl	140(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	152(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	184(%rsp), %rsi         # 8-byte Reload
	movq	184(%rsp), %rdx         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	280(%rsp), %rdi         # 8-byte Reload
	movq	280(%rsp), %rsi         # 8-byte Reload
	movq	280(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	184(%rsp), %r9          # 8-byte Reload
	movq	192(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	83(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	88(%rsp), %rcx          # 8-byte Reload
	movq	%rcx, 2696(%rsp)        # 8-byte Spill
	jne	.LBB10_11
	jmp	.LBB10_2
.Ltmp427:
.LBB10_11:                              # %._crit_edge11
	movabsq	$1, %rax
	movabsq	$64, %rcx
	leaq	.L.str9279, %r8
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	free, %r9
	leaq	.L.str437, %r10
	movabsq	$240, %r11
	leaq	.L.str174444, %rbx
	leaq	.L.str399, %r14
	leaq	.L.str436, %r15
	movabsq	$49, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	.loc	2 240 0                 # kiss_fft.c:240:0
	movq	%rdi, 72(%rsp)          # 8-byte Spill
	movq	%r11, %rdi
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 56(%rsp)          # 8-byte Spill
	movq	%r14, %rdx
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r15, %rcx
	movq	%r8, 40(%rsp)           # 8-byte Spill
	movq	%r12, %r8
	movq	%r9, 32(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	movq	%r10, 16(%rsp)          # 8-byte Spill
	movl	%r13d, 12(%rsp)         # 4-byte Spill
	callq	trace_logger_log0
	movq	72(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	32(%rsp), %rdx          # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	16(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	56(%rsp), %r9           # 8-byte Reload
	movq	64(%rsp), %rax          # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3192(%rsp), %rdi        # 8-byte Reload
	callq	free
	movabsq	$241, %rdi
	leaq	.L.str174444, %rsi
	leaq	.L.str399, %rdx
	leaq	.L.str438, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %ebp
	.loc	2 241 0                 # kiss_fft.c:241:0
	movl	$1, (%rsp)
	movl	%ebp, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$3512, %rsp             # imm = 0xDB8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp428:
.Ltmp429:
	.size	kf_bfly_generic, .Ltmp429-kf_bfly_generic
.Lfunc_end10:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI11_0:
	.quad	-9223372036854775808    # double -0
	.text
	.align	16, 0x90
	.type	kf_bfly5,@function
kf_bfly5:                               # @kf_bfly5
	.cfi_startproc
.Lfunc_begin11:
	.loc	2 142 0                 # kiss_fft.c:142:0
# BB#0:
	pushq	%rbp
.Ltmp437:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp438:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp439:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp440:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp441:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp442:
	.cfi_def_cfa_offset 56
	subq	$3640, %rsp             # imm = 0xE38
.Ltmp443:
	.cfi_def_cfa_offset 3696
.Ltmp444:
	.cfi_offset %rbx, -56
.Ltmp445:
	.cfi_offset %r12, -48
.Ltmp446:
	.cfi_offset %r13, -40
.Ltmp447:
	.cfi_offset %r14, -32
.Ltmp448:
	.cfi_offset %r15, -24
.Ltmp449:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	leaq	.L.str25295, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %r10
	movabsq	$2, %r11
	leaq	.L.str46316, %rbx
	movabsq	$3, %r14
	leaq	.L.str45315, %r15
	movabsq	$161, %r12
	leaq	.L.str170440, %r13
	leaq	.L.str1271, %rbp
	movq	%rax, 3632(%rsp)        # 8-byte Spill
	leaq	.L.str126396, %rax
	movl	%ecx, 3628(%rsp)        # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 3624(%rsp)        # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 3616(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 3608(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3600(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 3592(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 3584(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 3576(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 3568(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 3560(%rsp)        # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 3552(%rsp)        # 8-byte Spill
	movabsq	$152, %rax
	movq	%rax, 3544(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 3536(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 3528(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 3520(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 3512(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 3504(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3496(%rsp)        # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 3488(%rsp)        # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 3480(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 3472(%rsp)        # 8-byte Spill
	leaq	.L.str14284, %rax
	movq	%rax, 3464(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 3456(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 3448(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 3440(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 3432(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 3424(%rsp)        # 8-byte Spill
	movabsq	$150, %rax
	movq	%rax, 3416(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 3408(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 3400(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 3392(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3384(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 3376(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	.loc	2 137 0 prologue_end    # kiss_fft.c:137:0
.Ltmp450:
	movq	%rax, 3368(%rsp)        # 8-byte Spill
	movq	3376(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 3360(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	3560(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 3352(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	3360(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 3344(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	3632(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 3340(%rsp)        # 4-byte Spill
	movq	%rax, %rcx
	movq	3368(%rsp), %rax        # 8-byte Reload
	movq	%r8, 3328(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 3320(%rsp)         # 8-byte Spill
	movq	%r10, (%rsp)
	movq	%r13, 3312(%rsp)        # 8-byte Spill
	movq	%r15, 3304(%rsp)        # 8-byte Spill
	movq	%r12, 3296(%rsp)        # 8-byte Spill
	movq	%rbp, 3288(%rsp)        # 8-byte Spill
	movq	%r14, 3280(%rsp)        # 8-byte Spill
	movq	%rbx, 3272(%rsp)        # 8-byte Spill
	movq	%r10, 3264(%rsp)        # 8-byte Spill
	movq	%r11, 3256(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3376(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3376(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	3628(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3376(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly5:Fout <- [RSP+3360]
	#DEBUG_VALUE: kf_bfly5:fstride <- [RSP+3352]
	#DEBUG_VALUE: kf_bfly5:st <- [RSP+3344]
	#DEBUG_VALUE: kf_bfly5:m <- [RSP+3628]
	.loc	2 150 0                 # kiss_fft.c:150:0
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3472(%rsp), %rcx        # 8-byte Reload
	movq	3384(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3628(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %esi
	movl	%esi, %edx
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %esi        # 4-byte Reload
	movslq	%esi, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3248(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3408(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	3352(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3240(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3392(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3520(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3240(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3232(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3232(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3392(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	movq	3240(%rsp), %rcx        # 8-byte Reload
	vmovss	264(%rax,%rcx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3228(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3400(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3424(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3520(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3240(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3408(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3240(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$4, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3216(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3416(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3216(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3424(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	movq	3240(%rsp), %rcx        # 8-byte Reload
	vmovss	268(%rax,%rcx,8), %xmm0
	.loc	2 152 0                 # kiss_fft.c:152:0
	cvtss2sd	%xmm0, %xmm1
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3212(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3432(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3464(%rsp), %rcx        # 8-byte Reload
	movq	3440(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3448(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3352(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3200(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3512(%rsp), %rcx        # 8-byte Reload
	movq	3456(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3200(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3464(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3472(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3248(%rsp), %rax        # 8-byte Reload
	movq	3200(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3192(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3480(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3520(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3192(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3488(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3184(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3480(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	vmovss	264(%rax,%rcx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3180(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3488(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3552(%rsp), %rcx        # 8-byte Reload
	movq	3496(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3504(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3520(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3192(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3512(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3280(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3528(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	3192(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$4, %rax
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 3168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	3544(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3568(%rsp), %rcx        # 8-byte Reload
	movq	3536(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3560(%rsp), %rsi        # 8-byte Reload
	movq	3168(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3552(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rax        # 8-byte Reload
	movq	3192(%rsp), %rcx        # 8-byte Reload
	vmovss	268(%rax,%rcx,8), %xmm0
	.loc	2 154 0                 # kiss_fft.c:154:0
	cvtss2sd	%xmm0, %xmm1
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 3164(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	3632(%rsp), %rdx        # 8-byte Reload
	movq	3568(%rsp), %rcx        # 8-byte Reload
	movq	3320(%rsp), %r8         # 8-byte Reload
	movq	3264(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
.Ltmp451:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+3360]
	#DEBUG_VALUE: kf_bfly5:Fout1 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout2 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout3 <- undef
	#DEBUG_VALUE: kf_bfly5:Fout4 <- undef
	#DEBUG_VALUE: kf_bfly5:u <- 0
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	3296(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3328(%rsp), %rcx        # 8-byte Reload
	movq	3576(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3320(%rsp), %rcx        # 8-byte Reload
	movq	3584(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %esi        # 4-byte Reload
	movl	%esi, %esi
	movl	%esi, %edx
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3600(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3592(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %esi        # 4-byte Reload
	cmpl	$0, %esi
	setg	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	3608(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 3163(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	3296(%rsp), %rdi        # 8-byte Reload
	movq	3312(%rsp), %rsi        # 8-byte Reload
	movq	3288(%rsp), %rdx        # 8-byte Reload
	movq	3616(%rsp), %rcx        # 8-byte Reload
	movq	3256(%rsp), %r8         # 8-byte Reload
	movl	3624(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	3280(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3304(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	3256(%rsp), %rdi        # 8-byte Reload
	movq	3320(%rsp), %rsi        # 8-byte Reload
	movq	3320(%rsp), %rdx        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3272(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3163(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	3632(%rsp), %rdi        # 8-byte Reload
	movq	3632(%rsp), %rsi        # 8-byte Reload
	movq	3632(%rsp), %rcx        # 8-byte Reload
	movq	3328(%rsp), %r8         # 8-byte Reload
	movq	3320(%rsp), %r9         # 8-byte Reload
	movq	3264(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	3163(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB11_1
	jmp	.LBB11_3
.Ltmp452:
.LBB11_1:                               # %.lr.ph
	movabsq	$0, %rax
	movabsq	$1, %rcx
	leaq	.L.str299, %r8
	leaq	.L.str4274, %rdx
	movabsq	$161, %rdi
	leaq	.L.str170440, %rsi
	leaq	.L.str45315, %r9
	leaq	.L.str48318, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$64, %r15
	leaq	.L.str137407, %r12
	leaq	.L.str122392, %r13
	movq	%rax, 3152(%rsp)        # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 3144(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 3136(%rsp)        # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 3128(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 3120(%rsp)        # 8-byte Spill
	movabsq	$155, %rax
	movq	%rax, 3112(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 3104(%rsp)        # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 3096(%rsp)        # 8-byte Spill
	leaq	.L.str135405, %rax
	movq	%rax, 3088(%rsp)        # 8-byte Spill
	movabsq	$156, %rax
	movq	%rax, 3080(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 3072(%rsp)        # 8-byte Spill
	leaq	.L.str34304, %rax
	movq	%rax, 3064(%rsp)        # 8-byte Spill
	movabsq	$157, %rax
	movq	%rax, 3056(%rsp)        # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 3048(%rsp)        # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 3040(%rsp)        # 8-byte Spill
	movabsq	$158, %rax
	movq	%rax, 3032(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 3024(%rsp)        # 8-byte Spill
	leaq	.L.str110380, %rax
	movq	%rax, 3016(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 3008(%rsp)        # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 3000(%rsp)        # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 2992(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 2984(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2976(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 2968(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2960(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	%rax, 2952(%rsp)        # 8-byte Spill
	movq	3032(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2944(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 2936(%rsp)        # 8-byte Spill
	movq	%rdx, 2928(%rsp)        # 8-byte Spill
	movq	%r9, %rdx
	movq	2992(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2920(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2968(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2912(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 2904(%rsp)         # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 2896(%rsp)        # 8-byte Spill
	movl	%ebp, 2892(%rsp)        # 4-byte Spill
	movq	%r15, 2880(%rsp)        # 8-byte Spill
	movq	%r13, 2872(%rsp)        # 8-byte Spill
	movq	%r12, 2864(%rsp)        # 8-byte Spill
	movl	%ebx, 2860(%rsp)        # 4-byte Spill
	movq	%r10, 2848(%rsp)        # 8-byte Spill
	movq	%r11, 2840(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2840(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	shll	$2, %ebx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2836(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3056(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3000(%rsp), %rcx        # 8-byte Reload
	movq	2952(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2960(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	imull	$3, %ebx, %ebp
	.loc	2 156 0                 # kiss_fft.c:156:0
	movl	%ebp, %esi
	movl	%esi, %edx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebp, 2832(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3016(%rsp), %rcx        # 8-byte Reload
	movq	2968(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rdx        # 8-byte Reload
	movq	3152(%rsp), %rcx        # 8-byte Reload
	movq	2976(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2984(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	3628(%rsp), %ebx        # 4-byte Reload
	shll	$1, %ebx
	.loc	2 158 0                 # kiss_fft.c:158:0
	movl	%ebx, %ebp
	movl	%ebp, %edx
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	movl	%ebx, 2828(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	3032(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3040(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2836(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2992(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2836(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2816(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3056(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3064(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2832(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3000(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2832(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2808(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3088(%rsp), %rcx        # 8-byte Reload
	movq	3008(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	2828(%rsp), %r9d        # 4-byte Reload
	movl	%r9d, %ebx
	movl	%ebx, %edx
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3024(%rsp), %rsi        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3016(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2828(%rsp), %ebx        # 4-byte Reload
	movslq	%ebx, %rax
	.loc	2 158 0                 # kiss_fft.c:158:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2800(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	3032(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3048(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	2816(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3040(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2816(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3360(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 157 0                 # kiss_fft.c:157:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2792(%rsp)        # 8-byte Spill
.Ltmp453:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+2792]
	movq	%rax, %rcx
	movq	3048(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3056(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3072(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	2808(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3064(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2808(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3360(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 156 0                 # kiss_fft.c:156:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2784(%rsp)        # 8-byte Spill
.Ltmp454:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+2784]
	movq	%rax, %rcx
	movq	3072(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3080(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3096(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	2800(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3088(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2800(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3360(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 155 0                 # kiss_fft.c:155:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2776(%rsp)        # 8-byte Spill
.Ltmp455:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+2776]
	movq	%rax, %rcx
	movq	3096(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3112(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	3128(%rsp), %rcx        # 8-byte Reload
	movq	3104(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2840(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3248(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	3120(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	3248(%rsp), %rax        # 8-byte Reload
	shlq	$3, %rax
	movq	3360(%rsp), %rcx        # 8-byte Reload
	addq	%rax, %rcx
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp456:
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2920(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2768(%rsp)        # 8-byte Spill
.Ltmp457:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+2768]
	movq	%rax, %rcx
	movq	3128(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3144(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2864(%rsp), %rcx        # 8-byte Reload
	movq	3136(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2872(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp458:
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	2896(%rsp), %rdi        # 8-byte Reload
	movq	2880(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2864(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2944(%rsp), %rdi        # 8-byte Reload
	movq	2936(%rsp), %rsi        # 8-byte Reload
	movq	2904(%rsp), %rdx        # 8-byte Reload
	movq	2848(%rsp), %rcx        # 8-byte Reload
	movq	2840(%rsp), %r8         # 8-byte Reload
	movl	2860(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2920(%rsp), %rdi        # 8-byte Reload
	movq	3152(%rsp), %rsi        # 8-byte Reload
	movq	3152(%rsp), %rdx        # 8-byte Reload
	movq	2920(%rsp), %rcx        # 8-byte Reload
	movq	2912(%rsp), %r8         # 8-byte Reload
	movq	3152(%rsp), %r9         # 8-byte Reload
	movq	2928(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	3152(%rsp), %rax        # 8-byte Reload
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	2768(%rsp), %rdx        # 8-byte Reload
	movq	2776(%rsp), %rsi        # 8-byte Reload
	movq	2784(%rsp), %rdi        # 8-byte Reload
	movq	2792(%rsp), %r8         # 8-byte Reload
	movq	%rax, 2760(%rsp)        # 8-byte Spill
	movq	%rcx, 2752(%rsp)        # 8-byte Spill
	movq	%rdx, 2744(%rsp)        # 8-byte Spill
	movq	%rsi, 2736(%rsp)        # 8-byte Spill
	movq	%rdi, 2728(%rsp)        # 8-byte Spill
	movq	%r8, 2720(%rsp)         # 8-byte Spill
.LBB11_2:                               # =>This Inner Loop Header: Depth=1
	movq	2720(%rsp), %rax        # 8-byte Reload
	movq	2728(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %rdx        # 8-byte Reload
	movq	2744(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2760(%rsp), %r8         # 8-byte Reload
	movabsq	$1, %r9
	leaq	.L.str75345, %r10
	movabsq	$0, %r11
	leaq	.L.str4274, %rbx
	movabsq	$2, %r14
	leaq	.L.str299, %r15
	movabsq	$3, %r12
	leaq	.L.str46316, %r13
	movabsq	$161, %rbp
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	leaq	.L.str170440, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	leaq	.L.str396, %rax
	movq	%rsi, 2696(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2692(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	leaq	.L.str74344, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	leaq	.L.str51321, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$33, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str50320, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str309, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	leaq	.L.str308, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$199, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str307, %rax
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	leaq	.L.str306, %rax
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	leaq	.L.str305, %rax
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	leaq	.L.str304, %rax
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	leaq	.L.str303, %rax
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	leaq	.L.str302, %rax
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	leaq	.L.str301, %rax
	movq	%rax, 2504(%rsp)        # 8-byte Spill
	leaq	.L.str300, %rax
	movq	%rax, 2496(%rsp)        # 8-byte Spill
	leaq	.L.str394, %rax
	movq	%rax, 2488(%rsp)        # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, 2480(%rsp)        # 8-byte Spill
	movabsq	$197, %rax
	movq	%rax, 2472(%rsp)        # 8-byte Spill
	leaq	.L.str395, %rax
	movq	%rax, 2464(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2456(%rsp)        # 8-byte Spill
	leaq	.L.str381, %rax
	movq	%rax, 2448(%rsp)        # 8-byte Spill
	leaq	.L.str387, %rax
	movq	%rax, 2440(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 2432(%rsp)        # 8-byte Spill
	leaq	.L.str392, %rax
	movq	%rax, 2424(%rsp)        # 8-byte Spill
	leaq	.L.str272, %rax
	movq	%rax, 2416(%rsp)        # 8-byte Spill
	leaq	.L.str393, %rax
	movq	%rax, 2408(%rsp)        # 8-byte Spill
	leaq	.L.str377, %rax
	movq	%rax, 2400(%rsp)        # 8-byte Spill
	leaq	.L.str384, %rax
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	leaq	.L.str390, %rax
	movq	%rax, 2384(%rsp)        # 8-byte Spill
	leaq	.L.str244514, %rax
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	movabsq	$196, %rax
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	leaq	.L.str391, %rax
	movq	%rax, 2360(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	leaq	.L.str388, %rax
	movq	%rax, 2344(%rsp)        # 8-byte Spill
	leaq	.L.str232502, %rax
	movq	%rax, 2336(%rsp)        # 8-byte Spill
	leaq	.L.str389, %rax
	movq	%rax, 2328(%rsp)        # 8-byte Spill
	leaq	.L.str385, %rax
	movq	%rax, 2320(%rsp)        # 8-byte Spill
	leaq	.L.str386, %rax
	movq	%rax, 2312(%rsp)        # 8-byte Spill
	movabsq	$194, %rax
	movq	%rax, 2304(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str342, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 2280(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 2272(%rsp)        # 8-byte Spill
	leaq	.L.str338, %rax
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	leaq	.L.str383, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str382, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$193, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str343, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	leaq	.L.str339, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str380, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	leaq	.L.str379, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$192, %rax
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str341, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	leaq	.L.str61331, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	leaq	.L.str378, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str337, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str376, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str375, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	movabsq	$191, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str340, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str58328, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str374, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	leaq	.L.str336, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	leaq	.L.str372, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str327, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	movabsq	$189, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str373, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	leaq	.L.str358, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str365, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str370, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str318, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	leaq	.L.str371, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str361, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str354, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	leaq	.L.str368, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str164434, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	movabsq	$188, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	leaq	.L.str369, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	leaq	.L.str366, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str67337, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str367, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	leaq	.L.str363, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str364, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	movabsq	$186, %rax
	vmovsd	.LCPI11_0, %xmm0
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str362, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	leaq	.L.str360, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str359, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	movabsq	$185, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str357, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	leaq	.L.str356, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	movabsq	$183, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	leaq	.L.str355, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str353, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str352, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	movabsq	$182, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str351, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str349, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str143413, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	movabsq	$180, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str350, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str348, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	leaq	.L.str347, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str345, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str57327, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movabsq	$179, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str346, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	leaq	.L.str344, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str220490, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str314, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movabsq	$177, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str252522, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str264534, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	movabsq	$176, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str228498, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str335, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$175, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str224494, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str332, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movabsq	$174, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str334, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str333, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	movabsq	$172, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str325, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str328, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str319, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str330, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str326, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str331, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str329, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str323, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str317, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str324, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str322, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str321, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str320, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str316, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	movabsq	$22, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str315, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$10, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movabsq	$42, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str295, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str263533, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	movabsq	$171, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	leaq	.L.str287, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	leaq	.L.str310, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str312, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	leaq	.L.str313, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str311, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$12884901888, %rax      # imm = 0x300000000
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str269539, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str255525, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	leaq	.L.str221491, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	leaq	.L.str253523, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	movabsq	$170, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str241511, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	leaq	.L.str246516, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str233503, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str249519, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str243513, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	leaq	.L.str250520, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str247517, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str238508, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	leaq	.L.str231501, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str240510, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str237507, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str236506, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str235505, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	leaq	.L.str230500, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str229499, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str227497, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str225495, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	movabsq	$169, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	leaq	.L.str77347, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str222492, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str69339, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str223493, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str163433, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str172442, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str168438, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str66336, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str72342, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str64334, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str145415, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$167, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str45315, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	leaq	.L.str47317, %rax
	.loc	2 167 0                 # kiss_fft.c:167:0
.Ltmp459:
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movq	936(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 896(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	2704(%rsp), %rax        # 8-byte Reload
	movl	%esi, 892(%rsp)         # 4-byte Spill
	movq	%rax, %rsi
	movq	%rdx, 880(%rsp)         # 8-byte Spill
	movq	%r15, %rdx
	movq	2608(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 872(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	928(%rsp), %rax         # 8-byte Reload
	movq	%r8, 864(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	2692(%rsp), %eax        # 4-byte Reload
	movq	%r9, 856(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 848(%rsp)         # 8-byte Spill
	movq	%r13, 840(%rsp)         # 8-byte Spill
	movq	%rbp, 832(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 824(%rsp)        # 8-byte Spill
	movq	%r15, 816(%rsp)         # 8-byte Spill
	movq	%r14, 808(%rsp)         # 8-byte Spill
	movq	%r10, 800(%rsp)         # 8-byte Spill
	movq	%r11, 792(%rsp)         # 8-byte Spill
	movq	%rbx, 784(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2496(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2504(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2496(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2512(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2528(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2544(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	920(%rsp), %r8          # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2576(%rsp), %rcx        # 8-byte Reload
	movq	928(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2584(%rsp), %r8         # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	816(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	944(%rsp), %r8          # 8-byte Reload
	movq	856(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	952(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	960(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2496(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 776(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	968(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	776(%rsp), %rcx         # 8-byte Reload
	sarq	$3, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 768(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 760(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 756(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	976(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 744(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	.loc	2 169 0                 # kiss_fft.c:169:0
.Ltmp460:
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 740(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	992(%rsp), %rcx         # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2696(%rsp), %rcx        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	728(%rsp), %rcx         # 8-byte Reload
	sarq	$3, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 720(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	720(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 712(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 708(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 696(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	696(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 688(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	688(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	vmovss	264(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 684(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	684(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	708(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	708(%rsp), %xmm0        # 4-byte Reload
	vmovss	684(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 680(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	720(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 672(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 668(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	696(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	addq	$4, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 656(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	656(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	696(%rsp), %rdx         # 8-byte Reload
	vmovss	268(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 652(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	652(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	668(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	668(%rsp), %xmm0        # 4-byte Reload
	vmovss	652(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 648(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	648(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	680(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	680(%rsp), %xmm0        # 4-byte Reload
	vmovss	648(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	652(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	708(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	708(%rsp), %xmm0        # 4-byte Reload
	vmovss	652(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 640(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	668(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	684(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1080(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	684(%rsp), %xmm0        # 4-byte Reload
	vmovss	668(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 636(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	640(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	636(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	636(%rsp), %xmm0        # 4-byte Reload
	vmovss	640(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp461:
	.loc	2 170 0                 # kiss_fft.c:170:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 632(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1120(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1112(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	880(%rsp), %rcx         # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 624(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1160(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	624(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1120(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	624(%rsp), %rcx         # 8-byte Reload
	sarq	$3, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 616(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2336(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 608(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 604(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 600(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	600(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	600(%rsp), %eax         # 4-byte Reload
	shll	$1, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 596(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	596(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1136(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	596(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 584(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	584(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1144(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 576(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	576(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 568(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	568(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1152(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	vmovss	264(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 564(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	564(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	604(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	604(%rsp), %xmm0        # 4-byte Reload
	vmovss	564(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 560(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1160(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	616(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 552(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 548(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	576(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	addq	$4, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 536(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	536(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1176(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	576(%rsp), %rdx         # 8-byte Reload
	vmovss	268(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 532(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	532(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	548(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	548(%rsp), %xmm0        # 4-byte Reload
	vmovss	532(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 528(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	528(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	560(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	560(%rsp), %xmm0        # 4-byte Reload
	vmovss	528(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 524(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	532(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	604(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	604(%rsp), %xmm0        # 4-byte Reload
	vmovss	532(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 520(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	548(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1216(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	564(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	564(%rsp), %xmm0        # 4-byte Reload
	vmovss	548(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 516(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1232(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	520(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1240(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	516(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1248(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	516(%rsp), %xmm0        # 4-byte Reload
	vmovss	520(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp462:
	.loc	2 171 0                 # kiss_fft.c:171:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 512(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1256(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 504(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	504(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	504(%rsp), %rcx         # 8-byte Reload
	sarq	$3, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 496(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2416(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 488(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 484(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	1272(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movabsq	$12884901888, %rcx      # imm = 0x300000000
	movq	864(%rsp), %rdx         # 8-byte Reload
	imulq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 472(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1288(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2664(%rsp), %rdx        # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	472(%rsp), %rcx         # 8-byte Reload
	sarq	$32, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1312(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1288(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 456(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	456(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 448(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	vmovss	264(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 444(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	444(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	484(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	484(%rsp), %xmm0        # 4-byte Reload
	vmovss	444(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 440(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2480(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	496(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 428(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1320(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1312(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	456(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	addq	$4, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 416(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	416(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	456(%rsp), %rdx         # 8-byte Reload
	vmovss	268(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 412(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	412(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	428(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	428(%rsp), %xmm0        # 4-byte Reload
	vmovss	412(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 408(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	408(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	440(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	440(%rsp), %xmm0        # 4-byte Reload
	vmovss	408(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 404(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	412(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	484(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1352(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	484(%rsp), %xmm0        # 4-byte Reload
	vmovss	412(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 400(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	428(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1360(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	444(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	444(%rsp), %xmm0        # 4-byte Reload
	vmovss	428(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 396(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1376(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	400(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	396(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	396(%rsp), %xmm0        # 4-byte Reload
	vmovss	400(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp463:
	.loc	2 172 0                 # kiss_fft.c:172:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 392(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1424(%rsp), %rcx        # 8-byte Reload
	movq	1400(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	1408(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2712(%rsp), %rcx        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	subq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 384(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	384(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rcx         # 8-byte Reload
	sarq	$3, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 376(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2032(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	376(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 368(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 364(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1456(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rcx         # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 360(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	360(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	360(%rsp), %eax         # 4-byte Reload
	shll	$2, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 356(%rsp)         # 4-byte Spill
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	356(%rsp), %eax         # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	356(%rsp), %eax         # 4-byte Reload
	movslq	%eax, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 344(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1480(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1488(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1496(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	3352(%rsp), %rdx        # 8-byte Reload
	imulq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 336(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	336(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1504(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	vmovss	264(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 324(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	vmovss	324(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 320(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3360(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	376(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	3360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 312(%rsp)         # 8-byte Spill
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 308(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1560(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1544(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1536(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	848(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	3344(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	addq	$264, %rcx              # imm = 0x108
	movq	336(%rsp), %rdx         # 8-byte Reload
	shlq	$3, %rdx
	addq	%rdx, %rcx
	addq	$4, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 296(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3344(%rsp), %rcx        # 8-byte Reload
	movq	336(%rsp), %rdx         # 8-byte Reload
	vmovss	268(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 292(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	308(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	308(%rsp), %xmm0        # 4-byte Reload
	vmovss	292(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 288(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	288(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	320(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	320(%rsp), %xmm0        # 4-byte Reload
	vmovss	288(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	vmovss	292(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 280(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	308(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	vmovss	308(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 276(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1616(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	280(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	276(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	276(%rsp), %xmm0        # 4-byte Reload
	vmovss	280(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp464:
	.loc	2 174 0                 # kiss_fft.c:174:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 272(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	284(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	vmovss	284(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 268(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	272(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	632(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	632(%rsp), %xmm0        # 4-byte Reload
	vmovss	272(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp465:
	.loc	2 175 0                 # kiss_fft.c:175:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 264(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	284(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	vmovss	284(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 260(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1664(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	272(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	632(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	632(%rsp), %xmm0        # 4-byte Reload
	vmovss	272(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
.Ltmp466:
	.loc	2 176 0                 # kiss_fft.c:176:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 256(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	404(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	524(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	524(%rsp), %xmm0        # 4-byte Reload
	vmovss	404(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 252(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1688(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	392(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	512(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	512(%rsp), %xmm0        # 4-byte Reload
	vmovss	392(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp467:
	.loc	2 177 0                 # kiss_fft.c:177:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 248(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	404(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	524(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	524(%rsp), %xmm0        # 4-byte Reload
	vmovss	404(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 244(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1712(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	392(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	512(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	512(%rsp), %xmm0        # 4-byte Reload
	vmovss	392(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
.Ltmp468:
	.loc	2 179 0                 # kiss_fft.c:179:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 240(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	vmovss	268(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 236(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	236(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1736(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	vmovss	236(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 232(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1752(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	760(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1760(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	232(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1768(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	vmovss	232(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	2 180 0                 # kiss_fft.c:180:0
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	264(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	248(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	248(%rsp), %xmm0        # 4-byte Reload
	vmovss	264(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 228(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 224(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	228(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1784(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	vmovss	228(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1808(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	744(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	220(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	768(%rsp), %rdx         # 8-byte Reload
	vmovss	220(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
	.loc	2 182 0                 # kiss_fft.c:182:0
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	vmovss	268(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 216(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	216(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	vmovss	216(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 212(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	vmovss	252(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 208(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	212(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	208(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	208(%rsp), %xmm0        # 4-byte Reload
	vmovss	212(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	.loc	2 183 0                 # kiss_fft.c:183:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 204(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	264(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	vmovss	264(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 200(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	200(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1864(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	740(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	740(%rsp), %xmm0        # 4-byte Reload
	vmovss	200(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 196(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	248(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	vmovss	248(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 192(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1872(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	196(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1880(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	192(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	192(%rsp), %xmm0        # 4-byte Reload
	vmovss	196(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	.loc	2 185 0                 # kiss_fft.c:185:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 188(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	256(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	vmovss	256(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 184(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	vmovss	240(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 180(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1896(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	184(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	180(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1912(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	180(%rsp), %xmm0        # 4-byte Reload
	vmovss	184(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	.loc	2 186 0                 # kiss_fft.c:186:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 176(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	260(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	vmovss	260(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 172(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	172(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	vmovsd	824(%rsp), %xmm0        # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	2600(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	172(%rsp), %xmm0        # 4-byte Reload
	vmovd	%xmm0, %eax
	xorl	$2147483648, %eax       # imm = 0x80000000
	vmovd	%eax, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 168(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	244(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	vmovss	244(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 164(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1928(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	164(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	168(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	168(%rsp), %xmm0        # 4-byte Reload
	vmovss	164(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	.loc	2 188 0                 # kiss_fft.c:188:0
.Ltmp469:
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 160(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	176(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	204(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	204(%rsp), %xmm0        # 4-byte Reload
	vmovss	176(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 156(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	160(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	188(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	188(%rsp), %xmm0        # 4-byte Reload
	vmovss	160(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 152(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1984(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	1976(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	672(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	1992(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	152(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2000(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	vmovss	152(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp470:
	.loc	2 189 0                 # kiss_fft.c:189:0
	movq	2072(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	204(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	176(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	176(%rsp), %xmm0        # 4-byte Reload
	vmovss	204(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 148(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2072(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2024(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	148(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	vmovss	148(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	movq	2072(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	160(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	188(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2056(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	188(%rsp), %xmm0        # 4-byte Reload
	vmovss	160(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 144(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2072(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2064(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	312(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	144(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2088(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	vmovss	144(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp471:
	.loc	2 191 0                 # kiss_fft.c:191:0
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2096(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	vmovss	268(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 140(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	140(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2104(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2112(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	756(%rsp), %xmm0        # 4-byte Reload
	vmovss	140(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 136(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	vmovss	252(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 132(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2128(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	136(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	132(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	132(%rsp), %xmm0        # 4-byte Reload
	vmovss	136(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	.loc	2 192 0                 # kiss_fft.c:192:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 128(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	264(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3180(%rsp), %xmm0       # 4-byte Reload
	vmovss	264(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 124(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	124(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2168(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	740(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2176(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	740(%rsp), %xmm0        # 4-byte Reload
	vmovss	124(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 120(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	248(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3228(%rsp), %xmm0       # 4-byte Reload
	vmovss	248(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 116(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	120(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2208(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	116(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	116(%rsp), %xmm0        # 4-byte Reload
	vmovss	120(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	.loc	2 193 0                 # kiss_fft.c:193:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 112(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	256(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2224(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	vmovss	256(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	vmovss	240(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 104(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	108(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	104(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2256(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	104(%rsp), %xmm0        # 4-byte Reload
	vmovss	108(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	.loc	2 194 0                 # kiss_fft.c:194:0
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 100(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	260(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2272(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3164(%rsp), %xmm0       # 4-byte Reload
	vmovss	260(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 96(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2280(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	244(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2288(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	3212(%rsp), %xmm0       # 4-byte Reload
	vmovss	244(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 92(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2304(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2320(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	vmovss	92(%rsp), %xmm1         # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	.loc	2 196 0                 # kiss_fft.c:196:0
.Ltmp472:
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 88(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	128(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	vmovss	128(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 84(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2328(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	608(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2336(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2344(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	2352(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	112(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	88(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	88(%rsp), %xmm0         # 4-byte Reload
	vmovss	112(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 80(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2368(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2360(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	552(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2376(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	80(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2384(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	vmovss	80(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp473:
	.loc	2 197 0                 # kiss_fft.c:197:0
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2392(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	128(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2400(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	128(%rsp), %xmm0        # 4-byte Reload
	vmovss	100(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 76(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2408(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2416(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	76(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2424(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	vmovss	76(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	2432(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	88(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2440(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	112(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	112(%rsp), %xmm0        # 4-byte Reload
	vmovss	88(%rsp), %xmm1         # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 72(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	2472(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2464(%rsp), %rcx        # 8-byte Reload
	movq	2456(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	432(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2480(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	72(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	2488(%rsp), %rcx        # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	784(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	3360(%rsp), %rcx        # 8-byte Reload
	movq	496(%rsp), %rdx         # 8-byte Reload
	vmovss	72(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp474:
	.loc	2 199 0                 # kiss_fft.c:199:0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2504(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	896(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2496(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	896(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 64(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2504(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp475:
	#DEBUG_VALUE: kf_bfly5:Fout0 <- [RSP+64]
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2520(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2696(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2512(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2696(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 56(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2520(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp476:
	#DEBUG_VALUE: kf_bfly5:Fout1 <- [RSP+56]
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	880(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2528(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	880(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp477:
	#DEBUG_VALUE: kf_bfly5:Fout2 <- [RSP+48]
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2552(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2544(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	872(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp478:
	#DEBUG_VALUE: kf_bfly5:Fout3 <- [RSP+40]
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2560(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	2712(%rsp), %rdx        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2576(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2712(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2584(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp479:
	#DEBUG_VALUE: kf_bfly5:Fout4 <- [RSP+32]
	.loc	2 161 0                 # kiss_fft.c:161:0
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2624(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	2600(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	864(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	864(%rsp), %rcx         # 8-byte Reload
	addq	$1, %rcx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	856(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2656(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2632(%rsp), %rsi        # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2624(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rcx          # 8-byte Reload
	movl	%ecx, %eax
	movl	%eax, %esi
	movl	%esi, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	800(%rsp), %rcx         # 8-byte Reload
	movq	2640(%rsp), %r8         # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	3628(%rsp), %eax        # 4-byte Reload
	movl	%eax, %r9d
	movl	%r9d, %edx
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	2664(%rsp), %rsi        # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	2656(%rsp), %r8         # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	20(%rsp), %eax          # 4-byte Reload
	movl	3628(%rsp), %esi        # 4-byte Reload
	cmpl	%esi, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	2672(%rsp), %rdi        # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 19(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	832(%rsp), %rdi         # 8-byte Reload
	movq	2704(%rsp), %rsi        # 8-byte Reload
	movq	816(%rsp), %rdx         # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movl	2692(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	840(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	808(%rsp), %rdi         # 8-byte Reload
	movq	792(%rsp), %rsi         # 8-byte Reload
	movq	792(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	856(%rsp), %rdi         # 8-byte Reload
	movq	856(%rsp), %rsi         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	800(%rsp), %r8          # 8-byte Reload
	movq	792(%rsp), %r9          # 8-byte Reload
	movq	784(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	19(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	24(%rsp), %rcx          # 8-byte Reload
	movq	64(%rsp), %rdx          # 8-byte Reload
	movq	56(%rsp), %rsi          # 8-byte Reload
	movq	48(%rsp), %rdi          # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	32(%rsp), %r9           # 8-byte Reload
	movq	%rcx, 2760(%rsp)        # 8-byte Spill
	movq	%rdx, 2752(%rsp)        # 8-byte Spill
	movq	%rsi, 2744(%rsp)        # 8-byte Spill
	movq	%rdi, 2736(%rsp)        # 8-byte Spill
	movq	%r8, 2728(%rsp)         # 8-byte Spill
	movq	%r9, 2720(%rsp)         # 8-byte Spill
	jne	.LBB11_3
	jmp	.LBB11_2
.Ltmp480:
.LBB11_3:                               # %._crit_edge
	movabsq	$201, %rdi
	leaq	.L.str170440, %rsi
	leaq	.L.str46316, %rdx
	leaq	.L.str78348, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 201 0                 # kiss_fft.c:201:0
	movl	$1, (%rsp)
	movl	%eax, 12(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$3640, %rsp             # imm = 0xE38
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp481:
.Ltmp482:
	.size	kf_bfly5, .Ltmp482-kf_bfly5
.Lfunc_end11:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly4,@function
kf_bfly4:                               # @kf_bfly4
	.cfi_startproc
.Lfunc_begin12:
	.loc	2 50 0                  # kiss_fft.c:50:0
# BB#0:
	pushq	%rbp
.Ltmp490:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp491:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp492:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp493:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp494:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp495:
	.cfi_def_cfa_offset 56
	subq	$2760, %rsp             # imm = 0xAC8
.Ltmp496:
	.cfi_def_cfa_offset 2816
.Ltmp497:
	.cfi_offset %rbx, -56
.Ltmp498:
	.cfi_offset %r12, -48
.Ltmp499:
	.cfi_offset %r13, -40
.Ltmp500:
	.cfi_offset %r14, -32
.Ltmp501:
	.cfi_offset %r15, -24
.Ltmp502:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str260530, %r9
	leaq	.L.str4274, %r10
	movabsq	$60, %r11
	leaq	.L.str166436, %rbx
	leaq	.L.str1271, %r14
	leaq	.L.str259529, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 2752(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2744(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 2736(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2728(%rsp)        # 8-byte Spill
	leaq	.L.str14284, %rax
	movq	%rax, 2720(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 2712(%rsp)        # 8-byte Spill
	movabsq	$77, %rax
	movq	%rax, 2704(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 2696(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2688(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 2680(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2672(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 2664(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 2656(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2648(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 2640(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 2632(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2624(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 2616(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 2608(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2600(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 2592(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 2584(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 2576(%rsp)        # 8-byte Spill
	movabsq	$58, %rax
	movq	%rax, 2568(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 2560(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 2552(%rsp)        # 8-byte Spill
	movabsq	$55, %rax
	movq	%rax, 2544(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 2536(%rsp)        # 8-byte Spill
	movabsq	$54, %rax
	movq	%rax, 2528(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 2520(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	.loc	2 45 0 prologue_end     # kiss_fft.c:45:0
.Ltmp503:
	movq	%rax, 2512(%rsp)        # 8-byte Spill
	movq	2520(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 2504(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	2688(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 2496(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	2504(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 2488(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2752(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 2480(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	2512(%rsp), %rax        # 8-byte Reload
	movq	%r8, 2472(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	2472(%rsp), %rax        # 8-byte Reload
	movq	%r9, 2464(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 2460(%rsp)        # 4-byte Spill
	movq	%r15, 2448(%rsp)        # 8-byte Spill
	movq	%r12, 2440(%rsp)        # 8-byte Spill
	movl	%r13d, 2436(%rsp)       # 4-byte Spill
	movq	%r14, 2424(%rsp)        # 8-byte Spill
	movq	%rbx, 2416(%rsp)        # 8-byte Spill
	movq	%r10, 2408(%rsp)        # 8-byte Spill
	movq	%r11, 2400(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2520(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+2504]
	#DEBUG_VALUE: kf_bfly4:fstride <- [RSP+2496]
	#DEBUG_VALUE: kf_bfly4:st <- [RSP+2488]
	#DEBUG_VALUE: kf_bfly4:m <- [RSP+2480]
.Ltmp504:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+2480]
	.loc	2 54 0                  # kiss_fft.c:54:0
	movq	2528(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2536(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2480(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2536(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2392(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp505:
	#DEBUG_VALUE: kf_bfly4:m2 <- [RSP+2392]
	.loc	2 55 0                  # kiss_fft.c:55:0
	movq	2544(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2560(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2552(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2480(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2752(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2384(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2560(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp506:
	#DEBUG_VALUE: kf_bfly4:m3 <- [RSP+2384]
	.loc	2 58 0                  # kiss_fft.c:58:0
	movq	2568(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2584(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2576(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2488(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2584(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2376(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp507:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+2376]
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+2376]
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+2376]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2600(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2608(%rsp), %rcx        # 8-byte Reload
	movq	2592(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2496(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2608(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2368(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	2624(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2640(%rsp), %rcx        # 8-byte Reload
	movq	2616(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2656(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2632(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2496(%rsp), %rax        # 8-byte Reload
	imulq	$3, %rax, %rcx
	.loc	2 77 0                  # kiss_fft.c:77:0
.Ltmp508:
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	2752(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2360(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2640(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2680(%rsp), %rcx        # 8-byte Reload
	movq	2648(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2656(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2488(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2664(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2488(%rsp), %rax        # 8-byte Reload
	addq	$4, %rax
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 2352(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2720(%rsp), %rcx        # 8-byte Reload
	movq	2672(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2688(%rsp), %rsi        # 8-byte Reload
	movq	2352(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2680(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2488(%rsp), %rax        # 8-byte Reload
	movl	4(%rax), %ebp
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%ebp, 2348(%rsp)        # 4-byte Spill
	callq	trace_logger_log_int
	movq	2704(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2736(%rsp), %rcx        # 8-byte Reload
	movq	2696(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2440(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2472(%rsp), %rcx        # 8-byte Reload
	movq	2712(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2348(%rsp), %ebp        # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2728(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2720(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	2348(%rsp), %ebp        # 4-byte Reload
	cmpl	$0, %ebp
	sete	%al
.Ltmp509:
	.loc	2 60 0                  # kiss_fft.c:60:0
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %r13d
	movl	%r13d, %edx
	movq	2744(%rsp), %rdi        # 8-byte Reload
	movq	2752(%rsp), %rsi        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2736(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 2347(%rsp)         # 1-byte Spill
	callq	trace_logger_log_int
	movq	2400(%rsp), %rdi        # 8-byte Reload
	movq	2416(%rsp), %rsi        # 8-byte Reload
	movq	2424(%rsp), %rdx        # 8-byte Reload
	movq	2448(%rsp), %rcx        # 8-byte Reload
	movq	2440(%rsp), %r8         # 8-byte Reload
	movl	2460(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	2752(%rsp), %rdi        # 8-byte Reload
	movq	2472(%rsp), %rsi        # 8-byte Reload
	movq	2472(%rsp), %rdx        # 8-byte Reload
	movq	2752(%rsp), %rcx        # 8-byte Reload
	movq	2464(%rsp), %r8         # 8-byte Reload
	movq	2472(%rsp), %r9         # 8-byte Reload
	movq	2408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2376(%rsp), %rcx        # 8-byte Reload
	movq	2376(%rsp), %rdx        # 8-byte Reload
	movq	2480(%rsp), %rsi        # 8-byte Reload
	movq	2376(%rsp), %rdi        # 8-byte Reload
	movq	2504(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 2336(%rsp)        # 8-byte Spill
	movq	%rdx, 2328(%rsp)        # 8-byte Spill
	movq	%rsi, 2320(%rsp)        # 8-byte Spill
	movq	%rdi, 2312(%rsp)        # 8-byte Spill
	movq	%r8, 2304(%rsp)         # 8-byte Spill
.Ltmp510:
.LBB12_1:                               # =>This Inner Loop Header: Depth=1
	movq	2304(%rsp), %rax        # 8-byte Reload
	movq	2312(%rsp), %rcx        # 8-byte Reload
	movq	2320(%rsp), %rdx        # 8-byte Reload
	movq	2328(%rsp), %rsi        # 8-byte Reload
	movq	2336(%rsp), %rdi        # 8-byte Reload
	movabsq	$1, %r8
	leaq	.L.str16286, %r9
	movabsq	$0, %r10
	leaq	.L.str4274, %r11
	movabsq	$2, %rbx
	leaq	.L.str276, %r14
	movabsq	$3, %r15
	leaq	.L.str275, %r12
	movabsq	$77, %r13
	leaq	.L.str166436, %rbp
	movq	%rax, 2296(%rsp)        # 8-byte Spill
	leaq	.L.str260530, %rax
	movq	%rax, 2288(%rsp)        # 8-byte Spill
	leaq	.L.str274, %rax
	movq	%rsi, 2280(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 2276(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 2264(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 2256(%rsp)        # 8-byte Spill
	leaq	.L.str272, %rax
	movq	%rax, 2248(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 2240(%rsp)        # 8-byte Spill
	leaq	.L.str233503, %rax
	movq	%rax, 2232(%rsp)        # 8-byte Spill
	movabsq	$75, %rax
	movq	%rax, 2224(%rsp)        # 8-byte Spill
	leaq	.L.str273, %rax
	movq	%rax, 2216(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 2208(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 2200(%rsp)        # 8-byte Spill
	leaq	.L.str243513, %rax
	movq	%rax, 2192(%rsp)        # 8-byte Spill
	leaq	.L.str271, %rax
	movq	%rax, 2184(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 2176(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 2168(%rsp)        # 8-byte Spill
	leaq	.L.str269539, %rax
	movq	%rax, 2160(%rsp)        # 8-byte Spill
	leaq	.L.str230500, %rax
	movq	%rax, 2152(%rsp)        # 8-byte Spill
	leaq	.L.str270540, %rax
	movq	%rax, 2144(%rsp)        # 8-byte Spill
	leaq	.L.str241511, %rax
	movq	%rax, 2136(%rsp)        # 8-byte Spill
	leaq	.L.str255525, %rax
	movq	%rax, 2128(%rsp)        # 8-byte Spill
	leaq	.L.str220490, %rax
	movq	%rax, 2120(%rsp)        # 8-byte Spill
	leaq	.L.str261531, %rax
	movq	%rax, 2112(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 2104(%rsp)        # 8-byte Spill
	movabsq	$74, %rax
	movq	%rax, 2096(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 2088(%rsp)        # 8-byte Spill
	leaq	.L.str221491, %rax
	movq	%rax, 2080(%rsp)        # 8-byte Spill
	leaq	.L.str218488, %rax
	movq	%rax, 2072(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 2064(%rsp)        # 8-byte Spill
	movabsq	$73, %rax
	movq	%rax, 2056(%rsp)        # 8-byte Spill
	leaq	.L.str253523, %rax
	movq	%rax, 2048(%rsp)        # 8-byte Spill
	leaq	.L.str207477, %rax
	movq	%rax, 2040(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 2032(%rsp)        # 8-byte Spill
	movabsq	$72, %rax
	movq	%rax, 2024(%rsp)        # 8-byte Spill
	leaq	.L.str252522, %rax
	movq	%rax, 2016(%rsp)        # 8-byte Spill
	leaq	.L.str57327, %rax
	movq	%rax, 2008(%rsp)        # 8-byte Spill
	movabsq	$71, %rax
	movq	%rax, 2000(%rsp)        # 8-byte Spill
	leaq	.L.str268538, %rax
	movq	%rax, 1992(%rsp)        # 8-byte Spill
	leaq	.L.str250520, %rax
	movq	%rax, 1984(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1976(%rsp)        # 8-byte Spill
	leaq	.L.str249519, %rax
	movq	%rax, 1968(%rsp)        # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 1960(%rsp)        # 8-byte Spill
	leaq	.L.str267537, %rax
	movq	%rax, 1952(%rsp)        # 8-byte Spill
	leaq	.L.str247517, %rax
	movq	%rax, 1944(%rsp)        # 8-byte Spill
	leaq	.L.str246516, %rax
	movq	%rax, 1936(%rsp)        # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 1928(%rsp)        # 8-byte Spill
	leaq	.L.str229499, %rax
	movq	%rax, 1920(%rsp)        # 8-byte Spill
	movabsq	$70, %rax
	movq	%rax, 1912(%rsp)        # 8-byte Spill
	leaq	.L.str244514, %rax
	movq	%rax, 1904(%rsp)        # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 1896(%rsp)        # 8-byte Spill
	leaq	.L.str225495, %rax
	movq	%rax, 1888(%rsp)        # 8-byte Spill
	movabsq	$69, %rax
	movq	%rax, 1880(%rsp)        # 8-byte Spill
	leaq	.L.str240510, %rax
	movq	%rax, 1872(%rsp)        # 8-byte Spill
	movabsq	$68, %rax
	movq	%rax, 1864(%rsp)        # 8-byte Spill
	leaq	.L.str266536, %rax
	movq	%rax, 1856(%rsp)        # 8-byte Spill
	leaq	.L.str69339, %rax
	movq	%rax, 1848(%rsp)        # 8-byte Spill
	leaq	.L.str238508, %rax
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	leaq	.L.str237507, %rax
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	leaq	.L.str265535, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str64334, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str231501, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str236506, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	leaq	.L.str235505, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$67, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str185455, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	leaq	.L.str232502, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	leaq	.L.str228498, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	leaq	.L.str227497, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$65, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	leaq	.L.str163433, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str168438, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	leaq	.L.str72342, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	leaq	.L.str172442, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str164434, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	leaq	.L.str224494, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str223493, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	leaq	.L.str222492, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	leaq	.L.str77347, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str67337, %rax
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	leaq	.L.str66336, %rax
	movq	%rax, 1624(%rsp)        # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 1616(%rsp)        # 8-byte Spill
	leaq	.L.str58328, %rax
	movq	%rax, 1608(%rsp)        # 8-byte Spill
	leaq	.L.str53323, %rax
	movq	%rax, 1600(%rsp)        # 8-byte Spill
	leaq	.L.str61331, %rax
	movq	%rax, 1592(%rsp)        # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 1584(%rsp)        # 8-byte Spill
	leaq	.L.str145415, %rax
	movq	%rax, 1576(%rsp)        # 8-byte Spill
	leaq	.L.str143413, %rax
	movq	%rax, 1568(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 1560(%rsp)        # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 1552(%rsp)        # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 1544(%rsp)        # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 1536(%rsp)        # 8-byte Spill
	movabsq	$63, %rax
	movq	%rax, 1528(%rsp)        # 8-byte Spill
	leaq	.L.str25295, %rax
	movq	%rax, 1520(%rsp)        # 8-byte Spill
	leaq	.L.str110380, %rax
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	leaq	.L.str34304, %rax
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 1488(%rsp)        # 8-byte Spill
	leaq	.L.str135405, %rax
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 1456(%rsp)        # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 1448(%rsp)        # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 1440(%rsp)        # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 1432(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 1424(%rsp)        # 8-byte Spill
	leaq	.L.str264534, %rax
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	leaq	.L.str262532, %rax
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	leaq	.L.str219489, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str263533, %rax
	.loc	2 63 0                  # kiss_fft.c:63:0
.Ltmp511:
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	movq	1400(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1360(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 1356(%rsp)        # 4-byte Spill
	movq	%rbp, %rsi
	movq	2288(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1344(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	2112(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1336(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1392(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1328(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movl	2276(%rsp), %eax        # 4-byte Reload
	movq	%r9, 1320(%rsp)         # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 1312(%rsp)        # 8-byte Spill
	movq	%r12, 1304(%rsp)        # 8-byte Spill
	movq	%r13, 1296(%rsp)        # 8-byte Spill
	movq	%rbp, 1288(%rsp)        # 8-byte Spill
	movq	%r14, 1280(%rsp)        # 8-byte Spill
	movq	%rbx, 1272(%rsp)        # 8-byte Spill
	movq	%r10, 1264(%rsp)        # 8-byte Spill
	movq	%r11, 1256(%rsp)        # 8-byte Spill
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2072(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1376(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2040(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2048(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1400(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1416(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1408(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2504(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1424(%rsp), %r8         # 8-byte Reload
	movq	1328(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1432(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1440(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2480(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1248(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1440(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1244(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1448(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1336(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1240(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1240(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1244(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1244(%rsp), %xmm0       # 4-byte Reload
	vmovss	1240(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1236(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2480(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1224(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1464(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2480(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1220(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1472(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1336(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1208(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1208(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1472(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1336(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1204(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1204(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1220(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1220(%rsp), %xmm0       # 4-byte Reload
	vmovss	1204(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1200(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1200(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1236(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1488(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1236(%rsp), %xmm0       # 4-byte Reload
	vmovss	1200(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1196(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1204(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1496(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1244(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1244(%rsp), %xmm0       # 4-byte Reload
	vmovss	1204(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1192(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1220(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1512(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1240(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1520(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1240(%rsp), %xmm0       # 4-byte Reload
	vmovss	1220(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1188(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1528(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1192(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1536(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1188(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1544(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1188(%rsp), %xmm0       # 4-byte Reload
	vmovss	1192(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp512:
	.loc	2 64 0                  # kiss_fft.c:64:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1184(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1960(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1176(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1172(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1552(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1552(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2280(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1168(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1168(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1172(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1172(%rsp), %xmm0       # 4-byte Reload
	vmovss	1168(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1164(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2008(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2392(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1152(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1148(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2280(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1136(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1136(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1568(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2280(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1132(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1132(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1148(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1148(%rsp), %xmm0       # 4-byte Reload
	vmovss	1132(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1128(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1128(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1576(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1164(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1584(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1164(%rsp), %xmm0       # 4-byte Reload
	vmovss	1128(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1124(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1132(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1172(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1600(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1172(%rsp), %xmm0       # 4-byte Reload
	vmovss	1132(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1120(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1148(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1608(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1168(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1168(%rsp), %xmm0       # 4-byte Reload
	vmovss	1148(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1116(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	2240(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1120(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1116(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1632(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1116(%rsp), %xmm0       # 4-byte Reload
	vmovss	1120(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp513:
	.loc	2 65 0                  # kiss_fft.c:65:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1112(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1640(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1104(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1640(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1100(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1648(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1648(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1096(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1096(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1100(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1100(%rsp), %xmm0       # 4-byte Reload
	vmovss	1096(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1092(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1664(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2384(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2296(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 1080(%rsp)        # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2384(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1076(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1672(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1064(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1064(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1060(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1060(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1076(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1076(%rsp), %xmm0       # 4-byte Reload
	vmovss	1060(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1056(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1056(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1680(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1092(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1092(%rsp), %xmm0       # 4-byte Reload
	vmovss	1056(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1052(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1060(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1696(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1100(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1704(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1100(%rsp), %xmm0       # 4-byte Reload
	vmovss	1060(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1048(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1076(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1096(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1728(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1096(%rsp), %xmm0       # 4-byte Reload
	vmovss	1076(%rsp), %xmm1       # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1044(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1048(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1744(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1044(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1752(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1044(%rsp), %xmm0       # 4-byte Reload
	vmovss	1048(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp514:
	.loc	2 67 0                  # kiss_fft.c:67:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1040(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2152(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1036(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1124(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1036(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1036(%rsp), %xmm0       # 4-byte Reload
	vmovss	1124(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1760(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1032(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2232(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1328(%rsp), %r8         # 8-byte Reload
	movq	%rcx, 1024(%rsp)        # 8-byte Spill
	movq	%r8, %rcx
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1020(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1784(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1112(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1020(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1792(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1020(%rsp), %xmm0       # 4-byte Reload
	vmovss	1112(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
.Ltmp515:
	.loc	2 68 0                  # kiss_fft.c:68:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1800(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1016(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1036(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1808(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1124(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1124(%rsp), %xmm0       # 4-byte Reload
	vmovss	1036(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1012(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1824(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	1012(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1832(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	1012(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1008(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1008(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1112(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1848(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1112(%rsp), %xmm0       # 4-byte Reload
	vmovss	1008(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1004(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1864(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1856(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	1004(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1872(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	1004(%rsp), %xmm0       # 4-byte Reload
	vmovss	%xmm0, 4(%rcx)
.Ltmp516:
	.loc	2 69 0                  # kiss_fft.c:69:0
	movq	1880(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1052(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1196(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1196(%rsp), %xmm0       # 4-byte Reload
	vmovss	1052(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 1000(%rsp)       # 4-byte Spill
	callq	trace_logger_log_double
	movq	1880(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1040(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1184(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1184(%rsp), %xmm0       # 4-byte Reload
	vmovss	1040(%rsp), %xmm1       # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp517:
	.loc	2 70 0                  # kiss_fft.c:70:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 996(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1052(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1888(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1196(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1896(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1196(%rsp), %xmm0       # 4-byte Reload
	vmovss	1052(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1904(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 992(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	1912(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1040(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1920(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1184(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1928(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1184(%rsp), %xmm0       # 4-byte Reload
	vmovss	1040(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
.Ltmp518:
	.loc	2 71 0                  # kiss_fft.c:71:0
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1936(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 988(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 984(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	1000(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	984(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1944(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	984(%rsp), %xmm0        # 4-byte Reload
	vmovss	1000(%rsp), %xmm1       # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 980(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1952(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1176(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1960(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	980(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1968(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	vmovss	980(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 976(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1976(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	996(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	976(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	1984(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	976(%rsp), %xmm0        # 4-byte Reload
	vmovss	996(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 972(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2000(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	1992(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1152(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2008(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	972(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2016(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	movq	2392(%rsp), %rdx        # 8-byte Reload
	vmovss	972(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
.Ltmp519:
	.loc	2 72 0                  # kiss_fft.c:72:0
	movq	2024(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2048(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2496(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2032(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1336(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2040(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2496(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1336(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 960(%rsp)         # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2048(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp520:
	#DEBUG_VALUE: kf_bfly4:tw1 <- [RSP+960]
	.loc	2 73 0                  # kiss_fft.c:73:0
	movq	2056(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2080(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2368(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2064(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2280(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2072(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2368(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	2280(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 952(%rsp)         # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2080(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp521:
	#DEBUG_VALUE: kf_bfly4:tw2 <- [RSP+952]
	.loc	2 74 0                  # kiss_fft.c:74:0
	movq	2096(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2120(%rsp), %rcx        # 8-byte Reload
	movq	2088(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2104(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2112(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2360(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1360(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 944(%rsp)         # 8-byte Spill
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2120(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp522:
	#DEBUG_VALUE: kf_bfly4:tw3 <- [RSP+944]
	.loc	2 75 0                  # kiss_fft.c:75:0
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 940(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	940(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2128(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1000(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2136(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1000(%rsp), %xmm0       # 4-byte Reload
	vmovss	940(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 936(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2144(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2152(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	936(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2160(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	936(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	2168(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 932(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	2176(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	932(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2184(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	996(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2192(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	996(%rsp), %xmm0        # 4-byte Reload
	vmovss	932(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	2200(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	vmovss	%xmm2, 928(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	2224(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2216(%rsp), %rcx        # 8-byte Reload
	movq	2208(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	2240(%rsp), %rsi        # 8-byte Reload
	movq	1024(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	2232(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	928(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	2256(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rdx        # 8-byte Reload
	movq	2248(%rsp), %rcx        # 8-byte Reload
	movq	1264(%rsp), %r8         # 8-byte Reload
	movq	1256(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	2296(%rsp), %rcx        # 8-byte Reload
	vmovss	928(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx)
.Ltmp523:
	.loc	2 77 0                  # kiss_fft.c:77:0
	movq	1296(%rsp), %rdi        # 8-byte Reload
	movq	1288(%rsp), %rsi        # 8-byte Reload
	movq	2288(%rsp), %rdx        # 8-byte Reload
	movq	2264(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	2276(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1312(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1304(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1272(%rsp), %rdi        # 8-byte Reload
	movq	1264(%rsp), %rsi        # 8-byte Reload
	movq	1264(%rsp), %rdx        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1280(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2347(%rsp), %al         # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	1328(%rsp), %rsi        # 8-byte Reload
	movq	1328(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movq	1264(%rsp), %r9         # 8-byte Reload
	movq	1256(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	2347(%rsp), %al         # 1-byte Reload
	testb	$1, %al
	jne	.LBB12_3
.Ltmp524:
# BB#2:                                 #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str262532, %r8
	leaq	.L.str4274, %rdx
	movabsq	$82, %rdi
	leaq	.L.str166436, %rsi
	leaq	.L.str276, %r9
	leaq	.L.str284, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str283, %r12
	leaq	.L.str236506, %r13
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str244514, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str281, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	movabsq	$80, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str282, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str232502, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str246516, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str279, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$79, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str280, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str277, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$78, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str278, %rax
	.loc	2 78 0                  # kiss_fft.c:78:0
.Ltmp525:
	movq	%rax, 760(%rsp)         # 8-byte Spill
	movq	768(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 752(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 744(%rsp)         # 8-byte Spill
	movq	%rdx, 736(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	784(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 728(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	896(%rsp), %rax         # 8-byte Reload
	movq	%r8, 720(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 712(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 704(%rsp)         # 8-byte Spill
	movl	%ebp, 700(%rsp)         # 4-byte Spill
	movq	%r15, 688(%rsp)         # 8-byte Spill
	movq	%r13, 680(%rsp)         # 8-byte Spill
	movq	%r12, 672(%rsp)         # 8-byte Spill
	movl	%ebx, 668(%rsp)         # 4-byte Spill
	movq	%r10, 656(%rsp)         # 8-byte Spill
	movq	%r11, 648(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	vmovss	988(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	vmovss	988(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 644(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1248(%rsp), %rax        # 8-byte Reload
	vmovss	644(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 79 0                  # kiss_fft.c:79:0
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	992(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	vmovss	992(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 640(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	640(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1224(%rsp), %rax        # 8-byte Reload
	vmovss	640(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 80 0                  # kiss_fft.c:80:0
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	988(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	vmovss	988(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 636(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	864(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	848(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	880(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	872(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	636(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rax        # 8-byte Reload
	vmovss	636(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 81 0                  # kiss_fft.c:81:0
	movq	904(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	896(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	992(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	vmovss	992(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	.loc	2 82 0                  # kiss_fft.c:82:0
	cvtss2sd	%xmm2, %xmm0
	movq	704(%rsp), %rdi         # 8-byte Reload
	movq	688(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	736(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 632(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	752(%rsp), %rdi         # 8-byte Reload
	movq	744(%rsp), %rsi         # 8-byte Reload
	movq	712(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	648(%rsp), %r8          # 8-byte Reload
	movl	668(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	920(%rsp), %rdi         # 8-byte Reload
	movq	728(%rsp), %rsi         # 8-byte Reload
	movq	728(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	720(%rsp), %r8          # 8-byte Reload
	movq	728(%rsp), %r9          # 8-byte Reload
	movq	736(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	632(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 628(%rsp)        # 4-byte Spill
	jmp	.LBB12_4
.Ltmp526:
.LBB12_3:                               #   in Loop: Header=BB12_1 Depth=1
	movabsq	$1, %rax
	movabsq	$0, %rcx
	leaq	.L.str262532, %r8
	leaq	.L.str4274, %rdx
	movabsq	$-1, %rdi
	leaq	.L.str166436, %rsi
	leaq	.L.str275, %r9
	leaq	.L.str292, %r10
	movabsq	$2, %r11
	movl	$0, %ebx
	movl	$1, %ebp
	movabsq	$19134, %r14            # imm = 0x4ABE
	movabsq	$32, %r15
	leaq	.L.str291, %r12
	leaq	.L.str236506, %r13
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str244514, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$86, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str289, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	movabsq	$85, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str290, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str232502, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str246516, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str287, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	movabsq	$84, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	leaq	.L.str288, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str285, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	movabsq	$83, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str286, %rax
	.loc	2 83 0                  # kiss_fft.c:83:0
.Ltmp527:
	movq	%rax, 456(%rsp)         # 8-byte Spill
	movq	464(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 448(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 440(%rsp)         # 8-byte Spill
	movq	%rdx, 432(%rsp)         # 8-byte Spill
	movq	%r9, %rdx
	movq	480(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 424(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	592(%rsp), %rax         # 8-byte Reload
	movq	%r8, 416(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 408(%rsp)          # 8-byte Spill
	movl	%ebx, %r9d
	movl	$1, (%rsp)
	movq	%r14, 400(%rsp)         # 8-byte Spill
	movl	%ebp, 396(%rsp)         # 4-byte Spill
	movq	%r15, 384(%rsp)         # 8-byte Spill
	movq	%r13, 376(%rsp)         # 8-byte Spill
	movq	%r12, 368(%rsp)         # 8-byte Spill
	movl	%ebx, 364(%rsp)         # 4-byte Spill
	movq	%r10, 352(%rsp)         # 8-byte Spill
	movq	%r11, 344(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	vmovss	988(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	vmovss	988(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 340(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	464(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	1248(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	424(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	340(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1248(%rsp), %rax        # 8-byte Reload
	vmovss	340(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 84 0                  # kiss_fft.c:84:0
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	992(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	vmovss	992(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 336(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	496(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	1224(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movq	424(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	336(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	512(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1224(%rsp), %rax        # 8-byte Reload
	vmovss	336(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 85 0                  # kiss_fft.c:85:0
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	988(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1032(%rsp), %xmm0       # 4-byte Reload
	vmovss	988(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 332(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	560(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	576(%rsp), %rsi         # 8-byte Reload
	movq	1104(%rsp), %rdx        # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	568(%rsp), %r8          # 8-byte Reload
	movq	424(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	332(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1104(%rsp), %rax        # 8-byte Reload
	vmovss	332(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rax)
	.loc	2 86 0                  # kiss_fft.c:86:0
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	592(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	992(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	344(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	376(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1016(%rsp), %xmm0       # 4-byte Reload
	vmovss	992(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	384(%rsp), %rsi         # 8-byte Reload
	movq	616(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	424(%rsp), %r8          # 8-byte Reload
	movq	432(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 328(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	448(%rsp), %rdi         # 8-byte Reload
	movq	440(%rsp), %rsi         # 8-byte Reload
	movq	408(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	344(%rsp), %r8          # 8-byte Reload
	movl	364(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	616(%rsp), %rdi         # 8-byte Reload
	movq	424(%rsp), %rsi         # 8-byte Reload
	movq	424(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	416(%rsp), %r8          # 8-byte Reload
	movq	424(%rsp), %r9          # 8-byte Reload
	movq	432(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	328(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 628(%rsp)        # 4-byte Spill
.Ltmp528:
.LBB12_4:                               #   in Loop: Header=BB12_1 Depth=1
	vmovss	628(%rsp), %xmm0        # 4-byte Reload
	movabsq	$1, %rax
	leaq	.L.str295, %rcx
	movabsq	$0, %rdx
	leaq	.L.str4274, %rsi
	movabsq	$2, %rdi
	leaq	.L.str260530, %r8
	movabsq	$3, %r9
	leaq	.L.str297, %r10
	movabsq	$89, %r11
	leaq	.L.str166436, %rbx
	leaq	.L.str262532, %r14
	leaq	.L.str296, %r15
	movl	$0, %ebp
	movl	$1, %r12d
	movabsq	$19134, %r13            # imm = 0x4ABE
	movq	%rax, 320(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	leaq	.L.str263533, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str219489, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 264(%rsp)         # 8-byte Spill
	leaq	.L.str264534, %rax
	movq	%rax, 256(%rsp)         # 8-byte Spill
	leaq	.L.str185455, %rax
	movq	%rax, 248(%rsp)         # 8-byte Spill
	movabsq	$88, %rax
	movq	%rax, 240(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 232(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 224(%rsp)         # 8-byte Spill
	leaq	.L.str293, %rax
	movq	%rax, 216(%rsp)         # 8-byte Spill
	leaq	.L.str222492, %rax
	movq	%rax, 208(%rsp)         # 8-byte Spill
	movabsq	$81, %rax
	movq	%rax, 200(%rsp)         # 8-byte Spill
	leaq	.L.str294, %rax
	movq	%rax, 192(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 184(%rsp)         # 8-byte Spill
	leaq	.L.str275, %rax
	movq	%rax, 176(%rsp)         # 8-byte Spill
	leaq	.L.str291, %rax
	movq	%rax, 168(%rsp)         # 8-byte Spill
	leaq	.L.str283, %rax
	movq	%rax, 160(%rsp)         # 8-byte Spill
	leaq	.L.str276, %rax
	movq	%rax, 152(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	.loc	2 81 0                  # kiss_fft.c:81:0
.Ltmp529:
	movq	%rax, 144(%rsp)         # 8-byte Spill
	movq	272(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 136(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 128(%rsp)         # 8-byte Spill
	movq	%rbx, %rsi
	movq	%rdx, 120(%rsp)         # 8-byte Spill
	movq	%r14, %rdx
	movq	216(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 112(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	144(%rsp), %rax         # 8-byte Reload
	movq	%r8, 104(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	%r9, 96(%rsp)           # 8-byte Spill
	movl	%ebp, %r9d
	movl	$1, (%rsp)
	vmovss	%xmm0, 92(%rsp)         # 4-byte Spill
	movq	%r15, 80(%rsp)          # 8-byte Spill
	movl	%ebp, 76(%rsp)          # 4-byte Spill
	movl	%r12d, 72(%rsp)         # 4-byte Spill
	movq	%r13, 64(%rsp)          # 8-byte Spill
	movq	%r14, 56(%rsp)          # 8-byte Spill
	movq	%rbx, 48(%rsp)          # 8-byte Spill
	movq	%r10, 40(%rsp)          # 8-byte Spill
	movq	%r11, 32(%rsp)          # 8-byte Spill
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movq	320(%rsp), %r9          # 8-byte Reload
	movq	152(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	168(%rsp), %r8          # 8-byte Reload
	movq	320(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	176(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	200(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	184(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	1080(%rsp), %rdx        # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	216(%rsp), %rcx         # 8-byte Reload
	movq	120(%rsp), %r8          # 8-byte Reload
	movq	128(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1080(%rsp), %rax        # 8-byte Reload
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rax)
.Ltmp530:
	.loc	2 88 0                  # kiss_fft.c:88:0
	movq	240(%rsp), %rdi         # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	256(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	2296(%rsp), %rdx        # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	248(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	2296(%rsp), %rax        # 8-byte Reload
	addq	$8, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	256(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 24(%rsp)          # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp531:
	#DEBUG_VALUE: kf_bfly4:Fout <- [RSP+24]
	.loc	2 89 0                  # kiss_fft.c:89:0
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	304(%rsp), %rcx         # 8-byte Reload
	movq	264(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	1344(%rsp), %rdx        # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1344(%rsp), %rax        # 8-byte Reload
	addq	$-1, %rax
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	%rax, %rdx
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 16(%rsp)          # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp532:
	#DEBUG_VALUE: kf_bfly4:k <- [RSP+16]
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	112(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	120(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	312(%rsp), %rsi         # 8-byte Reload
	movq	16(%rsp), %rdx          # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	304(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	16(%rsp), %rax          # 8-byte Reload
	cmpq	$0, %rax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ebp
	movl	%ebp, %edx
	movq	64(%rsp), %rdi          # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 15(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	48(%rsp), %rsi          # 8-byte Reload
	movq	56(%rsp), %rdx          # 8-byte Reload
	movq	80(%rsp), %rcx          # 8-byte Reload
	movq	136(%rsp), %r8          # 8-byte Reload
	movl	76(%rsp), %r9d          # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	96(%rsp), %rdi          # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	40(%rsp), %r8           # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	136(%rsp), %rdi         # 8-byte Reload
	movq	120(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	104(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %ebp
	movl	%ebp, %edx
	movq	320(%rsp), %rdi         # 8-byte Reload
	movq	320(%rsp), %rsi         # 8-byte Reload
	movq	320(%rsp), %rcx         # 8-byte Reload
	movq	112(%rsp), %r8          # 8-byte Reload
	movq	120(%rsp), %r9          # 8-byte Reload
	movq	128(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	15(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	16(%rsp), %rsi          # 8-byte Reload
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	24(%rsp), %r8           # 8-byte Reload
	movq	%rcx, 2336(%rsp)        # 8-byte Spill
	movq	%rdx, 2328(%rsp)        # 8-byte Spill
	movq	%rsi, 2320(%rsp)        # 8-byte Spill
	movq	%rdi, 2312(%rsp)        # 8-byte Spill
	movq	%r8, 2304(%rsp)         # 8-byte Spill
	jne	.LBB12_5
	jmp	.LBB12_1
.Ltmp533:
.LBB12_5:
	movabsq	$90, %rdi
	leaq	.L.str166436, %rsi
	leaq	.L.str297, %rdx
	leaq	.L.str298, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 90 0                  # kiss_fft.c:90:0
	movl	$1, (%rsp)
	movl	%eax, 8(%rsp)           # 4-byte Spill
	callq	trace_logger_log0
	addq	$2760, %rsp             # imm = 0xAC8
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp534:
.Ltmp535:
	.size	kf_bfly4, .Ltmp535-kf_bfly4
.Lfunc_end12:
	.cfi_endproc

	.section	.rodata.cst8,"aM",@progbits,8
	.align	8
.LCPI13_0:
	.quad	4602678819172646912     # double 0.5
	.text
	.align	16, 0x90
	.type	kf_bfly3,@function
kf_bfly3:                               # @kf_bfly3
	.cfi_startproc
.Lfunc_begin13:
	.loc	2 98 0                  # kiss_fft.c:98:0
# BB#0:
	pushq	%rbp
.Ltmp543:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp544:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp545:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp546:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp547:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp548:
	.cfi_def_cfa_offset 56
	subq	$1848, %rsp             # imm = 0x738
.Ltmp549:
	.cfi_def_cfa_offset 1904
.Ltmp550:
	.cfi_offset %rbx, -56
.Ltmp551:
	.cfi_offset %r12, -48
.Ltmp552:
	.cfi_offset %r13, -40
.Ltmp553:
	.cfi_offset %r14, -32
.Ltmp554:
	.cfi_offset %r15, -24
.Ltmp555:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str217487, %r9
	leaq	.L.str4274, %r10
	movabsq	$108, %r11
	leaq	.L.str161431, %rbx
	leaq	.L.str1271, %r14
	leaq	.L.str216486, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1840(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1832(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1824(%rsp)        # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 1816(%rsp)        # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 1808(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1800(%rsp)        # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 1792(%rsp)        # 8-byte Spill
	movabsq	$20, %rax
	movq	%rax, 1784(%rsp)        # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 1776(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 1768(%rsp)        # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 1760(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1752(%rsp)        # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 1744(%rsp)        # 8-byte Spill
	movabsq	$106, %rax
	movq	%rax, 1736(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1728(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 1720(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 1712(%rsp)        # 8-byte Spill
	movabsq	$104, %rax
	movq	%rax, 1704(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1696(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 1688(%rsp)        # 8-byte Spill
	movabsq	$5, %rax
	movq	%rax, 1680(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 1672(%rsp)        # 8-byte Spill
	movabsq	$12, %rax
	movq	%rax, 1664(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 1656(%rsp)        # 8-byte Spill
	movabsq	$100, %rax
	movq	%rax, 1648(%rsp)        # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 1640(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	.loc	2 93 0 prologue_end     # kiss_fft.c:93:0
.Ltmp556:
	movq	%rax, 1632(%rsp)        # 8-byte Spill
	movq	1640(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 1624(%rsp)        # 8-byte Spill
	movq	%rax, %rdi
	movq	1824(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 1616(%rsp)        # 8-byte Spill
	movq	%rax, %rsi
	movq	1624(%rsp), %rax        # 8-byte Reload
	movq	%rdx, 1608(%rsp)        # 8-byte Spill
	movq	%rax, %rdx
	movq	1840(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 1600(%rsp)        # 8-byte Spill
	movq	%rax, %rcx
	movq	1632(%rsp), %rax        # 8-byte Reload
	movq	%r8, 1592(%rsp)         # 8-byte Spill
	movq	%rax, %r8
	movq	1592(%rsp), %rax        # 8-byte Reload
	movq	%r9, 1584(%rsp)         # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 1580(%rsp)        # 4-byte Spill
	movq	%r15, 1568(%rsp)        # 8-byte Spill
	movq	%r12, 1560(%rsp)        # 8-byte Spill
	movl	%r13d, 1556(%rsp)       # 4-byte Spill
	movq	%r14, 1544(%rsp)        # 8-byte Spill
	movq	%rbx, 1536(%rsp)        # 8-byte Spill
	movq	%r10, 1528(%rsp)        # 8-byte Spill
	movq	%r11, 1520(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1640(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+1624]
	#DEBUG_VALUE: kf_bfly3:fstride <- [RSP+1616]
	#DEBUG_VALUE: kf_bfly3:st <- [RSP+1608]
	#DEBUG_VALUE: kf_bfly3:m <- [RSP+1600]
.Ltmp557:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+1600]
	.loc	2 100 0                 # kiss_fft.c:100:0
	movq	1648(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1656(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1656(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1512(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
.Ltmp558:
	#DEBUG_VALUE: kf_bfly3:m2 <- [RSP+1512]
	.loc	2 104 0                 # kiss_fft.c:104:0
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1688(%rsp), %rcx        # 8-byte Reload
	movq	1664(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1672(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1600(%rsp), %rax        # 8-byte Reload
	movq	1616(%rsp), %rcx        # 8-byte Reload
	imulq	%rcx, %rax
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1504(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1712(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1680(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1504(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1688(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1504(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	addq	%rcx, %rax
	addq	$4, %rax
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1496(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	1704(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1696(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1496(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1712(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rax        # 8-byte Reload
	movq	1504(%rsp), %rcx        # 8-byte Reload
	vmovss	268(%rax,%rcx,8), %xmm0
	.loc	2 106 0                 # kiss_fft.c:106:0
	cvtss2sd	%xmm0, %xmm1
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 1492(%rsp)       # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1720(%rsp), %rcx        # 8-byte Reload
	movq	1592(%rsp), %r8         # 8-byte Reload
	movq	1528(%rsp), %r9         # 8-byte Reload
	callq	trace_logger_log_double
	movq	1736(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1776(%rsp), %rcx        # 8-byte Reload
	movq	1728(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1744(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1760(%rsp), %rdi        # 8-byte Reload
	movq	1752(%rsp), %rsi        # 8-byte Reload
	movq	1760(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1608(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1768(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	1608(%rsp), %rax        # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1776(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1480(%rsp)        # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp559:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+1480]
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+1480]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	1792(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1816(%rsp), %rcx        # 8-byte Reload
	movq	1784(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1560(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1840(%rsp), %rdx        # 8-byte Reload
	movq	1592(%rsp), %rcx        # 8-byte Reload
	movq	1800(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1808(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1616(%rsp), %rax        # 8-byte Reload
	shlq	$1, %rax
.Ltmp560:
	.loc	2 108 0                 # kiss_fft.c:108:0
	movq	1832(%rsp), %rdi        # 8-byte Reload
	movq	1824(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1816(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %r10        # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 1472(%rsp)        # 8-byte Spill
	callq	trace_logger_log_int
	movq	1520(%rsp), %rdi        # 8-byte Reload
	movq	1536(%rsp), %rsi        # 8-byte Reload
	movq	1544(%rsp), %rdx        # 8-byte Reload
	movq	1568(%rsp), %rcx        # 8-byte Reload
	movq	1560(%rsp), %r8         # 8-byte Reload
	movl	1580(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1840(%rsp), %rdi        # 8-byte Reload
	movq	1592(%rsp), %rsi        # 8-byte Reload
	movq	1592(%rsp), %rdx        # 8-byte Reload
	movq	1840(%rsp), %rcx        # 8-byte Reload
	movq	1584(%rsp), %r8         # 8-byte Reload
	movq	1592(%rsp), %r9         # 8-byte Reload
	movq	1528(%rsp), %rax        # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1480(%rsp), %rax        # 8-byte Reload
	movq	1480(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	1624(%rsp), %rsi        # 8-byte Reload
	movq	%rax, 1464(%rsp)        # 8-byte Spill
	movq	%rcx, 1456(%rsp)        # 8-byte Spill
	movq	%rdx, 1448(%rsp)        # 8-byte Spill
	movq	%rsi, 1440(%rsp)        # 8-byte Spill
.Ltmp561:
.LBB13_1:                               # =>This Inner Loop Header: Depth=1
	movq	1440(%rsp), %rax        # 8-byte Reload
	movq	1448(%rsp), %rcx        # 8-byte Reload
	movq	1456(%rsp), %rdx        # 8-byte Reload
	movq	1464(%rsp), %rsi        # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str255525, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %r10
	movabsq	$2, %r11
	leaq	.L.str217487, %rbx
	movabsq	$3, %r14
	leaq	.L.str257527, %r15
	movabsq	$133, %r12
	leaq	.L.str161431, %r13
	leaq	.L.str256526, %rbp
	movq	%rsi, 1432(%rsp)        # 8-byte Spill
	movl	$0, %esi
	movl	%esi, 1428(%rsp)        # 4-byte Spill
	movl	$1, %esi
	movq	%rax, 1416(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1408(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1400(%rsp)        # 8-byte Spill
	leaq	.L.str220490, %rax
	movq	%rax, 1392(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 1384(%rsp)        # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 1376(%rsp)        # 8-byte Spill
	leaq	.L.str219489, %rax
	movq	%rax, 1368(%rsp)        # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 1360(%rsp)        # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 1352(%rsp)        # 8-byte Spill
	leaq	.L.str221491, %rax
	movq	%rax, 1344(%rsp)        # 8-byte Spill
	leaq	.L.str185455, %rax
	movq	%rax, 1336(%rsp)        # 8-byte Spill
	movabsq	$132, %rax
	movq	%rax, 1328(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1320(%rsp)        # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 1312(%rsp)        # 8-byte Spill
	leaq	.L.str253523, %rax
	movq	%rax, 1304(%rsp)        # 8-byte Spill
	leaq	.L.str25295, %rax
	movq	%rax, 1296(%rsp)        # 8-byte Spill
	movabsq	$130, %rax
	movq	%rax, 1288(%rsp)        # 8-byte Spill
	leaq	.L.str254524, %rax
	movq	%rax, 1280(%rsp)        # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 1272(%rsp)        # 8-byte Spill
	leaq	.L.str235505, %rax
	movq	%rax, 1264(%rsp)        # 8-byte Spill
	leaq	.L.str252522, %rax
	movq	%rax, 1256(%rsp)        # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 1248(%rsp)        # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 1240(%rsp)        # 8-byte Spill
	leaq	.L.str250520, %rax
	movq	%rax, 1232(%rsp)        # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 1224(%rsp)        # 8-byte Spill
	movabsq	$129, %rax
	movq	%rax, 1216(%rsp)        # 8-byte Spill
	leaq	.L.str251521, %rax
	movq	%rax, 1208(%rsp)        # 8-byte Spill
	leaq	.L.str249519, %rax
	movq	%rax, 1200(%rsp)        # 8-byte Spill
	leaq	.L.str236506, %rax
	movq	%rax, 1192(%rsp)        # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 1184(%rsp)        # 8-byte Spill
	leaq	.L.str247517, %rax
	movq	%rax, 1176(%rsp)        # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 1168(%rsp)        # 8-byte Spill
	movabsq	$127, %rax
	movq	%rax, 1160(%rsp)        # 8-byte Spill
	leaq	.L.str248518, %rax
	movq	%rax, 1152(%rsp)        # 8-byte Spill
	leaq	.L.str246516, %rax
	movq	%rax, 1144(%rsp)        # 8-byte Spill
	leaq	.L.str244514, %rax
	movq	%rax, 1136(%rsp)        # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 1128(%rsp)        # 8-byte Spill
	movabsq	$126, %rax
	movq	%rax, 1120(%rsp)        # 8-byte Spill
	leaq	.L.str245515, %rax
	movq	%rax, 1112(%rsp)        # 8-byte Spill
	leaq	.L.str243513, %rax
	movq	%rax, 1104(%rsp)        # 8-byte Spill
	leaq	.L.str241511, %rax
	movq	%rax, 1096(%rsp)        # 8-byte Spill
	leaq	.L.str227497, %rax
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$124, %rax
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	leaq	.L.str242512, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str69339, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str240510, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str238508, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	leaq	.L.str164434, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	leaq	.L.str239509, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str237507, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	leaq	.L.str67337, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str8278, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str72342, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	movabsq	$122, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	leaq	.L.str71341, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	leaq	.L.str233503, %rax
	movq	%rax, 968(%rsp)         # 8-byte Spill
	movabsq	$120, %rax
	movq	%rax, 960(%rsp)         # 8-byte Spill
	leaq	.L.str234504, %rax
	movq	%rax, 952(%rsp)         # 8-byte Spill
	leaq	.L.str232502, %rax
	movq	%rax, 944(%rsp)         # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 936(%rsp)         # 8-byte Spill
	leaq	.L.str229499, %rax
	movq	%rax, 928(%rsp)         # 8-byte Spill
	leaq	.L.str231501, %rax
	vmovsd	.LCPI13_0, %xmm0
	movq	%rax, 920(%rsp)         # 8-byte Spill
	leaq	.L.str230500, %rax
	movq	%rax, 912(%rsp)         # 8-byte Spill
	movabsq	$41, %rax
	movq	%rax, 904(%rsp)         # 8-byte Spill
	leaq	.L.str228498, %rax
	movq	%rax, 896(%rsp)         # 8-byte Spill
	leaq	.L.str225495, %rax
	movq	%rax, 888(%rsp)         # 8-byte Spill
	movabsq	$119, %rax
	movq	%rax, 880(%rsp)         # 8-byte Spill
	leaq	.L.str226496, %rax
	movq	%rax, 872(%rsp)         # 8-byte Spill
	leaq	.L.str224494, %rax
	movq	%rax, 864(%rsp)         # 8-byte Spill
	leaq	.L.str168438, %rax
	movq	%rax, 856(%rsp)         # 8-byte Spill
	leaq	.L.str172442, %rax
	movq	%rax, 848(%rsp)         # 8-byte Spill
	leaq	.L.str223493, %rax
	movq	%rax, 840(%rsp)         # 8-byte Spill
	leaq	.L.str222492, %rax
	movq	%rax, 832(%rsp)         # 8-byte Spill
	leaq	.L.str163433, %rax
	movq	%rax, 824(%rsp)         # 8-byte Spill
	leaq	.L.str218488, %rax
	movq	%rax, 816(%rsp)         # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 808(%rsp)         # 8-byte Spill
	movabsq	$117, %rax
	movq	%rax, 800(%rsp)         # 8-byte Spill
	leaq	.L.str77347, %rax
	movq	%rax, 792(%rsp)         # 8-byte Spill
	leaq	.L.str207477, %rax
	movq	%rax, 784(%rsp)         # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$116, %rax
	movq	%rax, 768(%rsp)         # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str66336, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	movabsq	$115, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	leaq	.L.str34304, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str61331, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$114, %rax
	movq	%rax, 720(%rsp)         # 8-byte Spill
	leaq	.L.str64334, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	leaq	.L.str145415, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	movabsq	$112, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str53323, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str58328, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	leaq	.L.str143413, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str57327, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	leaq	.L.str135405, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	movabsq	$111, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str110380, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str9279, %rax
	.loc	2 111 0                 # kiss_fft.c:111:0
.Ltmp562:
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movq	1360(%rsp), %rax        # 8-byte Reload
	movq	%rdi, 488(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movl	%esi, 484(%rsp)         # 4-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 472(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	816(%rsp), %rax         # 8-byte Reload
	movq	%rcx, 464(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	504(%rsp), %rax         # 8-byte Reload
	movq	%r8, 456(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	1428(%rsp), %eax        # 4-byte Reload
	movq	%r9, 448(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r12, 440(%rsp)         # 8-byte Spill
	movq	%r13, 432(%rsp)         # 8-byte Spill
	movq	%rbp, 424(%rsp)         # 8-byte Spill
	vmovsd	%xmm0, 416(%rsp)        # 8-byte Spill
	movq	%r15, 408(%rsp)         # 8-byte Spill
	movq	%r14, 400(%rsp)         # 8-byte Spill
	movq	%r10, 392(%rsp)         # 8-byte Spill
	movq	%r11, 384(%rsp)         # 8-byte Spill
	movq	%rbx, 376(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	376(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	784(%rsp), %rcx         # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	376(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	496(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1368(%rsp), %rcx        # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	376(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	1360(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1336(%rsp), %rcx        # 8-byte Reload
	movq	504(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	376(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1624(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	512(%rsp), %r8          # 8-byte Reload
	movq	488(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	520(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1224(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1416(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 368(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 364(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	528(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	472(%rsp), %rcx         # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 360(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	360(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	vmovss	360(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 356(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1296(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	536(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1600(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1416(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 344(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 340(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	472(%rsp), %rcx         # 8-byte Reload
	addq	$4, %rcx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 328(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	328(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	544(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	472(%rsp), %rcx         # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 324(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	340(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	340(%rsp), %xmm0        # 4-byte Reload
	vmovss	324(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 320(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	320(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	356(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	356(%rsp), %xmm0        # 4-byte Reload
	vmovss	320(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 316(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	324(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	576(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	364(%rsp), %xmm0        # 4-byte Reload
	vmovss	324(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 312(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	340(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	584(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	360(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	360(%rsp), %xmm0        # 4-byte Reload
	vmovss	340(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 308(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	600(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	312(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	608(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	308(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	308(%rsp), %xmm0        # 4-byte Reload
	vmovss	312(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp563:
	.loc	2 112 0                 # kiss_fft.c:112:0
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 304(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1128(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1416(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 296(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 292(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	624(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	624(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 288(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	288(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	vmovss	288(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 284(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1168(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1512(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1416(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	addq	$4, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 272(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 268(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 256(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	640(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	640(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1432(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 252(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	vmovss	252(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 248(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	248(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	648(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	284(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	656(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	284(%rsp), %xmm0        # 4-byte Reload
	vmovss	248(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 244(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	252(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	672(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	292(%rsp), %xmm0        # 4-byte Reload
	vmovss	252(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 240(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	268(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	680(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	288(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	288(%rsp), %xmm0        # 4-byte Reload
	vmovss	268(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 236(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	696(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	240(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	704(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	236(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	712(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	236(%rsp), %xmm0        # 4-byte Reload
	vmovss	240(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp564:
	.loc	2 114 0                 # kiss_fft.c:114:0
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 232(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	244(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	316(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	316(%rsp), %xmm0        # 4-byte Reload
	vmovss	244(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 228(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	720(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	232(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	304(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	304(%rsp), %xmm0        # 4-byte Reload
	vmovss	232(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp565:
	.loc	2 115 0                 # kiss_fft.c:115:0
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 224(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	244(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	316(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	736(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	316(%rsp), %xmm0        # 4-byte Reload
	vmovss	244(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 220(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	744(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	232(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	304(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	760(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	304(%rsp), %xmm0        # 4-byte Reload
	vmovss	232(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
.Ltmp566:
	.loc	2 116 0                 # kiss_fft.c:116:0
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 216(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	792(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1616(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	776(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	472(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	784(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1616(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	472(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 208(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	792(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp567:
	#DEBUG_VALUE: kf_bfly3:tw1 <- [RSP+208]
	.loc	2 117 0                 # kiss_fft.c:117:0
	movq	800(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	824(%rsp), %rcx         # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1472(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	808(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1432(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	816(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1472(%rsp), %rcx        # 8-byte Reload
	shlq	$3, %rcx
	movq	1432(%rsp), %rdx        # 8-byte Reload
	addq	%rcx, %rdx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rdx, 200(%rsp)         # 8-byte Spill
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	824(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp568:
	#DEBUG_VALUE: kf_bfly3:tw2 <- [RSP+200]
	.loc	2 119 0                 # kiss_fft.c:119:0
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1040(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 196(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	196(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	832(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	196(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 184(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	228(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	228(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 176(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	176(%rsp), %xmm0        # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 168(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	168(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	848(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	856(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	184(%rsp), %xmm0        # 8-byte Reload
	vmovsd	168(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 160(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	864(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	160(%rsp), %xmm0        # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 156(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	880(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	872(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	888(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	2 120 0                 # kiss_fft.c:120:0
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	addq	$4, %rcx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 144(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 140(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	140(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	140(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 128(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	904(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm1, 120(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	416(%rsp), %xmm0        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	1384(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	912(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	120(%rsp), %xmm0        # 8-byte Reload
	vmovsd	416(%rsp), %xmm1        # 8-byte Reload
	vmulsd	%xmm1, %xmm0, %xmm2
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 112(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	112(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	928(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	128(%rsp), %xmm0        # 8-byte Reload
	vmovsd	112(%rsp), %xmm1        # 8-byte Reload
	vsubsd	%xmm1, %xmm0, %xmm2
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovaps	%xmm2, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovsd	%xmm2, 104(%rsp)        # 8-byte Spill
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	936(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	944(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovsd	104(%rsp), %xmm0        # 8-byte Reload
	cvtsd2ss	%xmm0, %xmm1
	cvtss2sd	%xmm1, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm1, 100(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	960(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	952(%rsp), %rcx         # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	968(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
	.loc	2 122 0                 # kiss_fft.c:122:0
.Ltmp569:
	movq	992(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	220(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	976(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1492(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1492(%rsp), %xmm0       # 4-byte Reload
	vmovss	220(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 96(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	992(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	984(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	216(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1000(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1492(%rsp), %xmm0       # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	1492(%rsp), %xmm0       # 4-byte Reload
	vmovss	216(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
.Ltmp570:
	.loc	2 124 0                 # kiss_fft.c:124:0
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 92(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 88(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	228(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1016(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	88(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1024(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	88(%rsp), %xmm0         # 4-byte Reload
	vmovss	228(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 84(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1032(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1040(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 80(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	80(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1056(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	224(%rsp), %xmm0        # 4-byte Reload
	vmovss	80(%rsp), %xmm1         # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 76(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1072(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	144(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1088(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	76(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1096(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	vmovss	76(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx)
.Ltmp571:
	.loc	2 126 0                 # kiss_fft.c:126:0
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 72(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	72(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1104(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	vmovss	72(%rsp), %xmm1         # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 68(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1120(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1112(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	296(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1128(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	68(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1136(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	vmovss	68(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	2 127 0                 # kiss_fft.c:127:0
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 64(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	64(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1144(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	64(%rsp), %xmm0         # 4-byte Reload
	vmovss	96(%rsp), %xmm1         # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 60(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1160(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1152(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	272(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1168(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	60(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1176(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1512(%rsp), %rdx        # 8-byte Reload
	vmovss	60(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
	.loc	2 129 0                 # kiss_fft.c:129:0
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 56(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	1184(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	92(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1192(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	56(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1200(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	56(%rsp), %xmm0         # 4-byte Reload
	vmovss	92(%rsp), %xmm1         # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 52(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1216(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1208(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	368(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1224(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	52(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1232(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	52(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx,%rdx,8)
	.loc	2 130 0                 # kiss_fft.c:130:0
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	1240(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	4(%rcx,%rdx,8), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	vmovss	%xmm0, 48(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	1248(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	48(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1256(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1264(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	vmovss	48(%rsp), %xmm1         # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 44(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	1288(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1280(%rsp), %rcx        # 8-byte Reload
	movq	1272(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	344(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1296(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	44(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1312(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	1304(%rsp), %rcx        # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	392(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	1416(%rsp), %rcx        # 8-byte Reload
	movq	1600(%rsp), %rdx        # 8-byte Reload
	vmovss	44(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx,%rdx,8)
	.loc	2 132 0                 # kiss_fft.c:132:0
	movq	1328(%rsp), %rdi        # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1344(%rsp), %rcx        # 8-byte Reload
	movq	1320(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	488(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1416(%rsp), %rdx        # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1336(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	1416(%rsp), %rcx        # 8-byte Reload
	addq	$8, %rcx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1344(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp572:
	#DEBUG_VALUE: kf_bfly3:Fout <- [RSP+32]
	.loc	2 133 0                 # kiss_fft.c:133:0
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	1392(%rsp), %rcx        # 8-byte Reload
	movq	1352(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	1360(%rsp), %rdx        # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	464(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1368(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	464(%rsp), %rcx         # 8-byte Reload
	addq	$-1, %rcx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	488(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
.Ltmp573:
	#DEBUG_VALUE: kf_bfly3:k <- [RSP+24]
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	1376(%rsp), %r8         # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	1384(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	1400(%rsp), %rsi        # 8-byte Reload
	movq	24(%rsp), %rdx          # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	1392(%rsp), %r8         # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	24(%rsp), %rcx          # 8-byte Reload
	cmpq	$0, %rcx
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	1408(%rsp), %rdi        # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 23(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	440(%rsp), %rdi         # 8-byte Reload
	movq	432(%rsp), %rsi         # 8-byte Reload
	movq	376(%rsp), %rdx         # 8-byte Reload
	movq	424(%rsp), %rcx         # 8-byte Reload
	movq	384(%rsp), %r8          # 8-byte Reload
	movl	1428(%rsp), %r9d        # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	408(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	384(%rsp), %rdi         # 8-byte Reload
	movq	448(%rsp), %rsi         # 8-byte Reload
	movq	448(%rsp), %rdx         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	23(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	488(%rsp), %rdi         # 8-byte Reload
	movq	488(%rsp), %rsi         # 8-byte Reload
	movq	488(%rsp), %rcx         # 8-byte Reload
	movq	456(%rsp), %r8          # 8-byte Reload
	movq	448(%rsp), %r9          # 8-byte Reload
	movq	392(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	200(%rsp), %rcx         # 8-byte Reload
	movq	208(%rsp), %rdx         # 8-byte Reload
	movq	24(%rsp), %rsi          # 8-byte Reload
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	%rcx, 1464(%rsp)        # 8-byte Spill
	movq	%rdx, 1456(%rsp)        # 8-byte Spill
	movq	%rsi, 1448(%rsp)        # 8-byte Spill
	movq	%rdi, 1440(%rsp)        # 8-byte Spill
	jne	.LBB13_2
	jmp	.LBB13_1
.Ltmp574:
.LBB13_2:
	movabsq	$134, %rdi
	leaq	.L.str161431, %rsi
	leaq	.L.str257527, %rdx
	leaq	.L.str258528, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 134 0                 # kiss_fft.c:134:0
	movl	$1, (%rsp)
	movl	%eax, 16(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$1848, %rsp             # imm = 0x738
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp575:
.Ltmp576:
	.size	kf_bfly3, .Ltmp576-kf_bfly3
.Lfunc_end13:
	.cfi_endproc

	.align	16, 0x90
	.type	kf_bfly2,@function
kf_bfly2:                               # @kf_bfly2
	.cfi_startproc
.Lfunc_begin14:
	.loc	2 27 0                  # kiss_fft.c:27:0
# BB#0:
	pushq	%rbp
.Ltmp584:
	.cfi_def_cfa_offset 16
	pushq	%r15
.Ltmp585:
	.cfi_def_cfa_offset 24
	pushq	%r14
.Ltmp586:
	.cfi_def_cfa_offset 32
	pushq	%r13
.Ltmp587:
	.cfi_def_cfa_offset 40
	pushq	%r12
.Ltmp588:
	.cfi_def_cfa_offset 48
	pushq	%rbx
.Ltmp589:
	.cfi_def_cfa_offset 56
	subq	$1096, %rsp             # imm = 0x448
.Ltmp590:
	.cfi_def_cfa_offset 1152
.Ltmp591:
	.cfi_offset %rbx, -56
.Ltmp592:
	.cfi_offset %r12, -48
.Ltmp593:
	.cfi_offset %r13, -40
.Ltmp594:
	.cfi_offset %r14, -32
.Ltmp595:
	.cfi_offset %r15, -24
.Ltmp596:
	.cfi_offset %rbp, -16
	movabsq	$1, %rax
	movabsq	$0, %r8
	leaq	.L.str205475, %r9
	leaq	.L.str4274, %r10
	movabsq	$32, %r11
	leaq	.L.str157427, %rbx
	leaq	.L.str1271, %r14
	leaq	.L.str204474, %r15
	movabsq	$2, %r12
	movl	$0, %ebp
	movl	$1, %r13d
	movq	%rax, 1088(%rsp)        # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 1080(%rsp)        # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 1072(%rsp)        # 8-byte Spill
	leaq	.L.str7277, %rax
	movq	%rax, 1064(%rsp)        # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 1056(%rsp)        # 8-byte Spill
	leaq	.L.str6276, %rax
	movq	%rax, 1048(%rsp)        # 8-byte Spill
	movabsq	$31, %rax
	movq	%rax, 1040(%rsp)        # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 1032(%rsp)        # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 1024(%rsp)        # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 1016(%rsp)        # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 1008(%rsp)        # 8-byte Spill
	leaq	.L.str117387, %rax
	movq	%rax, 1000(%rsp)        # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 992(%rsp)         # 8-byte Spill
	movabsq	$3, %rax
	movq	%rax, 984(%rsp)         # 8-byte Spill
	movabsq	$4, %rax
	movq	%rax, 976(%rsp)         # 8-byte Spill
	movabsq	$24601, %rax            # imm = 0x6019
	movq	%rax, 968(%rsp)         # 8-byte Spill
	leaq	.L.str129399, %rax
	.loc	2 22 0 prologue_end     # kiss_fft.c:22:0
.Ltmp597:
	movq	%rax, 960(%rsp)         # 8-byte Spill
	movq	968(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 952(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	1072(%rsp), %rax        # 8-byte Reload
	movq	%rsi, 944(%rsp)         # 8-byte Spill
	movq	%rax, %rsi
	movq	952(%rsp), %rax         # 8-byte Reload
	movq	%rdx, 936(%rsp)         # 8-byte Spill
	movq	%rax, %rdx
	movq	1088(%rsp), %rax        # 8-byte Reload
	movl	%ecx, 932(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	1056(%rsp), %rax        # 8-byte Reload
	movq	%r8, 920(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movq	920(%rsp), %rax         # 8-byte Reload
	movq	%r9, 912(%rsp)          # 8-byte Spill
	movq	%rax, %r9
	movq	%r10, (%rsp)
	movl	%ebp, 908(%rsp)         # 4-byte Spill
	movq	%r15, 896(%rsp)         # 8-byte Spill
	movq	%r12, 888(%rsp)         # 8-byte Spill
	movl	%r13d, 884(%rsp)        # 4-byte Spill
	movq	%r14, 872(%rsp)         # 8-byte Spill
	movq	%rbx, 864(%rsp)         # 8-byte Spill
	movq	%r10, 856(%rsp)         # 8-byte Spill
	movq	%r11, 848(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	960(%rsp), %r8          # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movl	932(%rsp), %ebp         # 4-byte Reload
	movl	%ebp, %r13d
	movl	%r13d, %edx
	movq	968(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+952]
	#DEBUG_VALUE: kf_bfly2:fstride <- [RSP+944]
	#DEBUG_VALUE: kf_bfly2:st <- [RSP+936]
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+932]
	.loc	2 29 0                  # kiss_fft.c:29:0
	movq	1032(%rsp), %rdi        # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1008(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	976(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	984(%rsp), %rdi         # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	984(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	920(%rsp), %rcx         # 8-byte Reload
	movq	992(%rsp), %r8          # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	936(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1000(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	936(%rsp), %rax         # 8-byte Reload
	addq	$264, %rax              # imm = 0x108
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1008(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 840(%rsp)         # 8-byte Spill
	callq	trace_logger_log_ptr
.Ltmp598:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+840]
	.loc	2 31 0                  # kiss_fft.c:31:0
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1048(%rsp), %rcx        # 8-byte Reload
	movq	1016(%rsp), %r8         # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movl	932(%rsp), %r9d         # 4-byte Reload
	movl	%r9d, %ebp
	movl	%ebp, %edx
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	848(%rsp), %rsi         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1024(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movl	932(%rsp), %ebp         # 4-byte Reload
	movslq	%ebp, %rax
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rax, %rdx
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movq	%rax, 832(%rsp)         # 8-byte Spill
	callq	trace_logger_log_int
	movq	1040(%rsp), %rdi        # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	1064(%rsp), %rcx        # 8-byte Reload
	movq	1032(%rsp), %r8         # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	888(%rsp), %rdi         # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	832(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1048(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	1056(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_ptr
	movq	832(%rsp), %rax         # 8-byte Reload
	shlq	$3, %rax
	movq	952(%rsp), %rcx         # 8-byte Reload
	addq	%rax, %rcx
	movq	1080(%rsp), %rdi        # 8-byte Reload
	movq	1072(%rsp), %rsi        # 8-byte Reload
	movq	%rcx, %rdx
	movq	1088(%rsp), %rax        # 8-byte Reload
	movq	%rcx, 824(%rsp)         # 8-byte Spill
	movq	%rax, %rcx
	movq	1064(%rsp), %r8         # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp599:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+824]
	.loc	2 32 0                  # kiss_fft.c:32:0
	movq	848(%rsp), %rdi         # 8-byte Reload
	movq	864(%rsp), %rsi         # 8-byte Reload
	movq	872(%rsp), %rdx         # 8-byte Reload
	movq	896(%rsp), %rcx         # 8-byte Reload
	movq	888(%rsp), %r8          # 8-byte Reload
	movl	908(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	1088(%rsp), %rdi        # 8-byte Reload
	movq	920(%rsp), %rsi         # 8-byte Reload
	movq	920(%rsp), %rdx         # 8-byte Reload
	movq	1088(%rsp), %rcx        # 8-byte Reload
	movq	912(%rsp), %r8          # 8-byte Reload
	movq	920(%rsp), %r9          # 8-byte Reload
	movq	856(%rsp), %rax         # 8-byte Reload
	movq	%rax, (%rsp)
	callq	trace_logger_log_int
	movq	824(%rsp), %rax         # 8-byte Reload
	movq	840(%rsp), %rcx         # 8-byte Reload
	movl	932(%rsp), %ebp         # 4-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	%rax, 816(%rsp)         # 8-byte Spill
	movq	%rcx, 808(%rsp)         # 8-byte Spill
	movl	%ebp, 804(%rsp)         # 4-byte Spill
	movq	%rdx, 792(%rsp)         # 8-byte Spill
.Ltmp600:
.LBB14_1:                               # =>This Inner Loop Header: Depth=1
	movq	792(%rsp), %rax         # 8-byte Reload
	movl	804(%rsp), %ecx         # 4-byte Reload
	movq	808(%rsp), %rdx         # 8-byte Reload
	movq	816(%rsp), %rsi         # 8-byte Reload
	movabsq	$1, %rdi
	leaq	.L.str145415, %r8
	movabsq	$0, %r9
	leaq	.L.str4274, %r10
	movabsq	$2, %r11
	leaq	.L.str205475, %rbx
	movabsq	$3, %r14
	leaq	.L.str214484, %r15
	movabsq	$41, %r12
	leaq	.L.str157427, %r13
	leaq	.L.str213483, %rbp
	movl	%ecx, 788(%rsp)         # 4-byte Spill
	movl	$0, %ecx
	movl	%ecx, 784(%rsp)         # 4-byte Spill
	movl	$1, %ecx
	movq	%rax, 776(%rsp)         # 8-byte Spill
	movabsq	$19134, %rax            # imm = 0x4ABE
	movq	%rax, 768(%rsp)         # 8-byte Spill
	movabsq	$32, %rax
	movq	%rax, 760(%rsp)         # 8-byte Spill
	leaq	.L.str61331, %rax
	movq	%rax, 752(%rsp)         # 8-byte Spill
	leaq	.L.str3273, %rax
	movq	%rax, 744(%rsp)         # 8-byte Spill
	movabsq	$46, %rax
	movq	%rax, 736(%rsp)         # 8-byte Spill
	leaq	.L.str208478, %rax
	movq	%rax, 728(%rsp)         # 8-byte Spill
	movabsq	$4294967295, %rax       # imm = 0xFFFFFFFF
	movq	%rax, 720(%rsp)         # 8-byte Spill
	movabsq	$8, %rax
	movq	%rax, 712(%rsp)         # 8-byte Spill
	movabsq	$64, %rax
	movq	%rax, 704(%rsp)         # 8-byte Spill
	leaq	.L.str143413, %rax
	movq	%rax, 696(%rsp)         # 8-byte Spill
	leaq	.L.str185455, %rax
	movq	%rax, 688(%rsp)         # 8-byte Spill
	movabsq	$40, %rax
	movq	%rax, 680(%rsp)         # 8-byte Spill
	movabsq	$29, %rax
	movq	%rax, 672(%rsp)         # 8-byte Spill
	leaq	.L.str58328, %rax
	movq	%rax, 664(%rsp)         # 8-byte Spill
	leaq	.L.str206476, %rax
	movq	%rax, 656(%rsp)         # 8-byte Spill
	movabsq	$39, %rax
	movq	%rax, 648(%rsp)         # 8-byte Spill
	leaq	.L.str57327, %rax
	movq	%rax, 640(%rsp)         # 8-byte Spill
	leaq	.L.str47317, %rax
	movq	%rax, 632(%rsp)         # 8-byte Spill
	movabsq	$38, %rax
	movq	%rax, 624(%rsp)         # 8-byte Spill
	leaq	.L.str212482, %rax
	movq	%rax, 616(%rsp)         # 8-byte Spill
	movabsq	$28, %rax
	movq	%rax, 608(%rsp)         # 8-byte Spill
	leaq	.L.str34304, %rax
	movq	%rax, 600(%rsp)         # 8-byte Spill
	leaq	.L.str56326, %rax
	movq	%rax, 592(%rsp)         # 8-byte Spill
	movabsq	$9, %rax
	movq	%rax, 584(%rsp)         # 8-byte Spill
	movabsq	$27, %rax
	movq	%rax, 576(%rsp)         # 8-byte Spill
	leaq	.L.str55325, %rax
	movq	%rax, 568(%rsp)         # 8-byte Spill
	leaq	.L.str38308, %rax
	movq	%rax, 560(%rsp)         # 8-byte Spill
	leaq	.L.str211481, %rax
	movq	%rax, 552(%rsp)         # 8-byte Spill
	leaq	.L.str28298, %rax
	movq	%rax, 544(%rsp)         # 8-byte Spill
	leaq	.L.str54324, %rax
	movq	%rax, 536(%rsp)         # 8-byte Spill
	leaq	.L.str53323, %rax
	movq	%rax, 528(%rsp)         # 8-byte Spill
	leaq	.L.str19289, %rax
	movq	%rax, 520(%rsp)         # 8-byte Spill
	movabsq	$37, %rax
	movq	%rax, 512(%rsp)         # 8-byte Spill
	leaq	.L.str210480, %rax
	movq	%rax, 504(%rsp)         # 8-byte Spill
	leaq	.L.str137407, %rax
	movq	%rax, 496(%rsp)         # 8-byte Spill
	movabsq	$11, %rax
	movq	%rax, 488(%rsp)         # 8-byte Spill
	leaq	.L.str43313, %rax
	movq	%rax, 480(%rsp)         # 8-byte Spill
	leaq	.L.str9279, %rax
	movq	%rax, 472(%rsp)         # 8-byte Spill
	leaq	.L.str209479, %rax
	movq	%rax, 464(%rsp)         # 8-byte Spill
	leaq	.L.str40310, %rax
	movq	%rax, 456(%rsp)         # 8-byte Spill
	leaq	.L.str135405, %rax
	movq	%rax, 448(%rsp)         # 8-byte Spill
	leaq	.L.str207477, %rax
	movq	%rax, 440(%rsp)         # 8-byte Spill
	leaq	.L.str129399, %rax
	movq	%rax, 432(%rsp)         # 8-byte Spill
	movabsq	$36, %rax
	movq	%rax, 424(%rsp)         # 8-byte Spill
	leaq	.L.str132402, %rax
	movq	%rax, 416(%rsp)         # 8-byte Spill
	leaq	.L.str110380, %rax
	movq	%rax, 408(%rsp)         # 8-byte Spill
	movabsq	$35, %rax
	movq	%rax, 400(%rsp)         # 8-byte Spill
	leaq	.L.str16286, %rax
	movq	%rax, 392(%rsp)         # 8-byte Spill
	leaq	.L.str105375, %rax
	movq	%rax, 384(%rsp)         # 8-byte Spill
	movabsq	$13, %rax
	movq	%rax, 376(%rsp)         # 8-byte Spill
	leaq	.L.str125395, %rax
	movq	%rax, 368(%rsp)         # 8-byte Spill
	leaq	.L.str25295, %rax
	movq	%rax, 360(%rsp)         # 8-byte Spill
	leaq	.L.str104374, %rax
	movq	%rax, 352(%rsp)         # 8-byte Spill
	leaq	.L.str107377, %rax
	movq	%rax, 344(%rsp)         # 8-byte Spill
	leaq	.L.str24294, %rax
	movq	%rax, 336(%rsp)         # 8-byte Spill
	leaq	.L.str14284, %rax
	movq	%rax, 328(%rsp)         # 8-byte Spill
	leaq	.L.str1271, %rax
	movq	%rax, 320(%rsp)         # 8-byte Spill
	leaq	.L.str122392, %rax
	movq	%rax, 312(%rsp)         # 8-byte Spill
	movabsq	$-1, %rax
	movq	%rax, 304(%rsp)         # 8-byte Spill
	movabsq	$48, %rax
	movq	%rax, 296(%rsp)         # 8-byte Spill
	leaq	.L.str203473, %rax
	movq	%rax, 288(%rsp)         # 8-byte Spill
	leaq	.L.str2272, %rax
	movq	%rax, 280(%rsp)         # 8-byte Spill
	leaq	.L.str7277, %rax
	.loc	2 35 0                  # kiss_fft.c:35:0
.Ltmp601:
	movq	%rax, 272(%rsp)         # 8-byte Spill
	movq	304(%rsp), %rax         # 8-byte Reload
	movq	%rdi, 264(%rsp)         # 8-byte Spill
	movq	%rax, %rdi
	movq	%rsi, 256(%rsp)         # 8-byte Spill
	movq	%r13, %rsi
	movq	%rdx, 248(%rsp)         # 8-byte Spill
	movq	%rbx, %rdx
	movq	656(%rsp), %rax         # 8-byte Reload
	movl	%ecx, 244(%rsp)         # 4-byte Spill
	movq	%rax, %rcx
	movq	296(%rsp), %rax         # 8-byte Reload
	movq	%r8, 232(%rsp)          # 8-byte Spill
	movq	%rax, %r8
	movl	784(%rsp), %eax         # 4-byte Reload
	movq	%r9, 224(%rsp)          # 8-byte Spill
	movl	%eax, %r9d
	movl	$1, (%rsp)
	movq	%r15, 216(%rsp)         # 8-byte Spill
	movq	%r12, 208(%rsp)         # 8-byte Spill
	movq	%r13, 200(%rsp)         # 8-byte Spill
	movq	%rbp, 192(%rsp)         # 8-byte Spill
	movq	%r14, 184(%rsp)         # 8-byte Spill
	movq	%rbx, 176(%rsp)         # 8-byte Spill
	movq	%r10, 168(%rsp)         # 8-byte Spill
	movq	%r11, 160(%rsp)         # 8-byte Spill
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	272(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	440(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	280(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	728(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	932(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	288(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	788(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	304(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	688(%rsp), %rcx         # 8-byte Reload
	movq	296(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	176(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	952(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	312(%rsp), %r8          # 8-byte Reload
	movq	264(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	320(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	472(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	256(%rsp), %rcx         # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 156(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	328(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	328(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rcx         # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 152(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	152(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	vmovss	152(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 148(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	520(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	256(%rsp), %rcx         # 8-byte Reload
	addq	$4, %rcx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 136(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	256(%rsp), %rcx         # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 132(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	336(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rcx         # 8-byte Reload
	addq	$4, %rcx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 120(%rsp)         # 8-byte Spill
	movq	%r8, %rcx
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	120(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	336(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	248(%rsp), %rcx         # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 116(%rsp)        # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	116(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	132(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	132(%rsp), %xmm0        # 4-byte Reload
	vmovss	116(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 112(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	112(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	344(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	148(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	352(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	148(%rsp), %xmm0        # 4-byte Reload
	vmovss	112(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 108(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	116(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	360(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	368(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	156(%rsp), %xmm0        # 4-byte Reload
	vmovss	116(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 104(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	376(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	132(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	384(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	152(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	392(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	152(%rsp), %xmm0        # 4-byte Reload
	vmovss	132(%rsp), %xmm1        # 4-byte Reload
	vmulss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 100(%rsp)        # 4-byte Spill
	callq	trace_logger_log_double
	movq	400(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	104(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	408(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	416(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	100(%rsp), %xmm0        # 4-byte Reload
	vmovss	104(%rsp), %xmm1        # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
.Ltmp602:
	.loc	2 36 0                  # kiss_fft.c:36:0
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 96(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	424(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	448(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	944(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	432(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	248(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	440(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	944(%rsp), %rcx         # 8-byte Reload
	shlq	$3, %rcx
	movq	248(%rsp), %rdx         # 8-byte Reload
	addq	%rcx, %rdx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rdx, 88(%rsp)          # 8-byte Spill
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	448(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp603:
	#DEBUG_VALUE: kf_bfly2:tw1 <- [RSP+88]
	.loc	2 37 0                  # kiss_fft.c:37:0
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	560(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 84(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	108(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	456(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	84(%rsp), %xmm0         # 4-byte Reload
	vmovss	108(%rsp), %xmm1        # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 80(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	464(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	472(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	80(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	480(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	256(%rsp), %rcx         # 8-byte Reload
	vmovss	80(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	632(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	addq	$4, %rcx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 68(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	488(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	68(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	496(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	68(%rsp), %xmm0         # 4-byte Reload
	vmovss	96(%rsp), %xmm1         # 4-byte Reload
	vsubss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 64(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	512(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	504(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	136(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	520(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	64(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	528(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	256(%rsp), %rcx         # 8-byte Reload
	vmovss	64(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx)
.Ltmp604:
	.loc	2 38 0                  # kiss_fft.c:38:0
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 60(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	60(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	536(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	108(%rsp), %xmm0        # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	544(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	108(%rsp), %xmm0        # 4-byte Reload
	vmovss	60(%rsp), %xmm1         # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 56(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	552(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	560(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	56(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	568(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	56(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, (%rcx)
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	576(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	4(%rcx), %xmm0
	cvtss2sd	%xmm0, %xmm1
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	vmovss	%xmm0, 52(%rsp)         # 4-byte Spill
	vmovaps	%xmm1, %xmm0
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	584(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	vmovss	52(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	592(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	600(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	vmovss	96(%rsp), %xmm0         # 4-byte Reload
	vmovss	52(%rsp), %xmm1         # 4-byte Reload
	vaddss	%xmm1, %xmm0, %xmm2
	cvtss2sd	%xmm2, %xmm0
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	vmovss	%xmm2, 48(%rsp)         # 4-byte Spill
	callq	trace_logger_log_double
	movq	624(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	616(%rsp), %rcx         # 8-byte Reload
	movq	608(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	632(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	vmovss	48(%rsp), %xmm0         # 4-byte Reload
	cvtss2sd	%xmm0, %xmm0
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	640(%rsp), %rcx         # 8-byte Reload
	movq	224(%rsp), %r8          # 8-byte Reload
	movq	168(%rsp), %r9          # 8-byte Reload
	callq	trace_logger_log_double
	movq	776(%rsp), %rcx         # 8-byte Reload
	vmovss	48(%rsp), %xmm0         # 4-byte Reload
	vmovss	%xmm0, 4(%rcx)
.Ltmp605:
	.loc	2 39 0                  # kiss_fft.c:39:0
	movq	648(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	664(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	256(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	656(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	256(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	664(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp606:
	#DEBUG_VALUE: kf_bfly2:Fout2 <- [RSP+40]
	.loc	2 40 0                  # kiss_fft.c:40:0
	movq	680(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	696(%rsp), %rcx         # 8-byte Reload
	movq	672(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	776(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	688(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
	movq	776(%rsp), %rcx         # 8-byte Reload
	addq	$8, %rcx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	704(%rsp), %rsi         # 8-byte Reload
	movq	%rcx, %rdx
	movq	264(%rsp), %r8          # 8-byte Reload
	movq	%rcx, 32(%rsp)          # 8-byte Spill
	movq	%r8, %rcx
	movq	696(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_ptr
.Ltmp607:
	#DEBUG_VALUE: kf_bfly2:Fout <- [RSP+32]
	.loc	2 41 0                  # kiss_fft.c:41:0
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	752(%rsp), %rcx         # 8-byte Reload
	movq	712(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	720(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	788(%rsp), %eax         # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	728(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	788(%rsp), %eax         # 4-byte Reload
	addl	$4294967295, %eax       # imm = 0xFFFFFFFF
	movl	%eax, %esi
	movl	%esi, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movl	%eax, 28(%rsp)          # 4-byte Spill
	callq	trace_logger_log_int
.Ltmp608:
	#DEBUG_VALUE: kf_bfly2:m <- [RSP+28]
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	232(%rsp), %rcx         # 8-byte Reload
	movq	736(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	224(%rsp), %rcx         # 8-byte Reload
	movq	744(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	movl	%eax, %eax
	movl	%eax, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	760(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	752(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movl	28(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	sete	%al
	movb	%al, %cl
	andb	$1, %cl
	movzbl	%cl, %ecx
	movl	%ecx, %edx
	movq	768(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	movb	%al, 27(%rsp)           # 1-byte Spill
	callq	trace_logger_log_int
	movq	208(%rsp), %rdi         # 8-byte Reload
	movq	200(%rsp), %rsi         # 8-byte Reload
	movq	176(%rsp), %rdx         # 8-byte Reload
	movq	192(%rsp), %rcx         # 8-byte Reload
	movq	160(%rsp), %r8          # 8-byte Reload
	movl	784(%rsp), %r9d         # 4-byte Reload
	movl	$1, (%rsp)
	callq	trace_logger_log0
	movq	184(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	216(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movq	160(%rsp), %rdi         # 8-byte Reload
	movq	224(%rsp), %rsi         # 8-byte Reload
	movq	224(%rsp), %rdx         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	176(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	andb	$1, %al
	movzbl	%al, %eax
	movl	%eax, %edx
	movq	264(%rsp), %rdi         # 8-byte Reload
	movq	264(%rsp), %rsi         # 8-byte Reload
	movq	264(%rsp), %rcx         # 8-byte Reload
	movq	232(%rsp), %r8          # 8-byte Reload
	movq	224(%rsp), %r9          # 8-byte Reload
	movq	168(%rsp), %r10         # 8-byte Reload
	movq	%r10, (%rsp)
	callq	trace_logger_log_int
	movb	27(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	32(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 804(%rsp)         # 4-byte Spill
	movq	%rcx, 816(%rsp)         # 8-byte Spill
	movq	%rdx, 808(%rsp)         # 8-byte Spill
	movq	%rsi, 792(%rsp)         # 8-byte Spill
	jne	.LBB14_2
	jmp	.LBB14_1
.Ltmp609:
.LBB14_2:
	movabsq	$42, %rdi
	leaq	.L.str157427, %rsi
	leaq	.L.str214484, %rdx
	leaq	.L.str215485, %rcx
	movabsq	$1, %r8
	movl	$0, %r9d
	movl	$1, %eax
	.loc	2 42 0                  # kiss_fft.c:42:0
	movl	$1, (%rsp)
	movl	%eax, 20(%rsp)          # 4-byte Spill
	callq	trace_logger_log0
	addq	$1096, %rsp             # imm = 0x448
	popq	%rbx
	popq	%r12
	popq	%r13
	popq	%r14
	popq	%r15
	popq	%rbp
	ret
.Ltmp610:
.Ltmp611:
	.size	kf_bfly2, .Ltmp611-kf_bfly2
.Lfunc_end14:
	.cfi_endproc

	.globl	trace_logger_write_labelmap
	.align	16, 0x90
	.type	trace_logger_write_labelmap,@function
trace_logger_write_labelmap:            # @trace_logger_write_labelmap
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp613:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movq	%rsi, 8(%rsp)           # 8-byte Spill
	jne	.LBB15_2
# BB#1:
	callq	trace_logger_init
.LBB15_2:
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str545, %eax
	movl	%eax, %esi
	movl	$26, %edx
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%esi, %edx
	movq	16(%rsp), %rsi          # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	gzwrite
	movq	full_trace_file(%rip), %rdi
	movl	$.L.str1546, %edx
	movl	%edx, %esi
	movl	$25, %edx
	movl	%eax, (%rsp)            # 4-byte Spill
	addq	$24, %rsp
	jmp	gzwrite                 # TAILCALL
.Ltmp614:
	.size	trace_logger_write_labelmap, .Ltmp614-trace_logger_write_labelmap
	.cfi_endproc

	.globl	trace_logger_init
	.align	16, 0x90
	.type	trace_logger_init,@function
trace_logger_init:                      # @trace_logger_init
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp616:
	.cfi_def_cfa_offset 16
	movl	$.L.str2547, %eax
	movl	%eax, %edi
	movl	$.L.str3548, %eax
	movl	%eax, %esi
	callq	gzopen
	movq	%rax, full_trace_file
	cmpq	$0, %rax
	jne	.LBB16_2
# BB#1:
	movl	$.L.str4549, %eax
	movl	%eax, %edi
	callq	perror
	movl	$-1, %edi
	callq	exit
.LBB16_2:
	movl	$512, %eax              # imm = 0x200
	movl	%eax, %edi
	movl	$1, %eax
	movl	%eax, %esi
	callq	calloc
	movq	%rax, current_toplevel_function
	movl	$2, current_logging_status
	movl	$trace_logger_fin, %ecx
	movl	%ecx, %edi
	callq	atexit
	movb	$1, initp
	movl	%eax, 4(%rsp)           # 4-byte Spill
	popq	%rax
	ret
.Ltmp617:
	.size	trace_logger_init, .Ltmp617-trace_logger_init
	.cfi_endproc

	.globl	trace_logger_fin
	.align	16, 0x90
	.type	trace_logger_fin,@function
trace_logger_fin:                       # @trace_logger_fin
	.cfi_startproc
# BB#0:
	pushq	%rax
.Ltmp619:
	.cfi_def_cfa_offset 16
	movq	current_toplevel_function(%rip), %rdi
	callq	free
	movq	full_trace_file(%rip), %rdi
	popq	%rax
	jmp	gzclose                 # TAILCALL
.Ltmp620:
	.size	trace_logger_fin, .Ltmp620-trace_logger_fin
	.cfi_endproc

	.globl	log_or_not
	.align	16, 0x90
	.type	log_or_not,@function
log_or_not:                             # @log_or_not
	.cfi_startproc
# BB#0:
	subq	$40, %rsp
.Ltmp622:
	.cfi_def_cfa_offset 48
	movb	%sil, %al
	movb	%dil, %r8b
	testb	$1, %r8b
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rcx, 24(%rsp)          # 8-byte Spill
	movb	%al, 23(%rsp)           # 1-byte Spill
	jne	.LBB18_2
	jmp	.LBB18_1
.LBB18_1:
	movl	$1, %eax
	movl	$2, %ecx
	movb	23(%rsp), %dl           # 1-byte Reload
	testb	%dl, %dl
	cmovel	%ecx, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB18_9
.LBB18_2:
	movb	23(%rsp), %al           # 1-byte Reload
	testb	$1, %al
	jne	.LBB18_4
	jmp	.LBB18_3
.LBB18_3:
	movl	current_logging_status, %eax
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jmp	.LBB18_9
.LBB18_4:
	movl	$1, %eax
	movl	36(%rsp), %ecx          # 4-byte Reload
	cmpl	$1, %ecx
	movl	%eax, 16(%rsp)          # 4-byte Spill
	jne	.LBB18_9
# BB#5:
	movq	current_toplevel_function, %rax
	cmpb	$0, (%rax)
	movq	%rax, 8(%rsp)           # 8-byte Spill
	jne	.LBB18_7
# BB#6:
	movl	$.L.str5550, %eax
	movl	%eax, %edi
	movl	$.L.str6551, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$118, %edx
	callq	__assert_fail
.LBB18_7:
	movl	$0, %eax
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	8(%rsp), %rsi           # 8-byte Reload
	movl	%eax, 4(%rsp)           # 4-byte Spill
	callq	strcmp
	cmpl	$0, %eax
	movl	4(%rsp), %eax           # 4-byte Reload
	movl	%eax, 16(%rsp)          # 4-byte Spill
	je	.LBB18_9
# BB#8:
	movl	$.L.str7552, %eax
	movl	%eax, %edi
	movl	$.L.str6551, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.log_or_not, %eax
	movl	%eax, %ecx
	movl	$123, %edx
	callq	__assert_fail
.LBB18_9:
	movl	16(%rsp), %eax          # 4-byte Reload
	addq	$40, %rsp
	ret
.Ltmp623:
	.size	log_or_not, .Ltmp623-log_or_not
	.cfi_endproc

	.globl	convert_bytes_to_hex
	.align	16, 0x90
	.type	convert_bytes_to_hex,@function
convert_bytes_to_hex:                   # @convert_bytes_to_hex
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp625:
	.cfi_def_cfa_offset 64
	movabsq	$0, %rax
	movw	.L.str8553, %cx
	movw	%cx, (%rdi)
	movb	.L.str8553+2, %r8b
	movb	%r8b, 2(%rdi)
	addq	$2, %rdi
	cmpl	$0, %edx
	movq	%rsi, 48(%rsp)          # 8-byte Spill
	movq	%rax, 40(%rsp)          # 8-byte Spill
	movl	%edx, 36(%rsp)          # 4-byte Spill
	movq	%rdi, 24(%rsp)          # 8-byte Spill
	jle	.LBB19_2
.LBB19_1:                               # %.lr.ph
                                        # =>This Inner Loop Header: Depth=1
	movq	24(%rsp), %rax          # 8-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	movq	48(%rsp), %rdx          # 8-byte Reload
	movzbl	(%rdx,%rcx), %edx
	movl	$.L.str9554, %esi
                                        # kill: RSI<def> ESI<kill>
	xorl	%edi, %edi
	movb	%dil, %r8b
	movq	%rax, %rdi
	movq	%rax, 16(%rsp)          # 8-byte Spill
	movb	%r8b, %al
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	callq	sprintf
	movslq	%eax, %rcx
	movq	16(%rsp), %rsi          # 8-byte Reload
	addq	%rcx, %rsi
	movq	8(%rsp), %rcx           # 8-byte Reload
	addq	$1, %rcx
	movl	%ecx, %eax
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	%edx, %eax
	movq	%rcx, 40(%rsp)          # 8-byte Spill
	movq	%rsi, 24(%rsp)          # 8-byte Spill
	jne	.LBB19_1
.LBB19_2:                               # %._crit_edge
	movq	24(%rsp), %rax          # 8-byte Reload
	movb	$0, (%rax)
	addq	$56, %rsp
	ret
.Ltmp626:
	.size	convert_bytes_to_hex, .Ltmp626-convert_bytes_to_hex
	.cfi_endproc

	.globl	update_logging_status
	.align	16, 0x90
	.type	update_logging_status,@function
update_logging_status:                  # @update_logging_status
	.cfi_startproc
# BB#0:
	subq	$56, %rsp
.Ltmp628:
	.cfi_def_cfa_offset 64
	movb	%cl, %al
	movb	%dl, %r8b
	movl	current_logging_status, %ecx
	cmpl	$0, %ecx
	movl	%esi, 52(%rsp)          # 4-byte Spill
	movb	%al, 51(%rsp)           # 1-byte Spill
	movb	%r8b, 50(%rsp)          # 1-byte Spill
	movq	%rdi, 40(%rsp)          # 8-byte Spill
	movl	%ecx, 36(%rsp)          # 4-byte Spill
	jne	.LBB20_2
# BB#1:
	movl	inst_count, %esi
	movl	$.L.str10555, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	$2, current_logging_status
	movl	%eax, 32(%rsp)          # 4-byte Spill
	jmp	.LBB20_8
.LBB20_2:
	movb	51(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	50(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movl	%ecx, %edi
	movl	52(%rsp), %edx          # 4-byte Reload
	movq	40(%rsp), %rcx          # 8-byte Reload
	callq	log_or_not
	movl	%eax, current_logging_status
	movl	36(%rsp), %edx          # 4-byte Reload
	cmpl	$2, %edx
	setne	%r8b
	cmpl	%edx, %eax
	sete	%r9b
	orb	%r9b, %r8b
	testb	$1, %r8b
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jne	.LBB20_4
# BB#3:
	movl	inst_count, %esi
	movl	$.L.str11556, %eax
	movl	%eax, %edi
	xorl	%eax, %eax
	movb	%al, %cl
	movb	%cl, %al
	callq	printf
	movl	current_logging_status, %esi
	movl	%eax, 24(%rsp)          # 4-byte Spill
	movl	%esi, 28(%rsp)          # 4-byte Spill
.LBB20_4:
	movl	28(%rsp), %eax          # 4-byte Reload
	movq	current_toplevel_function, %rcx
	cmpb	$0, (%rcx)
	sete	%dl
	cmpl	$1, %eax
	sete	%sil
	andb	%sil, %dl
	testb	$1, %dl
	movl	%eax, 20(%rsp)          # 4-byte Spill
	movq	%rcx, 8(%rsp)           # 8-byte Spill
	jne	.LBB20_5
	jmp	.LBB20_6
.LBB20_5:
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	40(%rsp), %rsi          # 8-byte Reload
	callq	strcpy
	movq	%rax, (%rsp)            # 8-byte Spill
	jmp	.LBB20_8
.LBB20_6:
	movl	20(%rsp), %eax          # 4-byte Reload
	cmpl	$0, %eax
	jne	.LBB20_8
# BB#7:
	movl	$0, %esi
	movabsq	$512, %rdx              # imm = 0x200
	movq	8(%rsp), %rdi           # 8-byte Reload
	callq	memset
.LBB20_8:
	addq	$56, %rsp
	ret
.Ltmp629:
	.size	update_logging_status, .Ltmp629-update_logging_status
	.cfi_endproc

	.globl	do_not_log
	.align	16, 0x90
	.type	do_not_log,@function
do_not_log:                             # @do_not_log
	.cfi_startproc
# BB#0:
	cmpl	$2, current_logging_status
	sete	%al
	andb	$1, %al
	movzbl	%al, %eax
	ret
.Ltmp630:
	.size	do_not_log, .Ltmp630-do_not_log
	.cfi_endproc

	.globl	trace_logger_log_entry
	.align	16, 0x90
	.type	trace_logger_log_entry,@function
trace_logger_log_entry:                 # @trace_logger_log_entry
	.cfi_startproc
# BB#0:
	subq	$24, %rsp
.Ltmp632:
	.cfi_def_cfa_offset 32
	cmpb	$0, initp
	movq	%rdi, 16(%rsp)          # 8-byte Spill
	movl	%esi, 12(%rsp)          # 4-byte Spill
	jne	.LBB22_2
# BB#1:
	callq	trace_logger_init
.LBB22_2:
	xorl	%esi, %esi
	movl	$1, %eax
	movq	16(%rsp), %rdi          # 8-byte Reload
	movl	%eax, %edx
	movl	%eax, %ecx
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB22_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	$.L.str12557, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdx          # 8-byte Reload
	movl	12(%rsp), %eax          # 4-byte Reload
	movb	%cl, 11(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movb	11(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
.LBB22_4:
	addq	$24, %rsp
	ret
.Ltmp633:
	.size	trace_logger_log_entry, .Ltmp633-trace_logger_log_entry
	.cfi_endproc

	.globl	trace_logger_log0
	.align	16, 0x90
	.type	trace_logger_log0,@function
trace_logger_log0:                      # @trace_logger_log0
	.cfi_startproc
# BB#0:
	subq	$72, %rsp
.Ltmp635:
	.cfi_def_cfa_offset 80
	movb	%r9b, %al
	movb	80(%rsp), %r10b
	cmpb	$0, initp
	movq	%rsi, 64(%rsp)          # 8-byte Spill
	movb	%r10b, 63(%rsp)         # 1-byte Spill
	movl	%r8d, 56(%rsp)          # 4-byte Spill
	movq	%rcx, 48(%rsp)          # 8-byte Spill
	movq	%rdx, 40(%rsp)          # 8-byte Spill
	movb	%al, 39(%rsp)           # 1-byte Spill
	movl	%edi, 32(%rsp)          # 4-byte Spill
	jne	.LBB23_2
# BB#1:
	callq	trace_logger_init
.LBB23_2:
	movb	39(%rsp), %al           # 1-byte Reload
	movzbl	%al, %ecx
	andl	$1, %ecx
	movb	63(%rsp), %dl           # 1-byte Reload
	movzbl	%dl, %esi
	andl	$1, %esi
	movq	64(%rsp), %rdi          # 8-byte Reload
	movl	56(%rsp), %r8d          # 4-byte Reload
	movl	%esi, 28(%rsp)          # 4-byte Spill
	movl	%r8d, %esi
	movl	%ecx, %edx
	movl	28(%rsp), %ecx          # 4-byte Reload
	callq	update_logging_status
	cmpl	$2, current_logging_status
	je	.LBB23_4
# BB#3:
	movq	full_trace_file, %rdi
	movl	inst_count, %eax
	movq	%rsp, %rcx
	movl	%eax, 8(%rcx)
	movl	56(%rsp), %eax          # 4-byte Reload
	movl	%eax, (%rcx)
	movl	$.L.str13558, %edx
	movl	%edx, %esi
	xorl	%edx, %edx
	movb	%dl, %r8b
	movl	32(%rsp), %edx          # 4-byte Reload
	movq	64(%rsp), %rcx          # 8-byte Reload
	movq	40(%rsp), %r9           # 8-byte Reload
	movb	%r8b, 27(%rsp)          # 1-byte Spill
	movq	%r9, %r8
	movq	48(%rsp), %r9           # 8-byte Reload
	movb	27(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	inst_count, %edx
	addl	$1, %edx
	movl	%edx, inst_count
	movl	%eax, 20(%rsp)          # 4-byte Spill
.LBB23_4:
	addq	$72, %rsp
	ret
.Ltmp636:
	.size	trace_logger_log0, .Ltmp636-trace_logger_log0
	.cfi_endproc

	.globl	trace_logger_log_int
	.align	16, 0x90
	.type	trace_logger_log_int,@function
trace_logger_log_int:                   # @trace_logger_log_int
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp638:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB24_2
# BB#1:
	movl	$.L.str14559, %eax
	movl	%eax, %edi
	movl	$.L.str6551, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_int, %eax
	movl	%eax, %ecx
	movl	$204, %edx
	callq	__assert_fail
.LBB24_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB24_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB24_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str15560, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB24_8
.LBB24_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB24_7
# BB#6:
	movl	$.L.str16561, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB24_8
.LBB24_7:
	movl	$.L.str17562, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB24_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB24_10
# BB#9:
	movl	$.L.str18563, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB24_11
.LBB24_10:
	movl	$.L.str19564, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB24_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB24_13
# BB#12:
	movl	$.L.str20565, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB24_14
.LBB24_13:
	movl	$.L.str21566, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB24_14:
	addq	$120, %rsp
	ret
.Ltmp639:
	.size	trace_logger_log_int, .Ltmp639-trace_logger_log_int
	.cfi_endproc

	.globl	trace_logger_log_ptr
	.align	16, 0x90
	.type	trace_logger_log_ptr,@function
trace_logger_log_ptr:                   # @trace_logger_log_ptr
	.cfi_startproc
# BB#0:
	subq	$120, %rsp
.Ltmp641:
	.cfi_def_cfa_offset 128
	movq	128(%rsp), %rax
	cmpb	$0, initp
	movq	%rax, 112(%rsp)         # 8-byte Spill
	movl	%r9d, 108(%rsp)         # 4-byte Spill
	movq	%r8, 96(%rsp)           # 8-byte Spill
	movl	%ecx, 92(%rsp)          # 4-byte Spill
	movq	%rdx, 80(%rsp)          # 8-byte Spill
	movl	%esi, 76(%rsp)          # 4-byte Spill
	movl	%edi, 72(%rsp)          # 4-byte Spill
	jne	.LBB25_2
# BB#1:
	movl	$.L.str14559, %eax
	movl	%eax, %edi
	movl	$.L.str6551, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_ptr, %eax
	movl	%eax, %ecx
	movl	$225, %edx
	callq	__assert_fail
.LBB25_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB25_14
# BB#3:
	movl	72(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB25_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str22567, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 71(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	71(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 64(%rsp)          # 4-byte Spill
	jmp	.LBB25_8
.LBB25_5:
	movq	full_trace_file, %rax
	movl	72(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 56(%rsp)          # 8-byte Spill
	jne	.LBB25_7
# BB#6:
	movl	$.L.str23568, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	76(%rsp), %edx          # 4-byte Reload
	movq	80(%rsp), %r8           # 8-byte Reload
	movb	%cl, 55(%rsp)           # 1-byte Spill
	movq	%r8, %rcx
	movl	92(%rsp), %r8d          # 4-byte Reload
	movb	55(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB25_8
.LBB25_7:
	movl	$.L.str24569, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	56(%rsp), %rdi          # 8-byte Reload
	movl	72(%rsp), %edx          # 4-byte Reload
	movl	76(%rsp), %eax          # 4-byte Reload
	movb	%cl, 47(%rsp)           # 1-byte Spill
	movl	%eax, %ecx
	movq	80(%rsp), %r8           # 8-byte Reload
	movl	92(%rsp), %r9d          # 4-byte Reload
	movb	47(%rsp), %al           # 1-byte Reload
	callq	gzprintf
	movl	%eax, 40(%rsp)          # 4-byte Spill
.LBB25_8:
	movq	full_trace_file, %rax
	movl	92(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 32(%rsp)          # 8-byte Spill
	je	.LBB25_10
# BB#9:
	movl	$.L.str18563, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movq	96(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 28(%rsp)          # 4-byte Spill
	jmp	.LBB25_11
.LBB25_10:
	movl	$.L.str19564, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	32(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 24(%rsp)          # 4-byte Spill
.LBB25_11:
	movq	full_trace_file, %rax
	movl	108(%rsp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 16(%rsp)          # 8-byte Spill
	je	.LBB25_13
# BB#12:
	movl	$.L.str20565, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movq	112(%rsp), %rdx         # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 12(%rsp)          # 4-byte Spill
	jmp	.LBB25_14
.LBB25_13:
	movl	$.L.str21566, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	16(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 8(%rsp)           # 4-byte Spill
.LBB25_14:
	addq	$120, %rsp
	ret
.Ltmp642:
	.size	trace_logger_log_ptr, .Ltmp642-trace_logger_log_ptr
	.cfi_endproc

	.globl	trace_logger_log_double
	.align	16, 0x90
	.type	trace_logger_log_double,@function
trace_logger_log_double:                # @trace_logger_log_double
	.cfi_startproc
# BB#0:
	subq	$104, %rsp
.Ltmp644:
	.cfi_def_cfa_offset 112
	cmpb	$0, initp
	movl	%esi, 100(%rsp)         # 4-byte Spill
	movq	%r9, 88(%rsp)           # 8-byte Spill
	movl	%r8d, 84(%rsp)          # 4-byte Spill
	movq	%rcx, 72(%rsp)          # 8-byte Spill
	movl	%edx, 68(%rsp)          # 4-byte Spill
	vmovsd	%xmm0, 56(%rsp)         # 8-byte Spill
	movl	%edi, 52(%rsp)          # 4-byte Spill
	jne	.LBB26_2
# BB#1:
	movl	$.L.str14559, %eax
	movl	%eax, %edi
	movl	$.L.str6551, %eax
	movl	%eax, %esi
	movl	$.L__PRETTY_FUNCTION__.trace_logger_log_double, %eax
	movl	%eax, %ecx
	movl	$246, %edx
	callq	__assert_fail
.LBB26_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB26_14
# BB#3:
	movl	52(%rsp), %eax          # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB26_5
# BB#4:
	movq	full_trace_file, %rdi
	movl	$.L.str25570, %eax
	movl	%eax, %esi
	movb	$1, %al
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 48(%rsp)          # 4-byte Spill
	jmp	.LBB26_8
.LBB26_5:
	movq	full_trace_file, %rax
	movl	52(%rsp), %ecx          # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, 40(%rsp)          # 8-byte Spill
	jne	.LBB26_7
# BB#6:
	movl	$.L.str26571, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	100(%rsp), %edx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %ecx          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 36(%rsp)          # 4-byte Spill
	jmp	.LBB26_8
.LBB26_7:
	movl	$.L.str27572, %eax
	movl	%eax, %esi
	movb	$1, %al
	movq	40(%rsp), %rdi          # 8-byte Reload
	movl	52(%rsp), %edx          # 4-byte Reload
	movl	100(%rsp), %ecx         # 4-byte Reload
	vmovsd	56(%rsp), %xmm0         # 8-byte Reload
	movl	68(%rsp), %r8d          # 4-byte Reload
	callq	gzprintf
	movl	%eax, 32(%rsp)          # 4-byte Spill
.LBB26_8:
	movq	full_trace_file, %rax
	movl	68(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 24(%rsp)          # 8-byte Spill
	je	.LBB26_10
# BB#9:
	movl	$.L.str18563, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movq	72(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 20(%rsp)          # 4-byte Spill
	jmp	.LBB26_11
.LBB26_10:
	movl	$.L.str19564, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	24(%rsp), %rdi          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 16(%rsp)          # 4-byte Spill
.LBB26_11:
	movq	full_trace_file, %rax
	movl	84(%rsp), %ecx          # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, 8(%rsp)           # 8-byte Spill
	je	.LBB26_13
# BB#12:
	movl	$.L.str20565, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movq	88(%rsp), %rdx          # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, 4(%rsp)           # 4-byte Spill
	jmp	.LBB26_14
.LBB26_13:
	movl	$.L.str21566, %eax
	movl	%eax, %esi
	xorl	%eax, %eax
	movb	%al, %cl
	movq	8(%rsp), %rdi           # 8-byte Reload
	movb	%cl, %al
	callq	gzprintf
	movl	%eax, (%rsp)            # 4-byte Spill
.LBB26_14:
	addq	$104, %rsp
	ret
.Ltmp645:
	.size	trace_logger_log_double, .Ltmp645-trace_logger_log_double
	.cfi_endproc

	.globl	trace_logger_log_vector
	.align	16, 0x90
	.type	trace_logger_log_vector,@function
trace_logger_log_vector:                # @trace_logger_log_vector
	.cfi_startproc
# BB#0:
	pushq	%rbp
.Ltmp648:
	.cfi_def_cfa_offset 16
.Ltmp649:
	.cfi_offset %rbp, -16
	movq	%rsp, %rbp
.Ltmp650:
	.cfi_def_cfa_register %rbp
	subq	$128, %rsp
	movq	16(%rbp), %rax
	cmpb	$0, initp
	movq	%rax, -8(%rbp)          # 8-byte Spill
	movl	%r9d, -12(%rbp)         # 4-byte Spill
	movq	%r8, -24(%rbp)          # 8-byte Spill
	movl	%ecx, -28(%rbp)         # 4-byte Spill
	movq	%rdx, -40(%rbp)         # 8-byte Spill
	movl	%esi, -44(%rbp)         # 4-byte Spill
	movl	%edi, -48(%rbp)         # 4-byte Spill
	jne	.LBB27_2
# BB#1:
	leaq	.L.str14559, %rdi
	leaq	.L.str6551, %rsi
	movl	$267, %edx              # imm = 0x10B
	leaq	.L__PRETTY_FUNCTION__.trace_logger_log_vector, %rcx
	callq	__assert_fail
.LBB27_2:
	callq	do_not_log
	testb	$1, %al
	jne	.LBB27_15
# BB#3:
	movl	$8, %eax
	movl	-44(%rbp), %ecx         # 4-byte Reload
	sarl	$31, %ecx
	shrl	$30, %ecx
	movl	-44(%rbp), %edx         # 4-byte Reload
	addl	%ecx, %edx
	sarl	$2, %edx
	addl	$3, %edx
	movl	%edx, %esi
	movq	%rsp, %rdi
	addq	$15, %rsi
	andq	$-16, %rsi
	movq	%rsp, %r8
	subq	%rsi, %r8
	movq	%r8, %rsp
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movl	%eax, -52(%rbp)         # 4-byte Spill
	movl	%ecx, %eax
	cltd
	movl	-52(%rbp), %r9d         # 4-byte Reload
	idivl	%r9d
	movq	%rdi, -64(%rbp)         # 8-byte Spill
	movq	%r8, %rdi
	movq	-40(%rbp), %rsi         # 8-byte Reload
	movl	%eax, %edx
	movq	%r8, -72(%rbp)          # 8-byte Spill
	callq	convert_bytes_to_hex
	movl	-48(%rbp), %eax         # 4-byte Reload
	cmpl	$19134, %eax            # imm = 0x4ABE
	jne	.LBB27_5
# BB#4:
	leaq	.L.str28573, %rsi
	movq	full_trace_file, %rdi
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -76(%rbp)         # 4-byte Spill
	jmp	.LBB27_8
.LBB27_5:
	movq	full_trace_file, %rax
	movl	-48(%rbp), %ecx         # 4-byte Reload
	cmpl	$24601, %ecx            # imm = 0x6019
	movq	%rax, -88(%rbp)         # 8-byte Spill
	jne	.LBB27_7
# BB#6:
	leaq	.L.str29574, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-44(%rbp), %edx         # 4-byte Reload
	movq	-72(%rbp), %rcx         # 8-byte Reload
	movl	-28(%rbp), %r8d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -92(%rbp)         # 4-byte Spill
	jmp	.LBB27_8
.LBB27_7:
	leaq	.L.str30575, %rsi
	movq	-88(%rbp), %rdi         # 8-byte Reload
	movl	-48(%rbp), %edx         # 4-byte Reload
	movl	-44(%rbp), %ecx         # 4-byte Reload
	movq	-72(%rbp), %r8          # 8-byte Reload
	movl	-28(%rbp), %r9d         # 4-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -96(%rbp)         # 4-byte Spill
.LBB27_8:
	movq	full_trace_file, %rax
	movl	-28(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -104(%rbp)        # 8-byte Spill
	je	.LBB27_10
# BB#9:
	leaq	.L.str18563, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movq	-24(%rbp), %rdx         # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -108(%rbp)        # 4-byte Spill
	jmp	.LBB27_11
.LBB27_10:
	leaq	.L.str19564, %rsi
	movq	-104(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -112(%rbp)        # 4-byte Spill
.LBB27_11:
	movq	full_trace_file, %rax
	movl	-12(%rbp), %ecx         # 4-byte Reload
	cmpl	$0, %ecx
	movq	%rax, -120(%rbp)        # 8-byte Spill
	je	.LBB27_13
# BB#12:
	leaq	.L.str20565, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movq	-8(%rbp), %rdx          # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -124(%rbp)        # 4-byte Spill
	jmp	.LBB27_14
.LBB27_13:
	leaq	.L.str21566, %rsi
	movq	-120(%rbp), %rdi        # 8-byte Reload
	movb	$0, %al
	callq	gzprintf
	movl	%eax, -128(%rbp)        # 4-byte Spill
.LBB27_14:
	movq	-64(%rbp), %rax         # 8-byte Reload
	movq	%rax, %rsp
.LBB27_15:
	movq	%rbp, %rsp
	popq	%rbp
	ret
.Ltmp651:
	.size	trace_logger_log_vector, .Ltmp651-trace_logger_log_vector
	.cfi_endproc

	.type	.L.str,@object          # @.str
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str:
	.asciz	"store_loc[%d] = %d\n"
	.size	.L.str, 20

	.type	.L.str1,@object         # @.str1
.L.str1:
	.asciz	"\n"
	.size	.L.str1, 2

	.type	.L.str2,@object         # @.str2
.L.str2:
	.asciz	"Test failed with %d errors."
	.size	.L.str2, 28

	.type	.L.str3,@object         # @.str3
.L.str3:
	.asciz	"Test passed!\n"
	.size	.L.str3, 14

	.type	.L.str4,@object         # @.str4
	.section	.rodata,"a",@progbits
.L.str4:
	.asciz	"test_stores"
	.size	.L.str4, 12

	.type	.L.str5,@object         # @.str5
.L.str5:
	.asciz	"0:0"
	.size	.L.str5, 4

	.type	.L.str6,@object         # @.str6
.L.str6:
	.asciz	"1"
	.size	.L.str6, 2

	.type	.L.str7,@object         # @.str7
.L.str7:
	.zero	1
	.size	.L.str7, 1

	.type	.L.str8,@object         # @.str8
.L.str8:
	.asciz	"phi"
	.size	.L.str8, 4

	.type	.L.str9,@object         # @.str9
.L.str9:
	.asciz	"n_channels"
	.size	.L.str9, 11

	.type	.L.str10,@object        # @.str10
.L.str10:
	.asciz	"0:0-5"
	.size	.L.str10, 6

	.type	.L.str11,@object        # @.str11
	.align	16
.L.str11:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str11, 19

	.type	.L.str12,@object        # @.str12
.L.str12:
	.asciz	"._crit_edge3:0"
	.size	.L.str12, 15

	.type	.L.str13,@object        # @.str13
.L.str13:
	.asciz	"2"
	.size	.L.str13, 2

	.type	.L.str14,@object        # @.str14
.L.str14:
	.asciz	"n_samples"
	.size	.L.str14, 10

	.type	.L.str15,@object        # @.str15
	.align	16
.L.str15:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str15, 21

	.type	.L.str16,@object        # @.str16
.L.str16:
	.asciz	".preheader:1"
	.size	.L.str16, 13

	.type	.L.str17,@object        # @.str17
.L.str17:
	.asciz	"indvars.iv5"
	.size	.L.str17, 12

	.type	.L.str18,@object        # @.str18
	.align	16
.L.str18:
	.asciz	"indvars.iv.next6"
	.size	.L.str18, 17

	.type	.L.str19,@object        # @.str19
.L.str19:
	.asciz	"._crit_edge:1"
	.size	.L.str19, 14

	.type	.L.str20,@object        # @.str20
.L.str20:
	.asciz	"3"
	.size	.L.str20, 2

	.type	.L.str21,@object        # @.str21
.L.str21:
	.asciz	"stdout"
	.size	.L.str21, 7

	.type	.L.str22,@object        # @.str22
.L.str22:
	.asciz	".preheader:1-0"
	.size	.L.str22, 15

	.type	.L.str23,@object        # @.str23
.L.str23:
	.asciz	".lr.ph:1"
	.size	.L.str23, 9

	.type	.L.str24,@object        # @.str24
.L.str24:
	.asciz	"4"
	.size	.L.str24, 2

	.type	.L.str25,@object        # @.str25
.L.str25:
	.asciz	"5"
	.size	.L.str25, 2

	.type	.L.str26,@object        # @.str26
.L.str26:
	.asciz	"6"
	.size	.L.str26, 2

	.type	.L.str27,@object        # @.str27
.L.str27:
	.asciz	".lr.ph:1-0"
	.size	.L.str27, 11

	.type	.L.str28,@object        # @.str28
.L.str28:
	.asciz	"7:2"
	.size	.L.str28, 4

	.type	.L.str29,@object        # @.str29
.L.str29:
	.asciz	"indvars.iv"
	.size	.L.str29, 11

	.type	.L.str30,@object        # @.str30
.L.str30:
	.asciz	"indvars.iv.next"
	.size	.L.str30, 16

	.type	.L.str31,@object        # @.str31
.L.str31:
	.asciz	"8"
	.size	.L.str31, 2

	.type	.L.str32,@object        # @.str32
.L.str32:
	.asciz	"14"
	.size	.L.str32, 3

	.type	.L.str33,@object        # @.str33
.L.str33:
	.asciz	"9"
	.size	.L.str33, 2

	.type	.L.str34,@object        # @.str34
.L.str34:
	.asciz	"10"
	.size	.L.str34, 3

	.type	.L.str35,@object        # @.str35
.L.str35:
	.asciz	"freq_data"
	.size	.L.str35, 10

	.type	.L.str36,@object        # @.str36
.L.str36:
	.asciz	"11"
	.size	.L.str36, 3

	.type	.L.str37,@object        # @.str37
.L.str37:
	.asciz	"12"
	.size	.L.str37, 3

	.type	.L.str38,@object        # @.str38
.L.str38:
	.asciz	"13"
	.size	.L.str38, 3

	.type	.L.str39,@object        # @.str39
.L.str39:
	.asciz	"fprintf"
	.size	.L.str39, 8

	.type	.L.str40,@object        # @.str40
.L.str40:
	.asciz	"lftr.wideiv"
	.size	.L.str40, 12

	.type	.L.str41,@object        # @.str41
.L.str41:
	.asciz	"exitcond"
	.size	.L.str41, 9

	.type	.L.str42,@object        # @.str42
.L.str42:
	.asciz	"7:2-0"
	.size	.L.str42, 6

	.type	.L.str43,@object        # @.str43
.L.str43:
	.asciz	".lcssa"
	.size	.L.str43, 7

	.type	.L.str44,@object        # @.str44
.L.str44:
	.asciz	"15"
	.size	.L.str44, 3

	.type	.L.str45,@object        # @.str45
.L.str45:
	.asciz	"lftr.wideiv7"
	.size	.L.str45, 13

	.type	.L.str46,@object        # @.str46
.L.str46:
	.asciz	"exitcond8"
	.size	.L.str46, 10

	.type	.L.str47,@object        # @.str47
.L.str47:
	.asciz	"._crit_edge:1-0"
	.size	.L.str47, 16

	.type	.L.str48,@object        # @.str48
	.align	16
.L.str48:
	.asciz	"._crit_edge3:0-0"
	.size	.L.str48, 17

	.type	.L.str49,@object        # @.str49
.L.str49:
	.asciz	"time_data"
	.size	.L.str49, 10

	.type	.L.str50,@object        # @.str50
.L.str50:
	.asciz	"process_data"
	.size	.L.str50, 13

	.type	.L.str51,@object        # @.str51
.L.str51:
	.asciz	"0:0-8"
	.size	.L.str51, 6

	.type	.L.str52,@object        # @.str52
	.align	16
.L.str52:
	.asciz	".preheader26.lr.ph:0"
	.size	.L.str52, 21

	.type	.L.str53,@object        # @.str53
	.align	16
.L.str53:
	.asciz	"._crit_edge36.thread:0"
	.size	.L.str53, 23

	.type	.L.str54,@object        # @.str54
.L.str54:
	.asciz	"7"
	.size	.L.str54, 2

	.type	.L.str55,@object        # @.str55
	.align	16
.L.str55:
	.asciz	"._crit_edge36.thread:0-5"
	.size	.L.str55, 25

	.type	.L.str56,@object        # @.str56
	.align	16
.L.str56:
	.asciz	"._crit_edge25.thread:0"
	.size	.L.str56, 23

	.type	.L.str57,@object        # @.str57
	.align	16
.L.str57:
	.asciz	".preheader26.lr.ph:0-0"
	.size	.L.str57, 23

	.type	.L.str58,@object        # @.str58
.L.str58:
	.asciz	".preheader26:1"
	.size	.L.str58, 15

	.type	.L.str59,@object        # @.str59
.L.str59:
	.asciz	"indvars.iv70"
	.size	.L.str59, 13

	.type	.L.str60,@object        # @.str60
	.align	16
.L.str60:
	.asciz	"indvars.iv.next71"
	.size	.L.str60, 18

	.type	.L.str61,@object        # @.str61
.L.str61:
	.asciz	"._crit_edge34:1"
	.size	.L.str61, 16

	.type	.L.str62,@object        # @.str62
	.align	16
.L.str62:
	.asciz	".preheader26:1-0"
	.size	.L.str62, 17

	.type	.L.str63,@object        # @.str63
.L.str63:
	.asciz	".lr.ph29:1"
	.size	.L.str63, 11

	.type	.L.str64,@object        # @.str64
.L.str64:
	.asciz	"._crit_edge30:1"
	.size	.L.str64, 16

	.type	.L.str65,@object        # @.str65
.L.str65:
	.asciz	".lr.ph29:1-0"
	.size	.L.str65, 13

	.type	.L.str66,@object        # @.str66
.L.str66:
	.asciz	"14:2"
	.size	.L.str66, 5

	.type	.L.str67,@object        # @.str67
.L.str67:
	.asciz	"indvars.iv62"
	.size	.L.str67, 13

	.type	.L.str68,@object        # @.str68
	.align	16
.L.str68:
	.asciz	"indvars.iv.next63"
	.size	.L.str68, 18

	.type	.L.str69,@object        # @.str69
.L.str69:
	.asciz	"16"
	.size	.L.str69, 3

	.type	.L.str70,@object        # @.str70
.L.str70:
	.asciz	"17"
	.size	.L.str70, 3

	.type	.L.str71,@object        # @.str71
.L.str71:
	.asciz	"18"
	.size	.L.str71, 3

	.type	.L.str72,@object        # @.str72
.L.str72:
	.asciz	"19"
	.size	.L.str72, 3

	.type	.L.str73,@object        # @.str73
.L.str73:
	.asciz	"in"
	.size	.L.str73, 3

	.type	.L.str74,@object        # @.str74
.L.str74:
	.asciz	"14:2-0"
	.size	.L.str74, 7

	.type	.L.str75,@object        # @.str75
.L.str75:
	.asciz	"20"
	.size	.L.str75, 3

	.type	.L.str76,@object        # @.str76
.L.str76:
	.asciz	"14:2-1"
	.size	.L.str76, 7

	.type	.L.str77,@object        # @.str77
.L.str77:
	.asciz	"21"
	.size	.L.str77, 3

	.type	.L.str78,@object        # @.str78
.L.str78:
	.asciz	"out"
	.size	.L.str78, 4

	.type	.L.str79,@object        # @.str79
.L.str79:
	.asciz	"14:2-2"
	.size	.L.str79, 7

	.type	.L.str80,@object        # @.str80
.L.str80:
	.asciz	"22"
	.size	.L.str80, 3

	.type	.L.str81,@object        # @.str81
.L.str81:
	.asciz	"14:2-3"
	.size	.L.str81, 7

	.type	.L.str82,@object        # @.str82
.L.str82:
	.asciz	"lftr.wideiv64"
	.size	.L.str82, 14

	.type	.L.str83,@object        # @.str83
.L.str83:
	.asciz	"exitcond65"
	.size	.L.str83, 11

	.type	.L.str84,@object        # @.str84
.L.str84:
	.asciz	"14:2-4"
	.size	.L.str84, 7

	.type	.L.str85,@object        # @.str85
.L.str85:
	.asciz	"23"
	.size	.L.str85, 3

	.type	.L.str86,@object        # @.str86
.L.str86:
	.asciz	"24"
	.size	.L.str86, 3

	.type	.L.str87,@object        # @.str87
.L.str87:
	.asciz	"25"
	.size	.L.str87, 3

	.type	.L.str88,@object        # @.str88
	.align	16
.L.str88:
	.asciz	"._crit_edge30:1-0"
	.size	.L.str88, 18

	.type	.L.str89,@object        # @.str89
.L.str89:
	.asciz	"kiss_fft"
	.size	.L.str89, 9

	.type	.L.str90,@object        # @.str90
.L.str90:
	.asciz	"cfg"
	.size	.L.str90, 4

	.type	.L.str91,@object        # @.str91
	.align	16
.L.str91:
	.asciz	"._crit_edge30:1-2"
	.size	.L.str91, 18

	.type	.L.str92,@object        # @.str92
.L.str92:
	.asciz	".lr.ph33:1"
	.size	.L.str92, 11

	.type	.L.str93,@object        # @.str93
.L.str93:
	.asciz	"26"
	.size	.L.str93, 3

	.type	.L.str94,@object        # @.str94
.L.str94:
	.asciz	".lr.ph33:1-0"
	.size	.L.str94, 13

	.type	.L.str95,@object        # @.str95
.L.str95:
	.asciz	"27:2"
	.size	.L.str95, 5

	.type	.L.str96,@object        # @.str96
.L.str96:
	.asciz	"indvars.iv66"
	.size	.L.str96, 13

	.type	.L.str97,@object        # @.str97
	.align	16
.L.str97:
	.asciz	"indvars.iv.next67"
	.size	.L.str97, 18

	.type	.L.str98,@object        # @.str98
.L.str98:
	.asciz	"28"
	.size	.L.str98, 3

	.type	.L.str99,@object        # @.str99
.L.str99:
	.asciz	"29"
	.size	.L.str99, 3

	.type	.L.str100,@object       # @.str100
.L.str100:
	.asciz	"30"
	.size	.L.str100, 3

	.type	.L.str101,@object       # @.str101
.L.str101:
	.asciz	"31"
	.size	.L.str101, 3

	.type	.L.str102,@object       # @.str102
.L.str102:
	.asciz	"32"
	.size	.L.str102, 3

	.type	.L.str103,@object       # @.str103
.L.str103:
	.asciz	"27:2-0"
	.size	.L.str103, 7

	.type	.L.str104,@object       # @.str104
.L.str104:
	.asciz	"lftr.wideiv68"
	.size	.L.str104, 14

	.type	.L.str105,@object       # @.str105
.L.str105:
	.asciz	"exitcond69"
	.size	.L.str105, 11

	.type	.L.str106,@object       # @.str106
.L.str106:
	.asciz	"27:2-1"
	.size	.L.str106, 7

	.type	.L.str107,@object       # @.str107
.L.str107:
	.asciz	"lftr.wideiv72"
	.size	.L.str107, 14

	.type	.L.str108,@object       # @.str108
.L.str108:
	.asciz	"exitcond73"
	.size	.L.str108, 11

	.type	.L.str109,@object       # @.str109
	.align	16
.L.str109:
	.asciz	"._crit_edge34:1-0"
	.size	.L.str109, 18

	.type	.L.str110,@object       # @.str110
.L.str110:
	.asciz	"._crit_edge36:0"
	.size	.L.str110, 16

	.type	.L.str111,@object       # @.str111
.L.str111:
	.asciz	"33"
	.size	.L.str111, 3

	.type	.L.str112,@object       # @.str112
.L.str112:
	.asciz	"34"
	.size	.L.str112, 3

	.type	.L.str113,@object       # @.str113
.L.str113:
	.asciz	"35"
	.size	.L.str113, 3

	.type	.L.str114,@object       # @.str114
.L.str114:
	.asciz	"36"
	.size	.L.str114, 3

	.type	.L.str115,@object       # @.str115
	.align	16
.L.str115:
	.asciz	"._crit_edge36:0-5"
	.size	.L.str115, 18

	.type	.L.str116,@object       # @.str116
.L.str116:
	.asciz	".preheader22:1"
	.size	.L.str116, 15

	.type	.L.str117,@object       # @.str117
.L.str117:
	.asciz	"indvars.iv58"
	.size	.L.str117, 13

	.type	.L.str118,@object       # @.str118
	.align	16
.L.str118:
	.asciz	"indvars.iv.next59"
	.size	.L.str118, 18

	.type	.L.str119,@object       # @.str119
.L.str119:
	.asciz	"57:1"
	.size	.L.str119, 5

	.type	.L.str120,@object       # @.str120
.L.str120:
	.asciz	"37"
	.size	.L.str120, 3

	.type	.L.str121,@object       # @.str121
.L.str121:
	.asciz	"38"
	.size	.L.str121, 3

	.type	.L.str122,@object       # @.str122
.L.str122:
	.asciz	"39"
	.size	.L.str122, 3

	.type	.L.str123,@object       # @.str123
.L.str123:
	.asciz	"sext76"
	.size	.L.str123, 7

	.type	.L.str124,@object       # @.str124
.L.str124:
	.asciz	"40"
	.size	.L.str124, 3

	.type	.L.str125,@object       # @.str125
.L.str125:
	.asciz	"41"
	.size	.L.str125, 3

	.type	.L.str126,@object       # @.str126
	.align	16
.L.str126:
	.asciz	".preheader22:1-0"
	.size	.L.str126, 17

	.type	.L.str127,@object       # @.str127
.L.str127:
	.asciz	"42:2"
	.size	.L.str127, 5

	.type	.L.str128,@object       # @.str128
.L.str128:
	.asciz	"indvars.iv55"
	.size	.L.str128, 13

	.type	.L.str129,@object       # @.str129
	.align	16
.L.str129:
	.asciz	"indvars.iv.next56"
	.size	.L.str129, 18

	.type	.L.str130,@object       # @.str130
.L.str130:
	.asciz	"43"
	.size	.L.str130, 3

	.type	.L.str131,@object       # @.str131
.L.str131:
	.asciz	"44"
	.size	.L.str131, 3

	.type	.L.str132,@object       # @.str132
.L.str132:
	.asciz	"45"
	.size	.L.str132, 3

	.type	.L.str133,@object       # @.str133
.L.str133:
	.asciz	"46"
	.size	.L.str133, 3

	.type	.L.str134,@object       # @.str134
.L.str134:
	.asciz	"47"
	.size	.L.str134, 3

	.type	.L.str135,@object       # @.str135
.L.str135:
	.asciz	"48"
	.size	.L.str135, 3

	.type	.L.str136,@object       # @.str136
.L.str136:
	.asciz	"49"
	.size	.L.str136, 3

	.type	.L.str137,@object       # @.str137
.L.str137:
	.asciz	"50"
	.size	.L.str137, 3

	.type	.L.str138,@object       # @.str138
.L.str138:
	.asciz	"51"
	.size	.L.str138, 3

	.type	.L.str139,@object       # @.str139
.L.str139:
	.asciz	"52"
	.size	.L.str139, 3

	.type	.L.str140,@object       # @.str140
.L.str140:
	.asciz	"sqrt"
	.size	.L.str140, 5

	.type	.L.str141,@object       # @.str141
.L.str141:
	.asciz	"53"
	.size	.L.str141, 3

	.type	.L.str142,@object       # @.str142
.L.str142:
	.asciz	"log10"
	.size	.L.str142, 6

	.type	.L.str143,@object       # @.str143
.L.str143:
	.asciz	"54"
	.size	.L.str143, 3

	.type	.L.str144,@object       # @.str144
.L.str144:
	.asciz	"55"
	.size	.L.str144, 3

	.type	.L.str145,@object       # @.str145
.L.str145:
	.asciz	"56"
	.size	.L.str145, 3

	.type	.L.str146,@object       # @.str146
.L.str146:
	.asciz	"fft_data"
	.size	.L.str146, 9

	.type	.L.str147,@object       # @.str147
.L.str147:
	.asciz	"42:2-1"
	.size	.L.str147, 7

	.type	.L.str148,@object       # @.str148
.L.str148:
	.asciz	"exitcond57"
	.size	.L.str148, 11

	.type	.L.str149,@object       # @.str149
.L.str149:
	.asciz	"42:2-2"
	.size	.L.str149, 7

	.type	.L.str150,@object       # @.str150
.L.str150:
	.asciz	"lftr.wideiv60"
	.size	.L.str150, 14

	.type	.L.str151,@object       # @.str151
.L.str151:
	.asciz	"exitcond61"
	.size	.L.str151, 11

	.type	.L.str152,@object       # @.str152
.L.str152:
	.asciz	"57:1-0"
	.size	.L.str152, 7

	.type	.L.str153,@object       # @.str153
.L.str153:
	.asciz	"._crit_edge25:0"
	.size	.L.str153, 16

	.type	.L.str154,@object       # @.str154
.L.str154:
	.asciz	".ph"
	.size	.L.str154, 4

	.type	.L.str155,@object       # @.str155
.L.str155:
	.asciz	"58"
	.size	.L.str155, 3

	.type	.L.str156,@object       # @.str156
.L.str156:
	.asciz	"59"
	.size	.L.str156, 3

	.type	.L.str157,@object       # @.str157
.L.str157:
	.asciz	"60"
	.size	.L.str157, 3

	.type	.L.str158,@object       # @.str158
	.align	16
.L.str158:
	.asciz	"._crit_edge25.thread:0-3"
	.size	.L.str158, 25

	.type	.L.str159,@object       # @.str159
.L.str159:
	.asciz	".preheader14:0"
	.size	.L.str159, 15

	.type	.L.str160,@object       # @.str160
.L.str160:
	.asciz	"61"
	.size	.L.str160, 3

	.type	.L.str161,@object       # @.str161
.L.str161:
	.asciz	"62"
	.size	.L.str161, 3

	.type	.L.str162,@object       # @.str162
.L.str162:
	.asciz	"63"
	.size	.L.str162, 3

	.type	.L.str163,@object       # @.str163
.L.str163:
	.asciz	"64"
	.size	.L.str163, 3

	.type	.L.str164,@object       # @.str164
	.align	16
.L.str164:
	.asciz	"._crit_edge25:0-3"
	.size	.L.str164, 18

	.type	.L.str165,@object       # @.str165
.L.str165:
	.asciz	".lr.ph21:1"
	.size	.L.str165, 11

	.type	.L.str166,@object       # @.str166
.L.str166:
	.asciz	"._crit_edge:0"
	.size	.L.str166, 14

	.type	.L.str167,@object       # @.str167
.L.str167:
	.asciz	"65"
	.size	.L.str167, 3

	.type	.L.str168,@object       # @.str168
.L.str168:
	.asciz	"77:1"
	.size	.L.str168, 5

	.type	.L.str169,@object       # @.str169
.L.str169:
	.asciz	"66"
	.size	.L.str169, 3

	.type	.L.str170,@object       # @.str170
.L.str170:
	.asciz	"67"
	.size	.L.str170, 3

	.type	.L.str171,@object       # @.str171
.L.str171:
	.asciz	"68"
	.size	.L.str171, 3

	.type	.L.str172,@object       # @.str172
	.align	16
.L.str172:
	.asciz	".preheader14:0-0"
	.size	.L.str172, 17

	.type	.L.str173,@object       # @.str173
.L.str173:
	.asciz	"indvars.iv51"
	.size	.L.str173, 13

	.type	.L.str174,@object       # @.str174
	.align	16
.L.str174:
	.asciz	"indvars.iv.next52"
	.size	.L.str174, 18

	.type	.L.str175,@object       # @.str175
.L.str175:
	.asciz	"69"
	.size	.L.str175, 3

	.type	.L.str176,@object       # @.str176
.L.str176:
	.asciz	".lr.ph21:1-0"
	.size	.L.str176, 13

	.type	.L.str177,@object       # @.str177
.L.str177:
	.asciz	"sext75"
	.size	.L.str177, 7

	.type	.L.str178,@object       # @.str178
.L.str178:
	.asciz	"70"
	.size	.L.str178, 3

	.type	.L.str179,@object       # @.str179
.L.str179:
	.asciz	".lr.ph21:1-2"
	.size	.L.str179, 13

	.type	.L.str180,@object       # @.str180
.L.str180:
	.asciz	"71:2"
	.size	.L.str180, 5

	.type	.L.str181,@object       # @.str181
.L.str181:
	.asciz	"indvars.iv48"
	.size	.L.str181, 13

	.type	.L.str182,@object       # @.str182
	.align	16
.L.str182:
	.asciz	"indvars.iv.next49"
	.size	.L.str182, 18

	.type	.L.str183,@object       # @.str183
.L.str183:
	.asciz	"72"
	.size	.L.str183, 3

	.type	.L.str184,@object       # @.str184
.L.str184:
	.asciz	"76"
	.size	.L.str184, 3

	.type	.L.str185,@object       # @.str185
.L.str185:
	.asciz	"73"
	.size	.L.str185, 3

	.type	.L.str186,@object       # @.str186
.L.str186:
	.asciz	"74"
	.size	.L.str186, 3

	.type	.L.str187,@object       # @.str187
.L.str187:
	.asciz	"75"
	.size	.L.str187, 3

	.type	.L.str188,@object       # @.str188
.L.str188:
	.asciz	"exitcond50"
	.size	.L.str188, 11

	.type	.L.str189,@object       # @.str189
.L.str189:
	.asciz	"71:2-0"
	.size	.L.str189, 7

	.type	.L.str190,@object       # @.str190
.L.str190:
	.asciz	"78"
	.size	.L.str190, 3

	.type	.L.str191,@object       # @.str191
.L.str191:
	.asciz	"77:1-0"
	.size	.L.str191, 7

	.type	.L.str192,@object       # @.str192
.L.str192:
	.asciz	"lftr.wideiv53"
	.size	.L.str192, 14

	.type	.L.str193,@object       # @.str193
.L.str193:
	.asciz	"exitcond54"
	.size	.L.str193, 11

	.type	.L.str194,@object       # @.str194
.L.str194:
	.asciz	"77:1-1"
	.size	.L.str194, 7

	.type	.L.str195,@object       # @.str195
.L.str195:
	.asciz	".preheader11:0"
	.size	.L.str195, 15

	.type	.L.str196,@object       # @.str196
.L.str196:
	.asciz	"79"
	.size	.L.str196, 3

	.type	.L.str197,@object       # @.str197
	.align	16
.L.str197:
	.asciz	".preheader11:0-0"
	.size	.L.str197, 17

	.type	.L.str198,@object       # @.str198
.L.str198:
	.asciz	"indvars.iv43"
	.size	.L.str198, 13

	.type	.L.str199,@object       # @.str199
	.align	16
.L.str199:
	.asciz	"indvars.iv.next44"
	.size	.L.str199, 18

	.type	.L.str200,@object       # @.str200
.L.str200:
	.asciz	"92:1"
	.size	.L.str200, 5

	.type	.L.str201,@object       # @.str201
.L.str201:
	.asciz	"80"
	.size	.L.str201, 3

	.type	.L.str202,@object       # @.str202
.L.str202:
	.asciz	"81"
	.size	.L.str202, 3

	.type	.L.str203,@object       # @.str203
.L.str203:
	.asciz	"82"
	.size	.L.str203, 3

	.type	.L.str204,@object       # @.str204
.L.str204:
	.asciz	"sext74"
	.size	.L.str204, 7

	.type	.L.str205,@object       # @.str205
.L.str205:
	.asciz	"83"
	.size	.L.str205, 3

	.type	.L.str206,@object       # @.str206
.L.str206:
	.asciz	".lr.ph:1-2"
	.size	.L.str206, 11

	.type	.L.str207,@object       # @.str207
.L.str207:
	.asciz	"84:2"
	.size	.L.str207, 5

	.type	.L.str208,@object       # @.str208
.L.str208:
	.asciz	"indvars.iv40"
	.size	.L.str208, 13

	.type	.L.str209,@object       # @.str209
	.align	16
.L.str209:
	.asciz	"indvars.iv.next41"
	.size	.L.str209, 18

	.type	.L.str210,@object       # @.str210
.L.str210:
	.asciz	"85"
	.size	.L.str210, 3

	.type	.L.str211,@object       # @.str211
.L.str211:
	.asciz	"91"
	.size	.L.str211, 3

	.type	.L.str212,@object       # @.str212
.L.str212:
	.asciz	"86"
	.size	.L.str212, 3

	.type	.L.str213,@object       # @.str213
.L.str213:
	.asciz	"87"
	.size	.L.str213, 3

	.type	.L.str214,@object       # @.str214
.L.str214:
	.asciz	"88"
	.size	.L.str214, 3

	.type	.L.str215,@object       # @.str215
.L.str215:
	.asciz	"89"
	.size	.L.str215, 3

	.type	.L.str216,@object       # @.str216
.L.str216:
	.asciz	"90"
	.size	.L.str216, 3

	.type	.L.str217,@object       # @.str217
.L.str217:
	.asciz	"exitcond42"
	.size	.L.str217, 11

	.type	.L.str218,@object       # @.str218
.L.str218:
	.asciz	"84:2-0"
	.size	.L.str218, 7

	.type	.L.str219,@object       # @.str219
.L.str219:
	.asciz	"93"
	.size	.L.str219, 3

	.type	.L.str220,@object       # @.str220
.L.str220:
	.asciz	"92:1-0"
	.size	.L.str220, 7

	.type	.L.str221,@object       # @.str221
.L.str221:
	.asciz	"94"
	.size	.L.str221, 3

	.type	.L.str222,@object       # @.str222
.L.str222:
	.asciz	"95"
	.size	.L.str222, 3

	.type	.L.str223,@object       # @.str223
.L.str223:
	.asciz	"96"
	.size	.L.str223, 3

	.type	.L.str224,@object       # @.str224
.L.str224:
	.asciz	"92:1-1"
	.size	.L.str224, 7

	.type	.L.str225,@object       # @.str225
.L.str225:
	.asciz	"lftr.wideiv45"
	.size	.L.str225, 14

	.type	.L.str226,@object       # @.str226
.L.str226:
	.asciz	"exitcond46"
	.size	.L.str226, 11

	.type	.L.str227,@object       # @.str227
.L.str227:
	.asciz	"92:1-2"
	.size	.L.str227, 7

	.type	.L.str228,@object       # @.str228
.L.str228:
	.asciz	"indvars.iv37"
	.size	.L.str228, 13

	.type	.L.str229,@object       # @.str229
	.align	16
.L.str229:
	.asciz	"indvars.iv.next38"
	.size	.L.str229, 18

	.type	.L.str230,@object       # @.str230
.L.str230:
	.asciz	"111:1"
	.size	.L.str230, 6

	.type	.L.str231,@object       # @.str231
.L.str231:
	.asciz	"97"
	.size	.L.str231, 3

	.type	.L.str232,@object       # @.str232
.L.str232:
	.asciz	"98"
	.size	.L.str232, 3

	.type	.L.str233,@object       # @.str233
.L.str233:
	.asciz	"99"
	.size	.L.str233, 3

	.type	.L.str234,@object       # @.str234
.L.str234:
	.asciz	"100"
	.size	.L.str234, 4

	.type	.L.str235,@object       # @.str235
.L.str235:
	.asciz	"sext"
	.size	.L.str235, 5

	.type	.L.str236,@object       # @.str236
.L.str236:
	.asciz	"101"
	.size	.L.str236, 4

	.type	.L.str237,@object       # @.str237
.L.str237:
	.asciz	"102:2"
	.size	.L.str237, 6

	.type	.L.str238,@object       # @.str238
.L.str238:
	.asciz	"110:2"
	.size	.L.str238, 6

	.type	.L.str239,@object       # @.str239
.L.str239:
	.asciz	"102:2-0"
	.size	.L.str239, 8

	.type	.L.str240,@object       # @.str240
.L.str240:
	.asciz	"103:2"
	.size	.L.str240, 6

	.type	.L.str241,@object       # @.str241
.L.str241:
	.asciz	"104"
	.size	.L.str241, 4

	.type	.L.str242,@object       # @.str242
.L.str242:
	.asciz	"105"
	.size	.L.str242, 4

	.type	.L.str243,@object       # @.str243
.L.str243:
	.asciz	"106"
	.size	.L.str243, 4

	.type	.L.str244,@object       # @.str244
.L.str244:
	.asciz	"107"
	.size	.L.str244, 4

	.type	.L.str245,@object       # @.str245
.L.str245:
	.asciz	"108"
	.size	.L.str245, 4

	.type	.L.str246,@object       # @.str246
.L.str246:
	.asciz	"109"
	.size	.L.str246, 4

	.type	.L.str247,@object       # @.str247
.L.str247:
	.asciz	"103:2-0"
	.size	.L.str247, 8

	.type	.L.str248,@object       # @.str248
.L.str248:
	.asciz	"103:2-1"
	.size	.L.str248, 8

	.type	.L.str249,@object       # @.str249
.L.str249:
	.asciz	"110:2-0"
	.size	.L.str249, 8

	.type	.L.str250,@object       # @.str250
.L.str250:
	.asciz	"exitcond39"
	.size	.L.str250, 11

	.type	.L.str251,@object       # @.str251
.L.str251:
	.asciz	"111:1-0"
	.size	.L.str251, 8

	.type	.L.str252,@object       # @.str252
.L.str252:
	.asciz	"._crit_edge:0-0"
	.size	.L.str252, 16

	.type	.L.str253,@object       # @.str253
.L.str253:
	.asciz	"main"
	.size	.L.str253, 5

	.type	.L.str254,@object       # @.str254
.L.str254:
	.asciz	"malloc"
	.size	.L.str254, 7

	.type	.L.str255,@object       # @.str255
.L.str255:
	.asciz	"0:0-3"
	.size	.L.str255, 6

	.type	.L.str256,@object       # @.str256
.L.str256:
	.asciz	"indvars.iv3"
	.size	.L.str256, 12

	.type	.L.str257,@object       # @.str257
	.align	16
.L.str257:
	.asciz	"indvars.iv.next4"
	.size	.L.str257, 17

	.type	.L.str258,@object       # @.str258
.L.str258:
	.asciz	"11:1"
	.size	.L.str258, 5

	.type	.L.str259,@object       # @.str259
.L.str259:
	.asciz	"6:2"
	.size	.L.str259, 4

	.type	.L.str260,@object       # @.str260
.L.str260:
	.asciz	"6:2-0"
	.size	.L.str260, 6

	.type	.L.str261,@object       # @.str261
.L.str261:
	.asciz	"6:2-1"
	.size	.L.str261, 6

	.type	.L.str262,@object       # @.str262
.L.str262:
	.asciz	"6:2-2"
	.size	.L.str262, 6

	.type	.L.str263,@object       # @.str263
.L.str263:
	.asciz	"exitcond5"
	.size	.L.str263, 10

	.type	.L.str264,@object       # @.str264
.L.str264:
	.asciz	"11:1-0"
	.size	.L.str264, 7

	.type	.L.str265,@object       # @.str265
.L.str265:
	.asciz	"12:0"
	.size	.L.str265, 5

	.type	.L.str266,@object       # @.str266
.L.str266:
	.asciz	"kiss_fft_alloc"
	.size	.L.str266, 15

	.type	.L.str267,@object       # @.str267
.L.str267:
	.asciz	"12:0-1"
	.size	.L.str267, 7

	.type	.L.str268,@object       # @.str268
.L.str268:
	.asciz	"12:0-3"
	.size	.L.str268, 7

	.type	.L.str269,@object       # @.str269
	.align	16
.L.str269:
	.asciz	"process_data/fft_loop 44\nprocess_data/fft_loop_1 46\nprocess_data/fft_loop_2 54\nprocess_data/fft_mean_loop_1 77\nprocess_data/fft_mean_loop_2 80\nprocess_data/fft_scale_loop_1 99\nprocess_data/fft_scale_loop_2 101\nprocess_data/fft_stddev_loop_1 87\nprocess_data/fft_stddev_loop_2 90\nprocess_data/mag_log_loop_1 65\nprocess_data/mag_log_loop_2 67\nkf_bfly2/kf_bfly2_loop 32\nkf_bfly3/kf_bfly3_loop 108\nkf_bfly4/kf_bfly4_loop 60\nkf_bfly5/kf_bfly5_loop 161\nkf_bfly_generic/kf_bfly_loop 219\nkf_bfly_generic/kf_bfly_loop_1 221\nkf_bfly_generic/kf_bfly_loop_2 228\nkf_bfly_generic/kf_bfly_loop_3 231\nkf_factor/kf_factor_1 324\nkf_factor/kf_factor_2 325\nkf_work/kf_work_1 284\nkf_work/kf_work_2 289\n"
	.size	.L.str269, 681

	.type	.L.str270,@object       # @.str270
.L.str270:
	.asciz	"kiss_fft_alloc"
	.size	.L.str270, 15

	.type	.L.str1271,@object      # @.str1271
.L.str1271:
	.asciz	"0:0"
	.size	.L.str1271, 4

	.type	.L.str2272,@object      # @.str2272
.L.str2272:
	.asciz	"1"
	.size	.L.str2272, 2

	.type	.L.str3273,@object      # @.str3273
.L.str3273:
	.zero	1
	.size	.L.str3273, 1

	.type	.L.str4274,@object      # @.str4274
.L.str4274:
	.asciz	"phi"
	.size	.L.str4274, 4

	.type	.L.str5275,@object      # @.str5275
.L.str5275:
	.asciz	"nfft"
	.size	.L.str5275, 5

	.type	.L.str6276,@object      # @.str6276
.L.str6276:
	.asciz	"2"
	.size	.L.str6276, 2

	.type	.L.str7277,@object      # @.str7277
.L.str7277:
	.asciz	"3"
	.size	.L.str7277, 2

	.type	.L.str8278,@object      # @.str8278
.L.str8278:
	.asciz	"4"
	.size	.L.str8278, 2

	.type	.L.str9279,@object      # @.str9279
.L.str9279:
	.asciz	"5"
	.size	.L.str9279, 2

	.type	.L.str10280,@object     # @.str10280
.L.str10280:
	.asciz	"lenmem"
	.size	.L.str10280, 7

	.type	.L.str11281,@object     # @.str11281
.L.str11281:
	.asciz	"0:0-6"
	.size	.L.str11281, 6

	.type	.L.str12282,@object     # @.str12282
.L.str12282:
	.asciz	"6:0"
	.size	.L.str12282, 4

	.type	.L.str13283,@object     # @.str13283
.L.str13283:
	.asciz	"9:0"
	.size	.L.str13283, 4

	.type	.L.str14284,@object     # @.str14284
.L.str14284:
	.asciz	"7"
	.size	.L.str14284, 2

	.type	.L.str15285,@object     # @.str15285
.L.str15285:
	.asciz	"malloc"
	.size	.L.str15285, 7

	.type	.L.str16286,@object     # @.str16286
.L.str16286:
	.asciz	"8"
	.size	.L.str16286, 2

	.type	.L.str17287,@object     # @.str17287
.L.str17287:
	.asciz	"6:0-1"
	.size	.L.str17287, 6

	.type	.L.str18288,@object     # @.str18288
.L.str18288:
	.asciz	"17:0"
	.size	.L.str18288, 5

	.type	.L.str19289,@object     # @.str19289
.L.str19289:
	.asciz	"10"
	.size	.L.str19289, 3

	.type	.L.str20290,@object     # @.str20290
.L.str20290:
	.asciz	"mem"
	.size	.L.str20290, 4

	.type	.L.str21291,@object     # @.str21291
.L.str21291:
	.asciz	"9:0-0"
	.size	.L.str21291, 6

	.type	.L.str22292,@object     # @.str22292
.L.str22292:
	.asciz	"16:0"
	.size	.L.str22292, 5

	.type	.L.str23293,@object     # @.str23293
.L.str23293:
	.asciz	"11:0"
	.size	.L.str23293, 5

	.type	.L.str24294,@object     # @.str24294
.L.str24294:
	.asciz	"12"
	.size	.L.str24294, 3

	.type	.L.str25295,@object     # @.str25295
.L.str25295:
	.asciz	"13"
	.size	.L.str25295, 3

	.type	.L.str26296,@object     # @.str26296
.L.str26296:
	.asciz	"11:0-0"
	.size	.L.str26296, 7

	.type	.L.str27297,@object     # @.str27297
.L.str27297:
	.asciz	"14:0"
	.size	.L.str27297, 5

	.type	.L.str28298,@object     # @.str28298
.L.str28298:
	.asciz	"15"
	.size	.L.str28298, 3

	.type	.L.str29299,@object     # @.str29299
.L.str29299:
	.asciz	"14:0-1"
	.size	.L.str29299, 7

	.type	.L.str30300,@object     # @.str30300
.L.str30300:
	.asciz	"st.0"
	.size	.L.str30300, 5

	.type	.L.str31301,@object     # @.str31301
.L.str31301:
	.asciz	"16:0-0"
	.size	.L.str31301, 7

	.type	.L.str32302,@object     # @.str32302
.L.str32302:
	.asciz	"16:0-1"
	.size	.L.str32302, 7

	.type	.L.str33303,@object     # @.str33303
.L.str33303:
	.asciz	"st.1"
	.size	.L.str33303, 5

	.type	.L.str34304,@object     # @.str34304
.L.str34304:
	.asciz	"18"
	.size	.L.str34304, 3

	.type	.L.str35305,@object     # @.str35305
.L.str35305:
	.asciz	"17:0-0"
	.size	.L.str35305, 7

	.type	.L.str36306,@object     # @.str36306
.L.str36306:
	.asciz	"41:0"
	.size	.L.str36306, 5

	.type	.L.str37307,@object     # @.str37307
.L.str37307:
	.asciz	"19:0"
	.size	.L.str37307, 5

	.type	.L.str38308,@object     # @.str38308
.L.str38308:
	.asciz	"20"
	.size	.L.str38308, 3

	.type	.L.str39309,@object     # @.str39309
.L.str39309:
	.asciz	"19:0-0"
	.size	.L.str39309, 7

	.type	.L.str40310,@object     # @.str40310
.L.str40310:
	.asciz	"21"
	.size	.L.str40310, 3

	.type	.L.str41311,@object     # @.str41311
.L.str41311:
	.asciz	"19:0-1"
	.size	.L.str41311, 7

	.type	.L.str42312,@object     # @.str42312
.L.str42312:
	.asciz	"inverse_fft"
	.size	.L.str42312, 12

	.type	.L.str43313,@object     # @.str43313
.L.str43313:
	.asciz	"22"
	.size	.L.str43313, 3

	.type	.L.str44314,@object     # @.str44314
.L.str44314:
	.asciz	"19:0-3"
	.size	.L.str44314, 7

	.type	.L.str45315,@object     # @.str45315
.L.str45315:
	.asciz	".lr.ph:0"
	.size	.L.str45315, 9

	.type	.L.str46316,@object     # @.str46316
.L.str46316:
	.asciz	"._crit_edge:0"
	.size	.L.str46316, 14

	.type	.L.str47317,@object     # @.str47317
.L.str47317:
	.asciz	"23"
	.size	.L.str47317, 3

	.type	.L.str48318,@object     # @.str48318
.L.str48318:
	.asciz	".lr.ph:0-0"
	.size	.L.str48318, 11

	.type	.L.str49319,@object     # @.str49319
.L.str49319:
	.asciz	"24:1"
	.size	.L.str49319, 5

	.type	.L.str50320,@object     # @.str50320
.L.str50320:
	.asciz	"indvars.iv"
	.size	.L.str50320, 11

	.type	.L.str51321,@object     # @.str51321
.L.str51321:
	.asciz	"indvars.iv.next"
	.size	.L.str51321, 16

	.type	.L.str52322,@object     # @.str52322
.L.str52322:
	.asciz	"33:1"
	.size	.L.str52322, 5

	.type	.L.str53323,@object     # @.str53323
.L.str53323:
	.asciz	"25"
	.size	.L.str53323, 3

	.type	.L.str54324,@object     # @.str54324
.L.str54324:
	.asciz	"26"
	.size	.L.str54324, 3

	.type	.L.str55325,@object     # @.str55325
.L.str55325:
	.asciz	"27"
	.size	.L.str55325, 3

	.type	.L.str56326,@object     # @.str56326
.L.str56326:
	.asciz	"28"
	.size	.L.str56326, 3

	.type	.L.str57327,@object     # @.str57327
.L.str57327:
	.asciz	"29"
	.size	.L.str57327, 3

	.type	.L.str58328,@object     # @.str58328
.L.str58328:
	.asciz	"30"
	.size	.L.str58328, 3

	.type	.L.str59329,@object     # @.str59329
.L.str59329:
	.asciz	"24:1-2"
	.size	.L.str59329, 7

	.type	.L.str60330,@object     # @.str60330
.L.str60330:
	.asciz	"31:1"
	.size	.L.str60330, 5

	.type	.L.str61331,@object     # @.str61331
.L.str61331:
	.asciz	"32"
	.size	.L.str61331, 3

	.type	.L.str62332,@object     # @.str62332
.L.str62332:
	.asciz	"31:1-1"
	.size	.L.str62332, 7

	.type	.L.str63333,@object     # @.str63333
.L.str63333:
	.asciz	"phase.0"
	.size	.L.str63333, 8

	.type	.L.str64334,@object     # @.str64334
.L.str64334:
	.asciz	"34"
	.size	.L.str64334, 3

	.type	.L.str65335,@object     # @.str65335
.L.str65335:
	.asciz	"cos"
	.size	.L.str65335, 4

	.type	.L.str66336,@object     # @.str66336
.L.str66336:
	.asciz	"35"
	.size	.L.str66336, 3

	.type	.L.str67337,@object     # @.str67337
.L.str67337:
	.asciz	"36"
	.size	.L.str67337, 3

	.type	.L.str68338,@object     # @.str68338
.L.str68338:
	.asciz	"33:1-0"
	.size	.L.str68338, 7

	.type	.L.str69339,@object     # @.str69339
.L.str69339:
	.asciz	"37"
	.size	.L.str69339, 3

	.type	.L.str70340,@object     # @.str70340
.L.str70340:
	.asciz	"sin"
	.size	.L.str70340, 4

	.type	.L.str71341,@object     # @.str71341
.L.str71341:
	.asciz	"38"
	.size	.L.str71341, 3

	.type	.L.str72342,@object     # @.str72342
.L.str72342:
	.asciz	"39"
	.size	.L.str72342, 3

	.type	.L.str73343,@object     # @.str73343
.L.str73343:
	.asciz	"33:1-1"
	.size	.L.str73343, 7

	.type	.L.str74344,@object     # @.str74344
.L.str74344:
	.asciz	"lftr.wideiv"
	.size	.L.str74344, 12

	.type	.L.str75345,@object     # @.str75345
.L.str75345:
	.asciz	"exitcond"
	.size	.L.str75345, 9

	.type	.L.str76346,@object     # @.str76346
.L.str76346:
	.asciz	"33:1-2"
	.size	.L.str76346, 7

	.type	.L.str77347,@object     # @.str77347
.L.str77347:
	.asciz	"40"
	.size	.L.str77347, 3

	.type	.L.str78348,@object     # @.str78348
.L.str78348:
	.asciz	"._crit_edge:0-0"
	.size	.L.str78348, 16

	.type	.L.str79349,@object     # @.str79349
.L.str79349:
	.asciz	"kf_factor"
	.size	.L.str79349, 10

	.type	.L.str80350,@object     # @.str80350
.L.str80350:
	.asciz	"._crit_edge:0-1"
	.size	.L.str80350, 16

	.type	.L.str81351,@object     # @.str81351
.L.str81351:
	.asciz	"41:0-0"
	.size	.L.str81351, 7

	.type	.L.str82352,@object     # @.str82352
.L.str82352:
	.asciz	"n"
	.size	.L.str82352, 2

	.type	.L.str83353,@object     # @.str83353
.L.str83353:
	.asciz	"sqrt"
	.size	.L.str83353, 5

	.type	.L.str84354,@object     # @.str84354
.L.str84354:
	.asciz	"floor"
	.size	.L.str84354, 6

	.type	.L.str85355,@object     # @.str85355
.L.str85355:
	.asciz	"0:0-4"
	.size	.L.str85355, 6

	.type	.L.str86356,@object     # @.str86356
.L.str86356:
	.asciz	".outer:1"
	.size	.L.str86356, 9

	.type	.L.str87357,@object     # @.str87357
.L.str87357:
	.asciz	".01.ph"
	.size	.L.str87357, 7

	.type	.L.str88358,@object     # @.str88358
.L.str88358:
	.asciz	"._crit_edge:1"
	.size	.L.str88358, 14

	.type	.L.str89359,@object     # @.str89359
.L.str89359:
	.asciz	"facbuf"
	.size	.L.str89359, 7

	.type	.L.str90360,@object     # @.str90360
.L.str90360:
	.asciz	"p.0.ph"
	.size	.L.str90360, 7

	.type	.L.str91361,@object     # @.str91361
.L.str91361:
	.asciz	"p.0.lcssa"
	.size	.L.str91361, 10

	.type	.L.str92362,@object     # @.str92362
.L.str92362:
	.asciz	".0.ph"
	.size	.L.str92362, 6

	.type	.L.str93363,@object     # @.str93363
.L.str93363:
	.asciz	".outer:1-0"
	.size	.L.str93363, 11

	.type	.L.str94364,@object     # @.str94364
.L.str94364:
	.asciz	".lr.ph:2"
	.size	.L.str94364, 9

	.type	.L.str95365,@object     # @.str95365
.L.str95365:
	.asciz	"p.02"
	.size	.L.str95365, 5

	.type	.L.str96366,@object     # @.str96366
.L.str96366:
	.asciz	"p.0.be"
	.size	.L.str96366, 7

	.type	.L.str97367,@object     # @.str97367
.L.str97367:
	.asciz	".backedge:2"
	.size	.L.str97367, 12

	.type	.L.str98368,@object     # @.str98368
.L.str98368:
	.asciz	".lr.ph:2-0"
	.size	.L.str98368, 11

	.type	.L.str99369,@object     # @.str99369
.L.str99369:
	.asciz	"6:2"
	.size	.L.str99369, 4

	.type	.L.str100370,@object    # @.str100370
.L.str100370:
	.asciz	"7:2"
	.size	.L.str100370, 4

	.type	.L.str101371,@object    # @.str101371
.L.str101371:
	.asciz	"6:2-1"
	.size	.L.str101371, 6

	.type	.L.str102372,@object    # @.str102372
.L.str102372:
	.asciz	"7:2-1"
	.size	.L.str102372, 6

	.type	.L.str103373,@object    # @.str103373
.L.str103373:
	.asciz	"p.1"
	.size	.L.str103373, 4

	.type	.L.str104374,@object    # @.str104374
.L.str104374:
	.asciz	"9"
	.size	.L.str104374, 2

	.type	.L.str105375,@object    # @.str105375
.L.str105375:
	.asciz	"11"
	.size	.L.str105375, 3

	.type	.L.str106376,@object    # @.str106376
.L.str106376:
	.asciz	".backedge:2-1"
	.size	.L.str106376, 14

	.type	.L.str107377,@object    # @.str107377
.L.str107377:
	.asciz	"14"
	.size	.L.str107377, 3

	.type	.L.str108378,@object    # @.str108378
.L.str108378:
	.asciz	"._crit_edge:1-2"
	.size	.L.str108378, 16

	.type	.L.str109379,@object    # @.str109379
.L.str109379:
	.asciz	"._crit_edge:1-4"
	.size	.L.str109379, 16

	.type	.L.str110380,@object    # @.str110380
.L.str110380:
	.asciz	"16"
	.size	.L.str110380, 3

	.type	.L.str111381,@object    # @.str111381
.L.str111381:
	.asciz	"._crit_edge:1-5"
	.size	.L.str111381, 16

	.type	.L.str112382,@object    # @.str112382
.L.str112382:
	.asciz	"kiss_fft_stride"
	.size	.L.str112382, 16

	.type	.L.str113383,@object    # @.str113383
.L.str113383:
	.asciz	"0:0-2"
	.size	.L.str113383, 6

	.type	.L.str114384,@object    # @.str114384
.L.str114384:
	.asciz	"fin"
	.size	.L.str114384, 4

	.type	.L.str115385,@object    # @.str115385
.L.str115385:
	.asciz	"0:0-5"
	.size	.L.str115385, 6

	.type	.L.str116386,@object    # @.str116386
.L.str116386:
	.asciz	"fout"
	.size	.L.str116386, 5

	.type	.L.str117387,@object    # @.str117387
.L.str117387:
	.asciz	"st"
	.size	.L.str117387, 3

	.type	.L.str118388,@object    # @.str118388
.L.str118388:
	.asciz	"0:0-8"
	.size	.L.str118388, 6

	.type	.L.str119389,@object    # @.str119389
.L.str119389:
	.asciz	"kf_work"
	.size	.L.str119389, 8

	.type	.L.str120390,@object    # @.str120390
.L.str120390:
	.asciz	"in_stride"
	.size	.L.str120390, 10

	.type	.L.str121391,@object    # @.str121391
.L.str121391:
	.asciz	"0:0-9"
	.size	.L.str121391, 6

	.type	.L.str122392,@object    # @.str122392
.L.str122392:
	.asciz	"Fout"
	.size	.L.str122392, 5

	.type	.L.str123393,@object    # @.str123393
.L.str123393:
	.asciz	"f"
	.size	.L.str123393, 2

	.type	.L.str124394,@object    # @.str124394
.L.str124394:
	.asciz	"factors"
	.size	.L.str124394, 8

	.type	.L.str125395,@object    # @.str125395
.L.str125395:
	.asciz	"6"
	.size	.L.str125395, 2

	.type	.L.str126396,@object    # @.str126396
.L.str126396:
	.asciz	"0:0-13"
	.size	.L.str126396, 7

	.type	.L.str127397,@object    # @.str127397
.L.str127397:
	.asciz	".preheader:0"
	.size	.L.str127397, 13

	.type	.L.str128398,@object    # @.str128398
.L.str128398:
	.asciz	".preheader1:0"
	.size	.L.str128398, 14

	.type	.L.str129399,@object    # @.str129399
.L.str129399:
	.asciz	"fstride"
	.size	.L.str129399, 8

	.type	.L.str130400,@object    # @.str130400
.L.str130400:
	.asciz	".preheader1:0-0"
	.size	.L.str130400, 16

	.type	.L.str131401,@object    # @.str131401
.L.str131401:
	.asciz	"29:1"
	.size	.L.str131401, 5

	.type	.L.str132402,@object    # @.str132402
.L.str132402:
	.asciz	"17"
	.size	.L.str132402, 3

	.type	.L.str133403,@object    # @.str133403
.L.str133403:
	.asciz	".preheader:0-0"
	.size	.L.str133403, 15

	.type	.L.str134404,@object    # @.str134404
.L.str134404:
	.asciz	"18:1"
	.size	.L.str134404, 5

	.type	.L.str135405,@object    # @.str135405
.L.str135405:
	.asciz	"19"
	.size	.L.str135405, 3

	.type	.L.str136406,@object    # @.str136406
.L.str136406:
	.asciz	"18:1-0"
	.size	.L.str136406, 7

	.type	.L.str137407,@object    # @.str137407
.L.str137407:
	.asciz	"24"
	.size	.L.str137407, 3

	.type	.L.str138408,@object    # @.str138408
.L.str138408:
	.asciz	"18:1-1"
	.size	.L.str138408, 7

	.type	.L.str139409,@object    # @.str139409
.L.str139409:
	.asciz	"18:1-2"
	.size	.L.str139409, 7

	.type	.L.str140410,@object    # @.str140410
.L.str140410:
	.asciz	"18:1-3"
	.size	.L.str140410, 7

	.type	.L.str141411,@object    # @.str141411
.L.str141411:
	.asciz	".loopexit:0"
	.size	.L.str141411, 12

	.type	.L.str142412,@object    # @.str142412
.L.str142412:
	.asciz	"29:1-0"
	.size	.L.str142412, 7

	.type	.L.str143413,@object    # @.str143413
.L.str143413:
	.asciz	"31"
	.size	.L.str143413, 3

	.type	.L.str144414,@object    # @.str144414
.L.str144414:
	.asciz	"29:1-1"
	.size	.L.str144414, 7

	.type	.L.str145415,@object    # @.str145415
.L.str145415:
	.asciz	"33"
	.size	.L.str145415, 3

	.type	.L.str146416,@object    # @.str146416
.L.str146416:
	.asciz	"29:1-2"
	.size	.L.str146416, 7

	.type	.L.str147417,@object    # @.str147417
.L.str147417:
	.asciz	"29:1-3"
	.size	.L.str147417, 7

	.type	.L.str148418,@object    # @.str148418
.L.str148418:
	.asciz	".loopexit:0-0"
	.size	.L.str148418, 14

	.type	.L.str149419,@object    # @.str149419
.L.str149419:
	.asciz	".loopexit:0-1"
	.size	.L.str149419, 14

	.type	.L.str150420,@object    # @.str150420
.L.str150420:
	.asciz	".loopexit:0-2"
	.size	.L.str150420, 14

	.type	.L.str151421,@object    # @.str151421
.L.str151421:
	.asciz	"43:0"
	.size	.L.str151421, 5

	.type	.L.str152422,@object    # @.str152422
.L.str152422:
	.asciz	"40:0"
	.size	.L.str152422, 5

	.type	.L.str153423,@object    # @.str153423
.L.str153423:
	.asciz	"37:0"
	.size	.L.str153423, 5

	.type	.L.str154424,@object    # @.str154424
.L.str154424:
	.asciz	"35:0"
	.size	.L.str154424, 5

	.type	.L.str155425,@object    # @.str155425
.L.str155425:
	.asciz	"45:0"
	.size	.L.str155425, 5

	.type	.L.str156426,@object    # @.str156426
.L.str156426:
	.asciz	"35:0-0"
	.size	.L.str156426, 7

	.type	.L.str157427,@object    # @.str157427
.L.str157427:
	.asciz	"kf_bfly2"
	.size	.L.str157427, 9

	.type	.L.str158428,@object    # @.str158428
.L.str158428:
	.asciz	"35:0-1"
	.size	.L.str158428, 7

	.type	.L.str159429,@object    # @.str159429
.L.str159429:
	.asciz	"47:0"
	.size	.L.str159429, 5

	.type	.L.str160430,@object    # @.str160430
.L.str160430:
	.asciz	"37:0-0"
	.size	.L.str160430, 7

	.type	.L.str161431,@object    # @.str161431
.L.str161431:
	.asciz	"kf_bfly3"
	.size	.L.str161431, 9

	.type	.L.str162432,@object    # @.str162432
.L.str162432:
	.asciz	"37:0-1"
	.size	.L.str162432, 7

	.type	.L.str163433,@object    # @.str163433
.L.str163433:
	.asciz	"41"
	.size	.L.str163433, 3

	.type	.L.str164434,@object    # @.str164434
.L.str164434:
	.asciz	"42"
	.size	.L.str164434, 3

	.type	.L.str165435,@object    # @.str165435
.L.str165435:
	.asciz	"40:0-0"
	.size	.L.str165435, 7

	.type	.L.str166436,@object    # @.str166436
.L.str166436:
	.asciz	"kf_bfly4"
	.size	.L.str166436, 9

	.type	.L.str167437,@object    # @.str167437
.L.str167437:
	.asciz	"40:0-1"
	.size	.L.str167437, 7

	.type	.L.str168438,@object    # @.str168438
.L.str168438:
	.asciz	"44"
	.size	.L.str168438, 3

	.type	.L.str169439,@object    # @.str169439
.L.str169439:
	.asciz	"43:0-0"
	.size	.L.str169439, 7

	.type	.L.str170440,@object    # @.str170440
.L.str170440:
	.asciz	"kf_bfly5"
	.size	.L.str170440, 9

	.type	.L.str171441,@object    # @.str171441
.L.str171441:
	.asciz	"43:0-1"
	.size	.L.str171441, 7

	.type	.L.str172442,@object    # @.str172442
.L.str172442:
	.asciz	"46"
	.size	.L.str172442, 3

	.type	.L.str173443,@object    # @.str173443
.L.str173443:
	.asciz	"45:0-0"
	.size	.L.str173443, 7

	.type	.L.str174444,@object    # @.str174444
.L.str174444:
	.asciz	"kf_bfly_generic"
	.size	.L.str174444, 16

	.type	.L.str175445,@object    # @.str175445
.L.str175445:
	.asciz	"45:0-1"
	.size	.L.str175445, 7

	.type	.L.str176446,@object    # @.str176446
.L.str176446:
	.asciz	"47:0-0"
	.size	.L.str176446, 7

	.type	.L.str177447,@object    # @.str177447
.L.str177447:
	.asciz	"kiss_fft"
	.size	.L.str177447, 9

	.type	.L.str178448,@object    # @.str178448
.L.str178448:
	.asciz	"0:0-3"
	.size	.L.str178448, 6

	.type	.L.str179449,@object    # @.str179449
.L.str179449:
	.asciz	"cfg"
	.size	.L.str179449, 4

	.type	.L.str180450,@object    # @.str180450
	.align	16
.L.str180450:
	.asciz	"kiss_fft_cleanup"
	.size	.L.str180450, 17

	.type	.L.str181451,@object    # @.str181451
.L.str181451:
	.asciz	"0:0-0"
	.size	.L.str181451, 6

	.type	.L.str182452,@object    # @.str182452
	.align	16
.L.str182452:
	.asciz	"kiss_fft_next_fast_size"
	.size	.L.str182452, 24

	.type	.L.str183453,@object    # @.str183453
.L.str183453:
	.asciz	"0:0-1"
	.size	.L.str183453, 6

	.type	.L.str184454,@object    # @.str184454
.L.str184454:
	.asciz	"1:1"
	.size	.L.str184454, 4

	.type	.L.str185455,@object    # @.str185455
.L.str185455:
	.asciz	".0"
	.size	.L.str185455, 3

	.type	.L.str186456,@object    # @.str186456
.L.str186456:
	.asciz	"1:1-1"
	.size	.L.str186456, 6

	.type	.L.str187457,@object    # @.str187457
.L.str187457:
	.asciz	".loopexit:1"
	.size	.L.str187457, 12

	.type	.L.str188458,@object    # @.str188458
.L.str188458:
	.asciz	"m.01"
	.size	.L.str188458, 5

	.type	.L.str189459,@object    # @.str189459
.L.str189459:
	.asciz	".lr.ph:2-1"
	.size	.L.str189459, 11

	.type	.L.str190460,@object    # @.str190460
.L.str190460:
	.asciz	"m.0.lcssa"
	.size	.L.str190460, 10

	.type	.L.str191461,@object    # @.str191461
.L.str191461:
	.asciz	".loopexit:1-0"
	.size	.L.str191461, 14

	.type	.L.str192462,@object    # @.str192462
.L.str192462:
	.asciz	".lr.ph4:2"
	.size	.L.str192462, 10

	.type	.L.str193463,@object    # @.str193463
.L.str193463:
	.asciz	".loopexit2:1"
	.size	.L.str193463, 13

	.type	.L.str194464,@object    # @.str194464
.L.str194464:
	.asciz	"m.13"
	.size	.L.str194464, 5

	.type	.L.str195465,@object    # @.str195465
.L.str195465:
	.asciz	".lr.ph4:2-1"
	.size	.L.str195465, 12

	.type	.L.str196466,@object    # @.str196466
.L.str196466:
	.asciz	"m.1.lcssa"
	.size	.L.str196466, 10

	.type	.L.str197467,@object    # @.str197467
.L.str197467:
	.asciz	".loopexit2:1-0"
	.size	.L.str197467, 15

	.type	.L.str198468,@object    # @.str198468
.L.str198468:
	.asciz	".lr.ph7:2"
	.size	.L.str198468, 10

	.type	.L.str199469,@object    # @.str199469
.L.str199469:
	.asciz	"m.26"
	.size	.L.str199469, 5

	.type	.L.str200470,@object    # @.str200470
.L.str200470:
	.asciz	".lr.ph7:2-1"
	.size	.L.str200470, 12

	.type	.L.str201471,@object    # @.str201471
.L.str201471:
	.asciz	"m.2.lcssa"
	.size	.L.str201471, 10

	.type	.L.str202472,@object    # @.str202472
.L.str202472:
	.asciz	"._crit_edge:1-1"
	.size	.L.str202472, 16

	.type	.L.str203473,@object    # @.str203473
.L.str203473:
	.asciz	"m"
	.size	.L.str203473, 2

	.type	.L.str204474,@object    # @.str204474
.L.str204474:
	.asciz	"0:0-7"
	.size	.L.str204474, 6

	.type	.L.str205475,@object    # @.str205475
.L.str205475:
	.asciz	"4:1"
	.size	.L.str205475, 4

	.type	.L.str206476,@object    # @.str206476
.L.str206476:
	.asciz	"Fout2.0"
	.size	.L.str206476, 8

	.type	.L.str207477,@object    # @.str207477
.L.str207477:
	.asciz	"tw1.0"
	.size	.L.str207477, 6

	.type	.L.str208478,@object    # @.str208478
.L.str208478:
	.asciz	".01"
	.size	.L.str208478, 4

	.type	.L.str209479,@object    # @.str209479
.L.str209479:
	.asciz	"4:1-1"
	.size	.L.str209479, 6

	.type	.L.str210480,@object    # @.str210480
.L.str210480:
	.asciz	"4:1-2"
	.size	.L.str210480, 6

	.type	.L.str211481,@object    # @.str211481
.L.str211481:
	.asciz	"4:1-3"
	.size	.L.str211481, 6

	.type	.L.str212482,@object    # @.str212482
.L.str212482:
	.asciz	"4:1-4"
	.size	.L.str212482, 6

	.type	.L.str213483,@object    # @.str213483
.L.str213483:
	.asciz	"4:1-8"
	.size	.L.str213483, 6

	.type	.L.str214484,@object    # @.str214484
.L.str214484:
	.asciz	"34:0"
	.size	.L.str214484, 5

	.type	.L.str215485,@object    # @.str215485
.L.str215485:
	.asciz	"34:0-0"
	.size	.L.str215485, 7

	.type	.L.str216486,@object    # @.str216486
.L.str216486:
	.asciz	"0:0-10"
	.size	.L.str216486, 7

	.type	.L.str217487,@object    # @.str217487
.L.str217487:
	.asciz	"7:1"
	.size	.L.str217487, 4

	.type	.L.str218488,@object    # @.str218488
.L.str218488:
	.asciz	"tw2.0"
	.size	.L.str218488, 6

	.type	.L.str219489,@object    # @.str219489
.L.str219489:
	.asciz	"k.0"
	.size	.L.str219489, 4

	.type	.L.str220490,@object    # @.str220490
.L.str220490:
	.asciz	"71"
	.size	.L.str220490, 3

	.type	.L.str221491,@object    # @.str221491
.L.str221491:
	.asciz	"70"
	.size	.L.str221491, 3

	.type	.L.str222492,@object    # @.str222492
.L.str222492:
	.asciz	"43"
	.size	.L.str222492, 3

	.type	.L.str223493,@object    # @.str223493
.L.str223493:
	.asciz	"45"
	.size	.L.str223493, 3

	.type	.L.str224494,@object    # @.str224494
.L.str224494:
	.asciz	"47"
	.size	.L.str224494, 3

	.type	.L.str225495,@object    # @.str225495
.L.str225495:
	.asciz	"48"
	.size	.L.str225495, 3

	.type	.L.str226496,@object    # @.str226496
.L.str226496:
	.asciz	"7:1-2"
	.size	.L.str226496, 6

	.type	.L.str227497,@object    # @.str227497
.L.str227497:
	.asciz	"49"
	.size	.L.str227497, 3

	.type	.L.str228498,@object    # @.str228498
.L.str228498:
	.asciz	"50"
	.size	.L.str228498, 3

	.type	.L.str229499,@object    # @.str229499
.L.str229499:
	.asciz	"51"
	.size	.L.str229499, 3

	.type	.L.str230500,@object    # @.str230500
.L.str230500:
	.asciz	"52"
	.size	.L.str230500, 3

	.type	.L.str231501,@object    # @.str231501
.L.str231501:
	.asciz	"53"
	.size	.L.str231501, 3

	.type	.L.str232502,@object    # @.str232502
.L.str232502:
	.asciz	"54"
	.size	.L.str232502, 3

	.type	.L.str233503,@object    # @.str233503
.L.str233503:
	.asciz	"55"
	.size	.L.str233503, 3

	.type	.L.str234504,@object    # @.str234504
.L.str234504:
	.asciz	"7:1-3"
	.size	.L.str234504, 6

	.type	.L.str235505,@object    # @.str235505
.L.str235505:
	.asciz	"56"
	.size	.L.str235505, 3

	.type	.L.str236506,@object    # @.str236506
.L.str236506:
	.asciz	"57"
	.size	.L.str236506, 3

	.type	.L.str237507,@object    # @.str237507
.L.str237507:
	.asciz	"58"
	.size	.L.str237507, 3

	.type	.L.str238508,@object    # @.str238508
.L.str238508:
	.asciz	"59"
	.size	.L.str238508, 3

	.type	.L.str239509,@object    # @.str239509
.L.str239509:
	.asciz	"7:1-4"
	.size	.L.str239509, 6

	.type	.L.str240510,@object    # @.str240510
.L.str240510:
	.asciz	"60"
	.size	.L.str240510, 3

	.type	.L.str241511,@object    # @.str241511
.L.str241511:
	.asciz	"61"
	.size	.L.str241511, 3

	.type	.L.str242512,@object    # @.str242512
.L.str242512:
	.asciz	"7:1-5"
	.size	.L.str242512, 6

	.type	.L.str243513,@object    # @.str243513
.L.str243513:
	.asciz	"62"
	.size	.L.str243513, 3

	.type	.L.str244514,@object    # @.str244514
.L.str244514:
	.asciz	"63"
	.size	.L.str244514, 3

	.type	.L.str245515,@object    # @.str245515
.L.str245515:
	.asciz	"7:1-6"
	.size	.L.str245515, 6

	.type	.L.str246516,@object    # @.str246516
.L.str246516:
	.asciz	"64"
	.size	.L.str246516, 3

	.type	.L.str247517,@object    # @.str247517
.L.str247517:
	.asciz	"65"
	.size	.L.str247517, 3

	.type	.L.str248518,@object    # @.str248518
.L.str248518:
	.asciz	"7:1-7"
	.size	.L.str248518, 6

	.type	.L.str249519,@object    # @.str249519
.L.str249519:
	.asciz	"66"
	.size	.L.str249519, 3

	.type	.L.str250520,@object    # @.str250520
.L.str250520:
	.asciz	"67"
	.size	.L.str250520, 3

	.type	.L.str251521,@object    # @.str251521
.L.str251521:
	.asciz	"7:1-8"
	.size	.L.str251521, 6

	.type	.L.str252522,@object    # @.str252522
.L.str252522:
	.asciz	"68"
	.size	.L.str252522, 3

	.type	.L.str253523,@object    # @.str253523
.L.str253523:
	.asciz	"69"
	.size	.L.str253523, 3

	.type	.L.str254524,@object    # @.str254524
.L.str254524:
	.asciz	"7:1-9"
	.size	.L.str254524, 6

	.type	.L.str255525,@object    # @.str255525
.L.str255525:
	.asciz	"72"
	.size	.L.str255525, 3

	.type	.L.str256526,@object    # @.str256526
.L.str256526:
	.asciz	"7:1-12"
	.size	.L.str256526, 7

	.type	.L.str257527,@object    # @.str257527
.L.str257527:
	.asciz	"73:0"
	.size	.L.str257527, 5

	.type	.L.str258528,@object    # @.str258528
.L.str258528:
	.asciz	"73:0-0"
	.size	.L.str258528, 7

	.type	.L.str259529,@object    # @.str259529
.L.str259529:
	.asciz	"0:0-11"
	.size	.L.str259529, 7

	.type	.L.str260530,@object    # @.str260530
.L.str260530:
	.asciz	"9:1"
	.size	.L.str260530, 4

	.type	.L.str261531,@object    # @.str261531
.L.str261531:
	.asciz	"tw3.0"
	.size	.L.str261531, 6

	.type	.L.str262532,@object    # @.str262532
.L.str262532:
	.asciz	"86:1"
	.size	.L.str262532, 5

	.type	.L.str263533,@object    # @.str263533
.L.str263533:
	.asciz	"88"
	.size	.L.str263533, 3

	.type	.L.str264534,@object    # @.str264534
.L.str264534:
	.asciz	"87"
	.size	.L.str264534, 3

	.type	.L.str265535,@object    # @.str265535
.L.str265535:
	.asciz	"9:1-0"
	.size	.L.str265535, 6

	.type	.L.str266536,@object    # @.str266536
.L.str266536:
	.asciz	"9:1-1"
	.size	.L.str266536, 6

	.type	.L.str267537,@object    # @.str267537
.L.str267537:
	.asciz	"9:1-2"
	.size	.L.str267537, 6

	.type	.L.str268538,@object    # @.str268538
.L.str268538:
	.asciz	"9:1-3"
	.size	.L.str268538, 6

	.type	.L.str269539,@object    # @.str269539
.L.str269539:
	.asciz	"73"
	.size	.L.str269539, 3

	.type	.L.str270540,@object    # @.str270540
.L.str270540:
	.asciz	"9:1-7"
	.size	.L.str270540, 6

	.type	.L.str271,@object       # @.str271
.L.str271:
	.asciz	"74"
	.size	.L.str271, 3

	.type	.L.str272,@object       # @.str272
.L.str272:
	.asciz	"75"
	.size	.L.str272, 3

	.type	.L.str273,@object       # @.str273
.L.str273:
	.asciz	"9:1-8"
	.size	.L.str273, 6

	.type	.L.str274,@object       # @.str274
.L.str274:
	.asciz	"9:1-9"
	.size	.L.str274, 6

	.type	.L.str275,@object       # @.str275
.L.str275:
	.asciz	"81:1"
	.size	.L.str275, 5

	.type	.L.str276,@object       # @.str276
.L.str276:
	.asciz	"76:1"
	.size	.L.str276, 5

	.type	.L.str277,@object       # @.str277
.L.str277:
	.asciz	"77"
	.size	.L.str277, 3

	.type	.L.str278,@object       # @.str278
.L.str278:
	.asciz	"76:1-0"
	.size	.L.str278, 7

	.type	.L.str279,@object       # @.str279
.L.str279:
	.asciz	"78"
	.size	.L.str279, 3

	.type	.L.str280,@object       # @.str280
.L.str280:
	.asciz	"76:1-1"
	.size	.L.str280, 7

	.type	.L.str281,@object       # @.str281
.L.str281:
	.asciz	"79"
	.size	.L.str281, 3

	.type	.L.str282,@object       # @.str282
.L.str282:
	.asciz	"76:1-2"
	.size	.L.str282, 7

	.type	.L.str283,@object       # @.str283
.L.str283:
	.asciz	"80"
	.size	.L.str283, 3

	.type	.L.str284,@object       # @.str284
.L.str284:
	.asciz	"76:1-3"
	.size	.L.str284, 7

	.type	.L.str285,@object       # @.str285
.L.str285:
	.asciz	"82"
	.size	.L.str285, 3

	.type	.L.str286,@object       # @.str286
.L.str286:
	.asciz	"81:1-0"
	.size	.L.str286, 7

	.type	.L.str287,@object       # @.str287
.L.str287:
	.asciz	"83"
	.size	.L.str287, 3

	.type	.L.str288,@object       # @.str288
.L.str288:
	.asciz	"81:1-1"
	.size	.L.str288, 7

	.type	.L.str289,@object       # @.str289
.L.str289:
	.asciz	"84"
	.size	.L.str289, 3

	.type	.L.str290,@object       # @.str290
.L.str290:
	.asciz	"81:1-2"
	.size	.L.str290, 7

	.type	.L.str291,@object       # @.str291
.L.str291:
	.asciz	"85"
	.size	.L.str291, 3

	.type	.L.str292,@object       # @.str292
.L.str292:
	.asciz	"81:1-3"
	.size	.L.str292, 7

	.type	.L.str293,@object       # @.str293
.L.str293:
	.asciz	"storemerge"
	.size	.L.str293, 11

	.type	.L.str294,@object       # @.str294
.L.str294:
	.asciz	"86:1-0"
	.size	.L.str294, 7

	.type	.L.str295,@object       # @.str295
.L.str295:
	.asciz	"89"
	.size	.L.str295, 3

	.type	.L.str296,@object       # @.str296
.L.str296:
	.asciz	"86:1-3"
	.size	.L.str296, 7

	.type	.L.str297,@object       # @.str297
.L.str297:
	.asciz	"90:0"
	.size	.L.str297, 5

	.type	.L.str298,@object       # @.str298
.L.str298:
	.asciz	"90:0-0"
	.size	.L.str298, 7

	.type	.L.str299,@object       # @.str299
.L.str299:
	.asciz	"25:1"
	.size	.L.str299, 5

	.type	.L.str300,@object       # @.str300
.L.str300:
	.asciz	"Fout0.06"
	.size	.L.str300, 9

	.type	.L.str301,@object       # @.str301
.L.str301:
	.asciz	"162"
	.size	.L.str301, 4

	.type	.L.str302,@object       # @.str302
.L.str302:
	.asciz	"Fout1.05"
	.size	.L.str302, 9

	.type	.L.str303,@object       # @.str303
.L.str303:
	.asciz	"163"
	.size	.L.str303, 4

	.type	.L.str304,@object       # @.str304
.L.str304:
	.asciz	"Fout2.04"
	.size	.L.str304, 9

	.type	.L.str305,@object       # @.str305
.L.str305:
	.asciz	"164"
	.size	.L.str305, 4

	.type	.L.str306,@object       # @.str306
.L.str306:
	.asciz	"Fout3.03"
	.size	.L.str306, 9

	.type	.L.str307,@object       # @.str307
.L.str307:
	.asciz	"165"
	.size	.L.str307, 4

	.type	.L.str308,@object       # @.str308
.L.str308:
	.asciz	"Fout4.02"
	.size	.L.str308, 9

	.type	.L.str309,@object       # @.str309
.L.str309:
	.asciz	"166"
	.size	.L.str309, 4

	.type	.L.str310,@object       # @.str310
.L.str310:
	.asciz	"76"
	.size	.L.str310, 3

	.type	.L.str311,@object       # @.str311
.L.str311:
	.asciz	"sext"
	.size	.L.str311, 5

	.type	.L.str312,@object       # @.str312
.L.str312:
	.asciz	"81"
	.size	.L.str312, 3

	.type	.L.str313,@object       # @.str313
.L.str313:
	.asciz	"86"
	.size	.L.str313, 3

	.type	.L.str314,@object       # @.str314
.L.str314:
	.asciz	"90"
	.size	.L.str314, 3

	.type	.L.str315,@object       # @.str315
.L.str315:
	.asciz	"91"
	.size	.L.str315, 3

	.type	.L.str316,@object       # @.str316
.L.str316:
	.asciz	"92"
	.size	.L.str316, 3

	.type	.L.str317,@object       # @.str317
.L.str317:
	.asciz	"93"
	.size	.L.str317, 3

	.type	.L.str318,@object       # @.str318
.L.str318:
	.asciz	"94"
	.size	.L.str318, 3

	.type	.L.str319,@object       # @.str319
.L.str319:
	.asciz	"95"
	.size	.L.str319, 3

	.type	.L.str320,@object       # @.str320
.L.str320:
	.asciz	"96"
	.size	.L.str320, 3

	.type	.L.str321,@object       # @.str321
.L.str321:
	.asciz	"97"
	.size	.L.str321, 3

	.type	.L.str322,@object       # @.str322
.L.str322:
	.asciz	"98"
	.size	.L.str322, 3

	.type	.L.str323,@object       # @.str323
.L.str323:
	.asciz	"99"
	.size	.L.str323, 3

	.type	.L.str324,@object       # @.str324
.L.str324:
	.asciz	"100"
	.size	.L.str324, 4

	.type	.L.str325,@object       # @.str325
.L.str325:
	.asciz	"101"
	.size	.L.str325, 4

	.type	.L.str326,@object       # @.str326
.L.str326:
	.asciz	"102"
	.size	.L.str326, 4

	.type	.L.str327,@object       # @.str327
.L.str327:
	.asciz	"103"
	.size	.L.str327, 4

	.type	.L.str328,@object       # @.str328
.L.str328:
	.asciz	"104"
	.size	.L.str328, 4

	.type	.L.str329,@object       # @.str329
.L.str329:
	.asciz	"105"
	.size	.L.str329, 4

	.type	.L.str330,@object       # @.str330
.L.str330:
	.asciz	"106"
	.size	.L.str330, 4

	.type	.L.str331,@object       # @.str331
.L.str331:
	.asciz	"107"
	.size	.L.str331, 4

	.type	.L.str332,@object       # @.str332
.L.str332:
	.asciz	"108"
	.size	.L.str332, 4

	.type	.L.str333,@object       # @.str333
.L.str333:
	.asciz	"109"
	.size	.L.str333, 4

	.type	.L.str334,@object       # @.str334
.L.str334:
	.asciz	"110"
	.size	.L.str334, 4

	.type	.L.str335,@object       # @.str335
.L.str335:
	.asciz	"111"
	.size	.L.str335, 4

	.type	.L.str336,@object       # @.str336
.L.str336:
	.asciz	"112"
	.size	.L.str336, 4

	.type	.L.str337,@object       # @.str337
.L.str337:
	.asciz	"113"
	.size	.L.str337, 4

	.type	.L.str338,@object       # @.str338
.L.str338:
	.asciz	"114"
	.size	.L.str338, 4

	.type	.L.str339,@object       # @.str339
.L.str339:
	.asciz	"115"
	.size	.L.str339, 4

	.type	.L.str340,@object       # @.str340
.L.str340:
	.asciz	"116"
	.size	.L.str340, 4

	.type	.L.str341,@object       # @.str341
.L.str341:
	.asciz	"117"
	.size	.L.str341, 4

	.type	.L.str342,@object       # @.str342
.L.str342:
	.asciz	"118"
	.size	.L.str342, 4

	.type	.L.str343,@object       # @.str343
.L.str343:
	.asciz	"119"
	.size	.L.str343, 4

	.type	.L.str344,@object       # @.str344
.L.str344:
	.asciz	"120"
	.size	.L.str344, 4

	.type	.L.str345,@object       # @.str345
.L.str345:
	.asciz	"121"
	.size	.L.str345, 4

	.type	.L.str346,@object       # @.str346
.L.str346:
	.asciz	"25:1-0"
	.size	.L.str346, 7

	.type	.L.str347,@object       # @.str347
.L.str347:
	.asciz	"122"
	.size	.L.str347, 4

	.type	.L.str348,@object       # @.str348
.L.str348:
	.asciz	"123"
	.size	.L.str348, 4

	.type	.L.str349,@object       # @.str349
.L.str349:
	.asciz	"124"
	.size	.L.str349, 4

	.type	.L.str350,@object       # @.str350
.L.str350:
	.asciz	"25:1-1"
	.size	.L.str350, 7

	.type	.L.str351,@object       # @.str351
.L.str351:
	.asciz	"125"
	.size	.L.str351, 4

	.type	.L.str352,@object       # @.str352
.L.str352:
	.asciz	"126"
	.size	.L.str352, 4

	.type	.L.str353,@object       # @.str353
.L.str353:
	.asciz	"127"
	.size	.L.str353, 4

	.type	.L.str354,@object       # @.str354
.L.str354:
	.asciz	"128"
	.size	.L.str354, 4

	.type	.L.str355,@object       # @.str355
.L.str355:
	.asciz	"129"
	.size	.L.str355, 4

	.type	.L.str356,@object       # @.str356
.L.str356:
	.asciz	"130"
	.size	.L.str356, 4

	.type	.L.str357,@object       # @.str357
.L.str357:
	.asciz	"131"
	.size	.L.str357, 4

	.type	.L.str358,@object       # @.str358
.L.str358:
	.asciz	"132"
	.size	.L.str358, 4

	.type	.L.str359,@object       # @.str359
.L.str359:
	.asciz	"133"
	.size	.L.str359, 4

	.type	.L.str360,@object       # @.str360
.L.str360:
	.asciz	"134"
	.size	.L.str360, 4

	.type	.L.str361,@object       # @.str361
.L.str361:
	.asciz	"135"
	.size	.L.str361, 4

	.type	.L.str362,@object       # @.str362
.L.str362:
	.asciz	"136"
	.size	.L.str362, 4

	.type	.L.str363,@object       # @.str363
.L.str363:
	.asciz	"137"
	.size	.L.str363, 4

	.type	.L.str364,@object       # @.str364
.L.str364:
	.asciz	"138"
	.size	.L.str364, 4

	.type	.L.str365,@object       # @.str365
.L.str365:
	.asciz	"139"
	.size	.L.str365, 4

	.type	.L.str366,@object       # @.str366
.L.str366:
	.asciz	"140"
	.size	.L.str366, 4

	.type	.L.str367,@object       # @.str367
.L.str367:
	.asciz	"25:1-2"
	.size	.L.str367, 7

	.type	.L.str368,@object       # @.str368
.L.str368:
	.asciz	"141"
	.size	.L.str368, 4

	.type	.L.str369,@object       # @.str369
.L.str369:
	.asciz	"25:1-3"
	.size	.L.str369, 7

	.type	.L.str370,@object       # @.str370
.L.str370:
	.asciz	"142"
	.size	.L.str370, 4

	.type	.L.str371,@object       # @.str371
.L.str371:
	.asciz	"25:1-4"
	.size	.L.str371, 7

	.type	.L.str372,@object       # @.str372
.L.str372:
	.asciz	"143"
	.size	.L.str372, 4

	.type	.L.str373,@object       # @.str373
.L.str373:
	.asciz	"25:1-5"
	.size	.L.str373, 7

	.type	.L.str374,@object       # @.str374
.L.str374:
	.asciz	"144"
	.size	.L.str374, 4

	.type	.L.str375,@object       # @.str375
.L.str375:
	.asciz	"145"
	.size	.L.str375, 4

	.type	.L.str376,@object       # @.str376
.L.str376:
	.asciz	"146"
	.size	.L.str376, 4

	.type	.L.str377,@object       # @.str377
.L.str377:
	.asciz	"147"
	.size	.L.str377, 4

	.type	.L.str378,@object       # @.str378
.L.str378:
	.asciz	"148"
	.size	.L.str378, 4

	.type	.L.str379,@object       # @.str379
.L.str379:
	.asciz	"149"
	.size	.L.str379, 4

	.type	.L.str380,@object       # @.str380
.L.str380:
	.asciz	"150"
	.size	.L.str380, 4

	.type	.L.str381,@object       # @.str381
.L.str381:
	.asciz	"151"
	.size	.L.str381, 4

	.type	.L.str382,@object       # @.str382
.L.str382:
	.asciz	"152"
	.size	.L.str382, 4

	.type	.L.str383,@object       # @.str383
.L.str383:
	.asciz	"153"
	.size	.L.str383, 4

	.type	.L.str384,@object       # @.str384
.L.str384:
	.asciz	"154"
	.size	.L.str384, 4

	.type	.L.str385,@object       # @.str385
.L.str385:
	.asciz	"155"
	.size	.L.str385, 4

	.type	.L.str386,@object       # @.str386
.L.str386:
	.asciz	"156"
	.size	.L.str386, 4

	.type	.L.str387,@object       # @.str387
.L.str387:
	.asciz	"157"
	.size	.L.str387, 4

	.type	.L.str388,@object       # @.str388
.L.str388:
	.asciz	"158"
	.size	.L.str388, 4

	.type	.L.str389,@object       # @.str389
.L.str389:
	.asciz	"25:1-6"
	.size	.L.str389, 7

	.type	.L.str390,@object       # @.str390
.L.str390:
	.asciz	"159"
	.size	.L.str390, 4

	.type	.L.str391,@object       # @.str391
.L.str391:
	.asciz	"25:1-7"
	.size	.L.str391, 7

	.type	.L.str392,@object       # @.str392
.L.str392:
	.asciz	"160"
	.size	.L.str392, 4

	.type	.L.str393,@object       # @.str393
.L.str393:
	.asciz	"25:1-8"
	.size	.L.str393, 7

	.type	.L.str394,@object       # @.str394
.L.str394:
	.asciz	"161"
	.size	.L.str394, 4

	.type	.L.str395,@object       # @.str395
.L.str395:
	.asciz	"25:1-9"
	.size	.L.str395, 7

	.type	.L.str396,@object       # @.str396
.L.str396:
	.asciz	"25:1-15"
	.size	.L.str396, 8

	.type	.L.str397,@object       # @.str397
.L.str397:
	.asciz	"p"
	.size	.L.str397, 2

	.type	.L.str398,@object       # @.str398
	.align	16
.L.str398:
	.asciz	".preheader.lr.ph:0"
	.size	.L.str398, 19

	.type	.L.str399,@object       # @.str399
.L.str399:
	.asciz	"._crit_edge11:0"
	.size	.L.str399, 16

	.type	.L.str400,@object       # @.str400
	.align	16
.L.str400:
	.asciz	".preheader.lr.ph:0-0"
	.size	.L.str400, 21

	.type	.L.str401,@object       # @.str401
.L.str401:
	.asciz	".preheader:1"
	.size	.L.str401, 13

	.type	.L.str402,@object       # @.str402
.L.str402:
	.asciz	"indvars.iv20"
	.size	.L.str402, 13

	.type	.L.str403,@object       # @.str403
	.align	16
.L.str403:
	.asciz	"indvars.iv.next21"
	.size	.L.str403, 18

	.type	.L.str404,@object       # @.str404
.L.str404:
	.asciz	"._crit_edge9:1"
	.size	.L.str404, 15

	.type	.L.str405,@object       # @.str405
.L.str405:
	.asciz	".preheader:1-0"
	.size	.L.str405, 15

	.type	.L.str406,@object       # @.str406
.L.str406:
	.asciz	"indvars.iv14"
	.size	.L.str406, 13

	.type	.L.str407,@object       # @.str407
	.align	16
.L.str407:
	.asciz	"indvars.iv.next15"
	.size	.L.str407, 18

	.type	.L.str408,@object       # @.str408
.L.str408:
	.asciz	"indvars.iv12"
	.size	.L.str408, 13

	.type	.L.str409,@object       # @.str409
	.align	16
.L.str409:
	.asciz	"indvars.iv.next13"
	.size	.L.str409, 18

	.type	.L.str410,@object       # @.str410
.L.str410:
	.asciz	".lr.ph8:1"
	.size	.L.str410, 10

	.type	.L.str411,@object       # @.str411
.L.str411:
	.asciz	".lr.ph8:1-0"
	.size	.L.str411, 12

	.type	.L.str412,@object       # @.str412
.L.str412:
	.asciz	"20:2"
	.size	.L.str412, 5

	.type	.L.str413,@object       # @.str413
.L.str413:
	.asciz	"indvars.iv22"
	.size	.L.str413, 13

	.type	.L.str414,@object       # @.str414
	.align	16
.L.str414:
	.asciz	"indvars.iv.next23"
	.size	.L.str414, 18

	.type	.L.str415,@object       # @.str415
.L.str415:
	.asciz	"._crit_edge:2"
	.size	.L.str415, 14

	.type	.L.str416,@object       # @.str416
.L.str416:
	.asciz	"q1.16"
	.size	.L.str416, 6

	.type	.L.str417,@object       # @.str417
.L.str417:
	.asciz	"20:2-1"
	.size	.L.str417, 7

	.type	.L.str418,@object       # @.str418
.L.str418:
	.asciz	"20:2-3"
	.size	.L.str418, 7

	.type	.L.str419,@object       # @.str419
.L.str419:
	.asciz	".lr.ph5:2"
	.size	.L.str419, 10

	.type	.L.str420,@object       # @.str420
.L.str420:
	.asciz	".lr.ph5:2-0"
	.size	.L.str420, 12

	.type	.L.str421,@object       # @.str421
.L.str421:
	.asciz	"26:3"
	.size	.L.str421, 5

	.type	.L.str422,@object       # @.str422
.L.str422:
	.asciz	"indvars.iv16"
	.size	.L.str422, 13

	.type	.L.str423,@object       # @.str423
	.align	16
.L.str423:
	.asciz	"indvars.iv.next17"
	.size	.L.str423, 18

	.type	.L.str424,@object       # @.str424
.L.str424:
	.asciz	"twidx.04"
	.size	.L.str424, 9

	.type	.L.str425,@object       # @.str425
.L.str425:
	.asciz	"."
	.size	.L.str425, 2

	.type	.L.str426,@object       # @.str426
.L.str426:
	.asciz	"26:3-1"
	.size	.L.str426, 7

	.type	.L.str427,@object       # @.str427
.L.str427:
	.asciz	"26:3-2"
	.size	.L.str427, 7

	.type	.L.str428,@object       # @.str428
.L.str428:
	.asciz	"lftr.wideiv18"
	.size	.L.str428, 14

	.type	.L.str429,@object       # @.str429
.L.str429:
	.asciz	"exitcond19"
	.size	.L.str429, 11

	.type	.L.str430,@object       # @.str430
.L.str430:
	.asciz	"26:3-3"
	.size	.L.str430, 7

	.type	.L.str431,@object       # @.str431
.L.str431:
	.asciz	"exitcond24"
	.size	.L.str431, 11

	.type	.L.str432,@object       # @.str432
.L.str432:
	.asciz	"._crit_edge:2-1"
	.size	.L.str432, 16

	.type	.L.str433,@object       # @.str433
.L.str433:
	.asciz	"lftr.wideiv25"
	.size	.L.str433, 14

	.type	.L.str434,@object       # @.str434
.L.str434:
	.asciz	"exitcond26"
	.size	.L.str434, 11

	.type	.L.str435,@object       # @.str435
	.align	16
.L.str435:
	.asciz	"._crit_edge9:1-0"
	.size	.L.str435, 17

	.type	.L.str436,@object       # @.str436
	.align	16
.L.str436:
	.asciz	"._crit_edge11:0-0"
	.size	.L.str436, 18

	.type	.L.str437,@object       # @.str437
.L.str437:
	.asciz	"free"
	.size	.L.str437, 5

	.type	.L.str438,@object       # @.str438
	.align	16
.L.str438:
	.asciz	"._crit_edge11:0-1"
	.size	.L.str438, 18

	.type	initp,@object           # @initp
	.bss
	.globl	initp
initp:
	.byte	0                       # 0x0
	.size	initp, 1

	.type	inst_count,@object      # @inst_count
	.globl	inst_count
	.align	4
inst_count:
	.long	0                       # 0x0
	.size	inst_count, 4

	.type	.L.str545,@object       # @.str545
	.section	.rodata.str1.1,"aMS",@progbits,1
.L.str545:
	.asciz	"%%%% LABEL MAP START %%%%\n"
	.size	.L.str545, 27

	.type	.L.str1546,@object      # @.str1546
.L.str1546:
	.asciz	"%%%% LABEL MAP END %%%%\n\n"
	.size	.L.str1546, 26

	.type	full_trace_file,@object # @full_trace_file
	.comm	full_trace_file,8,8
	.type	.L.str2547,@object      # @.str2547
.L.str2547:
	.asciz	"dynamic_trace.gz"
	.size	.L.str2547, 17

	.type	.L.str3548,@object      # @.str3548
.L.str3548:
	.asciz	"w"
	.size	.L.str3548, 2

	.type	.L.str4549,@object      # @.str4549
.L.str4549:
	.asciz	"Failed to open logfile \"dynamic_trace\""
	.size	.L.str4549, 39

	.type	current_toplevel_function,@object # @current_toplevel_function
	.comm	current_toplevel_function,8,8
	.type	current_logging_status,@object # @current_logging_status
	.comm	current_logging_status,4,4
	.type	.L.str5550,@object      # @.str5550
.L.str5550:
	.asciz	"false && \"Returning from within a toplevel function before it was called!\""
	.size	.L.str5550, 75

	.type	.L.str6551,@object      # @.str6551
.L.str6551:
	.asciz	"/workspace/LLVM-Tracer/profile-func/trace_logger.c"
	.size	.L.str6551, 51

	.type	.L__PRETTY_FUNCTION__.log_or_not,@object # @__PRETTY_FUNCTION__.log_or_not
.L__PRETTY_FUNCTION__.log_or_not:
	.asciz	"logging_status log_or_not(_Bool, _Bool, int, char *)"
	.size	.L__PRETTY_FUNCTION__.log_or_not, 53

	.type	.L.str7552,@object      # @.str7552
.L.str7552:
	.asciz	"false && \"Cannot call a top level function from within another one!\""
	.size	.L.str7552, 69

	.type	.L.str8553,@object      # @.str8553
.L.str8553:
	.asciz	"0x"
	.size	.L.str8553, 3

	.type	.L.str9554,@object      # @.str9554
.L.str9554:
	.asciz	"%02x"
	.size	.L.str9554, 5

	.type	.L.str10555,@object     # @.str10555
.L.str10555:
	.asciz	"Stopping logging at inst %d.\n"
	.size	.L.str10555, 30

	.type	.L.str11556,@object     # @.str11556
.L.str11556:
	.asciz	"Starting to log at inst = %d.\n"
	.size	.L.str11556, 31

	.type	.L.str12557,@object     # @.str12557
.L.str12557:
	.asciz	"\nentry,%s,%d,\n"
	.size	.L.str12557, 15

	.type	.L.str13558,@object     # @.str13558
.L.str13558:
	.asciz	"\n0,%d,%s,%s,%s,%d,%d\n"
	.size	.L.str13558, 22

	.type	.L.str14559,@object     # @.str14559
.L.str14559:
	.asciz	"initp == true"
	.size	.L.str14559, 14

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_int,@object # @__PRETTY_FUNCTION__.trace_logger_log_int
.L__PRETTY_FUNCTION__.trace_logger_log_int:
	.asciz	"void trace_logger_log_int(int, int, int64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_int, 71

	.type	.L.str15560,@object     # @.str15560
.L.str15560:
	.asciz	"r,%d,%ld,%d"
	.size	.L.str15560, 12

	.type	.L.str16561,@object     # @.str16561
.L.str16561:
	.asciz	"f,%d,%ld,%d"
	.size	.L.str16561, 12

	.type	.L.str17562,@object     # @.str17562
.L.str17562:
	.asciz	"%d,%d,%ld,%d"
	.size	.L.str17562, 13

	.type	.L.str18563,@object     # @.str18563
.L.str18563:
	.asciz	",%s"
	.size	.L.str18563, 4

	.type	.L.str19564,@object     # @.str19564
.L.str19564:
	.asciz	", "
	.size	.L.str19564, 3

	.type	.L.str20565,@object     # @.str20565
.L.str20565:
	.asciz	",%s,\n"
	.size	.L.str20565, 6

	.type	.L.str21566,@object     # @.str21566
.L.str21566:
	.asciz	",\n"
	.size	.L.str21566, 3

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_ptr,@object # @__PRETTY_FUNCTION__.trace_logger_log_ptr
.L__PRETTY_FUNCTION__.trace_logger_log_ptr:
	.asciz	"void trace_logger_log_ptr(int, int, uint64_t, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_ptr, 72

	.type	.L.str22567,@object     # @.str22567
.L.str22567:
	.asciz	"r,%d,%#llx,%d"
	.size	.L.str22567, 14

	.type	.L.str23568,@object     # @.str23568
.L.str23568:
	.asciz	"f,%d,%#llx,%d"
	.size	.L.str23568, 14

	.type	.L.str24569,@object     # @.str24569
.L.str24569:
	.asciz	"%d,%d,%#llx,%d"
	.size	.L.str24569, 15

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_double,@object # @__PRETTY_FUNCTION__.trace_logger_log_double
.L__PRETTY_FUNCTION__.trace_logger_log_double:
	.asciz	"void trace_logger_log_double(int, int, double, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_double, 73

	.type	.L.str25570,@object     # @.str25570
.L.str25570:
	.asciz	"r,%d,%f,%d"
	.size	.L.str25570, 11

	.type	.L.str26571,@object     # @.str26571
.L.str26571:
	.asciz	"f,%d,%f,%d"
	.size	.L.str26571, 11

	.type	.L.str27572,@object     # @.str27572
.L.str27572:
	.asciz	"%d,%d,%f,%d"
	.size	.L.str27572, 12

	.type	.L__PRETTY_FUNCTION__.trace_logger_log_vector,@object # @__PRETTY_FUNCTION__.trace_logger_log_vector
.L__PRETTY_FUNCTION__.trace_logger_log_vector:
	.asciz	"void trace_logger_log_vector(int, int, uint8_t *, int, char *, int, char *)"
	.size	.L__PRETTY_FUNCTION__.trace_logger_log_vector, 76

	.type	.L.str28573,@object     # @.str28573
.L.str28573:
	.asciz	"r,%d,%s,%d"
	.size	.L.str28573, 11

	.type	.L.str29574,@object     # @.str29574
.L.str29574:
	.asciz	"f,%d,%s,%d"
	.size	.L.str29574, 11

	.type	.L.str30575,@object     # @.str30575
.L.str30575:
	.asciz	"%d,%d,%s,%d"
	.size	.L.str30575, 12

	.text
.Ldebug_end0:
	.section	.debug_str,"MS",@progbits,1
.Linfo_string0:
	.asciz	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
.Linfo_string1:
	.asciz	"feature_extraction.c"
.Linfo_string2:
	.asciz	"/workspace/gem5-aladdin/src/aladdin/integration-test/with-cpu/feature_extraction"
.Linfo_string3:
	.asciz	"high_index"
.Linfo_string4:
	.asciz	"int"
.Linfo_string5:
	.asciz	"low_index"
.Linfo_string6:
	.asciz	"n_fft_items"
.Linfo_string7:
	.asciz	"n_sd"
.Linfo_string8:
	.asciz	"test_stores"
.Linfo_string9:
	.asciz	"process_data"
.Linfo_string10:
	.asciz	"main"
.Linfo_string11:
	.asciz	"kiss_fft.c"
.Linfo_string12:
	.asciz	"pi"
.Linfo_string13:
	.asciz	"double"
.Linfo_string14:
	.asciz	"kiss_fft_alloc"
.Linfo_string15:
	.asciz	"nfft"
.Linfo_string16:
	.asciz	"inverse"
.Linfo_string17:
	.asciz	"factors"
.Linfo_string18:
	.asciz	"twiddles"
.Linfo_string19:
	.asciz	"r"
.Linfo_string20:
	.asciz	"float"
.Linfo_string21:
	.asciz	"i"
.Linfo_string22:
	.asciz	"kiss_fft_cpx"
.Linfo_string23:
	.asciz	"kiss_fft_state"
.Linfo_string24:
	.asciz	"kiss_fft_cfg"
.Linfo_string25:
	.asciz	"kiss_fft_stride"
.Linfo_string26:
	.asciz	"kiss_fft"
.Linfo_string27:
	.asciz	"kiss_fft_cleanup"
.Linfo_string28:
	.asciz	"kiss_fft_next_fast_size"
.Linfo_string29:
	.asciz	"kf_work"
.Linfo_string30:
	.asciz	"kf_bfly_generic"
.Linfo_string31:
	.asciz	"kf_bfly5"
.Linfo_string32:
	.asciz	"kf_bfly4"
.Linfo_string33:
	.asciz	"kf_bfly3"
.Linfo_string34:
	.asciz	"kf_bfly2"
.Linfo_string35:
	.asciz	"kf_factor"
.Linfo_string36:
	.asciz	"time_data"
.Linfo_string37:
	.asciz	"freq_data"
.Linfo_string38:
	.asciz	"n_samples"
.Linfo_string39:
	.asciz	"n_channels"
.Linfo_string40:
	.asciz	"j"
.Linfo_string41:
	.asciz	"cfg"
.Linfo_string42:
	.asciz	"out"
.Linfo_string43:
	.asciz	"fft_data"
.Linfo_string44:
	.asciz	"fft_stddev"
.Linfo_string45:
	.asciz	"in"
.Linfo_string46:
	.asciz	"fft_mean"
.Linfo_string47:
	.asciz	"channel"
.Linfo_string48:
	.asciz	"index"
.Linfo_string49:
	.asciz	"temp"
.Linfo_string50:
	.asciz	"num_failures"
.Linfo_string51:
	.asciz	"inverse_fft"
.Linfo_string52:
	.asciz	"mem"
.Linfo_string53:
	.asciz	"lenmem"
.Linfo_string54:
	.asciz	"long unsigned int"
.Linfo_string55:
	.asciz	"size_t"
.Linfo_string56:
	.asciz	"memneeded"
.Linfo_string57:
	.asciz	"st"
.Linfo_string58:
	.asciz	"phase"
.Linfo_string59:
	.asciz	"fin"
.Linfo_string60:
	.asciz	"fout"
.Linfo_string61:
	.asciz	"in_stride"
.Linfo_string62:
	.asciz	"n"
.Linfo_string63:
	.asciz	"m"
.Linfo_string64:
	.asciz	"facbuf"
.Linfo_string65:
	.asciz	"p"
.Linfo_string66:
	.asciz	"floor_sqrt"
.Linfo_string67:
	.asciz	"Fout"
.Linfo_string68:
	.asciz	"f"
.Linfo_string69:
	.asciz	"fstride"
.Linfo_string70:
	.asciz	"Fout_beg"
.Linfo_string71:
	.asciz	"f_beg"
.Linfo_string72:
	.asciz	"Fout_end"
.Linfo_string73:
	.asciz	"Norig"
.Linfo_string74:
	.asciz	"scratch"
.Linfo_string75:
	.asciz	"u"
.Linfo_string76:
	.asciz	"q"
.Linfo_string77:
	.asciz	"q1"
.Linfo_string78:
	.asciz	"k"
.Linfo_string79:
	.asciz	"t"
.Linfo_string80:
	.asciz	"twidx"
.Linfo_string81:
	.asciz	"Fout0"
.Linfo_string82:
	.asciz	"Fout1"
.Linfo_string83:
	.asciz	"Fout2"
.Linfo_string84:
	.asciz	"Fout3"
.Linfo_string85:
	.asciz	"Fout4"
.Linfo_string86:
	.asciz	"ya"
.Linfo_string87:
	.asciz	"yb"
.Linfo_string88:
	.asciz	"m2"
.Linfo_string89:
	.asciz	"m3"
.Linfo_string90:
	.asciz	"tw1"
.Linfo_string91:
	.asciz	"tw2"
.Linfo_string92:
	.asciz	"tw3"
.Linfo_string93:
	.asciz	"epi3"
	.section	.debug_info,"",@progbits
.L.debug_info_begin0:
	.long	1131                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x464 DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string1          # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	2                       # Abbrev [2] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	5                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	2                       # Abbrev [2] 0x3e:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	60                      # DW_AT_decl_line
	.byte	1                       # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x4a:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.byte	47                      # DW_AT_const_value
	.byte	2                       # Abbrev [2] 0x56:0xc DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_decl_file
	.byte	86                      # DW_AT_decl_line
	.byte	46                      # DW_AT_const_value
	.byte	5                       # Abbrev [5] 0x62:0x8f DW_TAG_subprogram
	.long	.Linfo_string8          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin0           # DW_AT_low_pc
	.quad	.Lfunc_end0             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x7f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc0            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x8e:0xf DW_TAG_formal_parameter
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc2            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x9d:0xf DW_TAG_formal_parameter
	.long	.Linfo_string38         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc4            # DW_AT_location
	.byte	6                       # Abbrev [6] 0xac:0xf DW_TAG_formal_parameter
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc6            # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbb:0x35 DW_TAG_lexical_block
	.quad	.Ltmp21                 # DW_AT_low_pc
	.quad	.Ltmp35                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0xcc:0xc DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0xd8:0x17 DW_TAG_lexical_block
	.long	.Ldebug_range+48        # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0xdd:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range           # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0xe2:0xb DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	26                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	11                      # Abbrev [11] 0xf1:0x232 DW_TAG_subprogram
	.long	.Linfo_string9          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin1           # DW_AT_low_pc
	.quad	.Lfunc_end1             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	86
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x10a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc8            # DW_AT_location
	.byte	6                       # Abbrev [6] 0x119:0xf DW_TAG_formal_parameter
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc11           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x128:0xf DW_TAG_formal_parameter
	.long	.Linfo_string38         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc14           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x137:0xf DW_TAG_formal_parameter
	.long	.Linfo_string39         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc17           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x146:0xf DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	36                      # DW_AT_decl_line
	.long	972                     # DW_AT_type
	.long	.Ldebug_loc20           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x155:0xf DW_TAG_variable
	.long	.Linfo_string42         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	43                      # DW_AT_decl_line
	.long	1112                    # DW_AT_type
	.long	.Ldebug_loc23           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x164:0xc DW_TAG_variable
	.long	.Linfo_string5          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	60                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x170:0xc DW_TAG_variable
	.long	.Linfo_string3          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	61                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	8                       # Abbrev [8] 0x17c:0xc DW_TAG_variable
	.long	.Linfo_string6          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	62                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	47                      # DW_AT_const_value
	.byte	12                      # Abbrev [12] 0x188:0xf DW_TAG_variable
	.long	.Linfo_string43         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	64                      # DW_AT_decl_line
	.long	1123                    # DW_AT_type
	.long	.Ldebug_loc25           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x197:0xf DW_TAG_variable
	.long	.Linfo_string44         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	76                      # DW_AT_decl_line
	.long	1123                    # DW_AT_type
	.long	.Ldebug_loc28           # DW_AT_location
	.byte	10                      # Abbrev [10] 0x1a6:0xb DW_TAG_variable
	.long	.Linfo_string45         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	42                      # DW_AT_decl_line
	.long	1112                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1b1:0xb DW_TAG_variable
	.long	.Linfo_string46         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	75                      # DW_AT_decl_line
	.long	1123                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x1bc:0xb DW_TAG_variable
	.long	.Linfo_string7          # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	86                      # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x1c7:0x3b DW_TAG_lexical_block
	.long	.Ldebug_range+240       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x1cc:0xc DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	44                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	9                       # Abbrev [9] 0x1d8:0x29 DW_TAG_lexical_block
	.long	.Ldebug_range+192       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x1dd:0x11 DW_TAG_lexical_block
	.long	.Ldebug_range+96        # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x1e2:0xb DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x1ee:0x12 DW_TAG_lexical_block
	.long	.Ldebug_range+144       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x1f3:0xc DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x202:0x5d DW_TAG_lexical_block
	.long	.Ldebug_range+336       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x207:0xc DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	65                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x213:0x4b DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x224:0x39 DW_TAG_lexical_block
	.quad	.Ltmp75                 # DW_AT_low_pc
	.quad	.Ltmp79                 # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x235:0xb DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	67                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	9                       # Abbrev [9] 0x240:0x1c DW_TAG_lexical_block
	.long	.Ldebug_range+288       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x245:0xb DW_TAG_variable
	.long	.Linfo_string48         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	69                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	10                      # Abbrev [10] 0x250:0xb DW_TAG_variable
	.long	.Linfo_string49         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	70                      # DW_AT_decl_line
	.long	1063                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x25f:0x42 DW_TAG_lexical_block
	.long	.Ldebug_range+384       # DW_AT_ranges
	.byte	8                       # Abbrev [8] 0x264:0xc DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	77                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x270:0x30 DW_TAG_lexical_block
	.quad	.Ltmp88                 # DW_AT_low_pc
	.quad	.Ltmp95                 # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x281:0x1e DW_TAG_lexical_block
	.quad	.Ltmp89                 # DW_AT_low_pc
	.quad	.Ltmp94                 # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x292:0xc DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	80                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x2a1:0x41 DW_TAG_lexical_block
	.long	.Ldebug_range+448       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x2a6:0xb DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	87                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2b1:0x30 DW_TAG_lexical_block
	.quad	.Ltmp99                 # DW_AT_low_pc
	.quad	.Ltmp107                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x2c2:0x1e DW_TAG_lexical_block
	.quad	.Ltmp100                # DW_AT_low_pc
	.quad	.Ltmp106                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x2d3:0xc DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	90                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	9                       # Abbrev [9] 0x2e2:0x40 DW_TAG_lexical_block
	.long	.Ldebug_range+496       # DW_AT_ranges
	.byte	10                      # Abbrev [10] 0x2e7:0xb DW_TAG_variable
	.long	.Linfo_string47         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	7                       # Abbrev [7] 0x2f2:0x2f DW_TAG_lexical_block
	.quad	.Ltmp109                # DW_AT_low_pc
	.quad	.Ltmp115                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x303:0x1d DW_TAG_lexical_block
	.quad	.Ltmp109                # DW_AT_low_pc
	.quad	.Ltmp115                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x314:0xb DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	13                      # Abbrev [13] 0x323:0xa4 DW_TAG_subprogram
	.long	.Linfo_string10         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	132                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin2           # DW_AT_low_pc
	.quad	.Lfunc_end2             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	12                      # Abbrev [12] 0x340:0xf DW_TAG_variable
	.long	.Linfo_string36         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	134                     # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc31           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x34f:0xf DW_TAG_variable
	.long	.Linfo_string37         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	135                     # DW_AT_decl_line
	.long	967                     # DW_AT_type
	.long	.Ldebug_loc33           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x35e:0xf DW_TAG_variable
	.long	.Linfo_string41         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	149                     # DW_AT_decl_line
	.long	972                     # DW_AT_type
	.long	.Ldebug_loc35           # DW_AT_location
	.byte	8                       # Abbrev [8] 0x36d:0xc DW_TAG_variable
	.long	.Linfo_string50         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	167                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x379:0x4d DW_TAG_lexical_block
	.quad	.Ltmp142                # DW_AT_low_pc
	.quad	.Ltmp149                # DW_AT_high_pc
	.byte	8                       # Abbrev [8] 0x38a:0xc DW_TAG_variable
	.long	.Linfo_string40         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	138                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0x396:0x2f DW_TAG_lexical_block
	.quad	.Ltmp144                # DW_AT_low_pc
	.quad	.Ltmp148                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0x3a7:0x1d DW_TAG_lexical_block
	.quad	.Ltmp144                # DW_AT_low_pc
	.quad	.Ltmp148                # DW_AT_high_pc
	.byte	10                      # Abbrev [10] 0x3b8:0xb DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	14                      # Abbrev [14] 0x3c7:0x5 DW_TAG_pointer_type
	.long	55                      # DW_AT_type
	.byte	15                      # Abbrev [15] 0x3cc:0xb DW_TAG_typedef
	.long	983                     # DW_AT_type
	.long	.Linfo_string24         # DW_AT_name
	.byte	1                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.byte	14                      # Abbrev [14] 0x3d7:0x5 DW_TAG_pointer_type
	.long	988                     # DW_AT_type
	.byte	16                      # Abbrev [16] 0x3dc:0x3f DW_TAG_structure_type
	.long	.Linfo_string23         # DW_AT_name
	.short	272                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	17                      # Abbrev [17] 0x3e5:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	17                      # Abbrev [17] 0x3f2:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	55                      # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x3ff:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	.Lsection_info+1513     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x40c:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	1051                    # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	20                      # Abbrev [20] 0x41b:0xc DW_TAG_array_type
	.long	1063                    # DW_AT_type
	.byte	21                      # Abbrev [21] 0x420:0x6 DW_TAG_subrange_type
	.long	1105                    # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x427:0xb DW_TAG_typedef
	.long	1074                    # DW_AT_type
	.long	.Linfo_string22         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	22                      # Abbrev [22] 0x432:0x1f DW_TAG_structure_type
	.byte	8                       # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.byte	18                      # Abbrev [18] 0x436:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	.Lsection_info+1586     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x443:0xd DW_TAG_member
	.long	.Linfo_string21         # DW_AT_name
	.long	.Lsection_info+1586     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	23                      # Abbrev [23] 0x451:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	20                      # Abbrev [20] 0x458:0xb DW_TAG_array_type
	.long	1063                    # DW_AT_type
	.byte	24                      # Abbrev [24] 0x45d:0x5 DW_TAG_subrange_type
	.long	1105                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	20                      # Abbrev [20] 0x463:0xb DW_TAG_array_type
	.long	55                      # DW_AT_type
	.byte	24                      # Abbrev [24] 0x468:0x5 DW_TAG_subrange_type
	.long	1105                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
.L.debug_info_end0:
.L.debug_info_begin1:
	.long	2049                    # Length of Unit
	.short	4                       # DWARF version number
	.long	.L.debug_abbrev_begin   # Offset Into Abbrev. Section
	.byte	8                       # Address Size (in bytes)
	.byte	1                       # Abbrev [1] 0xb:0x7fa DW_TAG_compile_unit
	.long	.Linfo_string0          # DW_AT_producer
	.short	12                      # DW_AT_language
	.long	.Linfo_string11         # DW_AT_name
	.quad	0                       # DW_AT_low_pc
	.long	.Lsection_line          # DW_AT_stmt_list
	.long	.Linfo_string2          # DW_AT_comp_dir
                                        # DW_AT_APPLE_optimized
	.byte	25                      # Abbrev [25] 0x26:0xc DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.long	50                      # DW_AT_type
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.byte	3                       # Abbrev [3] 0x32:0x5 DW_TAG_const_type
	.long	55                      # DW_AT_type
	.byte	4                       # Abbrev [4] 0x37:0x7 DW_TAG_base_type
	.long	.Linfo_string13         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	26                      # Abbrev [26] 0x3e:0xed DW_TAG_subprogram
	.long	.Linfo_string14         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	299                     # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin3           # DW_AT_low_pc
	.quad	.Lfunc_end3             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	27                      # Abbrev [27] 0x5c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string15         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc37           # DW_AT_location
	.byte	27                      # Abbrev [27] 0x6c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string51         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc39           # DW_AT_location
	.byte	28                      # Abbrev [28] 0x7c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string52         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1957                    # DW_AT_type
	.long	.Ldebug_loc41           # DW_AT_location
	.byte	28                      # Abbrev [28] 0x8c:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string53         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	347                     # DW_AT_decl_line
	.long	1958                    # DW_AT_type
	.long	.Ldebug_loc43           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x9c:0x10 DW_TAG_variable
	.long	.Linfo_string56         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	350                     # DW_AT_decl_line
	.long	1963                    # DW_AT_type
	.long	.Ldebug_loc45           # DW_AT_location
	.byte	29                      # Abbrev [29] 0xac:0x10 DW_TAG_variable
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	349                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.long	.Ldebug_loc47           # DW_AT_location
	.byte	7                       # Abbrev [7] 0xbc:0x6e DW_TAG_lexical_block
	.quad	.Ltmp186                # DW_AT_low_pc
	.quad	.Ltmp200                # DW_AT_high_pc
	.byte	7                       # Abbrev [7] 0xcd:0x5c DW_TAG_lexical_block
	.quad	.Ltmp187                # DW_AT_low_pc
	.quad	.Ltmp200                # DW_AT_high_pc
	.byte	30                      # Abbrev [30] 0xde:0xd DW_TAG_variable
	.long	.Linfo_string21         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	361                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	7                       # Abbrev [7] 0xeb:0x3d DW_TAG_lexical_block
	.quad	.Ltmp188                # DW_AT_low_pc
	.quad	.Ltmp199                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0xfc:0x2b DW_TAG_lexical_block
	.long	.Ldebug_range+544       # DW_AT_ranges
	.byte	31                      # Abbrev [31] 0x101:0x15 DW_TAG_variable
	.long	.Linfo_string12         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	366                     # DW_AT_decl_line
	.long	50                      # DW_AT_type
	.byte	8                       # DW_AT_const_value
	.byte	24
	.byte	45
	.byte	68
	.byte	84
	.byte	251
	.byte	33
	.byte	9
	.byte	64
	.byte	29                      # Abbrev [29] 0x116:0x10 DW_TAG_variable
	.long	.Linfo_string58         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	367                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc50           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x12b:0xb DW_TAG_typedef
	.long	310                     # DW_AT_type
	.long	.Linfo_string24         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	56                      # DW_AT_decl_line
	.byte	14                      # Abbrev [14] 0x136:0x5 DW_TAG_pointer_type
	.long	315                     # DW_AT_type
	.byte	16                      # Abbrev [16] 0x13b:0x3f DW_TAG_structure_type
	.long	.Linfo_string23         # DW_AT_name
	.short	272                     # DW_AT_byte_size
	.byte	3                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.byte	18                      # Abbrev [18] 0x144:0xd DW_TAG_member
	.long	.Linfo_string15         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	18                      # Abbrev [18] 0x151:0xd DW_TAG_member
	.long	.Linfo_string16         # DW_AT_name
	.long	.Lsection_info+55       # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	17                      # Abbrev [17] 0x15e:0xd DW_TAG_member
	.long	.Linfo_string17         # DW_AT_name
	.long	378                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	31                      # DW_AT_decl_line
	.byte	8                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	19                      # Abbrev [19] 0x16b:0xe DW_TAG_member
	.long	.Linfo_string18         # DW_AT_name
	.long	397                     # DW_AT_type
	.byte	3                       # DW_AT_decl_file
	.byte	32                      # DW_AT_decl_line
	.short	264                     # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	32                      # Abbrev [32] 0x17a:0xc DW_TAG_array_type
	.long	.Lsection_info+55       # DW_AT_type
	.byte	21                      # Abbrev [21] 0x17f:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	63                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	23                      # Abbrev [23] 0x186:0x7 DW_TAG_base_type
	.long	.Linfo_string4          # DW_AT_name
	.byte	4                       # DW_AT_byte_size
	.byte	5                       # DW_AT_encoding
	.byte	20                      # Abbrev [20] 0x18d:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0x192:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	0                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	15                      # Abbrev [15] 0x199:0xb DW_TAG_typedef
	.long	420                     # DW_AT_type
	.long	.Linfo_string22         # DW_AT_name
	.byte	3                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.byte	22                      # Abbrev [22] 0x1a4:0x1f DW_TAG_structure_type
	.byte	8                       # DW_AT_byte_size
	.byte	4                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.byte	17                      # Abbrev [17] 0x1a8:0xd DW_TAG_member
	.long	.Linfo_string19         # DW_AT_name
	.long	451                     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.byte	0                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	17                      # Abbrev [17] 0x1b5:0xd DW_TAG_member
	.long	.Linfo_string21         # DW_AT_name
	.long	451                     # DW_AT_type
	.byte	4                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.byte	4                       # DW_AT_data_member_location
	.byte	1                       # DW_AT_accessibility
                                        # DW_ACCESS_public
	.byte	0                       # End Of Children Mark
	.byte	4                       # Abbrev [4] 0x1c3:0x7 DW_TAG_base_type
	.long	.Linfo_string20         # DW_AT_name
	.byte	4                       # DW_AT_encoding
	.byte	4                       # DW_AT_byte_size
	.byte	33                      # Abbrev [33] 0x1ca:0x5b DW_TAG_subprogram
	.long	.Linfo_string25         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin4           # DW_AT_low_pc
	.quad	.Lfunc_end4             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	34                      # Abbrev [34] 0x1e4:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\220\001"
	.byte	34                      # Abbrev [34] 0x1f4:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string59         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1981                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\360\002"
	.byte	34                      # Abbrev [34] 0x204:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string60         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\350\002"
	.byte	27                      # Abbrev [27] 0x214:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string61         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	379                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc53           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	33                      # Abbrev [33] 0x225:0x4b DW_TAG_subprogram
	.long	.Linfo_string26         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin5           # DW_AT_low_pc
	.quad	.Lfunc_end5             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	34                      # Abbrev [34] 0x23f:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string41         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	299                     # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\210\001"
	.byte	34                      # Abbrev [34] 0x24f:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string59         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1981                    # DW_AT_type
	.byte	3                       # DW_AT_location
	.byte	145
	.ascii	"\240\001"
	.byte	28                      # Abbrev [28] 0x25f:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string60         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	394                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc55           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	35                      # Abbrev [35] 0x270:0x1a DW_TAG_subprogram
	.long	.Linfo_string27         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	400                     # DW_AT_decl_line
                                        # DW_AT_prototyped
                                        # DW_AT_external
	.quad	.Lfunc_begin6           # DW_AT_low_pc
	.quad	.Lfunc_end6             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	36                      # Abbrev [36] 0x28a:0x51 DW_TAG_subprogram
	.long	.Linfo_string28         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.long	.Lsection_info+55       # DW_AT_type
                                        # DW_AT_external
	.quad	.Lfunc_begin7           # DW_AT_low_pc
	.quad	.Lfunc_end7             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	27                      # Abbrev [27] 0x2a8:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string62         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	405                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc57           # DW_AT_location
	.byte	7                       # Abbrev [7] 0x2b8:0x22 DW_TAG_lexical_block
	.quad	.Ltmp280                # DW_AT_low_pc
	.quad	.Ltmp292                # DW_AT_high_pc
	.byte	37                      # Abbrev [37] 0x2c9:0x10 DW_TAG_variable
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	408                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc60           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x2db:0xc1 DW_TAG_subprogram
	.long	.Linfo_string29         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	244                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin9           # DW_AT_low_pc
	.quad	.Lfunc_end9             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x2f4:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	245                     # DW_AT_decl_line
	.long	1996                    # DW_AT_type
	.long	.Ldebug_loc81           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x303:0xf DW_TAG_formal_parameter
	.long	.Linfo_string68         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	246                     # DW_AT_decl_line
	.long	2001                    # DW_AT_type
	.long	.Ldebug_loc83           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x312:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	247                     # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc85           # DW_AT_location
	.byte	39                      # Abbrev [39] 0x321:0xf DW_TAG_formal_parameter
	.long	.Linfo_string61         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	248                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc87           # DW_AT_location
	.byte	39                      # Abbrev [39] 0x330:0xf DW_TAG_formal_parameter
	.long	.Linfo_string17         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	249                     # DW_AT_decl_line
	.long	.Lsection_info+967      # DW_AT_type
	.long	.Ldebug_loc89           # DW_AT_location
	.byte	6                       # Abbrev [6] 0x33f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	250                     # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc93           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x34e:0xf DW_TAG_variable
	.long	.Linfo_string70         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	253                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc95           # DW_AT_location
	.byte	12                      # Abbrev [12] 0x35d:0xf DW_TAG_variable
	.long	.Linfo_string71         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	254                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc97           # DW_AT_location
	.byte	40                      # Abbrev [40] 0x36c:0xf DW_TAG_variable
	.long	.Linfo_string65         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	255                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc99           # DW_AT_location
	.byte	37                      # Abbrev [37] 0x37b:0x10 DW_TAG_variable
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	256                     # DW_AT_decl_line
	.long	.Lsection_info+50       # DW_AT_type
	.long	.Ldebug_loc101          # DW_AT_location
	.byte	29                      # Abbrev [29] 0x38b:0x10 DW_TAG_variable
	.long	.Linfo_string72         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	257                     # DW_AT_decl_line
	.long	1981                    # DW_AT_type
	.long	.Ldebug_loc103          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x39c:0xfe DW_TAG_subprogram
	.long	.Linfo_string30         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	204                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin10          # DW_AT_low_pc
	.quad	.Lfunc_end10            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x3b5:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	205                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc105          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3c4:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	206                     # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc107          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x3d3:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	207                     # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc109          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x3e2:0xf DW_TAG_formal_parameter
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	208                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc111          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x3f1:0xf DW_TAG_formal_parameter
	.long	.Linfo_string65         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	209                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc113          # DW_AT_location
	.byte	40                      # Abbrev [40] 0x400:0xf DW_TAG_variable
	.long	.Linfo_string73         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	215                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc115          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x40f:0xf DW_TAG_variable
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	217                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc117          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x41e:0xc DW_TAG_variable
	.long	.Linfo_string75         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	41                      # Abbrev [41] 0x42a:0xc DW_TAG_variable
	.long	.Linfo_string76         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	1                       # DW_AT_const_value
	.byte	40                      # Abbrev [40] 0x436:0xf DW_TAG_variable
	.long	.Linfo_string77         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc122          # DW_AT_location
	.byte	42                      # Abbrev [42] 0x445:0xb DW_TAG_variable
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	212                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	10                      # Abbrev [10] 0x450:0xb DW_TAG_variable
	.long	.Linfo_string18         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	213                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x45b:0xb DW_TAG_variable
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	214                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	7                       # Abbrev [7] 0x466:0x33 DW_TAG_lexical_block
	.quad	.Ltmp399                # DW_AT_low_pc
	.quad	.Ltmp427                # DW_AT_high_pc
	.byte	9                       # Abbrev [9] 0x477:0x21 DW_TAG_lexical_block
	.long	.Ldebug_range+704       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x47c:0x1b DW_TAG_lexical_block
	.long	.Ldebug_range+656       # DW_AT_ranges
	.byte	9                       # Abbrev [9] 0x481:0x15 DW_TAG_lexical_block
	.long	.Ldebug_range+592       # DW_AT_ranges
	.byte	40                      # Abbrev [40] 0x486:0xf DW_TAG_variable
	.long	.Linfo_string80         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	229                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc119          # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x49a:0xce DW_TAG_subprogram
	.long	.Linfo_string31         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	136                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin11          # DW_AT_low_pc
	.quad	.Lfunc_end11            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x4b3:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	137                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc124          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4c2:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	138                     # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc126          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x4d1:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	139                     # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc128          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x4e0:0xf DW_TAG_formal_parameter
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	140                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc130          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4ef:0xf DW_TAG_variable
	.long	.Linfo_string81         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc132          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x4fe:0xf DW_TAG_variable
	.long	.Linfo_string82         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc135          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x50d:0xf DW_TAG_variable
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc138          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x51c:0xf DW_TAG_variable
	.long	.Linfo_string84         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc141          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x52b:0xf DW_TAG_variable
	.long	.Linfo_string85         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	143                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc144          # DW_AT_location
	.byte	41                      # Abbrev [41] 0x53a:0xc DW_TAG_variable
	.long	.Linfo_string75         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	144                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.byte	0                       # DW_AT_const_value
	.byte	10                      # Abbrev [10] 0x546:0xb DW_TAG_variable
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	145                     # DW_AT_decl_line
	.long	2016                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x551:0xb DW_TAG_variable
	.long	.Linfo_string86         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	10                      # Abbrev [10] 0x55c:0xb DW_TAG_variable
	.long	.Linfo_string87         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	148                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x568:0xbb DW_TAG_subprogram
	.long	.Linfo_string32         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	44                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin12          # DW_AT_low_pc
	.quad	.Lfunc_end12            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x581:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	45                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc147          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x590:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	46                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc150          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x59f:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	47                      # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc152          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x5ae:0xf DW_TAG_formal_parameter
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	48                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc154          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5bd:0xf DW_TAG_variable
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	53                      # DW_AT_decl_line
	.long	1963                    # DW_AT_type
	.long	.Ldebug_loc156          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5cc:0xf DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	54                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc159          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5db:0xf DW_TAG_variable
	.long	.Linfo_string89         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	55                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc161          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5ea:0xf DW_TAG_variable
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc163          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x5f9:0xf DW_TAG_variable
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc166          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x608:0xf DW_TAG_variable
	.long	.Linfo_string92         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	51                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc169          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x617:0xb DW_TAG_variable
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	52                      # DW_AT_decl_line
	.long	2028                    # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x623:0xa8 DW_TAG_subprogram
	.long	.Linfo_string33         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	92                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin13          # DW_AT_low_pc
	.quad	.Lfunc_end13            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x63c:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	93                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc172          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x64b:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	94                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc175          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x65a:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	95                      # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc177          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x669:0xf DW_TAG_formal_parameter
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	96                      # DW_AT_decl_line
	.long	1963                    # DW_AT_type
	.long	.Ldebug_loc179          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x678:0xf DW_TAG_variable
	.long	.Linfo_string78         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	99                      # DW_AT_decl_line
	.long	1963                    # DW_AT_type
	.long	.Ldebug_loc181          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x687:0xf DW_TAG_variable
	.long	.Linfo_string88         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	100                     # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc184          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x696:0xf DW_TAG_variable
	.long	.Linfo_string91         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc186          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x6a5:0xf DW_TAG_variable
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	101                     # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc189          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x6b4:0xb DW_TAG_variable
	.long	.Linfo_string74         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	102                     # DW_AT_decl_line
	.long	2040                    # DW_AT_type
	.byte	10                      # Abbrev [10] 0x6bf:0xb DW_TAG_variable
	.long	.Linfo_string93         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	103                     # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	38                      # Abbrev [38] 0x6cb:0x7f DW_TAG_subprogram
	.long	.Linfo_string34         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	21                      # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin14          # DW_AT_low_pc
	.quad	.Lfunc_end14            # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	6                       # Abbrev [6] 0x6e4:0xf DW_TAG_formal_parameter
	.long	.Linfo_string67         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	22                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc192          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x6f3:0xf DW_TAG_formal_parameter
	.long	.Linfo_string69         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	23                      # DW_AT_decl_line
	.long	2006                    # DW_AT_type
	.long	.Ldebug_loc195          # DW_AT_location
	.byte	6                       # Abbrev [6] 0x702:0xf DW_TAG_formal_parameter
	.long	.Linfo_string57         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	24                      # DW_AT_decl_line
	.long	2011                    # DW_AT_type
	.long	.Ldebug_loc197          # DW_AT_location
	.byte	39                      # Abbrev [39] 0x711:0xf DW_TAG_formal_parameter
	.long	.Linfo_string63         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	25                      # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc199          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x720:0xf DW_TAG_variable
	.long	.Linfo_string90         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	29                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc202          # DW_AT_location
	.byte	12                      # Abbrev [12] 0x72f:0xf DW_TAG_variable
	.long	.Linfo_string83         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	28                      # DW_AT_decl_line
	.long	1991                    # DW_AT_type
	.long	.Ldebug_loc205          # DW_AT_location
	.byte	10                      # Abbrev [10] 0x73e:0xb DW_TAG_variable
	.long	.Linfo_string79         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	30                      # DW_AT_decl_line
	.long	409                     # DW_AT_type
	.byte	0                       # End Of Children Mark
	.byte	43                      # Abbrev [43] 0x74a:0x5b DW_TAG_subprogram
	.long	.Linfo_string35         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
                                        # DW_AT_prototyped
	.quad	.Lfunc_begin8           # DW_AT_low_pc
	.quad	.Lfunc_end8             # DW_AT_high_pc
	.byte	1                       # DW_AT_frame_base
	.byte	87
                                        # DW_AT_APPLE_omit_frame_ptr
	.byte	27                      # Abbrev [27] 0x764:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string62         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc70           # DW_AT_location
	.byte	27                      # Abbrev [27] 0x774:0x10 DW_TAG_formal_parameter
	.long	.Linfo_string64         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	317                     # DW_AT_decl_line
	.long	.Lsection_info+967      # DW_AT_type
	.long	.Ldebug_loc65           # DW_AT_location
	.byte	37                      # Abbrev [37] 0x784:0x10 DW_TAG_variable
	.long	.Linfo_string65         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	319                     # DW_AT_decl_line
	.long	.Lsection_info+55       # DW_AT_type
	.long	.Ldebug_loc74           # DW_AT_location
	.byte	29                      # Abbrev [29] 0x794:0x10 DW_TAG_variable
	.long	.Linfo_string66         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.short	320                     # DW_AT_decl_line
	.long	55                      # DW_AT_type
	.long	.Ldebug_loc79           # DW_AT_location
	.byte	0                       # End Of Children Mark
	.byte	44                      # Abbrev [44] 0x7a5:0x1 DW_TAG_pointer_type
	.byte	14                      # Abbrev [14] 0x7a6:0x5 DW_TAG_pointer_type
	.long	1963                    # DW_AT_type
	.byte	15                      # Abbrev [15] 0x7ab:0xb DW_TAG_typedef
	.long	1974                    # DW_AT_type
	.long	.Linfo_string55         # DW_AT_name
	.byte	2                       # DW_AT_decl_file
	.byte	42                      # DW_AT_decl_line
	.byte	4                       # Abbrev [4] 0x7b6:0x7 DW_TAG_base_type
	.long	.Linfo_string54         # DW_AT_name
	.byte	7                       # DW_AT_encoding
	.byte	8                       # DW_AT_byte_size
	.byte	14                      # Abbrev [14] 0x7bd:0x5 DW_TAG_pointer_type
	.long	1986                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7c2:0x5 DW_TAG_const_type
	.long	409                     # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7c7:0x5 DW_TAG_pointer_type
	.long	409                     # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7cc:0x5 DW_TAG_pointer_type
	.long	1991                    # DW_AT_type
	.byte	14                      # Abbrev [14] 0x7d1:0x5 DW_TAG_pointer_type
	.long	1981                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7d6:0x5 DW_TAG_const_type
	.long	1963                    # DW_AT_type
	.byte	3                       # Abbrev [3] 0x7db:0x5 DW_TAG_const_type
	.long	299                     # DW_AT_type
	.byte	20                      # Abbrev [20] 0x7e0:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0x7e5:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	12                      # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	20                      # Abbrev [20] 0x7ec:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0x7f1:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	5                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	20                      # Abbrev [20] 0x7f8:0xc DW_TAG_array_type
	.long	409                     # DW_AT_type
	.byte	21                      # Abbrev [21] 0x7fd:0x6 DW_TAG_subrange_type
	.long	390                     # DW_AT_type
	.byte	4                       # DW_AT_upper_bound
	.byte	0                       # End Of Children Mark
	.byte	0                       # End Of Children Mark
.L.debug_info_end1:
	.section	.debug_abbrev,"",@progbits
.L.debug_abbrev_begin:
	.byte	1                       # Abbreviation Code
	.byte	17                      # DW_TAG_compile_unit
	.byte	1                       # DW_CHILDREN_yes
	.byte	37                      # DW_AT_producer
	.byte	14                      # DW_FORM_strp
	.byte	19                      # DW_AT_language
	.byte	5                       # DW_FORM_data2
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	16                      # DW_AT_stmt_list
	.byte	23                      # DW_FORM_sec_offset
	.byte	27                      # DW_AT_comp_dir
	.byte	14                      # DW_FORM_strp
	.ascii	"\341\177"              # DW_AT_APPLE_optimized
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	2                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	3                       # Abbreviation Code
	.byte	38                      # DW_TAG_const_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	4                       # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	5                       # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	6                       # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	7                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	8                       # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	9                       # Abbreviation Code
	.byte	11                      # DW_TAG_lexical_block
	.byte	1                       # DW_CHILDREN_yes
	.byte	85                      # DW_AT_ranges
	.byte	6                       # DW_FORM_data4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	10                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	11                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	12                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	13                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	14                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	15                      # Abbreviation Code
	.byte	22                      # DW_TAG_typedef
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	16                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	5                       # DW_FORM_data2
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	17                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	18                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	11                      # DW_FORM_data1
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	19                      # Abbreviation Code
	.byte	13                      # DW_TAG_member
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	56                      # DW_AT_data_member_location
	.byte	5                       # DW_FORM_data2
	.byte	50                      # DW_AT_accessibility
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	20                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	21                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	47                      # DW_AT_upper_bound
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	22                      # Abbreviation Code
	.byte	19                      # DW_TAG_structure_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	23                      # Abbreviation Code
	.byte	36                      # DW_TAG_base_type
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	11                      # DW_AT_byte_size
	.byte	11                      # DW_FORM_data1
	.byte	62                      # DW_AT_encoding
	.byte	11                      # DW_FORM_data1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	24                      # Abbreviation Code
	.byte	33                      # DW_TAG_subrange_type
	.byte	0                       # DW_CHILDREN_no
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	25                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	26                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	27                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	28                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	29                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	30                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	31                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	28                      # DW_AT_const_value
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	32                      # Abbreviation Code
	.byte	1                       # DW_TAG_array_type
	.byte	1                       # DW_CHILDREN_yes
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	33                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	34                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	19                      # DW_FORM_ref4
	.byte	2                       # DW_AT_location
	.byte	10                      # DW_FORM_block1
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	35                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	36                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	63                      # DW_AT_external
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	37                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	38                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	39                      # Abbreviation Code
	.byte	5                       # DW_TAG_formal_parameter
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	40                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	2                       # DW_AT_location
	.byte	23                      # DW_FORM_sec_offset
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	41                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	28                      # DW_AT_const_value
	.byte	13                      # DW_FORM_sdata
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	42                      # Abbreviation Code
	.byte	52                      # DW_TAG_variable
	.byte	0                       # DW_CHILDREN_no
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	11                      # DW_FORM_data1
	.byte	73                      # DW_AT_type
	.byte	16                      # DW_FORM_ref_addr
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	43                      # Abbreviation Code
	.byte	46                      # DW_TAG_subprogram
	.byte	1                       # DW_CHILDREN_yes
	.byte	3                       # DW_AT_name
	.byte	14                      # DW_FORM_strp
	.byte	58                      # DW_AT_decl_file
	.byte	11                      # DW_FORM_data1
	.byte	59                      # DW_AT_decl_line
	.byte	5                       # DW_FORM_data2
	.byte	39                      # DW_AT_prototyped
	.byte	25                      # DW_FORM_flag_present
	.byte	17                      # DW_AT_low_pc
	.byte	1                       # DW_FORM_addr
	.byte	18                      # DW_AT_high_pc
	.byte	1                       # DW_FORM_addr
	.byte	64                      # DW_AT_frame_base
	.byte	10                      # DW_FORM_block1
	.ascii	"\347\177"              # DW_AT_APPLE_omit_frame_ptr
	.byte	25                      # DW_FORM_flag_present
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	44                      # Abbreviation Code
	.byte	15                      # DW_TAG_pointer_type
	.byte	0                       # DW_CHILDREN_no
	.byte	0                       # EOM(1)
	.byte	0                       # EOM(2)
	.byte	0                       # EOM(3)
.L.debug_abbrev_end:
	.section	.debug_loc,"",@progbits
.Ldebug_loc0:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset0 = .Ltmp653-.Ltmp652              # Loc expr size
	.short	.Lset0
.Ltmp652:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\016"
.Ltmp653:
	.quad	0
	.quad	0
.Ldebug_loc2:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset1 = .Ltmp655-.Ltmp654              # Loc expr size
	.short	.Lset1
.Ltmp654:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\016"
.Ltmp655:
	.quad	0
	.quad	0
.Ldebug_loc4:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset2 = .Ltmp657-.Ltmp656              # Loc expr size
	.short	.Lset2
.Ltmp656:
	.byte	119                     # DW_OP_breg7
	.ascii	"\214\016"
.Ltmp657:
	.quad	0
	.quad	0
.Ldebug_loc6:
	.quad	.Lfunc_begin0
	.quad	.Ltmp22
.Lset3 = .Ltmp659-.Ltmp658              # Loc expr size
	.short	.Lset3
.Ltmp658:
	.byte	119                     # DW_OP_breg7
	.ascii	"\374\016"
.Ltmp659:
	.quad	0
	.quad	0
.Ldebug_loc8:
	.quad	.Lfunc_begin1
	.quad	.Ltmp53
.Lset4 = .Ltmp661-.Ltmp660              # Loc expr size
	.short	.Lset4
.Ltmp660:
	.byte	85                      # DW_OP_reg5
.Ltmp661:
	.quad	.Ltmp53
	.quad	.Ltmp56
.Lset5 = .Ltmp663-.Ltmp662              # Loc expr size
	.short	.Lset5
.Ltmp662:
	.byte	118                     # DW_OP_breg6
	.ascii	"\320~"
.Ltmp663:
	.quad	0
	.quad	0
.Ldebug_loc11:
	.quad	.Lfunc_begin1
	.quad	.Ltmp52
.Lset6 = .Ltmp665-.Ltmp664              # Loc expr size
	.short	.Lset6
.Ltmp664:
	.byte	84                      # DW_OP_reg4
.Ltmp665:
	.quad	.Ltmp52
	.quad	.Ltmp56
.Lset7 = .Ltmp667-.Ltmp666              # Loc expr size
	.short	.Lset7
.Ltmp666:
	.byte	118                     # DW_OP_breg6
	.ascii	"\350~"
.Ltmp667:
	.quad	0
	.quad	0
.Ldebug_loc14:
	.quad	.Lfunc_begin1
	.quad	.Ltmp51
.Lset8 = .Ltmp669-.Ltmp668              # Loc expr size
	.short	.Lset8
.Ltmp668:
	.byte	81                      # DW_OP_reg1
.Ltmp669:
	.quad	.Ltmp51
	.quad	.Ltmp56
.Lset9 = .Ltmp671-.Ltmp670              # Loc expr size
	.short	.Lset9
.Ltmp670:
	.byte	118                     # DW_OP_breg6
	.ascii	"\360~"
.Ltmp671:
	.quad	0
	.quad	0
.Ldebug_loc17:
	.quad	.Lfunc_begin1
	.quad	.Ltmp49
.Lset10 = .Ltmp673-.Ltmp672             # Loc expr size
	.short	.Lset10
.Ltmp672:
	.byte	82                      # DW_OP_reg2
.Ltmp673:
	.quad	.Ltmp49
	.quad	.Ltmp56
.Lset11 = .Ltmp675-.Ltmp674             # Loc expr size
	.short	.Lset11
.Ltmp674:
	.byte	118                     # DW_OP_breg6
	.ascii	"\274\177"
.Ltmp675:
	.quad	0
	.quad	0
.Ldebug_loc20:
	.quad	.Lfunc_begin1
	.quad	.Ltmp54
.Lset12 = .Ltmp677-.Ltmp676             # Loc expr size
	.short	.Lset12
.Ltmp676:
	.byte	88                      # DW_OP_reg8
.Ltmp677:
	.quad	.Ltmp54
	.quad	.Ltmp56
.Lset13 = .Ltmp679-.Ltmp678             # Loc expr size
	.short	.Lset13
.Ltmp678:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250~"
.Ltmp679:
	.quad	0
	.quad	0
.Ldebug_loc23:
	.quad	.Ltmp55
	.quad	.Ltmp56
.Lset14 = .Ltmp681-.Ltmp680             # Loc expr size
	.short	.Lset14
.Ltmp680:
	.byte	118                     # DW_OP_breg6
	.ascii	"\340|"
	.byte	6
.Ltmp681:
	.quad	0
	.quad	0
.Ldebug_loc25:
	.quad	.Ltmp72
	.quad	.Ltmp58
.Lset15 = .Ltmp683-.Ltmp682             # Loc expr size
	.short	.Lset15
.Ltmp682:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250h"
	.byte	6
.Ltmp683:
	.quad	.Ltmp73
	.quad	.Ltmp74
.Lset16 = .Ltmp685-.Ltmp684             # Loc expr size
	.short	.Lset16
.Ltmp684:
	.byte	118                     # DW_OP_breg6
	.ascii	"\250h"
	.byte	6
.Ltmp685:
	.quad	0
	.quad	0
.Ldebug_loc28:
	.quad	.Ltmp86
	.quad	.Ltmp82
.Lset17 = .Ltmp687-.Ltmp686             # Loc expr size
	.short	.Lset17
.Ltmp686:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200X"
	.byte	6
.Ltmp687:
	.quad	.Ltmp86
	.quad	.Ltmp84
.Lset18 = .Ltmp689-.Ltmp688             # Loc expr size
	.short	.Lset18
.Ltmp688:
	.byte	118                     # DW_OP_breg6
	.ascii	"\200X"
	.byte	6
.Ltmp689:
	.quad	0
	.quad	0
.Ldebug_loc31:
	.quad	.Ltmp140
	.quad	.Ltmp141
.Lset19 = .Ltmp691-.Ltmp690             # Loc expr size
	.short	.Lset19
.Ltmp690:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\r"
.Ltmp691:
	.quad	0
	.quad	0
.Ldebug_loc33:
	.quad	.Ltmp142
	.quad	.Ltmp143
.Lset20 = .Ltmp693-.Ltmp692             # Loc expr size
	.short	.Lset20
.Ltmp692:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\f"
.Ltmp693:
	.quad	0
	.quad	0
.Ldebug_loc35:
	.quad	.Ltmp150
	.quad	.Ltmp151
.Lset21 = .Ltmp695-.Ltmp694             # Loc expr size
	.short	.Lset21
.Ltmp694:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\005"
.Ltmp695:
	.quad	0
	.quad	0
.Ldebug_loc37:
	.quad	.Lfunc_begin3
	.quad	.Ltmp178
.Lset22 = .Ltmp697-.Ltmp696             # Loc expr size
	.short	.Lset22
.Ltmp696:
	.byte	119                     # DW_OP_breg7
	.ascii	"\304\027"
.Ltmp697:
	.quad	0
	.quad	0
.Ldebug_loc39:
	.quad	.Lfunc_begin3
	.quad	.Ltmp178
.Lset23 = .Ltmp699-.Ltmp698             # Loc expr size
	.short	.Lset23
.Ltmp698:
	.byte	119                     # DW_OP_breg7
	.ascii	"\374\030"
.Ltmp699:
	.quad	0
	.quad	0
.Ldebug_loc41:
	.quad	.Lfunc_begin3
	.quad	.Ltmp178
.Lset24 = .Ltmp701-.Ltmp700             # Loc expr size
	.short	.Lset24
.Ltmp700:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\027"
.Ltmp701:
	.quad	0
	.quad	0
.Ldebug_loc43:
	.quad	.Lfunc_begin3
	.quad	.Ltmp178
.Lset25 = .Ltmp703-.Ltmp702             # Loc expr size
	.short	.Lset25
.Ltmp702:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\027"
.Ltmp703:
	.quad	0
	.quad	0
.Ldebug_loc45:
	.quad	.Ltmp177
	.quad	.Ltmp178
.Lset26 = .Ltmp705-.Ltmp704             # Loc expr size
	.short	.Lset26
.Ltmp704:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\026"
.Ltmp705:
	.quad	0
	.quad	0
.Ldebug_loc47:
	.quad	.Ltmp180
	.quad	.Ltmp181
.Lset27 = .Ltmp707-.Ltmp706             # Loc expr size
	.short	.Lset27
.Ltmp706:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\024"
.Ltmp707:
	.quad	.Ltmp183
	.quad	.Ltmp184
.Lset28 = .Ltmp709-.Ltmp708             # Loc expr size
	.short	.Lset28
.Ltmp708:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\020"
.Ltmp709:
	.quad	0
	.quad	0
.Ldebug_loc50:
	.quad	.Ltmp193
	.quad	.Ltmp194
.Lset29 = .Ltmp711-.Ltmp710             # Loc expr size
	.short	.Lset29
.Ltmp710:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\007"
.Ltmp711:
	.quad	.Ltmp195
	.quad	.Ltmp196
.Lset30 = .Ltmp713-.Ltmp712             # Loc expr size
	.short	.Lset30
.Ltmp712:
	.byte	119                     # DW_OP_breg7
	.ascii	"\210\006"
.Ltmp713:
	.quad	0
	.quad	0
.Ldebug_loc53:
	.quad	.Lfunc_begin4
	.quad	.Ltmp226
.Lset31 = .Ltmp715-.Ltmp714             # Loc expr size
	.short	.Lset31
.Ltmp714:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\001"
.Ltmp715:
	.quad	0
	.quad	0
.Ldebug_loc55:
	.quad	.Lfunc_begin5
	.quad	.Ltmp250
.Lset32 = .Ltmp717-.Ltmp716             # Loc expr size
	.short	.Lset32
.Ltmp716:
	.byte	119                     # DW_OP_breg7
	.asciz	"\360"
.Ltmp717:
	.quad	0
	.quad	0
.Ldebug_loc57:
	.quad	.Lfunc_begin7
	.quad	.Ltmp279
.Lset33 = .Ltmp719-.Ltmp718             # Loc expr size
	.short	.Lset33
.Ltmp718:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\016"
.Ltmp719:
	.quad	.Ltmp291
	.quad	.Ltmp292
.Lset34 = .Ltmp721-.Ltmp720             # Loc expr size
	.short	.Lset34
.Ltmp720:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp721:
	.quad	0
	.quad	0
.Ldebug_loc60:
	.quad	.Ltmp281
	.quad	.Ltmp282
.Lset35 = .Ltmp723-.Ltmp722             # Loc expr size
	.short	.Lset35
.Ltmp722:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\f"
.Ltmp723:
	.quad	.Ltmp283
	.quad	.Ltmp284
.Lset36 = .Ltmp725-.Ltmp724             # Loc expr size
	.short	.Lset36
.Ltmp724:
	.byte	119                     # DW_OP_breg7
	.ascii	"\364\t"
.Ltmp725:
	.quad	.Ltmp285
	.quad	.Ltmp286
.Lset37 = .Ltmp727-.Ltmp726             # Loc expr size
	.short	.Lset37
.Ltmp726:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\006"
.Ltmp727:
	.quad	.Ltmp287
	.quad	.Ltmp288
.Lset38 = .Ltmp729-.Ltmp728             # Loc expr size
	.short	.Lset38
.Ltmp728:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp729:
	.quad	0
	.quad	0
.Ldebug_loc65:
	.quad	.Lfunc_begin8
	.quad	.Ltmp316
.Lset39 = .Ltmp731-.Ltmp730             # Loc expr size
	.short	.Lset39
.Ltmp730:
	.byte	84                      # DW_OP_reg4
.Ltmp731:
	.quad	.Ltmp316
	.quad	.Ltmp321
.Lset40 = .Ltmp733-.Ltmp732             # Loc expr size
	.short	.Lset40
.Ltmp732:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\013"
.Ltmp733:
	.quad	.Ltmp332
	.quad	.Ltmp333
.Lset41 = .Ltmp735-.Ltmp734             # Loc expr size
	.short	.Lset41
.Ltmp734:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp735:
	.quad	.Ltmp333
	.quad	.Ltmp334
.Lset42 = .Ltmp737-.Ltmp736             # Loc expr size
	.short	.Lset42
.Ltmp736:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp737:
	.quad	0
	.quad	0
.Ldebug_loc70:
	.quad	.Lfunc_begin8
	.quad	.Ltmp317
.Lset43 = .Ltmp739-.Ltmp738             # Loc expr size
	.short	.Lset43
.Ltmp738:
	.byte	85                      # DW_OP_reg5
.Ltmp739:
	.quad	.Ltmp317
	.quad	.Ltmp318
.Lset44 = .Ltmp741-.Ltmp740             # Loc expr size
	.short	.Lset44
.Ltmp740:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\013"
.Ltmp741:
	.quad	.Ltmp331
	.quad	.Ltmp334
.Lset45 = .Ltmp743-.Ltmp742             # Loc expr size
	.short	.Lset45
.Ltmp742:
	.byte	119                     # DW_OP_breg7
	.byte	36
.Ltmp743:
	.quad	0
	.quad	0
.Ldebug_loc74:
	.quad	.Ltmp319
	.quad	.Ltmp325
.Lset46 = .Ltmp745-.Ltmp744             # Loc expr size
	.short	.Lset46
.Ltmp744:
	.byte	16                      # DW_OP_constu
	.byte	3
.Ltmp745:
	.quad	.Ltmp325
	.quad	.Ltmp326
.Lset47 = .Ltmp747-.Ltmp746             # Loc expr size
	.short	.Lset47
.Ltmp746:
	.byte	119                     # DW_OP_breg7
	.ascii	"\314\005"
.Ltmp747:
	.quad	.Ltmp328
	.quad	.Ltmp330
.Lset48 = .Ltmp749-.Ltmp748             # Loc expr size
	.short	.Lset48
.Ltmp748:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244\n"
.Ltmp749:
	.quad	0
	.quad	0
.Ldebug_loc79:
	.quad	.Ltmp320
	.quad	.Ltmp321
.Lset49 = .Ltmp751-.Ltmp750             # Loc expr size
	.short	.Lset49
.Ltmp750:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\n"
.Ltmp751:
	.quad	0
	.quad	0
.Ldebug_loc81:
	.quad	.Lfunc_begin9
	.quad	.Ltmp365
.Lset50 = .Ltmp753-.Ltmp752             # Loc expr size
	.short	.Lset50
.Ltmp752:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\026"
.Ltmp753:
	.quad	0
	.quad	0
.Ldebug_loc83:
	.quad	.Lfunc_begin9
	.quad	.Ltmp365
.Lset51 = .Ltmp755-.Ltmp754             # Loc expr size
	.short	.Lset51
.Ltmp754:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\026"
.Ltmp755:
	.quad	0
	.quad	0
.Ldebug_loc85:
	.quad	.Lfunc_begin9
	.quad	.Ltmp365
.Lset52 = .Ltmp757-.Ltmp756             # Loc expr size
	.short	.Lset52
.Ltmp756:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\026"
.Ltmp757:
	.quad	0
	.quad	0
.Ldebug_loc87:
	.quad	.Lfunc_begin9
	.quad	.Ltmp365
.Lset53 = .Ltmp759-.Ltmp758             # Loc expr size
	.short	.Lset53
.Ltmp758:
	.byte	119                     # DW_OP_breg7
	.ascii	"\354\030"
.Ltmp759:
	.quad	0
	.quad	0
.Ldebug_loc89:
	.quad	.Lfunc_begin9
	.quad	.Ltmp360
.Lset54 = .Ltmp761-.Ltmp760             # Loc expr size
	.short	.Lset54
.Ltmp760:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\026"
.Ltmp761:
	.quad	.Ltmp360
	.quad	.Ltmp362
.Lset55 = .Ltmp763-.Ltmp762             # Loc expr size
	.short	.Lset55
.Ltmp762:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\025"
.Ltmp763:
	.quad	.Ltmp362
	.quad	.Ltmp365
.Lset56 = .Ltmp765-.Ltmp764             # Loc expr size
	.short	.Lset56
.Ltmp764:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\025"
.Ltmp765:
	.quad	0
	.quad	0
.Ldebug_loc93:
	.quad	.Lfunc_begin9
	.quad	.Ltmp365
.Lset57 = .Ltmp767-.Ltmp766             # Loc expr size
	.short	.Lset57
.Ltmp766:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\026"
.Ltmp767:
	.quad	0
	.quad	0
.Ldebug_loc95:
	.quad	.Ltmp358
	.quad	.Ltmp365
.Lset58 = .Ltmp769-.Ltmp768             # Loc expr size
	.short	.Lset58
.Ltmp768:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\025"
.Ltmp769:
	.quad	0
	.quad	0
.Ldebug_loc97:
	.quad	.Ltmp359
	.quad	.Ltmp365
.Lset59 = .Ltmp771-.Ltmp770             # Loc expr size
	.short	.Lset59
.Ltmp770:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\025"
.Ltmp771:
	.quad	0
	.quad	0
.Ldebug_loc99:
	.quad	.Ltmp361
	.quad	.Ltmp365
.Lset60 = .Ltmp773-.Ltmp772             # Loc expr size
	.short	.Lset60
.Ltmp772:
	.byte	119                     # DW_OP_breg7
	.ascii	"\344\025"
.Ltmp773:
	.quad	0
	.quad	0
.Ldebug_loc101:
	.quad	.Ltmp363
	.quad	.Ltmp365
.Lset61 = .Ltmp775-.Ltmp774             # Loc expr size
	.short	.Lset61
.Ltmp774:
	.byte	119                     # DW_OP_breg7
	.ascii	"\324\025"
.Ltmp775:
	.quad	0
	.quad	0
.Ldebug_loc103:
	.quad	.Ltmp364
	.quad	.Ltmp365
.Lset62 = .Ltmp777-.Ltmp776             # Loc expr size
	.short	.Lset62
.Ltmp776:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\025"
.Ltmp777:
	.quad	0
	.quad	0
.Ldebug_loc105:
	.quad	.Lfunc_begin10
	.quad	.Ltmp400
.Lset63 = .Ltmp779-.Ltmp778             # Loc expr size
	.short	.Lset63
.Ltmp778:
	.byte	119                     # DW_OP_breg7
	.ascii	"\370\031"
.Ltmp779:
	.quad	0
	.quad	0
.Ldebug_loc107:
	.quad	.Lfunc_begin10
	.quad	.Ltmp400
.Lset64 = .Ltmp781-.Ltmp780             # Loc expr size
	.short	.Lset64
.Ltmp780:
	.byte	119                     # DW_OP_breg7
	.ascii	"\360\031"
.Ltmp781:
	.quad	0
	.quad	0
.Ldebug_loc109:
	.quad	.Lfunc_begin10
	.quad	.Ltmp400
.Lset65 = .Ltmp783-.Ltmp782             # Loc expr size
	.short	.Lset65
.Ltmp782:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\031"
.Ltmp783:
	.quad	0
	.quad	0
.Ldebug_loc111:
	.quad	.Lfunc_begin10
	.quad	.Ltmp400
.Lset66 = .Ltmp785-.Ltmp784             # Loc expr size
	.short	.Lset66
.Ltmp784:
	.byte	119                     # DW_OP_breg7
	.ascii	"\234\033"
.Ltmp785:
	.quad	0
	.quad	0
.Ldebug_loc113:
	.quad	.Lfunc_begin10
	.quad	.Ltmp400
.Lset67 = .Ltmp787-.Ltmp786             # Loc expr size
	.short	.Lset67
.Ltmp786:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\031"
.Ltmp787:
	.quad	0
	.quad	0
.Ldebug_loc115:
	.quad	.Ltmp397
	.quad	.Ltmp398
.Lset68 = .Ltmp789-.Ltmp788             # Loc expr size
	.short	.Lset68
.Ltmp788:
	.byte	119                     # DW_OP_breg7
	.ascii	"\224\031"
.Ltmp789:
	.quad	0
	.quad	0
.Ldebug_loc117:
	.quad	.Ltmp399
	.quad	.Ltmp400
.Lset69 = .Ltmp791-.Ltmp790             # Loc expr size
	.short	.Lset69
.Ltmp790:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\027"
.Ltmp791:
	.quad	0
	.quad	0
.Ldebug_loc119:
	.quad	.Ltmp414
	.quad	.Ltmp420
.Lset70 = .Ltmp793-.Ltmp792             # Loc expr size
	.short	.Lset70
.Ltmp792:
	.byte	16                      # DW_OP_constu
	.byte	0
.Ltmp793:
	.quad	.Ltmp420
	.quad	.Ltmp424
.Lset71 = .Ltmp795-.Ltmp794             # Loc expr size
	.short	.Lset71
.Ltmp794:
	.byte	119                     # DW_OP_breg7
	.ascii	"\204\005"
.Ltmp795:
	.quad	0
	.quad	0
.Ldebug_loc122:
	.quad	.Ltmp425
	.quad	.Ltmp426
.Lset72 = .Ltmp797-.Ltmp796             # Loc expr size
	.short	.Lset72
.Ltmp796:
	.byte	119                     # DW_OP_breg7
	.ascii	"\264\002"
.Ltmp797:
	.quad	0
	.quad	0
.Ldebug_loc124:
	.quad	.Lfunc_begin11
	.quad	.Ltmp452
.Lset73 = .Ltmp799-.Ltmp798             # Loc expr size
	.short	.Lset73
.Ltmp798:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\032"
.Ltmp799:
	.quad	0
	.quad	0
.Ldebug_loc126:
	.quad	.Lfunc_begin11
	.quad	.Ltmp452
.Lset74 = .Ltmp801-.Ltmp800             # Loc expr size
	.short	.Lset74
.Ltmp800:
	.byte	119                     # DW_OP_breg7
	.ascii	"\230\032"
.Ltmp801:
	.quad	0
	.quad	0
.Ldebug_loc128:
	.quad	.Lfunc_begin11
	.quad	.Ltmp452
.Lset75 = .Ltmp803-.Ltmp802             # Loc expr size
	.short	.Lset75
.Ltmp802:
	.byte	119                     # DW_OP_breg7
	.ascii	"\220\032"
.Ltmp803:
	.quad	0
	.quad	0
.Ldebug_loc130:
	.quad	.Lfunc_begin11
	.quad	.Ltmp452
.Lset76 = .Ltmp805-.Ltmp804             # Loc expr size
	.short	.Lset76
.Ltmp804:
	.byte	119                     # DW_OP_breg7
	.ascii	"\254\034"
.Ltmp805:
	.quad	0
	.quad	0
.Ldebug_loc132:
	.quad	.Ltmp451
	.quad	.Ltmp452
.Lset77 = .Ltmp807-.Ltmp806             # Loc expr size
	.short	.Lset77
.Ltmp806:
	.byte	119                     # DW_OP_breg7
	.ascii	"\240\032"
.Ltmp807:
	.quad	.Ltmp475
	.quad	.Ltmp480
.Lset78 = .Ltmp809-.Ltmp808             # Loc expr size
	.short	.Lset78
.Ltmp808:
	.byte	119                     # DW_OP_breg7
	.asciz	"\300"
.Ltmp809:
	.quad	0
	.quad	0
.Ldebug_loc135:
	.quad	.Ltmp457
	.quad	.Ltmp452
.Lset79 = .Ltmp811-.Ltmp810             # Loc expr size
	.short	.Lset79
.Ltmp810:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\025"
.Ltmp811:
	.quad	.Ltmp476
	.quad	.Ltmp480
.Lset80 = .Ltmp813-.Ltmp812             # Loc expr size
	.short	.Lset80
.Ltmp812:
	.byte	119                     # DW_OP_breg7
	.byte	56
.Ltmp813:
	.quad	0
	.quad	0
.Ldebug_loc138:
	.quad	.Ltmp455
	.quad	.Ltmp452
.Lset81 = .Ltmp815-.Ltmp814             # Loc expr size
	.short	.Lset81
.Ltmp814:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\025"
.Ltmp815:
	.quad	.Ltmp477
	.quad	.Ltmp480
.Lset82 = .Ltmp817-.Ltmp816             # Loc expr size
	.short	.Lset82
.Ltmp816:
	.byte	119                     # DW_OP_breg7
	.byte	48
.Ltmp817:
	.quad	0
	.quad	0
.Ldebug_loc141:
	.quad	.Ltmp454
	.quad	.Ltmp452
.Lset83 = .Ltmp819-.Ltmp818             # Loc expr size
	.short	.Lset83
.Ltmp818:
	.byte	119                     # DW_OP_breg7
	.ascii	"\340\025"
.Ltmp819:
	.quad	.Ltmp478
	.quad	.Ltmp480
.Lset84 = .Ltmp821-.Ltmp820             # Loc expr size
	.short	.Lset84
.Ltmp820:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp821:
	.quad	0
	.quad	0
.Ldebug_loc144:
	.quad	.Ltmp453
	.quad	.Ltmp452
.Lset85 = .Ltmp823-.Ltmp822             # Loc expr size
	.short	.Lset85
.Ltmp822:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\025"
.Ltmp823:
	.quad	.Ltmp479
	.quad	.Ltmp480
.Lset86 = .Ltmp825-.Ltmp824             # Loc expr size
	.short	.Lset86
.Ltmp824:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp825:
	.quad	0
	.quad	0
.Ldebug_loc147:
	.quad	.Lfunc_begin12
	.quad	.Ltmp510
.Lset87 = .Ltmp827-.Ltmp826             # Loc expr size
	.short	.Lset87
.Ltmp826:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\023"
.Ltmp827:
	.quad	.Ltmp531
	.quad	.Ltmp533
.Lset88 = .Ltmp829-.Ltmp828             # Loc expr size
	.short	.Lset88
.Ltmp828:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp829:
	.quad	0
	.quad	0
.Ldebug_loc150:
	.quad	.Lfunc_begin12
	.quad	.Ltmp510
.Lset89 = .Ltmp831-.Ltmp830             # Loc expr size
	.short	.Lset89
.Ltmp830:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\023"
.Ltmp831:
	.quad	0
	.quad	0
.Ldebug_loc152:
	.quad	.Lfunc_begin12
	.quad	.Ltmp510
.Lset90 = .Ltmp833-.Ltmp832             # Loc expr size
	.short	.Lset90
.Ltmp832:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\023"
.Ltmp833:
	.quad	0
	.quad	0
.Ldebug_loc154:
	.quad	.Lfunc_begin12
	.quad	.Ltmp510
.Lset91 = .Ltmp835-.Ltmp834             # Loc expr size
	.short	.Lset91
.Ltmp834:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\023"
.Ltmp835:
	.quad	0
	.quad	0
.Ldebug_loc156:
	.quad	.Ltmp504
	.quad	.Ltmp510
.Lset92 = .Ltmp837-.Ltmp836             # Loc expr size
	.short	.Lset92
.Ltmp836:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\023"
.Ltmp837:
	.quad	.Ltmp532
	.quad	.Ltmp533
.Lset93 = .Ltmp839-.Ltmp838             # Loc expr size
	.short	.Lset93
.Ltmp838:
	.byte	119                     # DW_OP_breg7
	.byte	16
.Ltmp839:
	.quad	0
	.quad	0
.Ldebug_loc159:
	.quad	.Ltmp505
	.quad	.Ltmp510
.Lset94 = .Ltmp841-.Ltmp840             # Loc expr size
	.short	.Lset94
.Ltmp840:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\022"
.Ltmp841:
	.quad	0
	.quad	0
.Ldebug_loc161:
	.quad	.Ltmp506
	.quad	.Ltmp510
.Lset95 = .Ltmp843-.Ltmp842             # Loc expr size
	.short	.Lset95
.Ltmp842:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\022"
.Ltmp843:
	.quad	0
	.quad	0
.Ldebug_loc163:
	.quad	.Ltmp507
	.quad	.Ltmp510
.Lset96 = .Ltmp845-.Ltmp844             # Loc expr size
	.short	.Lset96
.Ltmp844:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\022"
.Ltmp845:
	.quad	.Ltmp520
	.quad	.Ltmp524
.Lset97 = .Ltmp847-.Ltmp846             # Loc expr size
	.short	.Lset97
.Ltmp846:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\007"
.Ltmp847:
	.quad	0
	.quad	0
.Ldebug_loc166:
	.quad	.Ltmp507
	.quad	.Ltmp510
.Lset98 = .Ltmp849-.Ltmp848             # Loc expr size
	.short	.Lset98
.Ltmp848:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\022"
.Ltmp849:
	.quad	.Ltmp521
	.quad	.Ltmp524
.Lset99 = .Ltmp851-.Ltmp850             # Loc expr size
	.short	.Lset99
.Ltmp850:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\007"
.Ltmp851:
	.quad	0
	.quad	0
.Ldebug_loc169:
	.quad	.Ltmp507
	.quad	.Ltmp510
.Lset100 = .Ltmp853-.Ltmp852            # Loc expr size
	.short	.Lset100
.Ltmp852:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\022"
.Ltmp853:
	.quad	.Ltmp522
	.quad	.Ltmp524
.Lset101 = .Ltmp855-.Ltmp854            # Loc expr size
	.short	.Lset101
.Ltmp854:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\007"
.Ltmp855:
	.quad	0
	.quad	0
.Ldebug_loc172:
	.quad	.Lfunc_begin13
	.quad	.Ltmp561
.Lset102 = .Ltmp857-.Ltmp856            # Loc expr size
	.short	.Lset102
.Ltmp856:
	.byte	119                     # DW_OP_breg7
	.ascii	"\330\f"
.Ltmp857:
	.quad	.Ltmp572
	.quad	.Ltmp574
.Lset103 = .Ltmp859-.Ltmp858            # Loc expr size
	.short	.Lset103
.Ltmp858:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp859:
	.quad	0
	.quad	0
.Ldebug_loc175:
	.quad	.Lfunc_begin13
	.quad	.Ltmp561
.Lset104 = .Ltmp861-.Ltmp860            # Loc expr size
	.short	.Lset104
.Ltmp860:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\f"
.Ltmp861:
	.quad	0
	.quad	0
.Ldebug_loc177:
	.quad	.Lfunc_begin13
	.quad	.Ltmp561
.Lset105 = .Ltmp863-.Ltmp862            # Loc expr size
	.short	.Lset105
.Ltmp862:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\f"
.Ltmp863:
	.quad	0
	.quad	0
.Ldebug_loc179:
	.quad	.Lfunc_begin13
	.quad	.Ltmp561
.Lset106 = .Ltmp865-.Ltmp864            # Loc expr size
	.short	.Lset106
.Ltmp864:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\f"
.Ltmp865:
	.quad	0
	.quad	0
.Ldebug_loc181:
	.quad	.Ltmp557
	.quad	.Ltmp561
.Lset107 = .Ltmp867-.Ltmp866            # Loc expr size
	.short	.Lset107
.Ltmp866:
	.byte	119                     # DW_OP_breg7
	.ascii	"\300\f"
.Ltmp867:
	.quad	.Ltmp573
	.quad	.Ltmp574
.Lset108 = .Ltmp869-.Ltmp868            # Loc expr size
	.short	.Lset108
.Ltmp868:
	.byte	119                     # DW_OP_breg7
	.byte	24
.Ltmp869:
	.quad	0
	.quad	0
.Ldebug_loc184:
	.quad	.Ltmp558
	.quad	.Ltmp561
.Lset109 = .Ltmp871-.Ltmp870            # Loc expr size
	.short	.Lset109
.Ltmp870:
	.byte	119                     # DW_OP_breg7
	.ascii	"\350\013"
.Ltmp871:
	.quad	0
	.quad	0
.Ldebug_loc186:
	.quad	.Ltmp559
	.quad	.Ltmp561
.Lset110 = .Ltmp873-.Ltmp872            # Loc expr size
	.short	.Lset110
.Ltmp872:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\013"
.Ltmp873:
	.quad	.Ltmp568
	.quad	.Ltmp574
.Lset111 = .Ltmp875-.Ltmp874            # Loc expr size
	.short	.Lset111
.Ltmp874:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\001"
.Ltmp875:
	.quad	0
	.quad	0
.Ldebug_loc189:
	.quad	.Ltmp559
	.quad	.Ltmp561
.Lset112 = .Ltmp877-.Ltmp876            # Loc expr size
	.short	.Lset112
.Ltmp876:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\013"
.Ltmp877:
	.quad	.Ltmp567
	.quad	.Ltmp574
.Lset113 = .Ltmp879-.Ltmp878            # Loc expr size
	.short	.Lset113
.Ltmp878:
	.byte	119                     # DW_OP_breg7
	.ascii	"\320\001"
.Ltmp879:
	.quad	0
	.quad	0
.Ldebug_loc192:
	.quad	.Lfunc_begin14
	.quad	.Ltmp600
.Lset114 = .Ltmp881-.Ltmp880            # Loc expr size
	.short	.Lset114
.Ltmp880:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\007"
.Ltmp881:
	.quad	.Ltmp607
	.quad	.Ltmp609
.Lset115 = .Ltmp883-.Ltmp882            # Loc expr size
	.short	.Lset115
.Ltmp882:
	.byte	119                     # DW_OP_breg7
	.byte	32
.Ltmp883:
	.quad	0
	.quad	0
.Ldebug_loc195:
	.quad	.Lfunc_begin14
	.quad	.Ltmp600
.Lset116 = .Ltmp885-.Ltmp884            # Loc expr size
	.short	.Lset116
.Ltmp884:
	.byte	119                     # DW_OP_breg7
	.ascii	"\260\007"
.Ltmp885:
	.quad	0
	.quad	0
.Ldebug_loc197:
	.quad	.Lfunc_begin14
	.quad	.Ltmp600
.Lset117 = .Ltmp887-.Ltmp886            # Loc expr size
	.short	.Lset117
.Ltmp886:
	.byte	119                     # DW_OP_breg7
	.ascii	"\250\007"
.Ltmp887:
	.quad	0
	.quad	0
.Ldebug_loc199:
	.quad	.Lfunc_begin14
	.quad	.Ltmp600
.Lset118 = .Ltmp889-.Ltmp888            # Loc expr size
	.short	.Lset118
.Ltmp888:
	.byte	119                     # DW_OP_breg7
	.ascii	"\244\007"
.Ltmp889:
	.quad	.Ltmp608
	.quad	.Ltmp609
.Lset119 = .Ltmp891-.Ltmp890            # Loc expr size
	.short	.Lset119
.Ltmp890:
	.byte	119                     # DW_OP_breg7
	.byte	28
.Ltmp891:
	.quad	0
	.quad	0
.Ldebug_loc202:
	.quad	.Ltmp598
	.quad	.Ltmp600
.Lset120 = .Ltmp893-.Ltmp892            # Loc expr size
	.short	.Lset120
.Ltmp892:
	.byte	119                     # DW_OP_breg7
	.ascii	"\310\006"
.Ltmp893:
	.quad	.Ltmp603
	.quad	.Ltmp609
.Lset121 = .Ltmp895-.Ltmp894            # Loc expr size
	.short	.Lset121
.Ltmp894:
	.byte	119                     # DW_OP_breg7
	.asciz	"\330"
.Ltmp895:
	.quad	0
	.quad	0
.Ldebug_loc205:
	.quad	.Ltmp599
	.quad	.Ltmp600
.Lset122 = .Ltmp897-.Ltmp896            # Loc expr size
	.short	.Lset122
.Ltmp896:
	.byte	119                     # DW_OP_breg7
	.ascii	"\270\006"
.Ltmp897:
	.quad	.Ltmp606
	.quad	.Ltmp609
.Lset123 = .Ltmp899-.Ltmp898            # Loc expr size
	.short	.Lset123
.Ltmp898:
	.byte	119                     # DW_OP_breg7
	.byte	40
.Ltmp899:
	.quad	0
	.quad	0
.Ldebug_loc208:
	.section	.debug_aranges,"",@progbits
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin0    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin0
.Lset124 = .Lfunc_begin3-.Lfunc_begin0
	.quad	.Lset124
	.quad	0                       # ARange terminator
	.quad	0
	.long	44                      # Length of ARange Set
	.short	2                       # DWARF Arange version number
	.long	.L.debug_info_begin1    # Offset Into Debug Info Section
	.byte	8                       # Address Size (in bytes)
	.byte	0                       # Segment Size (in bytes)
	.byte	255
	.byte	255
	.byte	255
	.byte	255
	.quad	.Lfunc_begin3
.Lset125 = .Ldebug_end0-.Lfunc_begin3
	.quad	.Lset125
	.quad	0                       # ARange terminator
	.quad	0
	.section	.debug_ranges,"",@progbits
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp33
	.quad	0
	.quad	0
	.quad	.Ltmp23
	.quad	.Ltmp24
	.quad	.Ltmp25
	.quad	.Ltmp34
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp60
	.quad	.Ltmp62
	.quad	.Ltmp66
	.quad	0
	.quad	0
	.quad	.Ltmp60
	.quad	.Ltmp61
	.quad	.Ltmp67
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp59
	.quad	.Ltmp61
	.quad	.Ltmp62
	.quad	.Ltmp70
	.quad	0
	.quad	0
	.quad	.Ltmp55
	.quad	.Ltmp56
	.quad	.Ltmp59
	.quad	.Ltmp71
	.quad	0
	.quad	0
	.quad	.Ltmp75
	.quad	.Ltmp76
	.quad	.Ltmp77
	.quad	.Ltmp78
	.quad	0
	.quad	0
	.quad	.Ltmp57
	.quad	.Ltmp58
	.quad	.Ltmp73
	.quad	.Ltmp80
	.quad	0
	.quad	0
	.quad	.Ltmp81
	.quad	.Ltmp82
	.quad	.Ltmp83
	.quad	.Ltmp84
	.quad	.Ltmp88
	.quad	.Ltmp96
	.quad	0
	.quad	0
	.quad	.Ltmp85
	.quad	.Ltmp87
	.quad	.Ltmp99
	.quad	.Ltmp108
	.quad	0
	.quad	0
	.quad	.Ltmp97
	.quad	.Ltmp98
	.quad	.Ltmp109
	.quad	.Ltmp116
	.quad	0
	.quad	0
	.quad	.Ltmp189
	.quad	.Ltmp190
	.quad	.Ltmp191
	.quad	.Ltmp198
	.quad	0
	.quad	0
	.quad	.Ltmp403
	.quad	.Ltmp405
	.quad	.Ltmp411
	.quad	.Ltmp412
	.quad	.Ltmp413
	.quad	.Ltmp424
	.quad	0
	.quad	0
	.quad	.Ltmp402
	.quad	.Ltmp405
	.quad	.Ltmp410
	.quad	.Ltmp426
	.quad	0
	.quad	0
	.quad	.Ltmp401
	.quad	.Ltmp405
	.quad	.Ltmp406
	.quad	.Ltmp426
	.quad	0
	.quad	0
	.section	.debug_macinfo,"",@progbits
	.section	.debug_pubnames,"",@progbits
.Lset126 = .Lpubnames_end1-.Lpubnames_begin1 # Length of Public Names Info
	.long	.Lset126
.Lpubnames_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset127 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset127
	.long	624                     # DIE offset
	.asciz	"kiss_fft_cleanup"      # External Name
	.long	1384                    # DIE offset
	.asciz	"kf_bfly4"              # External Name
	.long	1178                    # DIE offset
	.asciz	"kf_bfly5"              # External Name
	.long	62                      # DIE offset
	.asciz	"kiss_fft_alloc"        # External Name
	.long	458                     # DIE offset
	.asciz	"kiss_fft_stride"       # External Name
	.long	1739                    # DIE offset
	.asciz	"kf_bfly2"              # External Name
	.long	731                     # DIE offset
	.asciz	"kf_work"               # External Name
	.long	549                     # DIE offset
	.asciz	"kiss_fft"              # External Name
	.long	924                     # DIE offset
	.asciz	"kf_bfly_generic"       # External Name
	.long	1866                    # DIE offset
	.asciz	"kf_factor"             # External Name
	.long	650                     # DIE offset
	.asciz	"kiss_fft_next_fast_size" # External Name
	.long	1571                    # DIE offset
	.asciz	"kf_bfly3"              # External Name
	.long	0                       # End Mark
.Lpubnames_end1:
.Lset128 = .Lpubnames_end0-.Lpubnames_begin0 # Length of Public Names Info
	.long	.Lset128
.Lpubnames_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset129 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset129
	.long	803                     # DIE offset
	.asciz	"main"                  # External Name
	.long	241                     # DIE offset
	.asciz	"process_data"          # External Name
	.long	98                      # DIE offset
	.asciz	"test_stores"           # External Name
	.long	0                       # End Mark
.Lpubnames_end0:
	.section	.debug_pubtypes,"",@progbits
.Lset130 = .Lpubtypes_end1-.Lpubtypes_begin1 # Length of Public Types Info
	.long	.Lset130
.Lpubtypes_begin1:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin1    # Offset of Compilation Unit Info
.Lset131 = .L.debug_info_end1-.L.debug_info_begin1 # Compilation Unit Length
	.long	.Lset131
	.long	409                     # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	451                     # DIE offset
	.asciz	"float"                 # External Name
	.long	299                     # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	315                     # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"double"                # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	1974                    # DIE offset
	.asciz	"long unsigned int"     # External Name
	.long	1963                    # DIE offset
	.asciz	"size_t"                # External Name
	.long	0                       # End Mark
.Lpubtypes_end1:
.Lset132 = .Lpubtypes_end0-.Lpubtypes_begin0 # Length of Public Types Info
	.long	.Lset132
.Lpubtypes_begin0:
	.short	2                       # DWARF Version
	.long	.L.debug_info_begin0    # Offset of Compilation Unit Info
.Lset133 = .L.debug_info_end0-.L.debug_info_begin0 # Compilation Unit Length
	.long	.Lset133
	.long	1063                    # DIE offset
	.asciz	"kiss_fft_cpx"          # External Name
	.long	451                     # DIE offset
	.asciz	"float"                 # External Name
	.long	972                     # DIE offset
	.asciz	"kiss_fft_cfg"          # External Name
	.long	988                     # DIE offset
	.asciz	"kiss_fft_state"        # External Name
	.long	55                      # DIE offset
	.asciz	"int"                   # External Name
	.long	0                       # End Mark
.Lpubtypes_end0:

	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.ident	"clang version 3.4.2 (tags/RELEASE_34/dot2-final)"
	.section	".note.GNU-stack","",@progbits
